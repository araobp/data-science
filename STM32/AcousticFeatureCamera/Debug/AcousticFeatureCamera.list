
AcousticFeatureCamera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c10  0800cda8  0800cda8  0001cda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209b8  080209b8  000401f8  2**0
                  CONTENTS
  4 .ARM          00000008  080209b8  080209b8  000309b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080209c0  080209c0  000401f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080209c0  080209c0  000309c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080209c4  080209c4  000309c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080209c8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b798  200001f8  08020bc0  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b990  08020bc0  0004b990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022c87  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005080  00000000  00000000  00062f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00067fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  000690b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278f0  00000000  00000000  00069b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162d4  00000000  00000000  0009146a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eef2e  00000000  00000000  000a773e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055c0  00000000  00000000  0019666c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0019bc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000059ce  00000000  00000000  0019bca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000258  00000000  00000000  001a1670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd8c 	.word	0x0800cd8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800cd8c 	.word	0x0800cd8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <c_k>:

#include <stdlib.h>
#include "math.h"
#include "dct.h"

float32_t c_k(int k) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <c_k+0x12>
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <c_k+0x28>)
 8000f54:	e001      	b.n	8000f5a <c_k+0x16>
 8000f56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f5a:	ee07 3a90 	vmov	s15, r3
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	3f3504f3 	.word	0x3f3504f3

08000f70 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	ed2d 8b02 	vpush	{d8}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
  float32_t *pDataW = NULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  float32_t *pDataW_I = NULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  float32_t *pDataX = NULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  S->width = width;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	801a      	strh	r2, [r3, #0]

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	1d18      	adds	r0, r3, #4
 8000f96:	8879      	ldrh	r1, [r7, #2]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f006 fee4 	bl	8007d68 <arm_mat_init_f32>

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 fed8 	bl	8008d60 <calloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 000c 	add.w	r0, r3, #12
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	8879      	ldrh	r1, [r7, #2]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f006 fed2 	bl	8007d68 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fec6 	bl	8008d60 <calloc>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	613b      	str	r3, [r7, #16]
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 0014 	add.w	r0, r3, #20
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	8879      	ldrh	r1, [r7, #2]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	f006 fec0 	bl	8007d68 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 feb7 	bl	8008d60 <calloc>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60fb      	str	r3, [r7, #12]
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 001c 	add.w	r0, r3, #28
 8000ffc:	8879      	ldrh	r1, [r7, #2]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	f006 feb1 	bl	8007d68 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e046      	b.n	800109a <dct2_init_f32+0x12a>
    for (int n = 0; n < S->width; n++) {
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	e03a      	b.n	8001088 <dct2_init_f32+0x118>
      S->W.pData[k * S->width + n] = arm_cos_f32(
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	3301      	adds	r3, #1
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa80 	bl	8000524 <__aeabi_i2d>
 8001024:	a350      	add	r3, pc, #320	; (adr r3, 8001168 <dct2_init_f32+0x1f8>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fae5 	bl	80005f8 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa71 	bl	8000524 <__aeabi_i2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff fbff 	bl	800084c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fda7 	bl	8000ba8 <__aeabi_d2f>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	fb03 f101 	mul.w	r1, r3, r1
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	440b      	add	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18d4      	adds	r4, r2, r3
 8001072:	ee00 0a10 	vmov	s0, r0
 8001076:	f007 fa2f 	bl	80084d8 <arm_cos_f32>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	edc4 7a00 	vstr	s15, [r4]
    for (int n = 0; n < S->width; n++) {
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	3301      	adds	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	4293      	cmp	r3, r2
 8001092:	dbbe      	blt.n	8001012 <dct2_init_f32+0xa2>
  for (int k = 0; k < S->width; k++) {
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3301      	adds	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dbb2      	blt.n	800100c <dct2_init_f32+0x9c>
    }
  }

  for (int n = 0; n < S->width; n++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e04e      	b.n	800114a <dct2_init_f32+0x1da>
    for (int k = 0; k < S->width; k++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	e042      	b.n	8001138 <dct2_init_f32+0x1c8>
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010b2:	69b8      	ldr	r0, [r7, #24]
 80010b4:	f7ff ff46 	bl	8000f44 <c_k>
 80010b8:	eeb0 8a40 	vmov.f32	s16, s0
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3301      	adds	r3, #1
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa2b 	bl	8000524 <__aeabi_i2d>
 80010ce:	a326      	add	r3, pc, #152	; (adr r3, 8001168 <dct2_init_f32+0x1f8>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa90 	bl	80005f8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa1c 	bl	8000524 <__aeabi_i2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fbaa 	bl	800084c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd52 	bl	8000ba8 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	ee00 3a10 	vmov	s0, r3
 800110a:	f007 f9e5 	bl	80084d8 <arm_cos_f32>
 800110e:	eef0 7a40 	vmov.f32	s15, s0
      S->W_I.pData[n * S->width + k] = c_k(k)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	fb03 f101 	mul.w	r1, r3, r1
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	440b      	add	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 800112a:	ee68 7a27 	vmul.f32	s15, s16, s15
      S->W_I.pData[n * S->width + k] = c_k(k)
 800112e:	edc3 7a00 	vstr	s15, [r3]
    for (int k = 0; k < S->width; k++) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4293      	cmp	r3, r2
 8001142:	dbb6      	blt.n	80010b2 <dct2_init_f32+0x142>
  for (int n = 0; n < S->width; n++) {
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	3301      	adds	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	4293      	cmp	r3, r2
 8001154:	dbaa      	blt.n	80010ac <dct2_init_f32+0x13c>
    }
  }

}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	ecbd 8b02 	vpop	{d8}
 8001162:	bdb0      	pop	{r4, r5, r7, pc}
 8001164:	f3af 8000 	nop.w
 8001168:	54442d18 	.word	0x54442d18
 800116c:	400921fb 	.word	0x400921fb

08001170 <dct2_f32>:
 * @param[out]    *pDst      points to the output buffer.
 * @param[in]     idctFlag   DCT if flag is 0, IDCT if flag is 1.
 * @return        none.
 */
void dct2_f32(dct2_instance_f32 *S, float32_t *pSrc, float32_t *pDst,
    uint8_t idctFlag) {
 8001170:	b580      	push	{r7, lr}
 8001172:	ed2d 8b02 	vpush	{d8}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	70fb      	strb	r3, [r7, #3]

  S->X.pData = pSrc;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	621a      	str	r2, [r3, #32]
  S->Y.pData = pDst;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]

  if (idctFlag == 0) {
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d13e      	bne.n	8001212 <dct2_f32+0xa2>
    arm_mat_mult_f32(&(S->W), &(S->X), &(S->Y));
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f103 000c 	add.w	r0, r3, #12
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 011c 	add.w	r1, r3, #28
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3304      	adds	r3, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	f006 fd3f 	bl	8007c28 <arm_mat_mult_f32>
    pDst[0] = pDst[0] * c_k(0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	ed93 8a00 	vldr	s16, [r3]
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fec7 	bl	8000f44 <c_k>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edc3 7a00 	vstr	s15, [r3]
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b17 	vmov	d7, r2, r3
 80011e6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ea:	eef0 0a67 	vmov.f32	s1, s15
 80011ee:	f00a fbe5 	bl	800b9bc <sqrt>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcd5 	bl	8000ba8 <__aeabi_d2f>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	ee00 0a10 	vmov	s0, r0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f007 f9ae 	bl	800856c <arm_scale_f32>
  } else {
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
  }
}
 8001210:	e030      	b.n	8001274 <dct2_f32+0x104>
    arm_mat_mult_f32(&(S->W_I), &(S->X), &(S->Y));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f103 0014 	add.w	r0, r3, #20
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f103 011c 	add.w	r1, r3, #28
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	461a      	mov	r2, r3
 8001224:	f006 fd00 	bl	8007c28 <arm_mat_mult_f32>
    arm_scale_f32(pDst, (float32_t) (sqrt(2.0 / S->width)), pDst, S->width);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b17 	vmov	d7, r2, r3
 800124a:	eeb0 0a47 	vmov.f32	s0, s14
 800124e:	eef0 0a67 	vmov.f32	s1, s15
 8001252:	f00a fbb3 	bl	800b9bc <sqrt>
 8001256:	ec53 2b10 	vmov	r2, r3, d0
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fca3 	bl	8000ba8 <__aeabi_d2f>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	ee00 0a10 	vmov	s0, r0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f007 f97c 	bl	800856c <arm_scale_f32>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	ecbd 8b02 	vpop	{d8}
 800127e:	bd80      	pop	{r7, pc}

08001280 <log10_approx>:
 *  reference: https://community.arm.com/support-forums/f/armds-forum/4292/cmsis-dsp-new-functionality-proposal
 */
const float32_t C[4] = { 1.23149591368684f, -4.11852516267426f,
    6.02197014179219f, -3.13396450166353f };
const float32_t LOG10_2 = log10(2.0f);
float32_t log10_approx(float32_t x) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t f, l;
  int e;
  f = frexpf(fabsf(x), &e);
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	eef0 7ae7 	vabs.f32	s15, s15
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4618      	mov	r0, r3
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	f008 fd2a 	bl	8009cf4 <frexpf>
 80012a0:	ed87 0a05 	vstr	s0, [r7, #20]
  l = LOG10_2 * (C[0] * f * f * f + C[1] * f * f + C[2] * f + C[3] + e);
 80012a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800131c <log10_approx+0x9c>
 80012a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001320 <log10_approx+0xa0>
 80012c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001324 <log10_approx+0xa4>
 80012dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001328 <log10_approx+0xa8>
 80012ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800132c <log10_approx+0xac>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc7 7a04 	vstr	s15, [r7, #16]
  return l;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	ee07 3a90 	vmov	s15, r3
  //return (l >= 0.0) ? l : 0.0;  // regard a negative value as featureless
}
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	3f9da1a8 	.word	0x3f9da1a8
 8001320:	c083caf5 	.word	0xc083caf5
 8001324:	40c0b3fb 	.word	0x40c0b3fb
 8001328:	c04892e0 	.word	0xc04892e0
 800132c:	3e9a209b 	.word	0x3e9a209b

08001330 <hann>:

// Hann window generation
void hann(int num) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  arm_fill_f32(0.0f, hann_window, NN);
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <hann+0x84>)
 800133e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80013b8 <hann+0x88>
 8001342:	f005 fe55 	bl	8006ff0 <arm_fill_f32>
  float32_t scale = 2.0f * PI / (float32_t) num;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001350:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013bc <hann+0x8c>
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	edc7 7a02 	vstr	s15, [r7, #8]
  for (int n = 0; n < num; n++) {
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e01f      	b.n	80013a2 <hann+0x72>
    hann_window[n] = 0.5f - 0.5f * arm_cos_f32((float) n * scale);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	f007 f8ae 	bl	80084d8 <arm_cos_f32>
 800137c:	eef0 7a40 	vmov.f32	s15, s0
 8001380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <hann+0x84>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	edc3 7a00 	vstr	s15, [r3]
  for (int n = 0; n < num; n++) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbdb      	blt.n	8001362 <hann+0x32>
  }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200028c8 	.word	0x200028c8
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40c90fdb 	.word	0x40c90fdb

080013c0 <freq2mel>:

// Frequency in Hz to Mel-scale
float32_t freq2mel(float32_t hz) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	ed87 0a01 	vstr	s0, [r7, #4]
  return 2595.0f * log10(hz / 700.0f + 1.0f);
 80013ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ce:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001428 <freq2mel+0x68>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013de:	ee17 0a90 	vmov	r0, s15
 80013e2:	f7ff f8b1 	bl	8000548 <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	ec43 2b10 	vmov	d0, r2, r3
 80013ee:	f00a fa37 	bl	800b860 <log10>
 80013f2:	ec51 0b10 	vmov	r0, r1, d0
 80013f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001420 <freq2mel+0x60>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8fc 	bl	80005f8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbce 	bl	8000ba8 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a67 	vmov.f32	s0, s15
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f3af 8000 	nop.w
 8001420:	00000000 	.word	0x00000000
 8001424:	40a44600 	.word	0x40a44600
 8001428:	442f0000 	.word	0x442f0000
 800142c:	00000000 	.word	0x00000000

08001430 <mel2freq>:

// Mel-scale to Frequency in Hz
float32_t mel2freq(float32_t mel) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
  return 700.0 * (pow(10.0, (mel / 2595.0f)) - 1.0f);
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014a8 <mel2freq+0x78>
 8001442:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001446:	ee16 0a90 	vmov	r0, s13
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ec43 2b11 	vmov	d1, r2, r3
 8001456:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80014a0 <mel2freq+0x70>
 800145a:	f00a fa3f 	bl	800b8dc <pow>
 800145e:	ec51 0b10 	vmov	r0, r1, d0
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <mel2freq+0x7c>)
 8001468:	f7fe ff0e 	bl	8000288 <__aeabi_dsub>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <mel2freq+0x80>)
 800147a:	f7ff f8bd 	bl	80005f8 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb8f 	bl	8000ba8 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	ee07 3a90 	vmov	s15, r3
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40240000 	.word	0x40240000
 80014a8:	45223000 	.word	0x45223000
 80014ac:	3ff00000 	.word	0x3ff00000
 80014b0:	4085e000 	.word	0x4085e000

080014b4 <generate_filters>:

// Generate Mel filter bank
void generate_filters(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80014ba:	af00      	add	r7, sp, #0
  const float32_t mel_min = 0.0f;
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  float32_t mel_points[NUM_FILTERS + 2];
  float32_t hz_points[NUM_FILTERS + 2];
  float32_t f[NUM_FILTERS + 2];
  float32_t f_minus, f_center, f_plus;
  float32_t mel_max = freq2mel(nyq_fs);
 80014c4:	4bae      	ldr	r3, [pc, #696]	; (8001780 <generate_filters+0x2cc>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	f7ff ff77 	bl	80013c0 <freq2mel>
 80014d2:	ed87 0a83 	vstr	s0, [r7, #524]	; 0x20c
  float32_t delta_mel = (mel_max - mel_min) / (NUM_FILTERS + 2);
 80014d6:	ed97 7a83 	vldr	s14, [r7, #524]	; 0x20c
 80014da:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 80014de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e2:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001784 <generate_filters+0x2d0>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80014f4:	e05d      	b.n	80015b2 <generate_filters+0xfe>
    mel_points[m] = delta_mel * m;
 80014f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001502:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001514:	443b      	add	r3, r7
 8001516:	3bd4      	subs	r3, #212	; 0xd4
 8001518:	edc3 7a00 	vstr	s15, [r3]
    hz_points[m] = mel2freq(mel_points[m]);
 800151c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001526:	443b      	add	r3, r7
 8001528:	3bd4      	subs	r3, #212	; 0xd4
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	f7ff ff7d 	bl	8001430 <mel2freq>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800153e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001542:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	edc3 7a00 	vstr	s15, [r3]
    f[m] = floor((NN + 1) * hz_points[m] / fs);
 800154e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001552:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001556:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001788 <generate_filters+0x2d4>
 8001566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <generate_filters+0x2d8>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001574:	ee16 0a90 	vmov	r0, s13
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	ec43 2b10 	vmov	d0, r2, r3
 8001584:	f00a fb58 	bl	800bc38 <floor>
 8001588:	ec53 2b10 	vmov	r2, r3, d0
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb0a 	bl	8000ba8 <__aeabi_d2f>
 8001594:	4601      	mov	r1, r0
 8001596:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800159a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800159e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	6019      	str	r1, [r3, #0]
  for (int m = 0; m < NUM_FILTERS + 2; m++) {
 80015a8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015ac:	3301      	adds	r3, #1
 80015ae:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80015b2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80015b6:	2b29      	cmp	r3, #41	; 0x29
 80015b8:	d99d      	bls.n	80014f6 <generate_filters+0x42>
  }
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80015c0:	e0d2      	b.n	8001768 <generate_filters+0x2b4>
    for (int k = 1; k < NN / 2; k++) {
 80015c2:	2301      	movs	r3, #1
 80015c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80015c8:	e0c4      	b.n	8001754 <generate_filters+0x2a0>
      f_minus = f[m - 1];
 80015ca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80015d4:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
      f_center = f[m];
 80015e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80015e6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80015ea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      f_plus = f[m + 1];
 80015f8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80015fc:	3301      	adds	r3, #1
 80015fe:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001602:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      for (int k = f_minus; k < f_center; k++) {
 8001610:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001620:	e028      	b.n	8001674 <generate_filters+0x1c0>
        filterbank[m][k - (int) f_minus] = (k - f_minus) / (f_center - f_minus);
 8001622:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162e:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001632:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001636:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 800163a:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 800163e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001642:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <generate_filters+0x2dc>)
 800165a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800165e:	0152      	lsls	r2, r2, #5
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	edc3 7a00 	vstr	s15, [r3]
      for (int k = f_minus; k < f_center; k++) {
 800166a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800166e:	3301      	adds	r3, #1
 8001670:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001674:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8001684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dcc9      	bgt.n	8001622 <generate_filters+0x16e>
      }
      for (int k = f_center; k <= f_plus; k++) {
 800168e:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 8001692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800169e:	e028      	b.n	80016f2 <generate_filters+0x23e>
        filterbank[m][k - (int) f_minus] = (f_plus - k) / (f_plus - f_center);
 80016a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ac:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 80016b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016b4:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 80016b8:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 80016c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c8:	ee17 2a90 	vmov	r2, s15
 80016cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d6:	492e      	ldr	r1, [pc, #184]	; (8001790 <generate_filters+0x2dc>)
 80016d8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80016dc:	0152      	lsls	r2, r2, #5
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	edc3 7a00 	vstr	s15, [r3]
      for (int k = f_center; k <= f_plus; k++) {
 80016e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80016f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fe:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 8001702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	dac9      	bge.n	80016a0 <generate_filters+0x1ec>
      }
      k_range[m][0] = (int) f_minus;
 800170c:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001714:	ee17 1a90 	vmov	r1, s15
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <generate_filters+0x2e0>)
 800171a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800171e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      k_range[m][1] = (int) f_plus - (int) f_minus + 1;
 8001722:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 2a90 	vmov	r2, s15
 800172e:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <generate_filters+0x2e0>)
 8001740:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	605a      	str	r2, [r3, #4]
    for (int k = 1; k < NN / 2; k++) {
 800174a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001754:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	f77f af36 	ble.w	80015ca <generate_filters+0x116>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 800175e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001762:	3301      	adds	r3, #1
 8001764:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001768:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800176c:	2b28      	cmp	r3, #40	; 0x28
 800176e:	f67f af28 	bls.w	80015c2 <generate_filters+0x10e>
    }
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000218 	.word	0x20000218
 8001784:	42280000 	.word	0x42280000
 8001788:	44004000 	.word	0x44004000
 800178c:	20000214 	.word	0x20000214
 8001790:	20001278 	.word	0x20001278
 8001794:	20002778 	.word	0x20002778

08001798 <init_dsp>:

/*
 * DSP pipeline initialization
 */
void init_dsp(float32_t f_s) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af02      	add	r7, sp, #8
 800179e:	ed87 0a01 	vstr	s0, [r7, #4]
  // Generate Hanning window
  hann(NN);
 80017a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a6:	f7ff fdc3 	bl	8001330 <hann>
  fs = f_s;
 80017aa:	4a16      	ldr	r2, [pc, #88]	; (8001804 <init_dsp+0x6c>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6013      	str	r3, [r2, #0]
  nyq_fs = f_s / 2.0;
 80017b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <init_dsp+0x70>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
  arm_rfft_fast_init_f32(&S, NN);
 80017c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c6:	4811      	ldr	r0, [pc, #68]	; (800180c <init_dsp+0x74>)
 80017c8:	f005 fd6c 	bl	80072a4 <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&S_PRE, 2, fir_coefficients, state_buf, NN);
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <init_dsp+0x78>)
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <init_dsp+0x7c>)
 80017d6:	2102      	movs	r1, #2
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <init_dsp+0x80>)
 80017da:	f006 fac9 	bl	8007d70 <arm_fir_init_f32>
  arm_fir_init_f32(&S_WPRE, 2, fir_w_coefficients, state_w_buf, NN);
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <init_dsp+0x84>)
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <init_dsp+0x88>)
 80017e8:	2102      	movs	r1, #2
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <init_dsp+0x8c>)
 80017ec:	f006 fac0 	bl	8007d70 <arm_fir_init_f32>
  generate_filters();
 80017f0:	f7ff fe60 	bl	80014b4 <generate_filters>
#ifndef FEATURE_MFSC
  dct2_init_f32(&S_DCT, NUM_FILTERS);
 80017f4:	2128      	movs	r1, #40	; 0x28
 80017f6:	480c      	ldr	r0, [pc, #48]	; (8001828 <init_dsp+0x90>)
 80017f8:	f7ff fbba 	bl	8000f70 <dct2_init_f32>
#endif
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000214 	.word	0x20000214
 8001808:	20000218 	.word	0x20000218
 800180c:	2000021c 	.word	0x2000021c
 8001810:	20000270 	.word	0x20000270
 8001814:	20000000 	.word	0x20000000
 8001818:	20000234 	.word	0x20000234
 800181c:	20000a74 	.word	0x20000a74
 8001820:	20000008 	.word	0x20000008
 8001824:	20000240 	.word	0x20000240
 8001828:	2000024c 	.word	0x2000024c

0800182c <apply_pre_emphasis>:

//--- DSP pipeline functions -----------------------------//

// Apply pre-emphasis
void apply_pre_emphasis(float32_t *signal) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  arm_fir_f32(&S_PRE, signal, signal, NN);
 8001834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <apply_pre_emphasis+0x20>)
 800183e:	f006 faa7 	bl	8007d90 <arm_fir_f32>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000234 	.word	0x20000234

08001850 <apply_ac_coupling>:
void apply_weak_pre_emphasis(float32_t *signal) {
  arm_fir_f32(&S_WPRE, signal, signal, NN);
}

// AC coupling (to remove DC)
void apply_ac_coupling(float32_t *signal) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  float32_t mean;
  static float32_t mean_hist[NUM_MEANS] = { 0.0f };
  arm_copy_f32(mean_hist + 1, mean_hist, NUM_MEANS - 1);
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <apply_ac_coupling+0x50>)
 800185a:	221f      	movs	r2, #31
 800185c:	4911      	ldr	r1, [pc, #68]	; (80018a4 <apply_ac_coupling+0x54>)
 800185e:	4618      	mov	r0, r3
 8001860:	f005 fbea 	bl	8007038 <arm_copy_f32>
  arm_mean_f32(signal, NN, mean_hist + NUM_MEANS - 1);
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <apply_ac_coupling+0x58>)
 8001866:	461a      	mov	r2, r3
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f005 fc13 	bl	8007098 <arm_mean_f32>
  arm_mean_f32(signal, NUM_MEANS, &mean);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	461a      	mov	r2, r3
 8001878:	2120      	movs	r1, #32
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f005 fc0c 	bl	8007098 <arm_mean_f32>
  arm_offset_f32(signal, -mean, signal, NN);
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f006 feae 	bl	80085f4 <arm_offset_f32>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200038cc 	.word	0x200038cc
 80018a4:	200038c8 	.word	0x200038c8
 80018a8:	20003944 	.word	0x20003944

080018ac <apply_hann>:

// Apply Hann window
void apply_hann(float32_t *signal) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  arm_mult_f32(signal, hann_window, signal, NN);
 80018b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4904      	ldr	r1, [pc, #16]	; (80018cc <apply_hann+0x20>)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f006 fedd 	bl	800867c <arm_mult_f32>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200028c8 	.word	0x200028c8

080018d0 <apply_fft>:

// FFT
void apply_fft(float32_t *signal) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  // Caution: arm_rfft_fast_f32() rewrites the 2nd arg (signal)
  arm_rfft_fast_f32(&S, signal, signal_buf, 0);
 80018d8:	2300      	movs	r3, #0
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <apply_fft+0x28>)
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <apply_fft+0x2c>)
 80018e0:	f005 fdc4 	bl	800746c <arm_rfft_fast_f32>
  arm_copy_f32(signal_buf, signal, NN);
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <apply_fft+0x28>)
 80018ec:	f005 fba4 	bl	8007038 <arm_copy_f32>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200030c8 	.word	0x200030c8
 80018fc:	2000021c 	.word	0x2000021c

08001900 <apply_psd>:

// PSD
void apply_psd(float32_t *signal) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  arm_cmplx_mag_f32(signal, signal_buf, NN / 2);
 8001908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190c:	4908      	ldr	r1, [pc, #32]	; (8001930 <apply_psd+0x30>)
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 fcbe 	bl	8008290 <arm_cmplx_mag_f32>
  arm_scale_f32(signal_buf, RECIPROCAL_NN, signal, NN / 2);
 8001914:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001934 <apply_psd+0x34>
 8001918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <apply_psd+0x30>)
 8001924:	f006 fe22 	bl	800856c <arm_scale_f32>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200030c8 	.word	0x200030c8
 8001934:	3b000000 	.word	0x3b000000

08001938 <apply_psd_logscale>:

// PSD in logscale
void apply_psd_logscale(float32_t *signal) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  for (int n = 0; n < NN / 2; n++) {
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e022      	b.n	800198c <apply_psd_logscale+0x54>
    signal[n] = 20.0 * log10_approx(signal[n]);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	f7ff fc93 	bl	8001280 <log10_approx>
 800195a:	ee10 3a10 	vmov	r3, s0
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <apply_psd_logscale+0x64>)
 800196a:	f7fe fe45 	bl	80005f8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	18d4      	adds	r4, r2, r3
 800197e:	f7ff f913 	bl	8000ba8 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	6023      	str	r3, [r4, #0]
  for (int n = 0; n < NN / 2; n++) {
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	ddd9      	ble.n	8001946 <apply_psd_logscale+0xe>
  }
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	40340000 	.word	0x40340000

080019a0 <apply_filterbank>:

// Apply mel filter bank
void apply_filterbank(float32_t *signal) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  float32_t sum = 0.0f;
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  int left_k, len;
  arm_fill_f32(0.0f, signal_buf, NN / 2);
 80019ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b2:	481b      	ldr	r0, [pc, #108]	; (8001a20 <apply_filterbank+0x80>)
 80019b4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001a24 <apply_filterbank+0x84>
 80019b8:	f005 fb1a 	bl	8006ff0 <arm_fill_f32>
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e021      	b.n	8001a06 <apply_filterbank+0x66>
    left_k = k_range[m][0];
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <apply_filterbank+0x88>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019ca:	613b      	str	r3, [r7, #16]
    len = k_range[m][1];
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <apply_filterbank+0x88>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
    arm_dot_prod_f32(&signal[left_k], filterbank[m], len, &sum);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	18d0      	adds	r0, r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <apply_filterbank+0x8c>)
 80019e6:	1899      	adds	r1, r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	f006 fe9f 	bl	8008730 <arm_dot_prod_f32>
    signal_buf[m - 1] = sum;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4909      	ldr	r1, [pc, #36]	; (8001a20 <apply_filterbank+0x80>)
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	601a      	str	r2, [r3, #0]
  for (int m = 1; m < NUM_FILTERS + 1; m++) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b28      	cmp	r3, #40	; 0x28
 8001a0a:	d9da      	bls.n	80019c2 <apply_filterbank+0x22>
  }
  arm_copy_f32(signal_buf, signal, NUM_FILTERS);
 8001a0c:	2228      	movs	r2, #40	; 0x28
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <apply_filterbank+0x80>)
 8001a12:	f005 fb11 	bl	8007038 <arm_copy_f32>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200030c8 	.word	0x200030c8
 8001a24:	00000000 	.word	0x00000000
 8001a28:	20002778 	.word	0x20002778
 8001a2c:	20001278 	.word	0x20001278

08001a30 <apply_filterbank_logscale>:

// Filtered PSD in logscale
void apply_filterbank_logscale(float32_t *signal) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  for (int n = 0; n < NUM_FILTERS; n++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e022      	b.n	8001a84 <apply_filterbank_logscale+0x54>
    signal[n] = 20.0 * log10_approx(signal[n]);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	f7ff fc17 	bl	8001280 <log10_approx>
 8001a52:	ee10 3a10 	vmov	r3, s0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_f2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <apply_filterbank_logscale+0x64>)
 8001a62:	f7fe fdc9 	bl	80005f8 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	18d4      	adds	r4, r2, r3
 8001a76:	f7ff f897 	bl	8000ba8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6023      	str	r3, [r4, #0]
  for (int n = 0; n < NUM_FILTERS; n++) {
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b27      	cmp	r3, #39	; 0x27
 8001a88:	d9d9      	bls.n	8001a3e <apply_filterbank_logscale+0xe>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	40340000 	.word	0x40340000

08001a98 <apply_dct2>:

#ifndef FEATURE_MFSC
// DCT Type-II
void apply_dct2(float32_t *signal) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  arm_copy_f32(signal, signal_buf, NUM_FILTERS);
 8001aa0:	2228      	movs	r2, #40	; 0x28
 8001aa2:	4909      	ldr	r1, [pc, #36]	; (8001ac8 <apply_dct2+0x30>)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f005 fac7 	bl	8007038 <arm_copy_f32>
  // DCT Type-II
  dct2_f32(&S_DCT, signal_buf, signal, 0);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <apply_dct2+0x30>)
 8001ab0:	4806      	ldr	r0, [pc, #24]	; (8001acc <apply_dct2+0x34>)
 8001ab2:	f7ff fb5d 	bl	8001170 <dct2_f32>
  signal[0] = 0.0;  // Remove DC
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200030c8 	.word	0x200030c8
 8001acc:	2000024c 	.word	0x2000024c

08001ad0 <uart_tx>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*
 * Output raw wave or feature to UART by memory-to-peripheral DMA
 */
bool uart_tx(float32_t *in, mode mode, bool dma_start) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	72fb      	strb	r3, [r7, #11]
 8001adc:	4613      	mov	r3, r2
 8001ade:	72bb      	strb	r3, [r7, #10]
  static char uart_buf[NUM_FILTERS * 200 * 2] = { 0 };
#else
  static char uart_buf[NN * 2] = { 0 };
#endif

  if (cnt == 0) {
 8001ae0:	4b8a      	ldr	r3, [pc, #552]	; (8001d0c <uart_tx+0x23c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d12e      	bne.n	8001b46 <uart_tx+0x76>
    idx = 0;
 8001ae8:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <uart_tx+0x240>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

    switch (mode) {
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d822      	bhi.n	8001b3c <uart_tx+0x6c>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <uart_tx+0x2c>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b0d 	.word	0x08001b0d
 8001b00:	08001b1d 	.word	0x08001b1d
 8001b04:	08001b2d 	.word	0x08001b2d
 8001b08:	08001b45 	.word	0x08001b45

    case RAW_WAVE:
      length = NN;
 8001b0c:	4b81      	ldr	r3, [pc, #516]	; (8001d14 <uart_tx+0x244>)
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]
      cnt = 1;
 8001b14:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <uart_tx+0x23c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
      break;
 8001b1a:	e014      	b.n	8001b46 <uart_tx+0x76>

    case FFT:
      length = NN / 2;
 8001b1c:	4b7d      	ldr	r3, [pc, #500]	; (8001d14 <uart_tx+0x244>)
 8001b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b22:	601a      	str	r2, [r3, #0]
      cnt = 1;
 8001b24:	4b79      	ldr	r3, [pc, #484]	; (8001d0c <uart_tx+0x23c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
      break;
 8001b2a:	e00c      	b.n	8001b46 <uart_tx+0x76>

    case SPECTROGRAM:
      length = NN / 2;
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <uart_tx+0x244>)
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	601a      	str	r2, [r3, #0]
      cnt = 200;
 8001b34:	4b75      	ldr	r3, [pc, #468]	; (8001d0c <uart_tx+0x23c>)
 8001b36:	22c8      	movs	r2, #200	; 0xc8
 8001b38:	601a      	str	r2, [r3, #0]
      break;
 8001b3a:	e004      	b.n	8001b46 <uart_tx+0x76>

    case FEATURES:
      break;

    default:
      length = 0;
 8001b3c:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <uart_tx+0x244>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
      break;
 8001b42:	e000      	b.n	8001b46 <uart_tx+0x76>
      break;
 8001b44:	bf00      	nop

    }
  }

  // Quantization: convert float into int
  if (mode == RAW_WAVE) {
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d131      	bne.n	8001bb0 <uart_tx+0xe0>
    for (int n = 0; n < length; n++) {
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b50:	e028      	b.n	8001ba4 <uart_tx+0xd4>
      // TODO: the original PCM is 24bit length, so this operation may cause overflow.
      int32_t raw32 = (int32_t)in[n] >> pcm_bit_shift;
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b62:	ee17 2a90 	vmov	r2, s15
 8001b66:	4b6c      	ldr	r3, [pc, #432]	; (8001d18 <uart_tx+0x248>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa42 f303 	asr.w	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
      int16_t raw16 = (int16_t)raw32;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	827b      	strh	r3, [r7, #18]
      uart_buf[idx++] = (uint8_t) (raw16 >> 8);      // MSB
 8001b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b78:	121b      	asrs	r3, r3, #8
 8001b7a:	b218      	sxth	r0, r3
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <uart_tx+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	4963      	ldr	r1, [pc, #396]	; (8001d10 <uart_tx+0x240>)
 8001b84:	600a      	str	r2, [r1, #0]
 8001b86:	b2c1      	uxtb	r1, r0
 8001b88:	4a64      	ldr	r2, [pc, #400]	; (8001d1c <uart_tx+0x24c>)
 8001b8a:	54d1      	strb	r1, [r2, r3]
      uart_buf[idx++] = (uint8_t) (raw16 & 0x00ff);  // LSB
 8001b8c:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <uart_tx+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	495f      	ldr	r1, [pc, #380]	; (8001d10 <uart_tx+0x240>)
 8001b94:	600a      	str	r2, [r1, #0]
 8001b96:	8a7a      	ldrh	r2, [r7, #18]
 8001b98:	b2d1      	uxtb	r1, r2
 8001b9a:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <uart_tx+0x24c>)
 8001b9c:	54d1      	strb	r1, [r2, r3]
    for (int n = 0; n < length; n++) {
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <uart_tx+0x244>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbd1      	blt.n	8001b52 <uart_tx+0x82>
 8001bae:	e06f      	b.n	8001c90 <uart_tx+0x1c0>
    }
  } else if (mode == FEATURES) {
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d139      	bne.n	8001c2a <uart_tx+0x15a>
    a = pos * NUM_FILTERS;
 8001bb6:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <uart_tx+0x250>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    b = (200 - pos) * NUM_FILTERS;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <uart_tx+0x250>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	61fb      	str	r3, [r7, #28]
    c = 200 * NUM_FILTERS;
 8001bda:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001bde:	61bb      	str	r3, [r7, #24]
    // Time series order
    memcpy(uart_buf + b, mfsc_buffer, a);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4a4e      	ldr	r2, [pc, #312]	; (8001d1c <uart_tx+0x24c>)
 8001be4:	4413      	add	r3, r2
 8001be6:	6a3a      	ldr	r2, [r7, #32]
 8001be8:	494e      	ldr	r1, [pc, #312]	; (8001d24 <uart_tx+0x254>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f008 f874 	bl	8009cd8 <memcpy>
    memcpy(uart_buf, mfsc_buffer + a, b);
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <uart_tx+0x254>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4848      	ldr	r0, [pc, #288]	; (8001d1c <uart_tx+0x24c>)
 8001bfc:	f008 f86c 	bl	8009cd8 <memcpy>
    memcpy(uart_buf + b + c, mfcc_buffer, a);
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <uart_tx+0x24c>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	6a3a      	ldr	r2, [r7, #32]
 8001c0c:	4946      	ldr	r1, [pc, #280]	; (8001d28 <uart_tx+0x258>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f008 f862 	bl	8009cd8 <memcpy>
    memcpy(uart_buf + c, mfcc_buffer + a, b);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4a41      	ldr	r2, [pc, #260]	; (8001d1c <uart_tx+0x24c>)
 8001c18:	1898      	adds	r0, r3, r2
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	4a42      	ldr	r2, [pc, #264]	; (8001d28 <uart_tx+0x258>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	4619      	mov	r1, r3
 8001c24:	f008 f858 	bl	8009cd8 <memcpy>
 8001c28:	e032      	b.n	8001c90 <uart_tx+0x1c0>
  } else {
    for (int n = 0; n < length; n++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	e02a      	b.n	8001c86 <uart_tx+0x1b6>
      if (in[n] < -128.0f) in[n] = -128.0f;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d2c <uart_tx+0x25c>
 8001c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	d506      	bpl.n	8001c58 <uart_tx+0x188>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8001c56:	601a      	str	r2, [r3, #0]
      uart_buf[idx++] = (int8_t) in[n];
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c6c:	793b      	ldrb	r3, [r7, #4]
 8001c6e:	b258      	sxtb	r0, r3
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <uart_tx+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	4926      	ldr	r1, [pc, #152]	; (8001d10 <uart_tx+0x240>)
 8001c78:	600a      	str	r2, [r1, #0]
 8001c7a:	b2c1      	uxtb	r1, r0
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <uart_tx+0x24c>)
 8001c7e:	54d1      	strb	r1, [r2, r3]
    for (int n = 0; n < length; n++) {
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3301      	adds	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <uart_tx+0x244>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbcf      	blt.n	8001c30 <uart_tx+0x160>
    }
  }

  // memory-to-peripheral DMA to UART
  if (mode == FEATURES) {
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d109      	bne.n	8001caa <uart_tx+0x1da>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, NUM_FILTERS * 200 * 2);
 8001c96:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001c9a:	4920      	ldr	r1, [pc, #128]	; (8001d1c <uart_tx+0x24c>)
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <uart_tx+0x260>)
 8001c9e:	f003 fdbd 	bl	800581c <HAL_UART_Transmit_DMA>
    printing = false;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ca8:	e029      	b.n	8001cfe <uart_tx+0x22e>
  } else if (--cnt == 0) {
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <uart_tx+0x23c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <uart_tx+0x23c>)
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <uart_tx+0x23c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <uart_tx+0x204>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <uart_tx+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4915      	ldr	r1, [pc, #84]	; (8001d1c <uart_tx+0x24c>)
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <uart_tx+0x260>)
 8001cc8:	f003 fda8 	bl	800581c <HAL_UART_Transmit_DMA>
    printing = false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cd2:	e014      	b.n	8001cfe <uart_tx+0x22e>
  } else if (dma_start) {
 8001cd4:	7abb      	ldrb	r3, [r7, #10]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00e      	beq.n	8001cf8 <uart_tx+0x228>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) uart_buf, idx);
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <uart_tx+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <uart_tx+0x24c>)
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <uart_tx+0x260>)
 8001ce6:	f003 fd99 	bl	800581c <HAL_UART_Transmit_DMA>
    idx = 0;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <uart_tx+0x240>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
    printing = true;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cf6:	e002      	b.n	8001cfe <uart_tx+0x22e>
  } else {
    printing = true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return printing;
 8001cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20007984 	.word	0x20007984
 8001d10:	20007988 	.word	0x20007988
 8001d14:	2000798c 	.word	0x2000798c
 8001d18:	20003af0 	.word	0x20003af0
 8001d1c:	20007990 	.word	0x20007990
 8001d20:	20007978 	.word	0x20007978
 8001d24:	20003af8 	.word	0x20003af8
 8001d28:	20005a38 	.word	0x20005a38
 8001d2c:	c3000000 	.word	0xc3000000
 8001d30:	20003a1c 	.word	0x20003a1c

08001d34 <dsp>:

/*
 * DSP pipeline
 */
void dsp(float32_t *s1, mode mode) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	72fb      	strb	r3, [r7, #11]

  uint32_t start = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t end = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

  start = HAL_GetTick();
 8001d48:	f001 f892 	bl	8002e70 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

#ifdef AC_COUPLING
  apply_ac_coupling(s1);  // remove DC
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff fd7e 	bl	8001850 <apply_ac_coupling>
#endif

  if (mode >= FFT) {
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d962      	bls.n	8001e20 <dsp+0xec>
    // Pre-emphasis
    if (pre_emphasis_enabled) {
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <dsp+0x11c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <dsp+0x36>
      apply_pre_emphasis(s1);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fd61 	bl	800182c <apply_pre_emphasis>
    }
    apply_hann(s1);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fd9e 	bl	80018ac <apply_hann>
    apply_fft(s1);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff fdad 	bl	80018d0 <apply_fft>
    apply_psd(s1);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff fdc2 	bl	8001900 <apply_psd>
    if (mode < FEATURES) {
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d803      	bhi.n	8001d8a <dsp+0x56>
      apply_psd_logscale(s1);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fdd8 	bl	8001938 <apply_psd_logscale>
 8001d88:	e04a      	b.n	8001e20 <dsp+0xec>
    } else {
      apply_filterbank(s1);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fe08 	bl	80019a0 <apply_filterbank>
      apply_filterbank_logscale(s1);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fe4d 	bl	8001a30 <apply_filterbank_logscale>
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e01a      	b.n	8001dd2 <dsp+0x9e>
        mfsc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <dsp+0x120>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	461a      	mov	r2, r3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001dc4:	793a      	ldrb	r2, [r7, #4]
 8001dc6:	b251      	sxtb	r1, r2
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <dsp+0x124>)
 8001dca:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	2b27      	cmp	r3, #39	; 0x27
 8001dd6:	d9e1      	bls.n	8001d9c <dsp+0x68>
      }
      apply_dct2(s1);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe5d 	bl	8001a98 <apply_dct2>
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	e01a      	b.n	8001e1a <dsp+0xe6>
        mfcc_buffer[pos * NUM_FILTERS + i] = (int8_t) s1[i];
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <dsp+0x120>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4413      	add	r3, r2
 8001e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e08:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e0c:	793a      	ldrb	r2, [r7, #4]
 8001e0e:	b251      	sxtb	r1, r2
 8001e10:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <dsp+0x128>)
 8001e12:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_FILTERS; i++) {
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b27      	cmp	r3, #39	; 0x27
 8001e1e:	d9e1      	bls.n	8001de4 <dsp+0xb0>
      }
    }
  }
  if (++pos >= 200)
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <dsp+0x120>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <dsp+0x120>)
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <dsp+0x120>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2bc7      	cmp	r3, #199	; 0xc7
 8001e30:	dd02      	ble.n	8001e38 <dsp+0x104>
    pos = 0;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <dsp+0x120>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

  end = HAL_GetTick();
 8001e38:	f001 f81a 	bl	8002e70 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]
  elapsed_time = end - start;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <dsp+0x12c>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000011 	.word	0x20000011
 8001e54:	20007978 	.word	0x20007978
 8001e58:	20003af8 	.word	0x20003af8
 8001e5c:	20005a38 	.word	0x20005a38
 8001e60:	20007980 	.word	0x20007980

08001e64 <overlap_dsp>:
 *       [a1|b0]      b(1/2) ... 13.2msec
 *          [b0|b1]   b(2/2) ... 13.2msec
 * --- overlap dsp -------------
 *             :
 */
void overlap_dsp(float32_t *buf, mode mode) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001e70:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8001e74:	6018      	str	r0, [r3, #0]
 8001e76:	460a      	mov	r2, r1
 8001e78:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001e7c:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001e80:	701a      	strb	r2, [r3, #0]

  float32_t signal[NN] = { 0.0f };
 8001e82:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001e86:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e90:	461a      	mov	r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	f007 fe92 	bl	8009bbc <memset>

  arm_copy_f32(buf, signal, NN);
 8001e98:	f107 0108 	add.w	r1, r7, #8
 8001e9c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ea0:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8001ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f005 f8c5 	bl	8007038 <arm_copy_f32>
  dsp(signal, mode);  // (1/2)
 8001eae:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001eb2:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff38 	bl	8001d34 <dsp>
  if (printing) {
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <overlap_dsp+0x110>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00e      	beq.n	8001eec <overlap_dsp+0x88>
    printing = uart_tx(signal, mode, false);  // false: UART output pending
 8001ece:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ed2:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001ed6:	7819      	ldrb	r1, [r3, #0]
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	2200      	movs	r2, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fdf6 	bl	8001ad0 <uart_tx>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <overlap_dsp+0x110>)
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  arm_copy_f32(buf + NN_HALF, signal, NN);
 8001eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001ef6:	f6a2 0204 	subw	r2, r2, #2052	; 0x804
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f107 0108 	add.w	r1, r7, #8
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	4618      	mov	r0, r3
 8001f08:	f005 f896 	bl	8007038 <arm_copy_f32>
  dsp(signal, mode);  // (2/2)
 8001f0c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001f10:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff09 	bl	8001d34 <dsp>
  if (printing) {
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <overlap_dsp+0x110>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <overlap_dsp+0xe6>
    printing = uart_tx(signal, mode, true);  // true: UART output
 8001f2c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001f30:	f6a3 0305 	subw	r3, r3, #2053	; 0x805
 8001f34:	7819      	ldrb	r1, [r3, #0]
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fdc7 	bl	8001ad0 <uart_tx>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <overlap_dsp+0x110>)
 8001f48:	701a      	strb	r2, [r3, #0]
  }

  if (!printing && continous_output) {
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <overlap_dsp+0x110>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <overlap_dsp+0x106>
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <overlap_dsp+0x114>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <overlap_dsp+0x106>
    printing = true;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <overlap_dsp+0x110>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20003aee 	.word	0x20003aee
 8001f78:	20003aef 	.word	0x20003aef

08001f7c <dump>:

/*
 * Dump debug info
 */
void dump(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  if (debug_output != DISABLED) {
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <dump+0xb0>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d04b      	beq.n	8002024 <dump+0xa8>
    switch (debug_output) {
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <dump+0xb0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d002      	beq.n	8001f9c <dump+0x20>
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d036      	beq.n	8002008 <dump+0x8c>
      break;
    case ELAPSED_TIME:
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
      break;
    default:
      break;
 8001f9a:	e040      	b.n	800201e <dump+0xa2>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	e02b      	b.n	8001ffa <dump+0x7e>
        printf("%d:%d,", k_range[m][0], k_range[m][1]);
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <dump+0xb4>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <dump+0xb4>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	481f      	ldr	r0, [pc, #124]	; (8002034 <dump+0xb8>)
 8001fb8:	f007 fcb2 	bl	8009920 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	e012      	b.n	8001fe8 <dump+0x6c>
          printf("%.3f,", filterbank[m][n]);
 8001fc2:	491d      	ldr	r1, [pc, #116]	; (8002038 <dump+0xbc>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fab8 	bl	8000548 <__aeabi_f2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4817      	ldr	r0, [pc, #92]	; (800203c <dump+0xc0>)
 8001fde:	f007 fc9f 	bl	8009920 <iprintf>
        for (int n = 0; n < FILTER_LENGTH; n++) {
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	dde9      	ble.n	8001fc2 <dump+0x46>
        printf("\n");
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f007 fca8 	bl	8009944 <putchar>
      for (int m = 0; m < NUM_FILTERS + 2; m++) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b29      	cmp	r3, #41	; 0x29
 8001ffe:	d9d0      	bls.n	8001fa2 <dump+0x26>
      printf("e\n");
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <dump+0xc4>)
 8002002:	f007 fcfb 	bl	80099fc <puts>
      break;
 8002006:	e00a      	b.n	800201e <dump+0xa2>
      printf("mode: %d, elapsed_time: %lu(msec)\n", output_mode, elapsed_time);
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <dump+0xc8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4619      	mov	r1, r3
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <dump+0xcc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <dump+0xd0>)
 8002018:	f007 fc82 	bl	8009920 <iprintf>
      break;
 800201c:	bf00      	nop
    }
    debug_output = DISABLED;
 800201e:	4b03      	ldr	r3, [pc, #12]	; (800202c <dump+0xb0>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000797c 	.word	0x2000797c
 8002030:	20002778 	.word	0x20002778
 8002034:	0800cda8 	.word	0x0800cda8
 8002038:	20001278 	.word	0x20001278
 800203c:	0800cdb0 	.word	0x0800cdb0
 8002040:	0800cdb8 	.word	0x0800cdb8
 8002044:	20000010 	.word	0x20000010
 8002048:	20007980 	.word	0x20007980
 800204c:	0800cdbc 	.word	0x0800cdbc

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	f5ad 5de0 	sub.w	sp, sp, #7168	; 0x1c00
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Audio sample rate and period
  float32_t f_s;

  // DMA peripheral-to-memory double buffer
  int32_t input_buf[NN * 2] = { 0 };
 800205a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800205e:	3b0c      	subs	r3, #12
 8002060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f007 fda8 	bl	8009bbc <memset>

  // PCM data store for further processing (FFT etc)
  float32_t signal_buf[NN + NN / 2] = { 0.0f };  // NN/2 overlap
 800206c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8002070:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 8002074:	4618      	mov	r0, r3
 8002076:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800207a:	461a      	mov	r2, r3
 800207c:	2100      	movs	r1, #0
 800207e:	f007 fd9d 	bl	8009bbc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002082:	f000 fe85 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002086:	f000 f905 	bl	8002294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208a:	f000 fa11 	bl	80024b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800208e:	f000 f9e9 	bl	8002464 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002092:	f000 f9b7 	bl	8002404 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8002096:	f000 f94f 	bl	8002338 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  f_s = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 800209a:	4b76      	ldr	r3, [pc, #472]	; (8002274 <main+0x224>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <main+0x228>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.Oversampling
 80020a6:	4b75      	ldr	r3, [pc, #468]	; (800227c <main+0x22c>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	fbb2 f2f3 	udiv	r2, r2, r3
      / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <main+0x22c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
  f_s = SystemCoreClock / hdfsdm1_channel3.Init.OutputClock.Divider
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020be:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80020c2:	f103 0304 	add.w	r3, r3, #4
 80020c6:	edc3 7a00 	vstr	s15, [r3]

  // DSP initialization
  init_dsp(f_s);
 80020ca:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80020ce:	f103 0304 	add.w	r3, r3, #4
 80020d2:	ed93 0a00 	vldr	s0, [r3]
 80020d6:	f7ff fb5f 	bl	8001798 <init_dsp>

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, input_buf, NN * 2) != HAL_OK) {
 80020da:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80020de:	3b0c      	subs	r3, #12
 80020e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e4:	4619      	mov	r1, r3
 80020e6:	4865      	ldr	r0, [pc, #404]	; (800227c <main+0x22c>)
 80020e8:	f001 f9c0 	bl	800346c <HAL_DFSDM_FilterRegularStart_DMA>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <main+0xa6>
    Error_Handler();
 80020f2:	f000 fb4b 	bl	800278c <Error_Handler>
  }

  // Enable UART receive interrupt to receive a command
  // from an application processor
  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 80020f6:	2201      	movs	r2, #1
 80020f8:	4961      	ldr	r1, [pc, #388]	; (8002280 <main+0x230>)
 80020fa:	4862      	ldr	r0, [pc, #392]	; (8002284 <main+0x234>)
 80020fc:	f003 fb42 	bl	8005784 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Wait for next PCM samples from M1
    if (new_pcm_data_a) {  // 1st half of the buffer
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <main+0x238>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d055      	beq.n	80021b6 <main+0x166>

      // Overlap
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	3b0c      	subs	r3, #12
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002118:	f107 0110 	add.w	r1, r7, #16
 800211c:	390c      	subs	r1, #12
 800211e:	4618      	mov	r0, r3
 8002120:	f004 ff8a 	bl	8007038 <arm_copy_f32>

      // Bit shift to obtain 16-bit PCM
      for (uint32_t n = 0; n < NN; n++) {
 8002124:	2300      	movs	r3, #0
 8002126:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 800212a:	f102 020c 	add.w	r2, r2, #12
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e02c      	b.n	800218c <main+0x13c>
        signal_buf[n+NN_HALF] = (float32_t) (input_buf[n] >> REGISTER_BIT_SHIFT);
 8002132:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8002136:	461a      	mov	r2, r3
 8002138:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800213c:	f103 030c 	add.w	r3, r3, #12
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800214a:	1219      	asrs	r1, r3, #8
 800214c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002150:	461a      	mov	r2, r3
 8002152:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002156:	f103 030c 	add.w	r3, r3, #12
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4413      	add	r3, r2
 800215e:	ee07 1a90 	vmov	s15, r1
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 800216a:	f6a2 420c 	subw	r2, r2, #3084	; 0xc0c
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t n = 0; n < NN; n++) {
 8002176:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800217a:	f103 030c 	add.w	r3, r3, #12
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 8002186:	f102 020c 	add.w	r2, r2, #12
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002190:	f103 030c 	add.w	r3, r3, #12
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219a:	d3ca      	bcc.n	8002132 <main+0xe2>
      //if (pre_emphasis_enabled) {
      //  apply_pre_emphasis(signal_buf + NN_HALF);
      //}

      // Overlap dsp
      overlap_dsp(signal_buf, output_mode);
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <main+0x23c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	3b0c      	subs	r3, #12
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fe5a 	bl	8001e64 <overlap_dsp>

      new_pcm_data_a = false;
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <main+0x238>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

    }

    if (new_pcm_data_b) {  // 2nd half of the buffer
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <main+0x240>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d056      	beq.n	800226e <main+0x21e>

      // Overlap
      arm_copy_f32(signal_buf + NN, signal_buf, NN_HALF);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	3b0c      	subs	r3, #12
 80021c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ce:	f107 0110 	add.w	r1, r7, #16
 80021d2:	390c      	subs	r1, #12
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 ff2f 	bl	8007038 <arm_copy_f32>

      // Bit shift to obtain 16-bit PCM
      for (uint32_t n = 0; n < NN; n++) {
 80021da:	2300      	movs	r3, #0
 80021dc:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 80021e0:	f102 0208 	add.w	r2, r2, #8
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e02d      	b.n	8002244 <main+0x1f4>
        signal_buf[n+NN_HALF] = (float32_t) (input_buf[NN+n] >> REGISTER_BIT_SHIFT);
 80021e8:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 80021ec:	f103 0308 	add.w	r3, r3, #8
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021f6:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002202:	1219      	asrs	r1, r3, #8
 8002204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002208:	461a      	mov	r2, r3
 800220a:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 800220e:	f103 0308 	add.w	r3, r3, #8
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4413      	add	r3, r2
 8002216:	ee07 1a90 	vmov	s15, r1
 800221a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221e:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8002222:	f6a2 420c 	subw	r2, r2, #3084	; 0xc0c
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t n = 0; n < NN; n++) {
 800222e:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002232:	f103 0308 	add.w	r3, r3, #8
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	f507 52e0 	add.w	r2, r7, #7168	; 0x1c00
 800223e:	f102 0208 	add.w	r2, r2, #8
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	f507 53e0 	add.w	r3, r7, #7168	; 0x1c00
 8002248:	f103 0308 	add.w	r3, r3, #8
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002252:	d3c9      	bcc.n	80021e8 <main+0x198>
      //if (pre_emphasis_enabled) {
      //  apply_pre_emphasis(signal_buf + NN_HALF);
      //}

      // Overlap dsp
      overlap_dsp(signal_buf, output_mode);
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <main+0x23c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	3b0c      	subs	r3, #12
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fdfe 	bl	8001e64 <overlap_dsp>

      new_pcm_data_b = false;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <main+0x240>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    }

    // Dump debug info
    dump();
 800226e:	f7ff fe85 	bl	8001f7c <dump>
    if (new_pcm_data_a) {  // 1st half of the buffer
 8002272:	e745      	b.n	8002100 <main+0xb0>
 8002274:	20000014 	.word	0x20000014
 8002278:	2000399c 	.word	0x2000399c
 800227c:	20003948 	.word	0x20003948
 8002280:	20003af4 	.word	0x20003af4
 8002284:	20003a1c 	.word	0x20003a1c
 8002288:	20003aec 	.word	0x20003aec
 800228c:	20000010 	.word	0x20000010
 8002290:	20003aed 	.word	0x20003aed

08002294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b096      	sub	sp, #88	; 0x58
 8002298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2244      	movs	r2, #68	; 0x44
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f007 fc8a 	bl	8009bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ba:	f001 fe79 	bl	8003fb0 <HAL_PWREx_ControlVoltageScaling>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022c4:	f000 fa62 	bl	800278c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d2:	2310      	movs	r3, #16
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d6:	2302      	movs	r3, #2
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022da:	2302      	movs	r3, #2
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022e2:	230a      	movs	r3, #10
 80022e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022e6:	2307      	movs	r3, #7
 80022e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ea:	2302      	movs	r3, #2
 80022ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022ee:	2302      	movs	r3, #2
 80022f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 feb0 	bl	800405c <HAL_RCC_OscConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002302:	f000 fa43 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002306:	230f      	movs	r3, #15
 8002308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230a:	2303      	movs	r3, #3
 800230c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800231a:	463b      	mov	r3, r7
 800231c:	2104      	movs	r1, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fa78 	bl	8004814 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800232a:	f000 fa2f 	bl	800278c <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3758      	adds	r7, #88	; 0x58
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 800233e:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <MX_DFSDM1_Init+0xbc>)
 8002340:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 800234a:	2201      	movs	r2, #1
 800234c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 8002350:	2201      	movs	r2, #1
 8002352:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8002354:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 8002356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800235a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 8002364:	2201      	movs	r2, #1
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8002368:	4821      	ldr	r0, [pc, #132]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 800236a:	f000 ff5f 	bl	800322c <HAL_DFSDM_FilterInit>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8002374:	f000 fa0a 	bl	800278c <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <MX_DFSDM1_Init+0xc4>)
 800237c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 8002380:	2201      	movs	r2, #1
 8002382:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 64;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 800238c:	2240      	movs	r2, #64	; 0x40
 800238e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023aa:	2204      	movs	r2, #4
 80023ac:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x1;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 80023c6:	480c      	ldr	r0, [pc, #48]	; (80023f8 <MX_DFSDM1_Init+0xc0>)
 80023c8:	f000 fe70 	bl	80030ac <HAL_DFSDM_ChannelInit>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80023d2:	f000 f9db 	bl	800278c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80023d6:	2201      	movs	r2, #1
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <MX_DFSDM1_Init+0xc8>)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_DFSDM1_Init+0xb8>)
 80023dc:	f001 f800 	bl	80033e0 <HAL_DFSDM_FilterConfigRegChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80023e6:	f000 f9d1 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20003948 	.word	0x20003948
 80023f4:	40016100 	.word	0x40016100
 80023f8:	2000399c 	.word	0x2000399c
 80023fc:	40016060 	.word	0x40016060
 8002400:	00030008 	.word	0x00030008

08002404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_USART2_UART_Init+0x58>)
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <MX_USART2_UART_Init+0x5c>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002410:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_USART2_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_USART2_UART_Init+0x58>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002448:	f003 f8c4 	bl	80055d4 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002452:	f000 f99b 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20003a1c 	.word	0x20003a1c
 8002460:	40004400 	.word	0x40004400

08002464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_DMA_Init+0x48>)
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <MX_DMA_Init+0x48>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6493      	str	r3, [r2, #72]	; 0x48
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_DMA_Init+0x48>)
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	200e      	movs	r0, #14
 8002488:	f000 fdd9 	bl	800303e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800248c:	200e      	movs	r0, #14
 800248e:	f000 fdf2 	bl	8003076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2011      	movs	r0, #17
 8002498:	f000 fdd1 	bl	800303e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800249c:	2011      	movs	r0, #17
 800249e:	f000 fdea 	bl	8003076 <HAL_NVIC_EnableIRQ>

}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b28      	ldr	r3, [pc, #160]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024de:	4b25      	ldr	r3, [pc, #148]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a24      	ldr	r2, [pc, #144]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <MX_GPIO_Init+0xc4>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <MX_GPIO_Init+0xc4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_GPIO_Init+0xc4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <MX_GPIO_Init+0xc4>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <MX_GPIO_Init+0xc4>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2120      	movs	r1, #32
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f001 fd19 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002538:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800253c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <MX_GPIO_Init+0xc8>)
 800254a:	f001 fb61 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800254e:	2320      	movs	r3, #32
 8002550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002568:	f001 fb52 	bl	8003c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	48000800 	.word	0x48000800

0800257c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
 * @brief  Half regular conversion complete callback.
 * @param  hdfsdm_filter DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if (!new_pcm_data_a && (hdfsdm_filter == &hdfsdm1_filter0)) {
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f083 0301 	eor.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d102      	bne.n	80025a2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
    new_pcm_data_a = true;  // ready for 1st half of the buffer
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20003aec 	.word	0x20003aec
 80025b4:	20003948 	.word	0x20003948

080025b8 <HAL_DFSDM_FilterRegConvCpltCallback>:
 using HAL_DFSDM_FilterGetRegularValue.
 * @param  hdfsdm_filter : DFSDM filter handle.
 * @retval None
 */
void HAL_DFSDM_FilterRegConvCpltCallback(
    DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if (!new_pcm_data_b && (hdfsdm_filter == &hdfsdm1_filter0)) {
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f083 0301 	eor.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d102      	bne.n	80025de <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
    new_pcm_data_b = true;  // ready for 2nd half of the buffer
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20003aed 	.word	0x20003aed
 80025f0:	20003948 	.word	0x20003948

080025f4 <_write>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	b29a      	uxth	r2, r3
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	4804      	ldr	r0, [pc, #16]	; (800261c <_write+0x28>)
 800260c:	f003 f830 	bl	8005670 <HAL_UART_Transmit>
  return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20003a1c 	.word	0x20003a1c

08002620 <HAL_UART_RxCpltCallback>:
}

/*
 * One-byte command reception from an application processor
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  char cmd;

  cmd = rxbuf[0];
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_UART_RxCpltCallback+0x14c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	73fb      	strb	r3, [r7, #15]

  switch (cmd) {
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3b43      	subs	r3, #67	; 0x43
 8002632:	2b31      	cmp	r3, #49	; 0x31
 8002634:	f200 8088 	bhi.w	8002748 <HAL_UART_RxCpltCallback+0x128>
 8002638:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_UART_RxCpltCallback+0x20>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002731 	.word	0x08002731
 8002644:	08002749 	.word	0x08002749
 8002648:	08002741 	.word	0x08002741
 800264c:	08002749 	.word	0x08002749
 8002650:	08002749 	.word	0x08002749
 8002654:	08002749 	.word	0x08002749
 8002658:	08002749 	.word	0x08002749
 800265c:	08002749 	.word	0x08002749
 8002660:	08002749 	.word	0x08002749
 8002664:	08002749 	.word	0x08002749
 8002668:	08002749 	.word	0x08002749
 800266c:	08002749 	.word	0x08002749
 8002670:	08002749 	.word	0x08002749
 8002674:	08002709 	.word	0x08002709
 8002678:	08002749 	.word	0x08002749
 800267c:	08002749 	.word	0x08002749
 8002680:	08002749 	.word	0x08002749
 8002684:	08002749 	.word	0x08002749
 8002688:	08002749 	.word	0x08002749
 800268c:	08002749 	.word	0x08002749
 8002690:	08002749 	.word	0x08002749
 8002694:	08002749 	.word	0x08002749
 8002698:	08002749 	.word	0x08002749
 800269c:	08002749 	.word	0x08002749
 80026a0:	08002749 	.word	0x08002749
 80026a4:	08002749 	.word	0x08002749
 80026a8:	08002749 	.word	0x08002749
 80026ac:	08002749 	.word	0x08002749
 80026b0:	08002749 	.word	0x08002749
 80026b4:	08002749 	.word	0x08002749
 80026b8:	08002749 	.word	0x08002749
 80026bc:	08002749 	.word	0x08002749
 80026c0:	08002729 	.word	0x08002729
 80026c4:	08002749 	.word	0x08002749
 80026c8:	08002739 	.word	0x08002739
 80026cc:	08002719 	.word	0x08002719
 80026d0:	08002749 	.word	0x08002749
 80026d4:	08002749 	.word	0x08002749
 80026d8:	08002749 	.word	0x08002749
 80026dc:	08002749 	.word	0x08002749
 80026e0:	08002749 	.word	0x08002749
 80026e4:	08002749 	.word	0x08002749
 80026e8:	08002749 	.word	0x08002749
 80026ec:	08002749 	.word	0x08002749
 80026f0:	08002749 	.word	0x08002749
 80026f4:	08002711 	.word	0x08002711
 80026f8:	08002749 	.word	0x08002749
 80026fc:	08002749 	.word	0x08002749
 8002700:	08002749 	.word	0x08002749
 8002704:	08002721 	.word	0x08002721

  // Pre-emphasis
  case 'P':
    pre_emphasis_enabled = true;
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_UART_RxCpltCallback+0x150>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    break;
 800270e:	e024      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'p':
    pre_emphasis_enabled = false;
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_UART_RxCpltCallback+0x150>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    break;
 8002716:	e020      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'f':
    debug_output = FILTERBANK;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_UART_RxCpltCallback+0x154>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
    break;
 800271e:	e01c      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 't':
    debug_output = ELAPSED_TIME;
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_UART_RxCpltCallback+0x154>)
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
    break;
 8002726:	e018      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'c':
    continous_output = true;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_UART_RxCpltCallback+0x158>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
    break;
 800272e:	e014      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'C':
    continous_output = false;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_RxCpltCallback+0x158>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
    break;
 8002736:	e010      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'e':
    pcm_bit_shift = 8;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_UART_RxCpltCallback+0x15c>)
 800273a:	2208      	movs	r2, #8
 800273c:	601a      	str	r2, [r3, #0]
    break;
 800273e:	e00c      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
  case 'E':
    pcm_bit_shift = 0;
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_UART_RxCpltCallback+0x15c>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    break;
 8002746:	e008      	b.n	800275a <HAL_UART_RxCpltCallback+0x13a>
    // The others
  default:
    output_mode = (mode) (cmd - 0x30);
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3b30      	subs	r3, #48	; 0x30
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_UART_RxCpltCallback+0x160>)
 8002750:	701a      	strb	r2, [r3, #0]
    printing = true;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_UART_RxCpltCallback+0x164>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
    break;
 8002758:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart2, rxbuf, 1);
 800275a:	2201      	movs	r2, #1
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_UART_RxCpltCallback+0x14c>)
 800275e:	480a      	ldr	r0, [pc, #40]	; (8002788 <HAL_UART_RxCpltCallback+0x168>)
 8002760:	f003 f810 	bl	8005784 <HAL_UART_Receive_IT>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20003af4 	.word	0x20003af4
 8002770:	20000011 	.word	0x20000011
 8002774:	2000797c 	.word	0x2000797c
 8002778:	20003aef 	.word	0x20003aef
 800277c:	20003af0 	.word	0x20003af0
 8002780:	20000010 	.word	0x20000010
 8002784:	20003aee 	.word	0x20003aee
 8002788:	20003a1c 	.word	0x20003a1c

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002794:	e7fe      	b.n	8002794 <Error_Handler+0x8>
	...

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_MspInit+0x44>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_MspInit+0x44>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6613      	str	r3, [r2, #96]	; 0x60
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_MspInit+0x44>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_MspInit+0x44>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_MspInit+0x44>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_MspInit+0x44>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0ac      	sub	sp, #176	; 0xb0
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2288      	movs	r2, #136	; 0x88
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f007 f9db 	bl	8009bbc <memset>
  if(DFSDM1_Init == 0)
 8002806:	4b44      	ldr	r3, [pc, #272]	; (8002918 <HAL_DFSDM_FilterMspInit+0x138>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14a      	bne.n	80028a4 <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800280e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002812:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fa1c 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800282a:	f7ff ffaf 	bl	800278c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_DFSDM_FilterMspInit+0x13c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DFSDM_FilterMspInit+0x13c>)
 8002836:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002838:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_DFSDM_FilterMspInit+0x13c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10b      	bne.n	8002858 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	4a36      	ldr	r2, [pc, #216]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6613      	str	r3, [r2, #96]	; 0x60
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	4a30      	ldr	r2, [pc, #192]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002864:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_DFSDM_FilterMspInit+0x140>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8002870:	2384      	movs	r3, #132	; 0x84
 8002872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002888:	2306      	movs	r3, #6
 800288a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002892:	4619      	mov	r1, r3
 8002894:	4823      	ldr	r0, [pc, #140]	; (8002924 <HAL_DFSDM_FilterMspInit+0x144>)
 8002896:	f001 f9bb 	bl	8003c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_DFSDM_FilterMspInit+0x138>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_DFSDM_FilterMspInit+0x138>)
 80028a2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_DFSDM_FilterMspInit+0x148>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d130      	bne.n	8002910 <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DFSDM_FilterMspInit+0x150>)
 80028b2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028da:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028de:	2220      	movs	r2, #32
 80028e0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80028e8:	4810      	ldr	r0, [pc, #64]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028ea:	f000 ff1b 	bl	8003724 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 80028f4:	f7ff ff4a 	bl	800278c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_DFSDM_FilterMspInit+0x14c>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8002910:	bf00      	nop
 8002912:	37b0      	adds	r7, #176	; 0xb0
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000b814 	.word	0x2000b814
 800291c:	2000b810 	.word	0x2000b810
 8002920:	40021000 	.word	0x40021000
 8002924:	48000800 	.word	0x48000800
 8002928:	40016100 	.word	0x40016100
 800292c:	200039d4 	.word	0x200039d4
 8002930:	40020044 	.word	0x40020044

08002934 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0ac      	sub	sp, #176	; 0xb0
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2288      	movs	r2, #136	; 0x88
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f007 f931 	bl	8009bbc <memset>
  if(DFSDM1_Init == 0)
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d14a      	bne.n	80029f8 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4618      	mov	r0, r3
 8002974:	f002 f972 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800297e:	f7ff ff05 	bl	800278c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800298a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10b      	bne.n	80029ac <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	6613      	str	r3, [r2, #96]	; 0x60
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80029c4:	2384      	movs	r3, #132	; 0x84
 80029c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80029dc:	2306      	movs	r3, #6
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029e6:	4619      	mov	r1, r3
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80029ea:	f001 f911 	bl	8003c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a02      	ldr	r2, [pc, #8]	; (8002a00 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80029f6:	6013      	str	r3, [r2, #0]
  }

}
 80029f8:	bf00      	nop
 80029fa:	37b0      	adds	r7, #176	; 0xb0
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000b814 	.word	0x2000b814
 8002a04:	2000b810 	.word	0x2000b810
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48000800 	.word	0x48000800

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0ac      	sub	sp, #176	; 0xb0
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2288      	movs	r2, #136	; 0x88
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f007 f8c3 	bl	8009bbc <memset>
  if(huart->Instance==USART2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <HAL_UART_MspInit+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d16c      	bne.n	8002b1a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a40:	2302      	movs	r3, #2
 8002a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 f905 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a58:	f7ff fe98 	bl	800278c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_UART_MspInit+0x118>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab4:	f001 f8ac 	bl	8003c10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_UART_MspInit+0x120>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002aee:	480f      	ldr	r0, [pc, #60]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002af0:	f000 fe18 	bl	8003724 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002afa:	f7ff fe47 	bl	800278c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002b02:	671a      	str	r2, [r3, #112]	; 0x70
 8002b04:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_UART_MspInit+0x11c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2026      	movs	r0, #38	; 0x26
 8002b10:	f000 fa95 	bl	800303e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b14:	2026      	movs	r0, #38	; 0x26
 8002b16:	f000 faae 	bl	8003076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	37b0      	adds	r7, #176	; 0xb0
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40004400 	.word	0x40004400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	20003aa4 	.word	0x20003aa4
 8002b30:	40020080 	.word	0x40020080

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <NMI_Handler+0x4>

08002b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <HardFault_Handler+0x4>

08002b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <MemManage_Handler+0x4>

08002b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <BusFault_Handler+0x4>

08002b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <UsageFault_Handler+0x4>

08002b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b80:	f000 f962 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DMA1_Channel4_IRQHandler+0x10>)
 8002b8e:	f000 ff60 	bl	8003a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200039d4 	.word	0x200039d4

08002b9c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <DMA1_Channel7_IRQHandler+0x10>)
 8002ba2:	f000 ff56 	bl	8003a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20003aa4 	.word	0x20003aa4

08002bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <USART2_IRQHandler+0x10>)
 8002bb6:	f002 fead 	bl	8005914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20003a1c 	.word	0x20003a1c

08002bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return 1;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_kill>:

int _kill(int pid, int sig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bde:	f007 f84f 	bl	8009c80 <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2216      	movs	r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
  return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_exit>:

void _exit (int status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c06:	e7fe      	b.n	8002c06 <_exit+0x12>

08002c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00a      	b.n	8002c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1a:	f3af 8000 	nop.w
 8002c1e:	4601      	mov	r1, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	b2ca      	uxtb	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf0      	blt.n	8002c1a <_read+0x12>
  }

  return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f006 ffd0 	bl	8009c80 <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20018000 	.word	0x20018000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	2000b818 	.word	0x2000b818
 8002d14:	2000b990 	.word	0x2000b990

08002d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <SystemInit+0x20>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <SystemInit+0x20>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d40:	f7ff ffea 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d46:	490d      	ldr	r1, [pc, #52]	; (8002d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <LoopForever+0xe>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	; (8002d88 <LoopForever+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f006 ff8f 	bl	8009c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d6e:	f7ff f96f 	bl	8002050 <main>

08002d72 <LoopForever>:

LoopForever:
    b LoopForever
 8002d72:	e7fe      	b.n	8002d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002d80:	080209c8 	.word	0x080209c8
  ldr r2, =_sbss
 8002d84:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002d88:	2000b990 	.word	0x2000b990

08002d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_2_IRQHandler>
	...

08002d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_Init+0x3c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_Init+0x3c>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f000 f93e 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f80f 	bl	8002dd0 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	e001      	b.n	8002dc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dbe:	f7ff fceb 	bl	8002798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d023      	beq.n	8002e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_InitTick+0x70>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f949 	bl	8003092 <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d809      	bhi.n	8002e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f913 	bl	800303e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_InitTick+0x74>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e007      	b.n	8002e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e004      	b.n	8002e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e001      	b.n	8002e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000001c 	.word	0x2000001c
 8002e40:	20000014 	.word	0x20000014
 8002e44:	20000018 	.word	0x20000018

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000001c 	.word	0x2000001c
 8002e6c:	2000b81c 	.word	0x2000b81c

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	2000b81c 	.word	0x2000b81c

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff29 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003050:	f7ff ff3e 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff ff8e 	bl	8002f7c <NVIC_EncodePriority>
 8003060:	4602      	mov	r2, r0
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff5d 	bl	8002f28 <__NVIC_SetPriority>
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff31 	bl	8002eec <__NVIC_EnableIRQ>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ffa2 	bl	8002fe4 <SysTick_Config>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0ac      	b.n	8003218 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fa8c 	bl	80035e0 <DFSDM_GetChannelFromInstance>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a55      	ldr	r2, [pc, #340]	; (8003220 <HAL_DFSDM_ChannelInit+0x174>)
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e09f      	b.n	8003218 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fc2b 	bl	8002934 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_DFSDM_ChannelInit+0x178>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_DFSDM_ChannelInit+0x178>)
 80030e6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <HAL_DFSDM_ChannelInit+0x178>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d125      	bne.n	800313c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 80030f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030fa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80030fc:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4948      	ldr	r1, [pc, #288]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a46      	ldr	r2, [pc, #280]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 8003110:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003114:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	791b      	ldrb	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d108      	bne.n	8003130 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800311e:	4b42      	ldr	r3, [pc, #264]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	493f      	ldr	r1, [pc, #252]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_DFSDM_ChannelInit+0x17c>)
 8003136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800313a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800314a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800315a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003160:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020f 	bic.w	r2, r2, #15
 8003178:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80031a0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 0207 	and.w	r2, r2, #7
 80031cc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f9ea 	bl	80035e0 <DFSDM_GetChannelFromInstance>
 800320c:	4602      	mov	r2, r0
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_DFSDM_ChannelInit+0x174>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000b824 	.word	0x2000b824
 8003224:	2000b820 	.word	0x2000b820
 8003228:	40016000 	.word	0x40016000

0800322c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0ca      	b.n	80033d4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_DFSDM_FilterInit+0x1b0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d109      	bne.n	800325c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800324c:	2b01      	cmp	r3, #1
 800324e:	d003      	beq.n	8003258 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0bb      	b.n	80033d4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fab3 	bl	80027e0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003288:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7a1b      	ldrb	r3, [r3, #8]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e007      	b.n	80032b4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80032b2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7a5b      	ldrb	r3, [r3, #9]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e007      	b.n	80032de <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80032ec:	f023 0308 	bic.w	r3, r3, #8
 80032f0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d108      	bne.n	800330c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7c1b      	ldrb	r3, [r3, #16]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0210 	orr.w	r2, r2, #16
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0210 	bic.w	r2, r2, #16
 8003334:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7c5b      	ldrb	r3, [r3, #17]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e007      	b.n	8003360 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0220 	bic.w	r2, r2, #32
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800336e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003372:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6959      	ldr	r1, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003386:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800338e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7c1a      	ldrb	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40016100 	.word	0x40016100

080033e0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02e      	beq.n	8003458 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003400:	2bff      	cmp	r3, #255	; 0xff
 8003402:	d029      	beq.n	8003458 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10d      	bne.n	800343a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e00a      	b.n	8003450 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
 8003456:	e001      	b.n	800345c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
}
 800345e:	4618      	mov	r0, r3
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
 800348c:	e064      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349c:	d002      	beq.n	80034a4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
 80034a2:	e059      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10e      	bne.n	80034ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
 80034c8:	e046      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d102      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
 80034e8:	e036      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d004      	beq.n	80034fe <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d12a      	bne.n	8003554 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003504:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003514:	2b20      	cmp	r3, #32
 8003516:	d101      	bne.n	800351c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800351a:	e000      	b.n	800351e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800351c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	331c      	adds	r3, #28
 800352e:	4619      	mov	r1, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f000 f9ae 	bl	8003894 <HAL_DMA_Start_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800354a:	e005      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f893 	bl	8003678 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003552:	e001      	b.n	8003558 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003558:	7dfb      	ldrb	r3, [r7, #23]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	080035a1 	.word	0x080035a1
 8003568:	080035bd 	.word	0x080035bd
 800356c:	08003585 	.word	0x08003585

08003570 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7fe fff2 	bl	800257c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff f802 	bl	80025b8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2203      	movs	r2, #3
 80035ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff ffcd 	bl	8003570 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <DFSDM_GetChannelFromInstance+0x7c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d102      	bne.n	80035f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e02b      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <DFSDM_GetChannelFromInstance+0x80>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d102      	bne.n	8003604 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e024      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <DFSDM_GetChannelFromInstance+0x84>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800360c:	2302      	movs	r3, #2
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e01d      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <DFSDM_GetChannelFromInstance+0x88>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d102      	bne.n	8003620 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800361a:	2304      	movs	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e016      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <DFSDM_GetChannelFromInstance+0x8c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003628:	2305      	movs	r3, #5
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e00f      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <DFSDM_GetChannelFromInstance+0x90>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d102      	bne.n	800363c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003636:	2306      	movs	r3, #6
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e008      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <DFSDM_GetChannelFromInstance+0x94>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003644:	2307      	movs	r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e001      	b.n	800364e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800364a:	2303      	movs	r3, #3
 800364c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40016000 	.word	0x40016000
 8003660:	40016020 	.word	0x40016020
 8003664:	40016040 	.word	0x40016040
 8003668:	40016080 	.word	0x40016080
 800366c:	400160a0 	.word	0x400160a0
 8003670:	400160c0 	.word	0x400160c0
 8003674:	400160e0 	.word	0x400160e0

08003678 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e033      	b.n	8003702 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036b8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d116      	bne.n	8003702 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0202 	orr.w	r2, r2, #2
 80036ea:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <DFSDM_RegConvStart+0x84>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	e000      	b.n	80036fe <DFSDM_RegConvStart+0x86>
 80036fc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <DFSDM_RegConvStart+0x98>
 800370c:	2202      	movs	r2, #2
 800370e:	e000      	b.n	8003712 <DFSDM_RegConvStart+0x9a>
 8003710:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e098      	b.n	8003868 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_DMA_Init+0x150>)
 800373e:	429a      	cmp	r2, r3
 8003740:	d80f      	bhi.n	8003762 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_DMA_Init+0x154>)
 800374a:	4413      	add	r3, r2
 800374c:	4a4b      	ldr	r2, [pc, #300]	; (800387c <HAL_DMA_Init+0x158>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a48      	ldr	r2, [pc, #288]	; (8003880 <HAL_DMA_Init+0x15c>)
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
 8003760:	e00e      	b.n	8003780 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <HAL_DMA_Init+0x160>)
 800376a:	4413      	add	r3, r2
 800376c:	4a43      	ldr	r2, [pc, #268]	; (800387c <HAL_DMA_Init+0x158>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a42      	ldr	r2, [pc, #264]	; (8003888 <HAL_DMA_Init+0x164>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d039      	beq.n	8003850 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_DMA_Init+0x15c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d11a      	bne.n	800381c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_DMA_Init+0x168>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f003 031c 	and.w	r3, r3, #28
 80037f2:	210f      	movs	r1, #15
 80037f4:	fa01 f303 	lsl.w	r3, r1, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	4924      	ldr	r1, [pc, #144]	; (800388c <HAL_DMA_Init+0x168>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_DMA_Init+0x168>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f003 031c 	and.w	r3, r3, #28
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	491d      	ldr	r1, [pc, #116]	; (800388c <HAL_DMA_Init+0x168>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
 800381a:	e019      	b.n	8003850 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_DMA_Init+0x16c>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 031c 	and.w	r3, r3, #28
 8003828:	210f      	movs	r1, #15
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	4917      	ldr	r1, [pc, #92]	; (8003890 <HAL_DMA_Init+0x16c>)
 8003832:	4013      	ands	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_DMA_Init+0x16c>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 031c 	and.w	r3, r3, #28
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	4911      	ldr	r1, [pc, #68]	; (8003890 <HAL_DMA_Init+0x16c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40020407 	.word	0x40020407
 8003878:	bffdfff8 	.word	0xbffdfff8
 800387c:	cccccccd 	.word	0xcccccccd
 8003880:	40020000 	.word	0x40020000
 8003884:	bffdfbf8 	.word	0xbffdfbf8
 8003888:	40020400 	.word	0x40020400
 800388c:	400200a8 	.word	0x400200a8
 8003890:	400204a8 	.word	0x400204a8

08003894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_DMA_Start_IT+0x20>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e04b      	b.n	800394c <HAL_DMA_Start_IT+0xb8>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d13a      	bne.n	800393e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f95f 	bl	8003bb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 020e 	orr.w	r2, r2, #14
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 020a 	orr.w	r2, r2, #10
 800392a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e005      	b.n	800394a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003946:	2302      	movs	r3, #2
 8003948:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d008      	beq.n	800397e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2204      	movs	r2, #4
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e022      	b.n	80039c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 020e 	bic.w	r2, r2, #14
 800398c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f003 021c 	and.w	r2, r3, #28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d005      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2204      	movs	r2, #4
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e029      	b.n	8003a48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020e 	bic.w	r2, r2, #14
 8003a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	f003 021c 	and.w	r2, r3, #28
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
    }
  }
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f003 031c 	and.w	r3, r3, #28
 8003a72:	2204      	movs	r2, #4
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d026      	beq.n	8003acc <HAL_DMA_IRQHandler+0x7a>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d021      	beq.n	8003acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0204 	bic.w	r2, r2, #4
 8003aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f003 021c 	and.w	r2, r3, #28
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d071      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003aca:	e06c      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 031c 	and.w	r3, r3, #28
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02e      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xec>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d029      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 020a 	bic.w	r2, r2, #10
 8003b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f003 021c 	and.w	r2, r3, #28
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d038      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b3c:	e033      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 031c 	and.w	r3, r3, #28
 8003b46:	2208      	movs	r2, #8
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x156>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d025      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020e 	bic.w	r2, r2, #14
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f003 021c 	and.w	r2, r3, #28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
}
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 021c 	and.w	r2, r3, #28
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d108      	bne.n	8003bf4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bf2:	e007      	b.n	8003c04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1e:	e17f      	b.n	8003f20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8171 	beq.w	8003f1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d005      	beq.n	8003c50 <HAL_GPIO_Init+0x40>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d130      	bne.n	8003cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c86:	2201      	movs	r2, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0201 	and.w	r2, r3, #1
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d118      	bne.n	8003cf0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f003 0201 	and.w	r2, r3, #1
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d017      	beq.n	8003d2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d123      	bne.n	8003d80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	08da      	lsrs	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	6939      	ldr	r1, [r7, #16]
 8003d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0203 	and.w	r2, r3, #3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80ac 	beq.w	8003f1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <HAL_GPIO_Init+0x330>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	4a5e      	ldr	r2, [pc, #376]	; (8003f40 <HAL_GPIO_Init+0x330>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dce:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <HAL_GPIO_Init+0x330>)
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dda:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_GPIO_Init+0x334>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e04:	d025      	beq.n	8003e52 <HAL_GPIO_Init+0x242>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	; (8003f48 <HAL_GPIO_Init+0x338>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <HAL_GPIO_Init+0x23e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <HAL_GPIO_Init+0x33c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_GPIO_Init+0x23a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4d      	ldr	r2, [pc, #308]	; (8003f50 <HAL_GPIO_Init+0x340>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_GPIO_Init+0x236>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4c      	ldr	r2, [pc, #304]	; (8003f54 <HAL_GPIO_Init+0x344>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00d      	beq.n	8003e42 <HAL_GPIO_Init+0x232>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	; (8003f58 <HAL_GPIO_Init+0x348>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x22e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4a      	ldr	r2, [pc, #296]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_GPIO_Init+0x22a>
 8003e36:	2306      	movs	r3, #6
 8003e38:	e00c      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00a      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e3e:	2305      	movs	r3, #5
 8003e40:	e008      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e42:	2304      	movs	r3, #4
 8003e44:	e006      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e46:	2303      	movs	r3, #3
 8003e48:	e004      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e52:	2300      	movs	r3, #0
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	f002 0203 	and.w	r2, r2, #3
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	4093      	lsls	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e64:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_GPIO_Init+0x334>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e96:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e9c:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f14:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <HAL_GPIO_Init+0x350>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f47f ae78 	bne.w	8003c20 <HAL_GPIO_Init+0x10>
  }
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010000 	.word	0x40010000
 8003f48:	48000400 	.word	0x48000400
 8003f4c:	48000800 	.word	0x48000800
 8003f50:	48000c00 	.word	0x48000c00
 8003f54:	48001000 	.word	0x48001000
 8003f58:	48001400 	.word	0x48001400
 8003f5c:	48001800 	.word	0x48001800
 8003f60:	40010400 	.word	0x40010400

08003f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
 8003f70:	4613      	mov	r3, r2
 8003f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f74:	787b      	ldrb	r3, [r7, #1]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f80:	e002      	b.n	8003f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <HAL_PWREx_GetVoltageRange+0x18>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000

08003fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbe:	d130      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc0:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fcc:	d038      	beq.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2232      	movs	r2, #50	; 0x32
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9b      	lsrs	r3, r3, #18
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff4:	e002      	b.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004008:	d102      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f2      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401c:	d110      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e00f      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d007      	beq.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004038:	4a05      	ldr	r2, [pc, #20]	; (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40007000 	.word	0x40007000
 8004054:	20000014 	.word	0x20000014
 8004058:	431bde83 	.word	0x431bde83

0800405c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e3ca      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406e:	4b97      	ldr	r3, [pc, #604]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004078:	4b94      	ldr	r3, [pc, #592]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80e4 	beq.w	8004258 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4a>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f040 808b 	bne.w	80041b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	f040 8087 	bne.w	80041b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e3a2      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	4b82      	ldr	r3, [pc, #520]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_RCC_OscConfig+0x7c>
 80040ce:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d6:	e005      	b.n	80040e4 <HAL_RCC_OscConfig+0x88>
 80040d8:	4b7c      	ldr	r3, [pc, #496]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d223      	bcs.n	8004130 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fd55 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e383      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a72      	ldr	r2, [pc, #456]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004102:	f043 0308 	orr.w	r3, r3, #8
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b70      	ldr	r3, [pc, #448]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	496d      	ldr	r1, [pc, #436]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800411a:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	4968      	ldr	r1, [pc, #416]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
 800412e:	e025      	b.n	800417c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004130:	4b66      	ldr	r3, [pc, #408]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a65      	ldr	r2, [pc, #404]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004136:	f043 0308 	orr.w	r3, r3, #8
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b63      	ldr	r3, [pc, #396]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4960      	ldr	r1, [pc, #384]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	495b      	ldr	r1, [pc, #364]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd15 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e343      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800417c:	f000 fc4a 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	4950      	ldr	r1, [pc, #320]	; (80042d0 <HAL_RCC_OscConfig+0x274>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
 8004198:	4a4e      	ldr	r2, [pc, #312]	; (80042d4 <HAL_RCC_OscConfig+0x278>)
 800419a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800419c:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <HAL_RCC_OscConfig+0x27c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fe15 	bl	8002dd0 <HAL_InitTick>
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d052      	beq.n	8004256 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	e327      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d032      	beq.n	8004222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041bc:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a42      	ldr	r2, [pc, #264]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041c8:	f7fe fe52 	bl	8002e70 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d0:	f7fe fe4e 	bl	8002e70 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e310      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e2:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a36      	ldr	r2, [pc, #216]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4931      	ldr	r1, [pc, #196]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800420c:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	492c      	ldr	r1, [pc, #176]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e01a      	b.n	8004258 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a29      	ldr	r2, [pc, #164]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800422e:	f7fe fe1f 	bl	8002e70 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004236:	f7fe fe1b 	bl	8002e70 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e2dd      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x1da>
 8004254:	e000      	b.n	8004258 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d074      	beq.n	800434e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d005      	beq.n	8004276 <HAL_RCC_OscConfig+0x21a>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d10e      	bne.n	800428e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d10b      	bne.n	800428e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d064      	beq.n	800434c <HAL_RCC_OscConfig+0x2f0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d160      	bne.n	800434c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e2ba      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x24a>
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 800429e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e026      	b.n	80042f4 <HAL_RCC_OscConfig+0x298>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ae:	d115      	bne.n	80042dc <HAL_RCC_OscConfig+0x280>
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a05      	ldr	r2, [pc, #20]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80042b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a02      	ldr	r2, [pc, #8]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x298>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	0800cde0 	.word	0x0800cde0
 80042d4:	20000014 	.word	0x20000014
 80042d8:	20000018 	.word	0x20000018
 80042dc:	4ba0      	ldr	r3, [pc, #640]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9f      	ldr	r2, [pc, #636]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b9d      	ldr	r3, [pc, #628]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a9c      	ldr	r2, [pc, #624]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe fdb8 	bl	8002e70 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fe fdb4 	bl	8002e70 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e276      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	4b92      	ldr	r3, [pc, #584]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x2a8>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe fda4 	bl	8002e70 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fe fda0 	bl	8002e70 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e262      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x2d0>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d060      	beq.n	800441c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d005      	beq.n	800436c <HAL_RCC_OscConfig+0x310>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d119      	bne.n	800439a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d116      	bne.n	800439a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436c:	4b7c      	ldr	r3, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_OscConfig+0x328>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e23f      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	4973      	ldr	r1, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	e040      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a2:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6e      	ldr	r2, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fe fd5f 	bl	8002e70 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fe fd5b 	bl	8002e70 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e21d      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	495f      	ldr	r1, [pc, #380]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e018      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5c      	ldr	r2, [pc, #368]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fd3b 	bl	8002e70 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fe fd37 	bl	8002e70 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1f9      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004410:	4b53      	ldr	r3, [pc, #332]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01c      	beq.n	800446a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	4a4a      	ldr	r2, [pc, #296]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe fd16 	bl	8002e70 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004448:	f7fe fd12 	bl	8002e70 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1d4      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCC_OscConfig+0x3ec>
 8004468:	e01b      	b.n	80044a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446a:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004470:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fe fcf9 	bl	8002e70 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fe fcf5 	bl	8002e70 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1b7      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ef      	bne.n	8004482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	4a26      	ldr	r2, [pc, #152]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d8:	2301      	movs	r3, #1
 80044da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <HAL_RCC_OscConfig+0x508>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d118      	bne.n	800451a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <HAL_RCC_OscConfig+0x508>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_RCC_OscConfig+0x508>)
 80044ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f4:	f7fe fcbc 	bl	8002e70 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fc:	f7fe fcb8 	bl	8002e70 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e17a      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0x508>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d8>
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004532:	e029      	b.n	8004588 <HAL_RCC_OscConfig+0x52c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d115      	bne.n	8004568 <HAL_RCC_OscConfig+0x50c>
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	4a03      	ldr	r2, [pc, #12]	; (8004560 <HAL_RCC_OscConfig+0x504>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455c:	e014      	b.n	8004588 <HAL_RCC_OscConfig+0x52c>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
 8004568:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	4a9b      	ldr	r2, [pc, #620]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004578:	4b98      	ldr	r3, [pc, #608]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	4a97      	ldr	r2, [pc, #604]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d016      	beq.n	80045be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe fc6e 	bl	8002e70 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fe fc6a 	bl	8002e70 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e12a      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	4b8b      	ldr	r3, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ed      	beq.n	8004598 <HAL_RCC_OscConfig+0x53c>
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fe fc57 	bl	8002e70 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fe fc53 	bl	8002e70 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e113      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045dc:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ed      	bne.n	80045c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	4a79      	ldr	r2, [pc, #484]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80fe 	beq.w	8004802 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2b02      	cmp	r3, #2
 800460c:	f040 80d0 	bne.w	80047b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004610:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d130      	bne.n	8004686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	3b01      	subs	r3, #1
 8004630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d127      	bne.n	8004686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d11f      	bne.n	8004686 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	2a07      	cmp	r2, #7
 8004652:	bf14      	ite	ne
 8004654:	2201      	movne	r2, #1
 8004656:	2200      	moveq	r2, #0
 8004658:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800465a:	4293      	cmp	r3, r2
 800465c:	d113      	bne.n	8004686 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d109      	bne.n	8004686 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d06e      	beq.n	8004764 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d069      	beq.n	8004760 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800468c:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004698:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0ad      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046a8:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80046ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046b4:	f7fe fbdc 	bl	8002e70 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fe fbd8 	bl	8002e70 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e09a      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046da:	4b40      	ldr	r3, [pc, #256]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <HAL_RCC_OscConfig+0x784>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046ea:	3a01      	subs	r2, #1
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f4:	0212      	lsls	r2, r2, #8
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046fc:	0852      	lsrs	r2, r2, #1
 80046fe:	3a01      	subs	r2, #1
 8004700:	0552      	lsls	r2, r2, #21
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0652      	lsls	r2, r2, #25
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004714:	0912      	lsrs	r2, r2, #4
 8004716:	0452      	lsls	r2, r2, #17
 8004718:	430a      	orrs	r2, r1
 800471a:	4930      	ldr	r1, [pc, #192]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800471c:	4313      	orrs	r3, r2
 800471e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004720:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004738:	f7fe fb9a 	bl	8002e70 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe fb96 	bl	8002e70 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e058      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800475e:	e050      	b.n	8004802 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e04f      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d148      	bne.n	8004802 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800477c:	4b17      	ldr	r3, [pc, #92]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004788:	f7fe fb72 	bl	8002e70 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fb6e 	bl	8002e70 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e030      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x734>
 80047ae:	e028      	b.n	8004802 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d023      	beq.n	80047fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_RCC_OscConfig+0x780>)
 80047bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fe fb55 	bl	8002e70 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c8:	e00c      	b.n	80047e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe fb51 	bl	8002e70 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d905      	bls.n	80047e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e013      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
 80047dc:	40021000 	.word	0x40021000
 80047e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCC_OscConfig+0x7b0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ec      	bne.n	80047ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_OscConfig+0x7b0>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4905      	ldr	r1, [pc, #20]	; (800480c <HAL_RCC_OscConfig+0x7b0>)
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x7b4>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	60cb      	str	r3, [r1, #12]
 80047fc:	e001      	b.n	8004802 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	feeefffc 	.word	0xfeeefffc

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0e7      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d910      	bls.n	8004858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	4970      	ldr	r1, [pc, #448]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b6e      	ldr	r3, [pc, #440]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0cf      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004870:	429a      	cmp	r2, r3
 8004872:	d908      	bls.n	8004886 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4960      	ldr	r1, [pc, #384]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04c      	beq.n	800492c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489a:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d121      	bne.n	80048ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0a6      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d115      	bne.n	80048ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e09a      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ca:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e08e      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048da:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e086      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b46      	ldr	r3, [pc, #280]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4943      	ldr	r1, [pc, #268]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fc:	f7fe fab8 	bl	8002e70 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fe fab4 	bl	8002e70 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e06e      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b3a      	ldr	r3, [pc, #232]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004944:	429a      	cmp	r2, r3
 8004946:	d208      	bcs.n	800495a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	492b      	ldr	r1, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d210      	bcs.n	800498a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 0207 	bic.w	r2, r3, #7
 8004970:	4923      	ldr	r1, [pc, #140]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_RCC_ClockConfig+0x1ec>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e036      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4918      	ldr	r1, [pc, #96]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4910      	ldr	r1, [pc, #64]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c8:	f000 f824 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	490b      	ldr	r1, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1f4>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_RCC_ClockConfig+0x1f8>)
 80049e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1fc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe f9ef 	bl	8002dd0 <HAL_InitTick>
 80049f2:	4603      	mov	r3, r0
 80049f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80049f6:	7afb      	ldrb	r3, [r7, #11]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40022000 	.word	0x40022000
 8004a04:	40021000 	.word	0x40021000
 8004a08:	0800cde0 	.word	0x0800cde0
 8004a0c:	20000014 	.word	0x20000014
 8004a10:	20000018 	.word	0x20000018

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d121      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d11e      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a48:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e005      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a64:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10d      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	e004      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a98:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d134      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0xa6>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ab8:	e005      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004abc:	617b      	str	r3, [r7, #20]
      break;
 8004abe:	e005      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ac2:	617b      	str	r3, [r7, #20]
      break;
 8004ac4:	e002      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	617b      	str	r3, [r7, #20]
      break;
 8004aca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	fb03 f202 	mul.w	r2, r3, r2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	0e5b      	lsrs	r3, r3, #25
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	3301      	adds	r3, #1
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3724      	adds	r7, #36	; 0x24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	0800cdf8 	.word	0x0800cdf8
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000014 	.word	0x20000014

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4904      	ldr	r1, [pc, #16]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	0800cdf0 	.word	0x0800cdf0

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b74:	f7ff ffda 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0adb      	lsrs	r3, r3, #11
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800cdf0 	.word	0x0800cdf0

08004b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bb4:	f7ff f9ee 	bl	8003f94 <HAL_PWREx_GetVoltageRange>
 8004bb8:	6178      	str	r0, [r7, #20]
 8004bba:	e014      	b.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc8:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bd4:	f7ff f9de 	bl	8003f94 <HAL_PWREx_GetVoltageRange>
 8004bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d10b      	bne.n	8004c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b80      	cmp	r3, #128	; 0x80
 8004bf2:	d919      	bls.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8004bf8:	d902      	bls.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e013      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c00:	2301      	movs	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	e010      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d902      	bls.n	8004c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	e00a      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b80      	cmp	r3, #128	; 0x80
 8004c16:	d102      	bne.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c18:	2302      	movs	r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e004      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b70      	cmp	r3, #112	; 0x70
 8004c22:	d101      	bne.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c24:	2301      	movs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 0207 	bic.w	r2, r3, #7
 8004c30:	4909      	ldr	r1, [pc, #36]	; (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40022000 	.word	0x40022000

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c68:	2300      	movs	r3, #0
 8004c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d041      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c80:	d02a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c86:	d824      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c92:	d81e      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d010      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c9e:	e018      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ca0:	4b86      	ldr	r3, [pc, #536]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a85      	ldr	r2, [pc, #532]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cac:	e015      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fabb 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cbe:	e00c      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3320      	adds	r3, #32
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fba6 	bl	8005418 <RCCEx_PLLSAI2_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004cd6:	e000      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ce0:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	4973      	ldr	r1, [pc, #460]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d041      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d10:	d02a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d16:	d824      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d1c:	d008      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d22:	d81e      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d2e:	e018      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d30:	4b62      	ldr	r3, [pc, #392]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a61      	ldr	r2, [pc, #388]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d3c:	e015      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa73 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d4e:	e00c      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3320      	adds	r3, #32
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb5e 	bl	8005418 <RCCEx_PLLSAI2_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	74fb      	strb	r3, [r7, #19]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d70:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7e:	494f      	ldr	r1, [pc, #316]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d86:	e001      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80a0 	beq.w	8004eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3a      	ldr	r2, [pc, #232]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ddc:	f7fe f848 	bl	8002e70 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de2:	e009      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de4:	f7fe f844 	bl	8002e70 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d902      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	74fb      	strb	r3, [r7, #19]
        break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ef      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d15c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d019      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e28:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e34:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d016      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fe f803 	bl	8002e70 <HAL_GetTick>
 8004e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6c:	e00b      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fd ffff 	bl	8002e70 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d902      	bls.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	74fb      	strb	r3, [r7, #19]
            break;
 8004e84:	e006      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ec      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e94:	7cfb      	ldrb	r3, [r7, #19]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	4904      	ldr	r1, [pc, #16]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
 8004eb8:	e006      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec8:	7c7b      	ldrb	r3, [r7, #17]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ece:	4b9e      	ldr	r3, [pc, #632]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	4a9d      	ldr	r2, [pc, #628]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ee6:	4b98      	ldr	r3, [pc, #608]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f023 0203 	bic.w	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	4994      	ldr	r1, [pc, #592]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f08:	4b8f      	ldr	r3, [pc, #572]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 020c 	bic.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	498c      	ldr	r1, [pc, #560]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f2a:	4b87      	ldr	r3, [pc, #540]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	4983      	ldr	r1, [pc, #524]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f4c:	4b7e      	ldr	r3, [pc, #504]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	497b      	ldr	r1, [pc, #492]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	4972      	ldr	r1, [pc, #456]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f90:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	496a      	ldr	r1, [pc, #424]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb2:	4b65      	ldr	r3, [pc, #404]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	4961      	ldr	r1, [pc, #388]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fd4:	4b5c      	ldr	r3, [pc, #368]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	4959      	ldr	r1, [pc, #356]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ff6:	4b54      	ldr	r3, [pc, #336]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	4950      	ldr	r1, [pc, #320]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	4948      	ldr	r1, [pc, #288]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800503a:	4b43      	ldr	r3, [pc, #268]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	493f      	ldr	r1, [pc, #252]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d028      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800505c:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506a:	4937      	ldr	r1, [pc, #220]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800507a:	d106      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800507c:	4b32      	ldr	r3, [pc, #200]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a31      	ldr	r2, [pc, #196]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005086:	60d3      	str	r3, [r2, #12]
 8005088:	e011      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005092:	d10c      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f8c8 	bl	8005230 <RCCEx_PLLSAI1_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d028      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050ba:	4b23      	ldr	r3, [pc, #140]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	491f      	ldr	r1, [pc, #124]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d8:	d106      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050e4:	60d3      	str	r3, [r2, #12]
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050f0:	d10c      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2101      	movs	r1, #1
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f899 	bl	8005230 <RCCEx_PLLSAI1_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d02b      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	4908      	ldr	r1, [pc, #32]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005136:	d109      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a02      	ldr	r2, [pc, #8]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
 8005144:	e014      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f867 	bl	8005230 <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800517c:	4b2b      	ldr	r3, [pc, #172]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	4928      	ldr	r1, [pc, #160]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519a:	d10d      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f844 	bl	8005230 <RCCEx_PLLSAI1_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	74bb      	strb	r3, [r7, #18]
 80051b6:	e011      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3320      	adds	r3, #32
 80051c6:	2102      	movs	r1, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f925 	bl	8005418 <RCCEx_PLLSAI2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051e8:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f6:	490d      	ldr	r1, [pc, #52]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800520a:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	4904      	ldr	r1, [pc, #16]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005222:	7cbb      	ldrb	r3, [r7, #18]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000

08005230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800523e:	4b75      	ldr	r3, [pc, #468]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800524a:	4b72      	ldr	r3, [pc, #456]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0203 	and.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d10d      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
       ||
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005262:	4b6c      	ldr	r3, [pc, #432]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
       ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d047      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e044      	b.n	8005306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d018      	beq.n	80052b6 <RCCEx_PLLSAI1_Config+0x86>
 8005284:	2b03      	cmp	r3, #3
 8005286:	d825      	bhi.n	80052d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005288:	2b01      	cmp	r3, #1
 800528a:	d002      	beq.n	8005292 <RCCEx_PLLSAI1_Config+0x62>
 800528c:	2b02      	cmp	r3, #2
 800528e:	d009      	beq.n	80052a4 <RCCEx_PLLSAI1_Config+0x74>
 8005290:	e020      	b.n	80052d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005292:	4b60      	ldr	r3, [pc, #384]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11d      	bne.n	80052da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a2:	e01a      	b.n	80052da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a4:	4b5b      	ldr	r3, [pc, #364]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b4:	e013      	b.n	80052de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b6:	4b57      	ldr	r3, [pc, #348]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052c2:	4b54      	ldr	r3, [pc, #336]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052d2:	e006      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
      break;
 80052d8:	e004      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052da:	bf00      	nop
 80052dc:	e002      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ea:	4b4a      	ldr	r3, [pc, #296]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	430b      	orrs	r3, r1
 8005300:	4944      	ldr	r1, [pc, #272]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d17d      	bne.n	8005408 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800530c:	4b41      	ldr	r3, [pc, #260]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a40      	ldr	r2, [pc, #256]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005318:	f7fd fdaa 	bl	8002e70 <HAL_GetTick>
 800531c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800531e:	e009      	b.n	8005334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005320:	f7fd fda6 	bl	8002e70 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d902      	bls.n	8005334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	73fb      	strb	r3, [r7, #15]
        break;
 8005332:	e005      	b.n	8005340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005334:	4b37      	ldr	r3, [pc, #220]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ef      	bne.n	8005320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d160      	bne.n	8005408 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68d2      	ldr	r2, [r2, #12]
 8005362:	0912      	lsrs	r2, r2, #4
 8005364:	0452      	lsls	r2, r2, #17
 8005366:	430a      	orrs	r2, r1
 8005368:	492a      	ldr	r1, [pc, #168]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]
 800536e:	e027      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d112      	bne.n	800539c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800537e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6892      	ldr	r2, [r2, #8]
 8005386:	0211      	lsls	r1, r2, #8
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6912      	ldr	r2, [r2, #16]
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	3a01      	subs	r2, #1
 8005390:	0552      	lsls	r2, r2, #21
 8005392:	430a      	orrs	r2, r1
 8005394:	491f      	ldr	r1, [pc, #124]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	610b      	str	r3, [r1, #16]
 800539a:	e011      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	0211      	lsls	r1, r2, #8
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6952      	ldr	r2, [r2, #20]
 80053b2:	0852      	lsrs	r2, r2, #1
 80053b4:	3a01      	subs	r2, #1
 80053b6:	0652      	lsls	r2, r2, #25
 80053b8:	430a      	orrs	r2, r1
 80053ba:	4916      	ldr	r1, [pc, #88]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fd fd50 	bl	8002e70 <HAL_GetTick>
 80053d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d2:	e009      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d4:	f7fd fd4c 	bl	8002e70 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d902      	bls.n	80053e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	73fb      	strb	r3, [r7, #15]
          break;
 80053e6:	e005      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	4904      	ldr	r1, [pc, #16]	; (8005414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000

08005418 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005432:	4b67      	ldr	r3, [pc, #412]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0203 	and.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d10d      	bne.n	800545e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
       ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800544a:	4b61      	ldr	r3, [pc, #388]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
       ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d047      	beq.n	80054ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	e044      	b.n	80054ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d018      	beq.n	800549e <RCCEx_PLLSAI2_Config+0x86>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d825      	bhi.n	80054bc <RCCEx_PLLSAI2_Config+0xa4>
 8005470:	2b01      	cmp	r3, #1
 8005472:	d002      	beq.n	800547a <RCCEx_PLLSAI2_Config+0x62>
 8005474:	2b02      	cmp	r3, #2
 8005476:	d009      	beq.n	800548c <RCCEx_PLLSAI2_Config+0x74>
 8005478:	e020      	b.n	80054bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800547a:	4b55      	ldr	r3, [pc, #340]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11d      	bne.n	80054c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800548a:	e01a      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800548c:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549c:	e013      	b.n	80054c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800549e:	4b4c      	ldr	r3, [pc, #304]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10f      	bne.n	80054ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054aa:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ba:	e006      	b.n	80054ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e004      	b.n	80054cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	430b      	orrs	r3, r1
 80054e8:	4939      	ldr	r1, [pc, #228]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d167      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054f4:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a35      	ldr	r2, [pc, #212]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fd fcb6 	bl	8002e70 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005506:	e009      	b.n	800551c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005508:	f7fd fcb2 	bl	8002e70 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	73fb      	strb	r3, [r7, #15]
        break;
 800551a:	e005      	b.n	8005528 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ef      	bne.n	8005508 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d14a      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d111      	bne.n	8005558 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800553c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6892      	ldr	r2, [r2, #8]
 8005544:	0211      	lsls	r1, r2, #8
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68d2      	ldr	r2, [r2, #12]
 800554a:	0912      	lsrs	r2, r2, #4
 800554c:	0452      	lsls	r2, r2, #17
 800554e:	430a      	orrs	r2, r1
 8005550:	491f      	ldr	r1, [pc, #124]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	614b      	str	r3, [r1, #20]
 8005556:	e011      	b.n	800557c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005558:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6892      	ldr	r2, [r2, #8]
 8005568:	0211      	lsls	r1, r2, #8
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6912      	ldr	r2, [r2, #16]
 800556e:	0852      	lsrs	r2, r2, #1
 8005570:	3a01      	subs	r2, #1
 8005572:	0652      	lsls	r2, r2, #25
 8005574:	430a      	orrs	r2, r1
 8005576:	4916      	ldr	r1, [pc, #88]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005586:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fd fc72 	bl	8002e70 <HAL_GetTick>
 800558c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800558e:	e009      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005590:	f7fd fc6e 	bl	8002e70 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d902      	bls.n	80055a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	73fb      	strb	r3, [r7, #15]
          break;
 80055a2:	e005      	b.n	80055b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0ef      	beq.n	8005590 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	4904      	ldr	r1, [pc, #16]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fd fa0a 	bl	8002a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 ff46 	bl	80064ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fc8b 	bl	8005f3c <UART_SetConfig>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01b      	b.n	8005668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 ffc5 	bl	80065f0 <UART_CheckIdleState>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005684:	2b20      	cmp	r3, #32
 8005686:	d178      	bne.n	800577a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Transmit+0x24>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e071      	b.n	800577c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2221      	movs	r2, #33	; 0x21
 80056a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a6:	f7fd fbe3 	bl	8002e70 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c4:	d108      	bne.n	80056d8 <HAL_UART_Transmit+0x68>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e003      	b.n	80056e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056e0:	e030      	b.n	8005744 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2180      	movs	r1, #128	; 0x80
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f001 f827 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e03c      	b.n	800577c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	881a      	ldrh	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005714:	b292      	uxth	r2, r2
 8005716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3302      	adds	r3, #2
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e008      	b.n	8005732 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	b292      	uxth	r2, r2
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1c8      	bne.n	80056e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fff0 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e005      	b.n	800577c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005798:	2b20      	cmp	r3, #32
 800579a:	d137      	bne.n	800580c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Receive_IT+0x24>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e030      	b.n	800580e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_UART_Receive_IT+0x94>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01f      	beq.n	80057fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	613b      	str	r3, [r7, #16]
   return(result);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	461a      	mov	r2, r3
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 f804 	bl	8006810 <UART_Start_Receive_IT>
 8005808:	4603      	mov	r3, r0
 800580a:	e000      	b.n	800580e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40008000 	.word	0x40008000

0800581c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582e:	2b20      	cmp	r3, #32
 8005830:	d165      	bne.n	80058fe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_UART_Transmit_DMA+0x22>
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e05e      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	; 0x21
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	2b00      	cmp	r3, #0
 800586c:	d027      	beq.n	80058be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a25      	ldr	r2, [pc, #148]	; (8005908 <HAL_UART_Transmit_DMA+0xec>)
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <HAL_UART_Transmit_DMA+0xf0>)
 800587c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	4a23      	ldr	r2, [pc, #140]	; (8005910 <HAL_UART_Transmit_DMA+0xf4>)
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	2200      	movs	r2, #0
 800588c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005896:	4619      	mov	r1, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3328      	adds	r3, #40	; 0x28
 800589e:	461a      	mov	r2, r3
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	f7fd fff7 	bl	8003894 <HAL_DMA_Start_IT>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2210      	movs	r2, #16
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e020      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	623a      	str	r2, [r7, #32]
 80058e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80058fe:	2302      	movs	r3, #2
  }
}
 8005900:	4618      	mov	r0, r3
 8005902:	3728      	adds	r7, #40	; 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08006ab1 	.word	0x08006ab1
 800590c:	08006b4b 	.word	0x08006b4b
 8005910:	08006b67 	.word	0x08006b67

08005914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b0ba      	sub	sp, #232	; 0xe8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800593a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800593e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005942:	4013      	ands	r3, r2
 8005944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00f      	beq.n	800597c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 82ae 	beq.w	8005ece <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
      }
      return;
 800597a:	e2a8      	b.n	8005ece <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800597c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8117 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005996:	4b85      	ldr	r3, [pc, #532]	; (8005bac <HAL_UART_IRQHandler+0x298>)
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 810a 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d011      	beq.n	80059d0 <HAL_UART_IRQHandler+0xbc>
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	f043 0201 	orr.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d011      	beq.n	8005a00 <HAL_UART_IRQHandler+0xec>
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2202      	movs	r2, #2
 80059ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f6:	f043 0204 	orr.w	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d011      	beq.n	8005a30 <HAL_UART_IRQHandler+0x11c>
 8005a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	f043 0202 	orr.w	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d017      	beq.n	8005a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a62:	f043 0208 	orr.w	r2, r3, #8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <HAL_UART_IRQHandler+0x18a>
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a94:	f043 0220 	orr.w	r2, r3, #32
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8214 	beq.w	8005ed2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d005      	beq.n	8005af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04f      	beq.n	8005b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 ff76 	bl	80069e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d141      	bne.n	8005b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d9      	bne.n	8005b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <HAL_UART_IRQHandler+0x29c>)
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fd ff30 	bl	80039d0 <HAL_DMA_Abort_IT>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d017      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00f      	b.n	8005ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9c2 	bl	8005f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00b      	b.n	8005ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9be 	bl	8005f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e007      	b.n	8005ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9ba 	bl	8005f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ba4:	e195      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba6:	bf00      	nop
    return;
 8005ba8:	e193      	b.n	8005ed2 <HAL_UART_IRQHandler+0x5be>
 8005baa:	bf00      	nop
 8005bac:	04000120 	.word	0x04000120
 8005bb0:	08006be5 	.word	0x08006be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 814e 	bne.w	8005e5a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8147 	beq.w	8005e5a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8140 	beq.w	8005e5a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2210      	movs	r2, #16
 8005be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	f040 80b8 	bne.w	8005d62 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8167 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f080 815f 	bcs.w	8005ed6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 8086 	bne.w	8005d40 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1da      	bne.n	8005c34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e1      	bne.n	8005c7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e3      	bne.n	8005cba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d10:	f023 0310 	bic.w	r3, r3, #16
 8005d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e4      	bne.n	8005d00 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd fe0a 	bl	8003954 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8e2 	bl	8005f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d60:	e0b9      	b.n	8005ed6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80ab 	beq.w	8005eda <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80a6 	beq.w	8005eda <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
 8005db2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e4      	bne.n	8005d8e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005de8:	633a      	str	r2, [r7, #48]	; 0x30
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e3      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 0310 	bic.w	r3, r3, #16
 8005e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e4      	bne.n	8005e10 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f866 	bl	8005f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e58:	e03f      	b.n	8005eda <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <HAL_UART_IRQHandler+0x570>
 8005e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 f8ad 	bl	8006fdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e82:	e02d      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01c      	beq.n	8005ede <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
    }
    return;
 8005eac:	e017      	b.n	8005ede <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fea2 	bl	8006c10 <UART_EndTransmit_IT>
    return;
 8005ecc:	e008      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005ece:	bf00      	nop
 8005ed0:	e006      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005ed2:	bf00      	nop
 8005ed4:	e004      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005ede:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ee0:	37e8      	adds	r7, #232	; 0xe8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop

08005ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f40:	b08a      	sub	sp, #40	; 0x28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4ba4      	ldr	r3, [pc, #656]	; (80061fc <UART_SetConfig+0x2c0>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a99      	ldr	r2, [pc, #612]	; (8006200 <UART_SetConfig+0x2c4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a90      	ldr	r2, [pc, #576]	; (8006204 <UART_SetConfig+0x2c8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d126      	bne.n	8006014 <UART_SetConfig+0xd8>
 8005fc6:	4b90      	ldr	r3, [pc, #576]	; (8006208 <UART_SetConfig+0x2cc>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d81b      	bhi.n	800600c <UART_SetConfig+0xd0>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0xa0>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff2:	e116      	b.n	8006222 <UART_SetConfig+0x2e6>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffa:	e112      	b.n	8006222 <UART_SetConfig+0x2e6>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006002:	e10e      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600a:	e10a      	b.n	8006222 <UART_SetConfig+0x2e6>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006012:	e106      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a7c      	ldr	r2, [pc, #496]	; (800620c <UART_SetConfig+0x2d0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d138      	bne.n	8006090 <UART_SetConfig+0x154>
 800601e:	4b7a      	ldr	r3, [pc, #488]	; (8006208 <UART_SetConfig+0x2cc>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b0c      	cmp	r3, #12
 800602a:	d82d      	bhi.n	8006088 <UART_SetConfig+0x14c>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <UART_SetConfig+0xf8>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006069 	.word	0x08006069
 8006038:	08006089 	.word	0x08006089
 800603c:	08006089 	.word	0x08006089
 8006040:	08006089 	.word	0x08006089
 8006044:	08006079 	.word	0x08006079
 8006048:	08006089 	.word	0x08006089
 800604c:	08006089 	.word	0x08006089
 8006050:	08006089 	.word	0x08006089
 8006054:	08006071 	.word	0x08006071
 8006058:	08006089 	.word	0x08006089
 800605c:	08006089 	.word	0x08006089
 8006060:	08006089 	.word	0x08006089
 8006064:	08006081 	.word	0x08006081
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e0d8      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006070:	2302      	movs	r3, #2
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e0d4      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e0d0      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e0cc      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608e:	e0c8      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5e      	ldr	r2, [pc, #376]	; (8006210 <UART_SetConfig+0x2d4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d125      	bne.n	80060e6 <UART_SetConfig+0x1aa>
 800609a:	4b5b      	ldr	r3, [pc, #364]	; (8006208 <UART_SetConfig+0x2cc>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d016      	beq.n	80060d6 <UART_SetConfig+0x19a>
 80060a8:	2b30      	cmp	r3, #48	; 0x30
 80060aa:	d818      	bhi.n	80060de <UART_SetConfig+0x1a2>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d00a      	beq.n	80060c6 <UART_SetConfig+0x18a>
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d814      	bhi.n	80060de <UART_SetConfig+0x1a2>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <UART_SetConfig+0x182>
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d008      	beq.n	80060ce <UART_SetConfig+0x192>
 80060bc:	e00f      	b.n	80060de <UART_SetConfig+0x1a2>
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c4:	e0ad      	b.n	8006222 <UART_SetConfig+0x2e6>
 80060c6:	2302      	movs	r3, #2
 80060c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060cc:	e0a9      	b.n	8006222 <UART_SetConfig+0x2e6>
 80060ce:	2304      	movs	r3, #4
 80060d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d4:	e0a5      	b.n	8006222 <UART_SetConfig+0x2e6>
 80060d6:	2308      	movs	r3, #8
 80060d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060dc:	e0a1      	b.n	8006222 <UART_SetConfig+0x2e6>
 80060de:	2310      	movs	r3, #16
 80060e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e4:	e09d      	b.n	8006222 <UART_SetConfig+0x2e6>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4a      	ldr	r2, [pc, #296]	; (8006214 <UART_SetConfig+0x2d8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d125      	bne.n	800613c <UART_SetConfig+0x200>
 80060f0:	4b45      	ldr	r3, [pc, #276]	; (8006208 <UART_SetConfig+0x2cc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060fa:	2bc0      	cmp	r3, #192	; 0xc0
 80060fc:	d016      	beq.n	800612c <UART_SetConfig+0x1f0>
 80060fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006100:	d818      	bhi.n	8006134 <UART_SetConfig+0x1f8>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d00a      	beq.n	800611c <UART_SetConfig+0x1e0>
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d814      	bhi.n	8006134 <UART_SetConfig+0x1f8>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <UART_SetConfig+0x1d8>
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d008      	beq.n	8006124 <UART_SetConfig+0x1e8>
 8006112:	e00f      	b.n	8006134 <UART_SetConfig+0x1f8>
 8006114:	2300      	movs	r3, #0
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611a:	e082      	b.n	8006222 <UART_SetConfig+0x2e6>
 800611c:	2302      	movs	r3, #2
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006122:	e07e      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612a:	e07a      	b.n	8006222 <UART_SetConfig+0x2e6>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006132:	e076      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613a:	e072      	b.n	8006222 <UART_SetConfig+0x2e6>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a35      	ldr	r2, [pc, #212]	; (8006218 <UART_SetConfig+0x2dc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d12a      	bne.n	800619c <UART_SetConfig+0x260>
 8006146:	4b30      	ldr	r3, [pc, #192]	; (8006208 <UART_SetConfig+0x2cc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006154:	d01a      	beq.n	800618c <UART_SetConfig+0x250>
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d81b      	bhi.n	8006194 <UART_SetConfig+0x258>
 800615c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006160:	d00c      	beq.n	800617c <UART_SetConfig+0x240>
 8006162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006166:	d815      	bhi.n	8006194 <UART_SetConfig+0x258>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <UART_SetConfig+0x238>
 800616c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006170:	d008      	beq.n	8006184 <UART_SetConfig+0x248>
 8006172:	e00f      	b.n	8006194 <UART_SetConfig+0x258>
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e052      	b.n	8006222 <UART_SetConfig+0x2e6>
 800617c:	2302      	movs	r3, #2
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006182:	e04e      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618a:	e04a      	b.n	8006222 <UART_SetConfig+0x2e6>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e046      	b.n	8006222 <UART_SetConfig+0x2e6>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e042      	b.n	8006222 <UART_SetConfig+0x2e6>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a17      	ldr	r2, [pc, #92]	; (8006200 <UART_SetConfig+0x2c4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d13a      	bne.n	800621c <UART_SetConfig+0x2e0>
 80061a6:	4b18      	ldr	r3, [pc, #96]	; (8006208 <UART_SetConfig+0x2cc>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b4:	d01a      	beq.n	80061ec <UART_SetConfig+0x2b0>
 80061b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ba:	d81b      	bhi.n	80061f4 <UART_SetConfig+0x2b8>
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c0:	d00c      	beq.n	80061dc <UART_SetConfig+0x2a0>
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c6:	d815      	bhi.n	80061f4 <UART_SetConfig+0x2b8>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <UART_SetConfig+0x298>
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d008      	beq.n	80061e4 <UART_SetConfig+0x2a8>
 80061d2:	e00f      	b.n	80061f4 <UART_SetConfig+0x2b8>
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061da:	e022      	b.n	8006222 <UART_SetConfig+0x2e6>
 80061dc:	2302      	movs	r3, #2
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e01e      	b.n	8006222 <UART_SetConfig+0x2e6>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e01a      	b.n	8006222 <UART_SetConfig+0x2e6>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e016      	b.n	8006222 <UART_SetConfig+0x2e6>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e012      	b.n	8006222 <UART_SetConfig+0x2e6>
 80061fc:	efff69f3 	.word	0xefff69f3
 8006200:	40008000 	.word	0x40008000
 8006204:	40013800 	.word	0x40013800
 8006208:	40021000 	.word	0x40021000
 800620c:	40004400 	.word	0x40004400
 8006210:	40004800 	.word	0x40004800
 8006214:	40004c00 	.word	0x40004c00
 8006218:	40005000 	.word	0x40005000
 800621c:	2310      	movs	r3, #16
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a9f      	ldr	r2, [pc, #636]	; (80064a4 <UART_SetConfig+0x568>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d17a      	bne.n	8006322 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800622c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006230:	2b08      	cmp	r3, #8
 8006232:	d824      	bhi.n	800627e <UART_SetConfig+0x342>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x300>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006261 	.word	0x08006261
 8006240:	0800627f 	.word	0x0800627f
 8006244:	08006269 	.word	0x08006269
 8006248:	0800627f 	.word	0x0800627f
 800624c:	0800626f 	.word	0x0800626f
 8006250:	0800627f 	.word	0x0800627f
 8006254:	0800627f 	.word	0x0800627f
 8006258:	0800627f 	.word	0x0800627f
 800625c:	08006277 	.word	0x08006277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe fc70 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006264:	61f8      	str	r0, [r7, #28]
        break;
 8006266:	e010      	b.n	800628a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006268:	4b8f      	ldr	r3, [pc, #572]	; (80064a8 <UART_SetConfig+0x56c>)
 800626a:	61fb      	str	r3, [r7, #28]
        break;
 800626c:	e00d      	b.n	800628a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626e:	f7fe fbd1 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8006272:	61f8      	str	r0, [r7, #28]
        break;
 8006274:	e009      	b.n	800628a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627a:	61fb      	str	r3, [r7, #28]
        break;
 800627c:	e005      	b.n	800628a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80fb 	beq.w	8006488 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4413      	add	r3, r2
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d305      	bcc.n	80062ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d903      	bls.n	80062b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062b4:	e0e8      	b.n	8006488 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2200      	movs	r2, #0
 80062ba:	461c      	mov	r4, r3
 80062bc:	4615      	mov	r5, r2
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	022b      	lsls	r3, r5, #8
 80062c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062cc:	0222      	lsls	r2, r4, #8
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	6849      	ldr	r1, [r1, #4]
 80062d2:	0849      	lsrs	r1, r1, #1
 80062d4:	2000      	movs	r0, #0
 80062d6:	4688      	mov	r8, r1
 80062d8:	4681      	mov	r9, r0
 80062da:	eb12 0a08 	adds.w	sl, r2, r8
 80062de:	eb43 0b09 	adc.w	fp, r3, r9
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f0:	4650      	mov	r0, sl
 80062f2:	4659      	mov	r1, fp
 80062f4:	f7fa fca8 	bl	8000c48 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4613      	mov	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006306:	d308      	bcc.n	800631a <UART_SetConfig+0x3de>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d204      	bcs.n	800631a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	e0b6      	b.n	8006488 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006320:	e0b2      	b.n	8006488 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632a:	d15e      	bne.n	80063ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800632c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006330:	2b08      	cmp	r3, #8
 8006332:	d828      	bhi.n	8006386 <UART_SetConfig+0x44a>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <UART_SetConfig+0x400>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006361 	.word	0x08006361
 8006340:	08006369 	.word	0x08006369
 8006344:	08006371 	.word	0x08006371
 8006348:	08006387 	.word	0x08006387
 800634c:	08006377 	.word	0x08006377
 8006350:	08006387 	.word	0x08006387
 8006354:	08006387 	.word	0x08006387
 8006358:	08006387 	.word	0x08006387
 800635c:	0800637f 	.word	0x0800637f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006360:	f7fe fbf0 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006364:	61f8      	str	r0, [r7, #28]
        break;
 8006366:	e014      	b.n	8006392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006368:	f7fe fc02 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 800636c:	61f8      	str	r0, [r7, #28]
        break;
 800636e:	e010      	b.n	8006392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006370:	4b4d      	ldr	r3, [pc, #308]	; (80064a8 <UART_SetConfig+0x56c>)
 8006372:	61fb      	str	r3, [r7, #28]
        break;
 8006374:	e00d      	b.n	8006392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006376:	f7fe fb4d 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 800637a:	61f8      	str	r0, [r7, #28]
        break;
 800637c:	e009      	b.n	8006392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006382:	61fb      	str	r3, [r7, #28]
        break;
 8006384:	e005      	b.n	8006392 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d077      	beq.n	8006488 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005a      	lsls	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d916      	bls.n	80063e2 <UART_SetConfig+0x4a6>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ba:	d212      	bcs.n	80063e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f023 030f 	bic.w	r3, r3, #15
 80063c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	8afb      	ldrh	r3, [r7, #22]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	8afa      	ldrh	r2, [r7, #22]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e052      	b.n	8006488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063e8:	e04e      	b.n	8006488 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d827      	bhi.n	8006442 <UART_SetConfig+0x506>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x4bc>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe fb92 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006420:	61f8      	str	r0, [r7, #28]
        break;
 8006422:	e014      	b.n	800644e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fe fba4 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8006428:	61f8      	str	r0, [r7, #28]
        break;
 800642a:	e010      	b.n	800644e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <UART_SetConfig+0x56c>)
 800642e:	61fb      	str	r3, [r7, #28]
        break;
 8006430:	e00d      	b.n	800644e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fe faef 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 8006436:	61f8      	str	r0, [r7, #28]
        break;
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	61fb      	str	r3, [r7, #28]
        break;
 8006440:	e005      	b.n	800644e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800644c:	bf00      	nop
    }

    if (pclk != 0U)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	085a      	lsrs	r2, r3, #1
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	441a      	add	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d909      	bls.n	8006482 <UART_SetConfig+0x546>
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d205      	bcs.n	8006482 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	e002      	b.n	8006488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006498:	4618      	mov	r0, r3
 800649a:	3728      	adds	r7, #40	; 0x28
 800649c:	46bd      	mov	sp, r7
 800649e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a2:	bf00      	nop
 80064a4:	40008000 	.word	0x40008000
 80064a8:	00f42400 	.word	0x00f42400

080064ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01a      	beq.n	80065c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065aa:	d10a      	bne.n	80065c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  }
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b098      	sub	sp, #96	; 0x60
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006600:	f7fc fc36 	bl	8002e70 <HAL_GetTick>
 8006604:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b08      	cmp	r3, #8
 8006612:	d12e      	bne.n	8006672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661c:	2200      	movs	r2, #0
 800661e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f88c 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d021      	beq.n	8006672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006642:	653b      	str	r3, [r7, #80]	; 0x50
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800664c:	647b      	str	r3, [r7, #68]	; 0x44
 800664e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e062      	b.n	8006738 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d149      	bne.n	8006714 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f856 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d03c      	beq.n	8006714 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	623b      	str	r3, [r7, #32]
   return(result);
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b8:	633b      	str	r3, [r7, #48]	; 0x30
 80066ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	60fb      	str	r3, [r7, #12]
   return(result);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0301 	bic.w	r3, r3, #1
 80066e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ec:	61fa      	str	r2, [r7, #28]
 80066ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	617b      	str	r3, [r7, #20]
   return(result);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e011      	b.n	8006738 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3758      	adds	r7, #88	; 0x58
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006750:	e049      	b.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d045      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675a:	f7fc fb89 	bl	8002e70 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d302      	bcc.n	8006770 <UART_WaitOnFlagUntilTimeout+0x30>
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e048      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d031      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b08      	cmp	r3, #8
 800678e:	d110      	bne.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2208      	movs	r2, #8
 8006796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f925 	bl	80069e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2208      	movs	r2, #8
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e029      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d111      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f90b 	bl	80069e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e00f      	b.n	8006806 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	429a      	cmp	r2, r3
 8006802:	d0a6      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006810:	b480      	push	{r7}
 8006812:	b097      	sub	sp, #92	; 0x5c
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	88fa      	ldrh	r2, [r7, #6]
 8006830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d10e      	bne.n	8006862 <UART_Start_Receive_IT+0x52>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <UART_Start_Receive_IT+0x48>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006856:	e02d      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	22ff      	movs	r2, #255	; 0xff
 800685c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006860:	e028      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <UART_Start_Receive_IT+0x76>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <UART_Start_Receive_IT+0x6c>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800687a:	e01b      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	227f      	movs	r2, #127	; 0x7f
 8006880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006884:	e016      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800688e:	d10d      	bne.n	80068ac <UART_Start_Receive_IT+0x9c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <UART_Start_Receive_IT+0x92>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	227f      	movs	r2, #127	; 0x7f
 800689c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068a0:	e008      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	223f      	movs	r2, #63	; 0x3f
 80068a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068aa:	e003      	b.n	80068b4 <UART_Start_Receive_IT+0xa4>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2222      	movs	r2, #34	; 0x22
 80068c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	657b      	str	r3, [r7, #84]	; 0x54
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006900:	d107      	bne.n	8006912 <UART_Start_Receive_IT+0x102>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a21      	ldr	r2, [pc, #132]	; (8006994 <UART_Start_Receive_IT+0x184>)
 800690e:	669a      	str	r2, [r3, #104]	; 0x68
 8006910:	e002      	b.n	8006918 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a20      	ldr	r2, [pc, #128]	; (8006998 <UART_Start_Receive_IT+0x188>)
 8006916:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d019      	beq.n	8006954 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
 8006940:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e6      	bne.n	8006920 <UART_Start_Receive_IT+0x110>
 8006952:	e018      	b.n	8006986 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f043 0320 	orr.w	r3, r3, #32
 8006968:	653b      	str	r3, [r7, #80]	; 0x50
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006972:	623b      	str	r3, [r7, #32]
 8006974:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69f9      	ldr	r1, [r7, #28]
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	375c      	adds	r7, #92	; 0x5c
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	08006e21 	.word	0x08006e21
 8006998:	08006c65 	.word	0x08006c65

0800699c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6979      	ldr	r1, [r7, #20]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80069dc:	bf00      	nop
 80069de:	3724      	adds	r7, #36	; 0x24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b095      	sub	sp, #84	; 0x54
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d118      	bne.n	8006a90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 0310 	bic.w	r3, r3, #16
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6979      	ldr	r1, [r7, #20]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	613b      	str	r3, [r7, #16]
   return(result);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006aa4:	bf00      	nop
 8006aa6:	3754      	adds	r7, #84	; 0x54
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b090      	sub	sp, #64	; 0x40
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d137      	bne.n	8006b3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af4:	633a      	str	r2, [r7, #48]	; 0x30
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	69b9      	ldr	r1, [r7, #24]
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	617b      	str	r3, [r7, #20]
   return(result);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b3a:	e002      	b.n	8006b42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b3e:	f7ff f9d3 	bl	8005ee8 <HAL_UART_TxCpltCallback>
}
 8006b42:	bf00      	nop
 8006b44:	3740      	adds	r7, #64	; 0x40
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff f9cf 	bl	8005efc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8c:	2b80      	cmp	r3, #128	; 0x80
 8006b8e:	d109      	bne.n	8006ba4 <UART_DMAError+0x3e>
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	2b21      	cmp	r3, #33	; 0x21
 8006b94:	d106      	bne.n	8006ba4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006b9e:	6978      	ldr	r0, [r7, #20]
 8006ba0:	f7ff fefc 	bl	800699c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d109      	bne.n	8006bc6 <UART_DMAError+0x60>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b22      	cmp	r3, #34	; 0x22
 8006bb6:	d106      	bne.n	8006bc6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f7ff ff11 	bl	80069e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bcc:	f043 0210 	orr.w	r2, r3, #16
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7ff f99a 	bl	8005f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bdc:	bf00      	nop
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff f984 	bl	8005f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6979      	ldr	r1, [r7, #20]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	613b      	str	r3, [r7, #16]
   return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff f946 	bl	8005ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b09c      	sub	sp, #112	; 0x70
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7c:	2b22      	cmp	r3, #34	; 0x22
 8006c7e:	f040 80be 	bne.w	8006dfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c90:	b2d9      	uxtb	r1, r3
 8006c92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 80a3 	bne.w	8006e12 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e6      	bne.n	8006ccc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	667b      	str	r3, [r7, #100]	; 0x64
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a34      	ldr	r2, [pc, #208]	; (8006e1c <UART_RxISR_8BIT+0x1b8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d01f      	beq.n	8006d90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d018      	beq.n	8006d90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d72:	663b      	str	r3, [r7, #96]	; 0x60
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e6      	bne.n	8006d5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d12e      	bne.n	8006df6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0310 	bic.w	r3, r3, #16
 8006db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e6      	bne.n	8006d9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d103      	bne.n	8006de6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2210      	movs	r2, #16
 8006de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff f898 	bl	8005f24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006df4:	e00d      	b.n	8006e12 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fb fc12 	bl	8002620 <HAL_UART_RxCpltCallback>
}
 8006dfc:	e009      	b.n	8006e12 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	8b1b      	ldrh	r3, [r3, #24]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	831a      	strh	r2, [r3, #24]
}
 8006e12:	bf00      	nop
 8006e14:	3770      	adds	r7, #112	; 0x70
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40008000 	.word	0x40008000

08006e20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b09c      	sub	sp, #112	; 0x70
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e38:	2b22      	cmp	r3, #34	; 0x22
 8006e3a:	f040 80be 	bne.w	8006fba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006e52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006e56:	4013      	ands	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 80a3 	bne.w	8006fce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ea8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eda:	643a      	str	r2, [r7, #64]	; 0x40
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a34      	ldr	r2, [pc, #208]	; (8006fd8 <UART_RxISR_16BIT+0x1b8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d01f      	beq.n	8006f4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d018      	beq.n	8006f4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d12e      	bne.n	8006fb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d103      	bne.n	8006fa2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe ffba 	bl	8005f24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fb0:	e00d      	b.n	8006fce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fb fb34 	bl	8002620 <HAL_UART_RxCpltCallback>
}
 8006fb8:	e009      	b.n	8006fce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	8b1b      	ldrh	r3, [r3, #24]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0208 	orr.w	r2, r2, #8
 8006fca:	b292      	uxth	r2, r2
 8006fcc:	831a      	strh	r2, [r3, #24]
}
 8006fce:	bf00      	nop
 8006fd0:	3770      	adds	r7, #112	; 0x70
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40008000 	.word	0x40008000

08006fdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <arm_fill_f32>:
 8006ff0:	b410      	push	{r4}
 8006ff2:	088c      	lsrs	r4, r1, #2
 8006ff4:	d010      	beq.n	8007018 <arm_fill_f32+0x28>
 8006ff6:	f100 0310 	add.w	r3, r0, #16
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	3a01      	subs	r2, #1
 8006ffe:	ed03 0a04 	vstr	s0, [r3, #-16]
 8007002:	ed03 0a03 	vstr	s0, [r3, #-12]
 8007006:	ed03 0a02 	vstr	s0, [r3, #-8]
 800700a:	ed03 0a01 	vstr	s0, [r3, #-4]
 800700e:	f103 0310 	add.w	r3, r3, #16
 8007012:	d1f3      	bne.n	8006ffc <arm_fill_f32+0xc>
 8007014:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8007018:	f011 0103 	ands.w	r1, r1, #3
 800701c:	d009      	beq.n	8007032 <arm_fill_f32+0x42>
 800701e:	3901      	subs	r1, #1
 8007020:	ed80 0a00 	vstr	s0, [r0]
 8007024:	d005      	beq.n	8007032 <arm_fill_f32+0x42>
 8007026:	2901      	cmp	r1, #1
 8007028:	ed80 0a01 	vstr	s0, [r0, #4]
 800702c:	bf18      	it	ne
 800702e:	ed80 0a02 	vstrne	s0, [r0, #8]
 8007032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007036:	4770      	bx	lr

08007038 <arm_copy_f32>:
 8007038:	b4f0      	push	{r4, r5, r6, r7}
 800703a:	0897      	lsrs	r7, r2, #2
 800703c:	d01d      	beq.n	800707a <arm_copy_f32+0x42>
 800703e:	f100 0410 	add.w	r4, r0, #16
 8007042:	f101 0310 	add.w	r3, r1, #16
 8007046:	463d      	mov	r5, r7
 8007048:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800704c:	f843 6c10 	str.w	r6, [r3, #-16]
 8007050:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8007054:	f843 6c0c 	str.w	r6, [r3, #-12]
 8007058:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800705c:	f843 6c08 	str.w	r6, [r3, #-8]
 8007060:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8007064:	f843 6c04 	str.w	r6, [r3, #-4]
 8007068:	3d01      	subs	r5, #1
 800706a:	f104 0410 	add.w	r4, r4, #16
 800706e:	f103 0310 	add.w	r3, r3, #16
 8007072:	d1e9      	bne.n	8007048 <arm_copy_f32+0x10>
 8007074:	013f      	lsls	r7, r7, #4
 8007076:	4438      	add	r0, r7
 8007078:	4439      	add	r1, r7
 800707a:	f012 0203 	ands.w	r2, r2, #3
 800707e:	d009      	beq.n	8007094 <arm_copy_f32+0x5c>
 8007080:	6803      	ldr	r3, [r0, #0]
 8007082:	600b      	str	r3, [r1, #0]
 8007084:	3a01      	subs	r2, #1
 8007086:	d005      	beq.n	8007094 <arm_copy_f32+0x5c>
 8007088:	6843      	ldr	r3, [r0, #4]
 800708a:	604b      	str	r3, [r1, #4]
 800708c:	2a01      	cmp	r2, #1
 800708e:	bf1c      	itt	ne
 8007090:	6883      	ldrne	r3, [r0, #8]
 8007092:	608b      	strne	r3, [r1, #8]
 8007094:	bcf0      	pop	{r4, r5, r6, r7}
 8007096:	4770      	bx	lr

08007098 <arm_mean_f32>:
 8007098:	b430      	push	{r4, r5}
 800709a:	088d      	lsrs	r5, r1, #2
 800709c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007110 <arm_mean_f32+0x78>
 80070a0:	d018      	beq.n	80070d4 <arm_mean_f32+0x3c>
 80070a2:	f100 0310 	add.w	r3, r0, #16
 80070a6:	462c      	mov	r4, r5
 80070a8:	ed53 5a04 	vldr	s11, [r3, #-16]
 80070ac:	ed13 6a03 	vldr	s12, [r3, #-12]
 80070b0:	ed53 6a02 	vldr	s13, [r3, #-8]
 80070b4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80070b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80070bc:	3c01      	subs	r4, #1
 80070be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80070c2:	f103 0310 	add.w	r3, r3, #16
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070ce:	d1eb      	bne.n	80070a8 <arm_mean_f32+0x10>
 80070d0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80070d4:	f011 0303 	ands.w	r3, r1, #3
 80070d8:	d00f      	beq.n	80070fa <arm_mean_f32+0x62>
 80070da:	ed90 7a00 	vldr	s14, [r0]
 80070de:	3b01      	subs	r3, #1
 80070e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070e4:	d009      	beq.n	80070fa <arm_mean_f32+0x62>
 80070e6:	ed90 7a01 	vldr	s14, [r0, #4]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070f0:	bf1c      	itt	ne
 80070f2:	ed90 7a02 	vldrne	s14, [r0, #8]
 80070f6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80070fa:	ee07 1a10 	vmov	s14, r1
 80070fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007102:	bc30      	pop	{r4, r5}
 8007104:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007108:	edc2 6a00 	vstr	s13, [r2]
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	00000000 	.word	0x00000000

08007114 <arm_rfft_32_fast_init_f32>:
 8007114:	b178      	cbz	r0, 8007136 <arm_rfft_32_fast_init_f32+0x22>
 8007116:	b430      	push	{r4, r5}
 8007118:	4908      	ldr	r1, [pc, #32]	; (800713c <arm_rfft_32_fast_init_f32+0x28>)
 800711a:	4a09      	ldr	r2, [pc, #36]	; (8007140 <arm_rfft_32_fast_init_f32+0x2c>)
 800711c:	2310      	movs	r3, #16
 800711e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007122:	8003      	strh	r3, [r0, #0]
 8007124:	2520      	movs	r5, #32
 8007126:	2414      	movs	r4, #20
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <arm_rfft_32_fast_init_f32+0x30>)
 800712a:	8205      	strh	r5, [r0, #16]
 800712c:	8184      	strh	r4, [r0, #12]
 800712e:	6143      	str	r3, [r0, #20]
 8007130:	bc30      	pop	{r4, r5}
 8007132:	2000      	movs	r0, #0
 8007134:	4770      	bx	lr
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	4770      	bx	lr
 800713c:	0800ddd8 	.word	0x0800ddd8
 8007140:	08012f14 	.word	0x08012f14
 8007144:	0801bc94 	.word	0x0801bc94

08007148 <arm_rfft_64_fast_init_f32>:
 8007148:	b178      	cbz	r0, 800716a <arm_rfft_64_fast_init_f32+0x22>
 800714a:	b430      	push	{r4, r5}
 800714c:	4908      	ldr	r1, [pc, #32]	; (8007170 <arm_rfft_64_fast_init_f32+0x28>)
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <arm_rfft_64_fast_init_f32+0x2c>)
 8007150:	2320      	movs	r3, #32
 8007152:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007156:	8003      	strh	r3, [r0, #0]
 8007158:	2540      	movs	r5, #64	; 0x40
 800715a:	2430      	movs	r4, #48	; 0x30
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <arm_rfft_64_fast_init_f32+0x30>)
 800715e:	8205      	strh	r5, [r0, #16]
 8007160:	8184      	strh	r4, [r0, #12]
 8007162:	6143      	str	r3, [r0, #20]
 8007164:	bc30      	pop	{r4, r5}
 8007166:	2000      	movs	r0, #0
 8007168:	4770      	bx	lr
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	4770      	bx	lr
 8007170:	0800ff30 	.word	0x0800ff30
 8007174:	08017794 	.word	0x08017794
 8007178:	08020514 	.word	0x08020514

0800717c <arm_rfft_256_fast_init_f32>:
 800717c:	b180      	cbz	r0, 80071a0 <arm_rfft_256_fast_init_f32+0x24>
 800717e:	b430      	push	{r4, r5}
 8007180:	4909      	ldr	r1, [pc, #36]	; (80071a8 <arm_rfft_256_fast_init_f32+0x2c>)
 8007182:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <arm_rfft_256_fast_init_f32+0x30>)
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800718a:	8003      	strh	r3, [r0, #0]
 800718c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8007190:	24d0      	movs	r4, #208	; 0xd0
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <arm_rfft_256_fast_init_f32+0x34>)
 8007194:	8205      	strh	r5, [r0, #16]
 8007196:	8184      	strh	r4, [r0, #12]
 8007198:	6143      	str	r3, [r0, #20]
 800719a:	bc30      	pop	{r4, r5}
 800719c:	2000      	movs	r0, #0
 800719e:	4770      	bx	lr
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	0800dc38 	.word	0x0800dc38
 80071ac:	08012b14 	.word	0x08012b14
 80071b0:	0801b894 	.word	0x0801b894

080071b4 <arm_rfft_512_fast_init_f32>:
 80071b4:	b190      	cbz	r0, 80071dc <arm_rfft_512_fast_init_f32+0x28>
 80071b6:	b430      	push	{r4, r5}
 80071b8:	490a      	ldr	r1, [pc, #40]	; (80071e4 <arm_rfft_512_fast_init_f32+0x30>)
 80071ba:	4a0b      	ldr	r2, [pc, #44]	; (80071e8 <arm_rfft_512_fast_init_f32+0x34>)
 80071bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071c0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80071c4:	8003      	strh	r3, [r0, #0]
 80071c6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80071ca:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <arm_rfft_512_fast_init_f32+0x38>)
 80071d0:	8205      	strh	r5, [r0, #16]
 80071d2:	8184      	strh	r4, [r0, #12]
 80071d4:	6143      	str	r3, [r0, #20]
 80071d6:	bc30      	pop	{r4, r5}
 80071d8:	2000      	movs	r0, #0
 80071da:	4770      	bx	lr
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	0800fbc0 	.word	0x0800fbc0
 80071e8:	08016f94 	.word	0x08016f94
 80071ec:	0801fd14 	.word	0x0801fd14

080071f0 <arm_rfft_1024_fast_init_f32>:
 80071f0:	b190      	cbz	r0, 8007218 <arm_rfft_1024_fast_init_f32+0x28>
 80071f2:	b430      	push	{r4, r5}
 80071f4:	490a      	ldr	r1, [pc, #40]	; (8007220 <arm_rfft_1024_fast_init_f32+0x30>)
 80071f6:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <arm_rfft_1024_fast_init_f32+0x34>)
 80071f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071fc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007200:	8003      	strh	r3, [r0, #0]
 8007202:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8007206:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <arm_rfft_1024_fast_init_f32+0x38>)
 800720c:	8205      	strh	r5, [r0, #16]
 800720e:	8184      	strh	r4, [r0, #12]
 8007210:	6143      	str	r3, [r0, #20]
 8007212:	bc30      	pop	{r4, r5}
 8007214:	2000      	movs	r0, #0
 8007216:	4770      	bx	lr
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	0800ff90 	.word	0x0800ff90
 8007224:	08017894 	.word	0x08017894
 8007228:	08018894 	.word	0x08018894

0800722c <arm_rfft_2048_fast_init_f32>:
 800722c:	b190      	cbz	r0, 8007254 <arm_rfft_2048_fast_init_f32+0x28>
 800722e:	b430      	push	{r4, r5}
 8007230:	490a      	ldr	r1, [pc, #40]	; (800725c <arm_rfft_2048_fast_init_f32+0x30>)
 8007232:	4a0b      	ldr	r2, [pc, #44]	; (8007260 <arm_rfft_2048_fast_init_f32+0x34>)
 8007234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007238:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800723c:	8003      	strh	r3, [r0, #0]
 800723e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8007242:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <arm_rfft_2048_fast_init_f32+0x38>)
 8007248:	8205      	strh	r5, [r0, #16]
 800724a:	8184      	strh	r4, [r0, #12]
 800724c:	6143      	str	r3, [r0, #20]
 800724e:	bc30      	pop	{r4, r5}
 8007250:	2000      	movs	r0, #0
 8007252:	4770      	bx	lr
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	0800ce28 	.word	0x0800ce28
 8007260:	08010b14 	.word	0x08010b14
 8007264:	08019894 	.word	0x08019894

08007268 <arm_rfft_4096_fast_init_f32>:
 8007268:	b190      	cbz	r0, 8007290 <arm_rfft_4096_fast_init_f32+0x28>
 800726a:	b430      	push	{r4, r5}
 800726c:	490a      	ldr	r1, [pc, #40]	; (8007298 <arm_rfft_4096_fast_init_f32+0x30>)
 800726e:	4a0b      	ldr	r2, [pc, #44]	; (800729c <arm_rfft_4096_fast_init_f32+0x34>)
 8007270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007274:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007278:	8003      	strh	r3, [r0, #0]
 800727a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800727e:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <arm_rfft_4096_fast_init_f32+0x38>)
 8007284:	8205      	strh	r5, [r0, #16]
 8007286:	8184      	strh	r4, [r0, #12]
 8007288:	6143      	str	r3, [r0, #20]
 800728a:	bc30      	pop	{r4, r5}
 800728c:	2000      	movs	r0, #0
 800728e:	4770      	bx	lr
 8007290:	f04f 30ff 	mov.w	r0, #4294967295
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	0800de00 	.word	0x0800de00
 800729c:	08012f94 	.word	0x08012f94
 80072a0:	0801bd14 	.word	0x0801bd14

080072a4 <arm_rfft_fast_init_f32>:
 80072a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80072a8:	d01f      	beq.n	80072ea <arm_rfft_fast_init_f32+0x46>
 80072aa:	d90b      	bls.n	80072c4 <arm_rfft_fast_init_f32+0x20>
 80072ac:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80072b0:	d019      	beq.n	80072e6 <arm_rfft_fast_init_f32+0x42>
 80072b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80072b6:	d012      	beq.n	80072de <arm_rfft_fast_init_f32+0x3a>
 80072b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80072bc:	d00d      	beq.n	80072da <arm_rfft_fast_init_f32+0x36>
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	4770      	bx	lr
 80072c4:	2940      	cmp	r1, #64	; 0x40
 80072c6:	d00c      	beq.n	80072e2 <arm_rfft_fast_init_f32+0x3e>
 80072c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80072cc:	d003      	beq.n	80072d6 <arm_rfft_fast_init_f32+0x32>
 80072ce:	2920      	cmp	r1, #32
 80072d0:	d1f5      	bne.n	80072be <arm_rfft_fast_init_f32+0x1a>
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <arm_rfft_fast_init_f32+0x4c>)
 80072d4:	4718      	bx	r3
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <arm_rfft_fast_init_f32+0x50>)
 80072d8:	4718      	bx	r3
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <arm_rfft_fast_init_f32+0x54>)
 80072dc:	4718      	bx	r3
 80072de:	4b07      	ldr	r3, [pc, #28]	; (80072fc <arm_rfft_fast_init_f32+0x58>)
 80072e0:	4718      	bx	r3
 80072e2:	4b07      	ldr	r3, [pc, #28]	; (8007300 <arm_rfft_fast_init_f32+0x5c>)
 80072e4:	e7f6      	b.n	80072d4 <arm_rfft_fast_init_f32+0x30>
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <arm_rfft_fast_init_f32+0x60>)
 80072e8:	e7f4      	b.n	80072d4 <arm_rfft_fast_init_f32+0x30>
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <arm_rfft_fast_init_f32+0x64>)
 80072ec:	e7f2      	b.n	80072d4 <arm_rfft_fast_init_f32+0x30>
 80072ee:	bf00      	nop
 80072f0:	08007115 	.word	0x08007115
 80072f4:	0800717d 	.word	0x0800717d
 80072f8:	080071f1 	.word	0x080071f1
 80072fc:	08007269 	.word	0x08007269
 8007300:	08007149 	.word	0x08007149
 8007304:	0800722d 	.word	0x0800722d
 8007308:	080071b5 	.word	0x080071b5

0800730c <stage_rfft_f32>:
 800730c:	b410      	push	{r4}
 800730e:	edd1 7a00 	vldr	s15, [r1]
 8007312:	ed91 7a01 	vldr	s14, [r1, #4]
 8007316:	8804      	ldrh	r4, [r0, #0]
 8007318:	6940      	ldr	r0, [r0, #20]
 800731a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800731e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007322:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8007326:	ee77 6a87 	vadd.f32	s13, s15, s14
 800732a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800732e:	3c01      	subs	r4, #1
 8007330:	ee26 7a84 	vmul.f32	s14, s13, s8
 8007334:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007338:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800733c:	ed82 7a00 	vstr	s14, [r2]
 8007340:	edc2 7a01 	vstr	s15, [r2, #4]
 8007344:	3010      	adds	r0, #16
 8007346:	3210      	adds	r2, #16
 8007348:	3b08      	subs	r3, #8
 800734a:	3110      	adds	r1, #16
 800734c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007350:	ed93 7a02 	vldr	s14, [r3, #8]
 8007354:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007358:	edd3 4a03 	vldr	s9, [r3, #12]
 800735c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007360:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007364:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007368:	ee37 7a05 	vadd.f32	s14, s14, s10
 800736c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007370:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007374:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007378:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800737c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8007380:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007384:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007388:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800738c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007390:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007394:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007398:	ee67 7a84 	vmul.f32	s15, s15, s8
 800739c:	3c01      	subs	r4, #1
 800739e:	ed02 7a02 	vstr	s14, [r2, #-8]
 80073a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80073a6:	f1a3 0308 	sub.w	r3, r3, #8
 80073aa:	f101 0108 	add.w	r1, r1, #8
 80073ae:	f100 0008 	add.w	r0, r0, #8
 80073b2:	f102 0208 	add.w	r2, r2, #8
 80073b6:	d1c9      	bne.n	800734c <stage_rfft_f32+0x40>
 80073b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <merge_rfft_f32>:
 80073c0:	b410      	push	{r4}
 80073c2:	edd1 7a00 	vldr	s15, [r1]
 80073c6:	edd1 6a01 	vldr	s13, [r1, #4]
 80073ca:	8804      	ldrh	r4, [r0, #0]
 80073cc:	6940      	ldr	r0, [r0, #20]
 80073ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80073d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073d6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80073da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80073de:	ee67 7a84 	vmul.f32	s15, s15, s8
 80073e2:	3c01      	subs	r4, #1
 80073e4:	ed82 7a00 	vstr	s14, [r2]
 80073e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80073ec:	b3dc      	cbz	r4, 8007466 <merge_rfft_f32+0xa6>
 80073ee:	00e3      	lsls	r3, r4, #3
 80073f0:	3b08      	subs	r3, #8
 80073f2:	440b      	add	r3, r1
 80073f4:	3010      	adds	r0, #16
 80073f6:	3210      	adds	r2, #16
 80073f8:	3110      	adds	r1, #16
 80073fa:	ed11 5a02 	vldr	s10, [r1, #-8]
 80073fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8007402:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007406:	edd3 4a03 	vldr	s9, [r3, #12]
 800740a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800740e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007412:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007416:	ee37 7a05 	vadd.f32	s14, s14, s10
 800741a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800741e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007422:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007426:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800742a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800742e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007432:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007436:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800743a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800743e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007442:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007446:	ee67 7a84 	vmul.f32	s15, s15, s8
 800744a:	3c01      	subs	r4, #1
 800744c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007450:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007454:	f1a3 0308 	sub.w	r3, r3, #8
 8007458:	f101 0108 	add.w	r1, r1, #8
 800745c:	f100 0008 	add.w	r0, r0, #8
 8007460:	f102 0208 	add.w	r2, r2, #8
 8007464:	d1c9      	bne.n	80073fa <merge_rfft_f32+0x3a>
 8007466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800746a:	4770      	bx	lr

0800746c <arm_rfft_fast_f32>:
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	8a05      	ldrh	r5, [r0, #16]
 8007472:	086d      	lsrs	r5, r5, #1
 8007474:	8005      	strh	r5, [r0, #0]
 8007476:	4604      	mov	r4, r0
 8007478:	4616      	mov	r6, r2
 800747a:	461d      	mov	r5, r3
 800747c:	b14b      	cbz	r3, 8007492 <arm_rfft_fast_f32+0x26>
 800747e:	f7ff ff9f 	bl	80073c0 <merge_rfft_f32>
 8007482:	462a      	mov	r2, r5
 8007484:	4631      	mov	r1, r6
 8007486:	4620      	mov	r0, r4
 8007488:	2301      	movs	r3, #1
 800748a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	f000 bb33 	b.w	8007af8 <arm_cfft_f32>
 8007492:	460f      	mov	r7, r1
 8007494:	461a      	mov	r2, r3
 8007496:	2301      	movs	r3, #1
 8007498:	f000 fb2e 	bl	8007af8 <arm_cfft_f32>
 800749c:	4632      	mov	r2, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	4620      	mov	r0, r4
 80074a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a6:	f7ff bf31 	b.w	800730c <stage_rfft_f32>
 80074aa:	bf00      	nop

080074ac <arm_cfft_radix8by2_f32>:
 80074ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b0:	ed2d 8b08 	vpush	{d8-d11}
 80074b4:	4607      	mov	r7, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	f8b7 c000 	ldrh.w	ip, [r7]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80074c2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80074c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80074ca:	f000 80b0 	beq.w	800762e <arm_cfft_radix8by2_f32+0x182>
 80074ce:	008c      	lsls	r4, r1, #2
 80074d0:	3410      	adds	r4, #16
 80074d2:	f100 0310 	add.w	r3, r0, #16
 80074d6:	1906      	adds	r6, r0, r4
 80074d8:	3210      	adds	r2, #16
 80074da:	4444      	add	r4, r8
 80074dc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80074e0:	f108 0510 	add.w	r5, r8, #16
 80074e4:	ed15 2a04 	vldr	s4, [r5, #-16]
 80074e8:	ed55 2a03 	vldr	s5, [r5, #-12]
 80074ec:	ed54 4a04 	vldr	s9, [r4, #-16]
 80074f0:	ed14 4a03 	vldr	s8, [r4, #-12]
 80074f4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80074f8:	ed54 5a01 	vldr	s11, [r4, #-4]
 80074fc:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007500:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007504:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007508:	ed56 6a04 	vldr	s13, [r6, #-16]
 800750c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8007510:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007514:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007518:	ed53 7a01 	vldr	s15, [r3, #-4]
 800751c:	ed16 1a02 	vldr	s2, [r6, #-8]
 8007520:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007524:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007528:	ee37 ba22 	vadd.f32	s22, s14, s5
 800752c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8007530:	ee33 9a04 	vadd.f32	s18, s6, s8
 8007534:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007538:	ee75 aa00 	vadd.f32	s21, s10, s0
 800753c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8007540:	ee71 8a06 	vadd.f32	s17, s2, s12
 8007544:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007548:	ed03 ba03 	vstr	s22, [r3, #-12]
 800754c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8007550:	ed03 aa01 	vstr	s20, [r3, #-4]
 8007554:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007558:	ed46 9a04 	vstr	s19, [r6, #-16]
 800755c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007560:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007564:	ee37 7a62 	vsub.f32	s14, s14, s5
 8007568:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800756c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8007570:	ed52 6a03 	vldr	s13, [r2, #-12]
 8007574:	ed12 3a04 	vldr	s6, [r2, #-16]
 8007578:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800757c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8007580:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8007584:	ee23 2a83 	vmul.f32	s4, s7, s6
 8007588:	ee64 4a83 	vmul.f32	s9, s9, s6
 800758c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8007590:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007594:	ee64 6a26 	vmul.f32	s13, s8, s13
 8007598:	ee24 4a03 	vmul.f32	s8, s8, s6
 800759c:	ee37 7a63 	vsub.f32	s14, s14, s7
 80075a0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80075a4:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80075a8:	ee32 3a08 	vadd.f32	s6, s4, s16
 80075ac:	ed05 7a03 	vstr	s14, [r5, #-12]
 80075b0:	ed05 3a04 	vstr	s6, [r5, #-16]
 80075b4:	ed04 4a04 	vstr	s8, [r4, #-16]
 80075b8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80075bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80075c0:	ee76 6a41 	vsub.f32	s13, s12, s2
 80075c4:	ee35 5a40 	vsub.f32	s10, s10, s0
 80075c8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80075cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80075d0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80075d4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80075d8:	ee66 4a87 	vmul.f32	s9, s13, s14
 80075dc:	ee25 4a25 	vmul.f32	s8, s10, s11
 80075e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80075e4:	ee25 5a07 	vmul.f32	s10, s10, s14
 80075e8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80075ec:	ee26 7a07 	vmul.f32	s14, s12, s14
 80075f0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80075f4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80075f8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80075fc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8007600:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007604:	3310      	adds	r3, #16
 8007606:	4563      	cmp	r3, ip
 8007608:	ed45 5a02 	vstr	s11, [r5, #-8]
 800760c:	f106 0610 	add.w	r6, r6, #16
 8007610:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007614:	f102 0210 	add.w	r2, r2, #16
 8007618:	ed04 6a02 	vstr	s12, [r4, #-8]
 800761c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8007620:	f105 0510 	add.w	r5, r5, #16
 8007624:	f104 0410 	add.w	r4, r4, #16
 8007628:	f47f af5c 	bne.w	80074e4 <arm_cfft_radix8by2_f32+0x38>
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	b28c      	uxth	r4, r1
 8007630:	4621      	mov	r1, r4
 8007632:	2302      	movs	r3, #2
 8007634:	f001 f8d4 	bl	80087e0 <arm_radix8_butterfly_f32>
 8007638:	ecbd 8b08 	vpop	{d8-d11}
 800763c:	4621      	mov	r1, r4
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4640      	mov	r0, r8
 8007642:	2302      	movs	r3, #2
 8007644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	f001 b8ca 	b.w	80087e0 <arm_radix8_butterfly_f32>

0800764c <arm_cfft_radix8by4_f32>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	ed2d 8b0a 	vpush	{d8-d12}
 8007654:	b08d      	sub	sp, #52	; 0x34
 8007656:	460d      	mov	r5, r1
 8007658:	910b      	str	r1, [sp, #44]	; 0x2c
 800765a:	8801      	ldrh	r1, [r0, #0]
 800765c:	6842      	ldr	r2, [r0, #4]
 800765e:	900a      	str	r0, [sp, #40]	; 0x28
 8007660:	0849      	lsrs	r1, r1, #1
 8007662:	008b      	lsls	r3, r1, #2
 8007664:	18ee      	adds	r6, r5, r3
 8007666:	18f0      	adds	r0, r6, r3
 8007668:	edd0 5a00 	vldr	s11, [r0]
 800766c:	edd5 7a00 	vldr	s15, [r5]
 8007670:	ed96 7a00 	vldr	s14, [r6]
 8007674:	edd0 3a01 	vldr	s7, [r0, #4]
 8007678:	ed96 4a01 	vldr	s8, [r6, #4]
 800767c:	ed95 5a01 	vldr	s10, [r5, #4]
 8007680:	9008      	str	r0, [sp, #32]
 8007682:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8007686:	18c7      	adds	r7, r0, r3
 8007688:	edd7 4a00 	vldr	s9, [r7]
 800768c:	ed97 3a01 	vldr	s6, [r7, #4]
 8007690:	9701      	str	r7, [sp, #4]
 8007692:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007696:	462c      	mov	r4, r5
 8007698:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800769c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80076a0:	ee16 ca90 	vmov	ip, s13
 80076a4:	f844 cb08 	str.w	ip, [r4], #8
 80076a8:	ee75 6a23 	vadd.f32	s13, s10, s7
 80076ac:	edd6 5a01 	vldr	s11, [r6, #4]
 80076b0:	edd7 2a01 	vldr	s5, [r7, #4]
 80076b4:	9404      	str	r4, [sp, #16]
 80076b6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80076ba:	ee74 3a27 	vadd.f32	s7, s8, s15
 80076be:	ee36 6a47 	vsub.f32	s12, s12, s14
 80076c2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80076c6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80076ca:	0849      	lsrs	r1, r1, #1
 80076cc:	f102 0e08 	add.w	lr, r2, #8
 80076d0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80076d4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80076d8:	9109      	str	r1, [sp, #36]	; 0x24
 80076da:	ee35 4a47 	vsub.f32	s8, s10, s14
 80076de:	f1a1 0902 	sub.w	r9, r1, #2
 80076e2:	f8cd e00c 	str.w	lr, [sp, #12]
 80076e6:	4631      	mov	r1, r6
 80076e8:	ee13 ea90 	vmov	lr, s7
 80076ec:	ee36 6a64 	vsub.f32	s12, s12, s9
 80076f0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80076f4:	4604      	mov	r4, r0
 80076f6:	edc5 5a01 	vstr	s11, [r5, #4]
 80076fa:	ee37 7a05 	vadd.f32	s14, s14, s10
 80076fe:	f841 eb08 	str.w	lr, [r1], #8
 8007702:	ee34 5a24 	vadd.f32	s10, s8, s9
 8007706:	ee16 ea10 	vmov	lr, s12
 800770a:	ed86 5a01 	vstr	s10, [r6, #4]
 800770e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007712:	f844 eb08 	str.w	lr, [r4], #8
 8007716:	ee77 7a83 	vadd.f32	s15, s15, s6
 800771a:	edc0 6a01 	vstr	s13, [r0, #4]
 800771e:	9405      	str	r4, [sp, #20]
 8007720:	4604      	mov	r4, r0
 8007722:	ee17 0a90 	vmov	r0, s15
 8007726:	9106      	str	r1, [sp, #24]
 8007728:	ee37 7a64 	vsub.f32	s14, s14, s9
 800772c:	f102 0110 	add.w	r1, r2, #16
 8007730:	46bc      	mov	ip, r7
 8007732:	9100      	str	r1, [sp, #0]
 8007734:	f847 0b08 	str.w	r0, [r7], #8
 8007738:	f102 0118 	add.w	r1, r2, #24
 800773c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8007740:	9102      	str	r1, [sp, #8]
 8007742:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007746:	9007      	str	r0, [sp, #28]
 8007748:	f000 8134 	beq.w	80079b4 <arm_cfft_radix8by4_f32+0x368>
 800774c:	f102 0920 	add.w	r9, r2, #32
 8007750:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8007754:	9a01      	ldr	r2, [sp, #4]
 8007756:	f8dd a000 	ldr.w	sl, [sp]
 800775a:	3b0c      	subs	r3, #12
 800775c:	4683      	mov	fp, r0
 800775e:	4463      	add	r3, ip
 8007760:	f105 0e10 	add.w	lr, r5, #16
 8007764:	f1a4 010c 	sub.w	r1, r4, #12
 8007768:	f104 0510 	add.w	r5, r4, #16
 800776c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8007770:	f1a2 040c 	sub.w	r4, r2, #12
 8007774:	f106 0010 	add.w	r0, r6, #16
 8007778:	3210      	adds	r2, #16
 800777a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800777e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007782:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007786:	ed52 1a02 	vldr	s3, [r2, #-8]
 800778a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800778e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8007792:	ed12 1a01 	vldr	s2, [r2, #-4]
 8007796:	ed10 8a01 	vldr	s16, [r0, #-4]
 800779a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800779e:	ee30 6a26 	vadd.f32	s12, s0, s13
 80077a2:	ee37 7a84 	vadd.f32	s14, s15, s8
 80077a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80077aa:	ee37 7a21 	vadd.f32	s14, s14, s3
 80077ae:	ee75 5a65 	vsub.f32	s11, s10, s11
 80077b2:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80077b6:	ed10 7a01 	vldr	s14, [r0, #-4]
 80077ba:	ed52 6a01 	vldr	s13, [r2, #-4]
 80077be:	ee36 7a07 	vadd.f32	s14, s12, s14
 80077c2:	ee78 aa25 	vadd.f32	s21, s16, s11
 80077c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80077ca:	ee70 3a67 	vsub.f32	s7, s0, s15
 80077ce:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80077d2:	ed94 7a02 	vldr	s14, [r4, #8]
 80077d6:	ed9c 2a02 	vldr	s4, [ip, #8]
 80077da:	ed91 ba02 	vldr	s22, [r1, #8]
 80077de:	edd3 9a02 	vldr	s19, [r3, #8]
 80077e2:	edd4 2a01 	vldr	s5, [r4, #4]
 80077e6:	ed9c 9a01 	vldr	s18, [ip, #4]
 80077ea:	ed93 5a01 	vldr	s10, [r3, #4]
 80077ee:	edd1 0a01 	vldr	s1, [r1, #4]
 80077f2:	ee72 6a07 	vadd.f32	s13, s4, s14
 80077f6:	ee32 2a47 	vsub.f32	s4, s4, s14
 80077fa:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80077fe:	ee79 4a22 	vadd.f32	s9, s18, s5
 8007802:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8007806:	ee79 2a62 	vsub.f32	s5, s18, s5
 800780a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800780e:	ed91 7a01 	vldr	s14, [r1, #4]
 8007812:	edd3 8a01 	vldr	s17, [r3, #4]
 8007816:	ee34 7a87 	vadd.f32	s14, s9, s14
 800781a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800781e:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007822:	ee32 9a60 	vsub.f32	s18, s4, s1
 8007826:	ed8c 7a01 	vstr	s14, [ip, #4]
 800782a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800782e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8007832:	ee73 8a22 	vadd.f32	s17, s6, s5
 8007836:	ee39 9a05 	vadd.f32	s18, s18, s10
 800783a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800783e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007842:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8007846:	ee69 ba07 	vmul.f32	s23, s18, s14
 800784a:	ee6a aa87 	vmul.f32	s21, s21, s14
 800784e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007852:	ee63 ca87 	vmul.f32	s25, s7, s14
 8007856:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800785a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800785e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007862:	ee73 3aea 	vsub.f32	s7, s7, s21
 8007866:	ee78 8a89 	vadd.f32	s17, s17, s18
 800786a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800786e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007872:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007876:	ee76 6acb 	vsub.f32	s13, s13, s22
 800787a:	ee36 6a48 	vsub.f32	s12, s12, s16
 800787e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007882:	ed00 7a02 	vstr	s14, [r0, #-8]
 8007886:	ed40 3a01 	vstr	s7, [r0, #-4]
 800788a:	edc1 8a01 	vstr	s17, [r1, #4]
 800788e:	ed81 aa02 	vstr	s20, [r1, #8]
 8007892:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007896:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800789a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800789e:	ed59 6a03 	vldr	s13, [r9, #-12]
 80078a2:	ee34 4a61 	vsub.f32	s8, s8, s3
 80078a6:	ee36 6a41 	vsub.f32	s12, s12, s2
 80078aa:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80078ae:	ee66 9a26 	vmul.f32	s19, s12, s13
 80078b2:	ee24 9a23 	vmul.f32	s18, s8, s7
 80078b6:	ee26 6a23 	vmul.f32	s12, s12, s7
 80078ba:	ee24 4a26 	vmul.f32	s8, s8, s13
 80078be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80078c2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80078c6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80078ca:	ee36 6a44 	vsub.f32	s12, s12, s8
 80078ce:	ee37 7a64 	vsub.f32	s14, s14, s9
 80078d2:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80078d6:	ee79 3a29 	vadd.f32	s7, s18, s19
 80078da:	ee75 6a60 	vsub.f32	s13, s10, s1
 80078de:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80078e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80078e6:	ed45 3a02 	vstr	s7, [r5, #-8]
 80078ea:	ed05 6a01 	vstr	s12, [r5, #-4]
 80078ee:	ed84 7a01 	vstr	s14, [r4, #4]
 80078f2:	ed84 4a02 	vstr	s8, [r4, #8]
 80078f6:	ee35 6a81 	vadd.f32	s12, s11, s2
 80078fa:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80078fe:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8007902:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8007906:	ee33 3a62 	vsub.f32	s6, s6, s5
 800790a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800790e:	ee67 2a26 	vmul.f32	s5, s14, s13
 8007912:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8007916:	ee26 5a25 	vmul.f32	s10, s12, s11
 800791a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800791e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007922:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007926:	ee63 6a26 	vmul.f32	s13, s6, s13
 800792a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800792e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007932:	ee75 5a24 	vadd.f32	s11, s10, s9
 8007936:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800793a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800793e:	f1bb 0b01 	subs.w	fp, fp, #1
 8007942:	ed42 5a02 	vstr	s11, [r2, #-8]
 8007946:	ed42 7a01 	vstr	s15, [r2, #-4]
 800794a:	f10e 0e08 	add.w	lr, lr, #8
 800794e:	ed83 3a02 	vstr	s6, [r3, #8]
 8007952:	ed83 7a01 	vstr	s14, [r3, #4]
 8007956:	f1ac 0c08 	sub.w	ip, ip, #8
 800795a:	f10a 0a08 	add.w	sl, sl, #8
 800795e:	f100 0008 	add.w	r0, r0, #8
 8007962:	f1a1 0108 	sub.w	r1, r1, #8
 8007966:	f109 0910 	add.w	r9, r9, #16
 800796a:	f105 0508 	add.w	r5, r5, #8
 800796e:	f1a4 0408 	sub.w	r4, r4, #8
 8007972:	f108 0818 	add.w	r8, r8, #24
 8007976:	f102 0208 	add.w	r2, r2, #8
 800797a:	f1a3 0308 	sub.w	r3, r3, #8
 800797e:	f47f aefc 	bne.w	800777a <arm_cfft_radix8by4_f32+0x12e>
 8007982:	9907      	ldr	r1, [sp, #28]
 8007984:	9800      	ldr	r0, [sp, #0]
 8007986:	00cb      	lsls	r3, r1, #3
 8007988:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800798c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007990:	9100      	str	r1, [sp, #0]
 8007992:	9904      	ldr	r1, [sp, #16]
 8007994:	4419      	add	r1, r3
 8007996:	9104      	str	r1, [sp, #16]
 8007998:	9903      	ldr	r1, [sp, #12]
 800799a:	4419      	add	r1, r3
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	9906      	ldr	r1, [sp, #24]
 80079a0:	4419      	add	r1, r3
 80079a2:	9106      	str	r1, [sp, #24]
 80079a4:	9905      	ldr	r1, [sp, #20]
 80079a6:	441f      	add	r7, r3
 80079a8:	4419      	add	r1, r3
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	9105      	str	r1, [sp, #20]
 80079ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	9904      	ldr	r1, [sp, #16]
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	ed91 4a00 	vldr	s8, [r1]
 80079bc:	edd0 6a00 	vldr	s13, [r0]
 80079c0:	9b06      	ldr	r3, [sp, #24]
 80079c2:	ed97 3a00 	vldr	s6, [r7]
 80079c6:	edd3 7a00 	vldr	s15, [r3]
 80079ca:	edd0 4a01 	vldr	s9, [r0, #4]
 80079ce:	edd1 3a01 	vldr	s7, [r1, #4]
 80079d2:	ed97 2a01 	vldr	s4, [r7, #4]
 80079d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80079da:	9a03      	ldr	r2, [sp, #12]
 80079dc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80079e0:	ee34 6a26 	vadd.f32	s12, s8, s13
 80079e4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80079e8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80079ec:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80079f0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80079f4:	ee74 6a66 	vsub.f32	s13, s8, s13
 80079f8:	ed81 5a00 	vstr	s10, [r1]
 80079fc:	ed93 5a01 	vldr	s10, [r3, #4]
 8007a00:	edd7 4a01 	vldr	s9, [r7, #4]
 8007a04:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007a08:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007a0c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007a10:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007a14:	ed81 5a01 	vstr	s10, [r1, #4]
 8007a18:	edd2 1a00 	vldr	s3, [r2]
 8007a1c:	edd2 2a01 	vldr	s5, [r2, #4]
 8007a20:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007a24:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007a28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007a2c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007a30:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007a34:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007a38:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007a3c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007a40:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007a44:	edc3 2a00 	vstr	s5, [r3]
 8007a48:	ed83 5a01 	vstr	s10, [r3, #4]
 8007a4c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007a56:	ed93 4a01 	vldr	s8, [r3, #4]
 8007a5a:	ed93 5a00 	vldr	s10, [r3]
 8007a5e:	9b02      	ldr	r3, [sp, #8]
 8007a60:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007a64:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007a68:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007a6c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007a70:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007a74:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007a78:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007a7c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007a80:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007a84:	ed80 6a01 	vstr	s12, [r0, #4]
 8007a88:	edc0 5a00 	vstr	s11, [r0]
 8007a8c:	edd3 5a01 	vldr	s11, [r3, #4]
 8007a90:	edd3 6a00 	vldr	s13, [r3]
 8007a94:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007a98:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007a9c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007aa0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007aa4:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007aa8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007aac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ab0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007ab4:	ed87 7a01 	vstr	s14, [r7, #4]
 8007ab8:	edc7 7a00 	vstr	s15, [r7]
 8007abc:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	686a      	ldr	r2, [r5, #4]
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f000 fe8b 	bl	80087e0 <arm_radix8_butterfly_f32>
 8007aca:	4630      	mov	r0, r6
 8007acc:	4621      	mov	r1, r4
 8007ace:	686a      	ldr	r2, [r5, #4]
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f000 fe85 	bl	80087e0 <arm_radix8_butterfly_f32>
 8007ad6:	9808      	ldr	r0, [sp, #32]
 8007ad8:	686a      	ldr	r2, [r5, #4]
 8007ada:	4621      	mov	r1, r4
 8007adc:	2304      	movs	r3, #4
 8007ade:	f000 fe7f 	bl	80087e0 <arm_radix8_butterfly_f32>
 8007ae2:	686a      	ldr	r2, [r5, #4]
 8007ae4:	9801      	ldr	r0, [sp, #4]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	2304      	movs	r3, #4
 8007aea:	b00d      	add	sp, #52	; 0x34
 8007aec:	ecbd 8b0a 	vpop	{d8-d12}
 8007af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	f000 be74 	b.w	80087e0 <arm_radix8_butterfly_f32>

08007af8 <arm_cfft_f32>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	2a01      	cmp	r2, #1
 8007afe:	4606      	mov	r6, r0
 8007b00:	4617      	mov	r7, r2
 8007b02:	460c      	mov	r4, r1
 8007b04:	4698      	mov	r8, r3
 8007b06:	8805      	ldrh	r5, [r0, #0]
 8007b08:	d056      	beq.n	8007bb8 <arm_cfft_f32+0xc0>
 8007b0a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007b0e:	d063      	beq.n	8007bd8 <arm_cfft_f32+0xe0>
 8007b10:	d916      	bls.n	8007b40 <arm_cfft_f32+0x48>
 8007b12:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007b16:	d01a      	beq.n	8007b4e <arm_cfft_f32+0x56>
 8007b18:	d947      	bls.n	8007baa <arm_cfft_f32+0xb2>
 8007b1a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007b1e:	d05b      	beq.n	8007bd8 <arm_cfft_f32+0xe0>
 8007b20:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007b24:	d105      	bne.n	8007b32 <arm_cfft_f32+0x3a>
 8007b26:	2301      	movs	r3, #1
 8007b28:	6872      	ldr	r2, [r6, #4]
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fe57 	bl	80087e0 <arm_radix8_butterfly_f32>
 8007b32:	f1b8 0f00 	cmp.w	r8, #0
 8007b36:	d111      	bne.n	8007b5c <arm_cfft_f32+0x64>
 8007b38:	2f01      	cmp	r7, #1
 8007b3a:	d016      	beq.n	8007b6a <arm_cfft_f32+0x72>
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	2d20      	cmp	r5, #32
 8007b42:	d049      	beq.n	8007bd8 <arm_cfft_f32+0xe0>
 8007b44:	d935      	bls.n	8007bb2 <arm_cfft_f32+0xba>
 8007b46:	2d40      	cmp	r5, #64	; 0x40
 8007b48:	d0ed      	beq.n	8007b26 <arm_cfft_f32+0x2e>
 8007b4a:	2d80      	cmp	r5, #128	; 0x80
 8007b4c:	d1f1      	bne.n	8007b32 <arm_cfft_f32+0x3a>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff fcab 	bl	80074ac <arm_cfft_radix8by2_f32>
 8007b56:	f1b8 0f00 	cmp.w	r8, #0
 8007b5a:	d0ed      	beq.n	8007b38 <arm_cfft_f32+0x40>
 8007b5c:	68b2      	ldr	r2, [r6, #8]
 8007b5e:	89b1      	ldrh	r1, [r6, #12]
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 f841 	bl	8007be8 <arm_bitreversal_32>
 8007b66:	2f01      	cmp	r7, #1
 8007b68:	d1e8      	bne.n	8007b3c <arm_cfft_f32+0x44>
 8007b6a:	ee07 5a90 	vmov	s15, r5
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	d0de      	beq.n	8007b3c <arm_cfft_f32+0x44>
 8007b7e:	f104 0108 	add.w	r1, r4, #8
 8007b82:	2300      	movs	r3, #0
 8007b84:	3301      	adds	r3, #1
 8007b86:	429d      	cmp	r5, r3
 8007b88:	f101 0108 	add.w	r1, r1, #8
 8007b8c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007b90:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007b94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b98:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b9c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007ba0:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007ba4:	d1ee      	bne.n	8007b84 <arm_cfft_f32+0x8c>
 8007ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007baa:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007bae:	d0ba      	beq.n	8007b26 <arm_cfft_f32+0x2e>
 8007bb0:	e7bf      	b.n	8007b32 <arm_cfft_f32+0x3a>
 8007bb2:	2d10      	cmp	r5, #16
 8007bb4:	d0cb      	beq.n	8007b4e <arm_cfft_f32+0x56>
 8007bb6:	e7bc      	b.n	8007b32 <arm_cfft_f32+0x3a>
 8007bb8:	b19d      	cbz	r5, 8007be2 <arm_cfft_f32+0xea>
 8007bba:	f101 030c 	add.w	r3, r1, #12
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	eef1 7a67 	vneg.f32	s15, s15
 8007bca:	4295      	cmp	r5, r2
 8007bcc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007bd0:	f103 0308 	add.w	r3, r3, #8
 8007bd4:	d1f4      	bne.n	8007bc0 <arm_cfft_f32+0xc8>
 8007bd6:	e798      	b.n	8007b0a <arm_cfft_f32+0x12>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff fd36 	bl	800764c <arm_cfft_radix8by4_f32>
 8007be0:	e7a7      	b.n	8007b32 <arm_cfft_f32+0x3a>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0aa      	beq.n	8007b3c <arm_cfft_f32+0x44>
 8007be6:	e7b9      	b.n	8007b5c <arm_cfft_f32+0x64>

08007be8 <arm_bitreversal_32>:
 8007be8:	b1e9      	cbz	r1, 8007c26 <arm_bitreversal_32+0x3e>
 8007bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bec:	2500      	movs	r5, #0
 8007bee:	f102 0e02 	add.w	lr, r2, #2
 8007bf2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007bf6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8007bfa:	08a4      	lsrs	r4, r4, #2
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8007c02:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007c06:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8007c0a:	00a6      	lsls	r6, r4, #2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8007c12:	3304      	adds	r3, #4
 8007c14:	1d34      	adds	r4, r6, #4
 8007c16:	3502      	adds	r5, #2
 8007c18:	58c6      	ldr	r6, [r0, r3]
 8007c1a:	5907      	ldr	r7, [r0, r4]
 8007c1c:	50c7      	str	r7, [r0, r3]
 8007c1e:	428d      	cmp	r5, r1
 8007c20:	5106      	str	r6, [r0, r4]
 8007c22:	d3e6      	bcc.n	8007bf2 <arm_bitreversal_32+0xa>
 8007c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c26:	4770      	bx	lr

08007c28 <arm_mat_mult_f32>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	8845      	ldrh	r5, [r0, #2]
 8007c2e:	880b      	ldrh	r3, [r1, #0]
 8007c30:	8806      	ldrh	r6, [r0, #0]
 8007c32:	6847      	ldr	r7, [r0, #4]
 8007c34:	6854      	ldr	r4, [r2, #4]
 8007c36:	6848      	ldr	r0, [r1, #4]
 8007c38:	b08b      	sub	sp, #44	; 0x2c
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007c3e:	9604      	str	r6, [sp, #16]
 8007c40:	8849      	ldrh	r1, [r1, #2]
 8007c42:	f040 808a 	bne.w	8007d5a <arm_mat_mult_f32+0x132>
 8007c46:	8815      	ldrh	r5, [r2, #0]
 8007c48:	42b5      	cmp	r5, r6
 8007c4a:	f040 8086 	bne.w	8007d5a <arm_mat_mult_f32+0x132>
 8007c4e:	8852      	ldrh	r2, [r2, #2]
 8007c50:	428a      	cmp	r2, r1
 8007c52:	f040 8082 	bne.w	8007d5a <arm_mat_mult_f32+0x132>
 8007c56:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007c5a:	1d01      	adds	r1, r0, #4
 8007c5c:	0116      	lsls	r6, r2, #4
 8007c5e:	9108      	str	r1, [sp, #32]
 8007c60:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8007c64:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8007c68:	9101      	str	r1, [sp, #4]
 8007c6a:	fb06 f108 	mul.w	r1, r6, r8
 8007c6e:	0095      	lsls	r5, r2, #2
 8007c70:	9103      	str	r1, [sp, #12]
 8007c72:	00d2      	lsls	r2, r2, #3
 8007c74:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8007c78:	f003 0903 	and.w	r9, r3, #3
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	f107 0b10 	add.w	fp, r7, #16
 8007c82:	eb04 0a05 	add.w	sl, r4, r5
 8007c86:	9107      	str	r1, [sp, #28]
 8007c88:	9202      	str	r2, [sp, #8]
 8007c8a:	9306      	str	r3, [sp, #24]
 8007c8c:	f1ab 0310 	sub.w	r3, fp, #16
 8007c90:	9305      	str	r3, [sp, #20]
 8007c92:	9b07      	ldr	r3, [sp, #28]
 8007c94:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007c98:	eb03 0c0a 	add.w	ip, r3, sl
 8007c9c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007d64 <arm_mat_mult_f32+0x13c>
 8007ca0:	f1b8 0f00 	cmp.w	r8, #0
 8007ca4:	d053      	beq.n	8007d4e <arm_mat_mult_f32+0x126>
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	4644      	mov	r4, r8
 8007caa:	18c1      	adds	r1, r0, r3
 8007cac:	4602      	mov	r2, r0
 8007cae:	465b      	mov	r3, fp
 8007cb0:	ed92 6a00 	vldr	s12, [r2]
 8007cb4:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007cb8:	ed53 4a03 	vldr	s9, [r3, #-12]
 8007cbc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007cc0:	ed91 5a00 	vldr	s10, [r1]
 8007cc4:	ed53 5a01 	vldr	s11, [r3, #-4]
 8007cc8:	1957      	adds	r7, r2, r5
 8007cca:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007cce:	ed97 6a00 	vldr	s12, [r7]
 8007cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cd6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007cda:	194f      	adds	r7, r1, r5
 8007cdc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007ce0:	ee26 7a85 	vmul.f32	s14, s13, s10
 8007ce4:	edd7 7a00 	vldr	s15, [r7]
 8007ce8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007cec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007cf0:	3c01      	subs	r4, #1
 8007cf2:	4432      	add	r2, r6
 8007cf4:	4431      	add	r1, r6
 8007cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cfa:	f103 0310 	add.w	r3, r3, #16
 8007cfe:	d1d7      	bne.n	8007cb0 <arm_mat_mult_f32+0x88>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	9a01      	ldr	r2, [sp, #4]
 8007d04:	4418      	add	r0, r3
 8007d06:	f1b9 0f00 	cmp.w	r9, #0
 8007d0a:	d00b      	beq.n	8007d24 <arm_mat_mult_f32+0xfc>
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	edd0 6a00 	vldr	s13, [r0]
 8007d12:	ecb2 7a01 	vldmia	r2!, {s14}
 8007d16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4428      	add	r0, r5
 8007d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d22:	d1f4      	bne.n	8007d0e <arm_mat_mult_f32+0xe6>
 8007d24:	ecec 7a01 	vstmia	ip!, {s15}
 8007d28:	45d4      	cmp	ip, sl
 8007d2a:	4670      	mov	r0, lr
 8007d2c:	f10e 0e04 	add.w	lr, lr, #4
 8007d30:	d1b4      	bne.n	8007c9c <arm_mat_mult_f32+0x74>
 8007d32:	9a01      	ldr	r2, [sp, #4]
 8007d34:	9b06      	ldr	r3, [sp, #24]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4419      	add	r1, r3
 8007d3a:	449b      	add	fp, r3
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	9101      	str	r1, [sp, #4]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	44aa      	add	sl, r5
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	d004      	beq.n	8007d52 <arm_mat_mult_f32+0x12a>
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	6858      	ldr	r0, [r3, #4]
 8007d4c:	e79e      	b.n	8007c8c <arm_mat_mult_f32+0x64>
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	e7d9      	b.n	8007d06 <arm_mat_mult_f32+0xde>
 8007d52:	4618      	mov	r0, r3
 8007d54:	b00b      	add	sp, #44	; 0x2c
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	f06f 0002 	mvn.w	r0, #2
 8007d5e:	b00b      	add	sp, #44	; 0x2c
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	00000000 	.word	0x00000000

08007d68 <arm_mat_init_f32>:
 8007d68:	8001      	strh	r1, [r0, #0]
 8007d6a:	8042      	strh	r2, [r0, #2]
 8007d6c:	6043      	str	r3, [r0, #4]
 8007d6e:	4770      	bx	lr

08007d70 <arm_fir_init_f32>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	9c04      	ldr	r4, [sp, #16]
 8007d74:	6082      	str	r2, [r0, #8]
 8007d76:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8007d7a:	3c01      	subs	r4, #1
 8007d7c:	440c      	add	r4, r1
 8007d7e:	8001      	strh	r1, [r0, #0]
 8007d80:	4605      	mov	r5, r0
 8007d82:	00a2      	lsls	r2, r4, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	2100      	movs	r1, #0
 8007d88:	f001 ff18 	bl	8009bbc <memset>
 8007d8c:	6068      	str	r0, [r5, #4]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}

08007d90 <arm_fir_f32>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b10 	vpush	{d8-d15}
 8007d98:	b08b      	sub	sp, #44	; 0x2c
 8007d9a:	f8b0 8000 	ldrh.w	r8, [r0]
 8007d9e:	9003      	str	r0, [sp, #12]
 8007da0:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8007da4:	461e      	mov	r6, r3
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 8007dac:	3b01      	subs	r3, #1
 8007dae:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8007db2:	08f3      	lsrs	r3, r6, #3
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	9500      	str	r5, [sp, #0]
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	f000 81f1 	beq.w	80081a0 <arm_fir_f32+0x410>
 8007dbe:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8007dc2:	f100 0620 	add.w	r6, r0, #32
 8007dc6:	9405      	str	r4, [sp, #20]
 8007dc8:	0164      	lsls	r4, r4, #5
 8007dca:	4420      	add	r0, r4
 8007dcc:	f008 0a07 	and.w	sl, r8, #7
 8007dd0:	9607      	str	r6, [sp, #28]
 8007dd2:	9006      	str	r0, [sp, #24]
 8007dd4:	469c      	mov	ip, r3
 8007dd6:	4650      	mov	r0, sl
 8007dd8:	4623      	mov	r3, r4
 8007dda:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007dde:	f8cd 8020 	str.w	r8, [sp, #32]
 8007de2:	1937      	adds	r7, r6, r4
 8007de4:	f109 0b1c 	add.w	fp, r9, #28
 8007de8:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007dec:	9209      	str	r2, [sp, #36]	; 0x24
 8007dee:	f8cd 9014 	str.w	r9, [sp, #20]
 8007df2:	f101 0620 	add.w	r6, r1, #32
 8007df6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007dfa:	9106      	str	r1, [sp, #24]
 8007dfc:	3520      	adds	r5, #32
 8007dfe:	f102 0420 	add.w	r4, r2, #32
 8007e02:	4698      	mov	r8, r3
 8007e04:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8007e08:	f845 3c20 	str.w	r3, [r5, #-32]
 8007e0c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007e10:	f845 3c1c 	str.w	r3, [r5, #-28]
 8007e14:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007e18:	f845 3c18 	str.w	r3, [r5, #-24]
 8007e1c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007e20:	f845 3c14 	str.w	r3, [r5, #-20]
 8007e24:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8007e28:	f845 3c10 	str.w	r3, [r5, #-16]
 8007e2c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007e30:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007e34:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007e38:	f845 3c08 	str.w	r3, [r5, #-8]
 8007e3c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e40:	f845 3c04 	str.w	r3, [r5, #-4]
 8007e44:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 8007e48:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 8007e4c:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 8007e50:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8007e54:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8007e58:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8007e5c:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8007e60:	eddf 6af5 	vldr	s13, [pc, #980]	; 8008238 <arm_fir_f32+0x4a8>
 8007e64:	465a      	mov	r2, fp
 8007e66:	f1be 0f00 	cmp.w	lr, #0
 8007e6a:	f000 81fe 	beq.w	800826a <arm_fir_f32+0x4da>
 8007e6e:	f10b 0120 	add.w	r1, fp, #32
 8007e72:	eef0 ba66 	vmov.f32	s23, s13
 8007e76:	eeb0 6a66 	vmov.f32	s12, s13
 8007e7a:	eeb0 9a66 	vmov.f32	s18, s13
 8007e7e:	eef0 9a66 	vmov.f32	s19, s13
 8007e82:	eeb0 aa66 	vmov.f32	s20, s13
 8007e86:	eef0 aa66 	vmov.f32	s21, s13
 8007e8a:	eeb0 ba66 	vmov.f32	s22, s13
 8007e8e:	460a      	mov	r2, r1
 8007e90:	4653      	mov	r3, sl
 8007e92:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8007e96:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8007e9a:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 8007e9e:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 8007ea2:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 8007ea6:	ed53 ca04 	vldr	s25, [r3, #-16]
 8007eaa:	ed53 2a03 	vldr	s5, [r3, #-12]
 8007eae:	ed13 4a02 	vldr	s8, [r3, #-8]
 8007eb2:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007eb6:	ee67 fa02 	vmul.f32	s31, s14, s4
 8007eba:	ee27 da21 	vmul.f32	s26, s14, s3
 8007ebe:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 8007ec2:	ee27 ca01 	vmul.f32	s24, s14, s2
 8007ec6:	ee27 3a20 	vmul.f32	s6, s14, s1
 8007eca:	ee67 3a00 	vmul.f32	s7, s14, s0
 8007ece:	ee67 5a08 	vmul.f32	s11, s14, s16
 8007ed2:	ee27 fa28 	vmul.f32	s30, s14, s17
 8007ed6:	ee67 7a24 	vmul.f32	s15, s14, s9
 8007eda:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007ede:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007ee2:	ee6e faa1 	vmul.f32	s31, s29, s3
 8007ee6:	ee2e da81 	vmul.f32	s26, s29, s2
 8007eea:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 8007eee:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007ef2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007ef6:	ee2e caa0 	vmul.f32	s24, s29, s1
 8007efa:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8007efe:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007f02:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f06:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8007f0a:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8007f0e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee24 faae 	vmul.f32	s30, s9, s29
 8007f1a:	ee6e ea82 	vmul.f32	s29, s29, s4
 8007f1e:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8007f22:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007f26:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8007f2a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007f2e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007f32:	ee2e da20 	vmul.f32	s26, s28, s1
 8007f36:	ee2e ca00 	vmul.f32	s24, s28, s0
 8007f3a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007f3e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007f42:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8007f46:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8007f4a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f4e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007f52:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8007f56:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8007f5a:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007f5e:	ee2e ea21 	vmul.f32	s28, s28, s3
 8007f62:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8007f66:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007f6a:	ed52 0a04 	vldr	s1, [r2, #-16]
 8007f6e:	ee2d da80 	vmul.f32	s26, s27, s0
 8007f72:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8007f76:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007f7a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007f7e:	ee2d ca88 	vmul.f32	s24, s27, s16
 8007f82:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8007f86:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007f8a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007f8e:	ee64 3aad 	vmul.f32	s7, s9, s27
 8007f92:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8007f96:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007f9a:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8007f9e:	ee21 faad 	vmul.f32	s30, s3, s27
 8007fa2:	ee6d da81 	vmul.f32	s27, s27, s2
 8007fa6:	ee6c fa80 	vmul.f32	s31, s25, s0
 8007faa:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8007fae:	ed12 0a03 	vldr	s0, [r2, #-12]
 8007fb2:	ee3d da2a 	vadd.f32	s26, s26, s21
 8007fb6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007fba:	ee6c aa88 	vmul.f32	s21, s25, s16
 8007fbe:	ee2c caa8 	vmul.f32	s24, s25, s17
 8007fc2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007fc6:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007fca:	ee24 3aac 	vmul.f32	s6, s9, s25
 8007fce:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8007fd2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007fd6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007fda:	ee61 5aac 	vmul.f32	s11, s3, s25
 8007fde:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8007fe2:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8007fe6:	ee6c caa0 	vmul.f32	s25, s25, s1
 8007fea:	ee62 ea88 	vmul.f32	s29, s5, s16
 8007fee:	ee3a da8d 	vadd.f32	s26, s21, s26
 8007ff2:	ed12 8a02 	vldr	s16, [r2, #-8]
 8007ff6:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8007ffa:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007ffe:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008002:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008006:	ee24 caa2 	vmul.f32	s24, s9, s5
 800800a:	ee22 3a22 	vmul.f32	s6, s4, s5
 800800e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008012:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008016:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800801a:	ee61 5a22 	vmul.f32	s11, s2, s5
 800801e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008022:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8008026:	ee20 faa2 	vmul.f32	s30, s1, s5
 800802a:	ee62 2a80 	vmul.f32	s5, s5, s0
 800802e:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8008032:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8008036:	ee24 ba28 	vmul.f32	s22, s8, s17
 800803a:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800803e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008042:	ee24 da84 	vmul.f32	s26, s9, s8
 8008046:	ee22 ca04 	vmul.f32	s24, s4, s8
 800804a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800804e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008052:	ee21 3a84 	vmul.f32	s6, s3, s8
 8008056:	ee61 3a04 	vmul.f32	s7, s2, s8
 800805a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800805e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008062:	ee60 5a84 	vmul.f32	s11, s1, s8
 8008066:	ee20 7a04 	vmul.f32	s14, s0, s8
 800806a:	ee64 6a08 	vmul.f32	s13, s8, s16
 800806e:	ed52 8a01 	vldr	s17, [r2, #-4]
 8008072:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008076:	ee33 9a89 	vadd.f32	s18, s7, s18
 800807a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800807e:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8008082:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008086:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800808a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800808e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008092:	ee22 4a05 	vmul.f32	s8, s4, s10
 8008096:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800809a:	ee61 2a85 	vmul.f32	s5, s3, s10
 800809e:	ee21 3a05 	vmul.f32	s6, s2, s10
 80080a2:	ee60 3a85 	vmul.f32	s7, s1, s10
 80080a6:	ee60 5a05 	vmul.f32	s11, s0, s10
 80080aa:	ee68 ba05 	vmul.f32	s23, s16, s10
 80080ae:	ee65 7a28 	vmul.f32	s15, s10, s17
 80080b2:	3320      	adds	r3, #32
 80080b4:	429f      	cmp	r7, r3
 80080b6:	ee34 ba8b 	vadd.f32	s22, s9, s22
 80080ba:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80080be:	ee32 aa8a 	vadd.f32	s20, s5, s20
 80080c2:	ee73 9a29 	vadd.f32	s19, s6, s19
 80080c6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80080ca:	ee35 6a86 	vadd.f32	s12, s11, s12
 80080ce:	ee7b ba87 	vadd.f32	s23, s23, s14
 80080d2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80080d6:	f102 0220 	add.w	r2, r2, #32
 80080da:	f47f aeda 	bne.w	8007e92 <arm_fir_f32+0x102>
 80080de:	eb0b 0208 	add.w	r2, fp, r8
 80080e2:	46cb      	mov	fp, r9
 80080e4:	b3a0      	cbz	r0, 8008150 <arm_fir_f32+0x3c0>
 80080e6:	4603      	mov	r3, r0
 80080e8:	ecfb 7a01 	vldmia	fp!, {s15}
 80080ec:	ecf2 5a01 	vldmia	r2!, {s11}
 80080f0:	ee27 2a82 	vmul.f32	s4, s15, s4
 80080f4:	ee67 2aa1 	vmul.f32	s5, s15, s3
 80080f8:	ee27 3a81 	vmul.f32	s6, s15, s2
 80080fc:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8008100:	ee27 4a80 	vmul.f32	s8, s15, s0
 8008104:	ee67 4a88 	vmul.f32	s9, s15, s16
 8008108:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800810c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008110:	3b01      	subs	r3, #1
 8008112:	ee3b ba02 	vadd.f32	s22, s22, s4
 8008116:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800811a:	eeb0 2a61 	vmov.f32	s4, s3
 800811e:	ee3a aa03 	vadd.f32	s20, s20, s6
 8008122:	eef0 1a41 	vmov.f32	s3, s2
 8008126:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800812a:	eeb0 1a60 	vmov.f32	s2, s1
 800812e:	ee39 9a04 	vadd.f32	s18, s18, s8
 8008132:	eef0 0a40 	vmov.f32	s1, s0
 8008136:	ee36 6a24 	vadd.f32	s12, s12, s9
 800813a:	eeb0 0a48 	vmov.f32	s0, s16
 800813e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8008142:	eeb0 8a68 	vmov.f32	s16, s17
 8008146:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800814a:	eef0 8a65 	vmov.f32	s17, s11
 800814e:	d1cb      	bne.n	80080e8 <arm_fir_f32+0x358>
 8008150:	f1bc 0c01 	subs.w	ip, ip, #1
 8008154:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8008158:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 800815c:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 8008160:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8008164:	ed04 9a04 	vstr	s18, [r4, #-16]
 8008168:	ed04 6a03 	vstr	s12, [r4, #-12]
 800816c:	ed44 ba02 	vstr	s23, [r4, #-8]
 8008170:	ed44 6a01 	vstr	s13, [r4, #-4]
 8008174:	f106 0620 	add.w	r6, r6, #32
 8008178:	f105 0520 	add.w	r5, r5, #32
 800817c:	f104 0420 	add.w	r4, r4, #32
 8008180:	468b      	mov	fp, r1
 8008182:	f47f ae3f 	bne.w	8007e04 <arm_fir_f32+0x74>
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	9800      	ldr	r0, [sp, #0]
 800818a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800818c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008190:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8008194:	015b      	lsls	r3, r3, #5
 8008196:	4418      	add	r0, r3
 8008198:	4419      	add	r1, r3
 800819a:	441a      	add	r2, r3
 800819c:	4499      	add	r9, r3
 800819e:	9000      	str	r0, [sp, #0]
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	f013 0707 	ands.w	r7, r3, #7
 80081a6:	d020      	beq.n	80081ea <arm_fir_f32+0x45a>
 80081a8:	00bf      	lsls	r7, r7, #2
 80081aa:	9e00      	ldr	r6, [sp, #0]
 80081ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80081b0:	eb01 0c07 	add.w	ip, r1, r7
 80081b4:	464d      	mov	r5, r9
 80081b6:	f851 3b04 	ldr.w	r3, [r1], #4
 80081ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008238 <arm_fir_f32+0x4a8>
 80081be:	f846 3b04 	str.w	r3, [r6], #4
 80081c2:	4674      	mov	r4, lr
 80081c4:	4643      	mov	r3, r8
 80081c6:	4628      	mov	r0, r5
 80081c8:	ecf0 7a01 	vldmia	r0!, {s15}
 80081cc:	ecf4 6a01 	vldmia	r4!, {s13}
 80081d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081d4:	3b01      	subs	r3, #1
 80081d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80081da:	d1f5      	bne.n	80081c8 <arm_fir_f32+0x438>
 80081dc:	4561      	cmp	r1, ip
 80081de:	eca2 7a01 	vstmia	r2!, {s14}
 80081e2:	f105 0504 	add.w	r5, r5, #4
 80081e6:	d1e6      	bne.n	80081b6 <arm_fir_f32+0x426>
 80081e8:	44b9      	add	r9, r7
 80081ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	ea5f 0498 	movs.w	r4, r8, lsr #2
 80081f4:	685d      	ldr	r5, [r3, #4]
 80081f6:	d021      	beq.n	800823c <arm_fir_f32+0x4ac>
 80081f8:	f109 0210 	add.w	r2, r9, #16
 80081fc:	f105 0310 	add.w	r3, r5, #16
 8008200:	4621      	mov	r1, r4
 8008202:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8008206:	f843 0c10 	str.w	r0, [r3, #-16]
 800820a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800820e:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008212:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8008216:	f843 0c08 	str.w	r0, [r3, #-8]
 800821a:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800821e:	f843 0c04 	str.w	r0, [r3, #-4]
 8008222:	3901      	subs	r1, #1
 8008224:	f102 0210 	add.w	r2, r2, #16
 8008228:	f103 0310 	add.w	r3, r3, #16
 800822c:	d1e9      	bne.n	8008202 <arm_fir_f32+0x472>
 800822e:	0124      	lsls	r4, r4, #4
 8008230:	44a1      	add	r9, r4
 8008232:	4425      	add	r5, r4
 8008234:	e002      	b.n	800823c <arm_fir_f32+0x4ac>
 8008236:	bf00      	nop
 8008238:	00000000 	.word	0x00000000
 800823c:	f018 0803 	ands.w	r8, r8, #3
 8008240:	d00e      	beq.n	8008260 <arm_fir_f32+0x4d0>
 8008242:	f8d9 3000 	ldr.w	r3, [r9]
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f1b8 0801 	subs.w	r8, r8, #1
 800824c:	d008      	beq.n	8008260 <arm_fir_f32+0x4d0>
 800824e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008252:	606b      	str	r3, [r5, #4]
 8008254:	f1b8 0f01 	cmp.w	r8, #1
 8008258:	bf1c      	itt	ne
 800825a:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800825e:	60ab      	strne	r3, [r5, #8]
 8008260:	b00b      	add	sp, #44	; 0x2c
 8008262:	ecbd 8b10 	vpop	{d8-d15}
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	eef0 ba66 	vmov.f32	s23, s13
 800826e:	eeb0 6a66 	vmov.f32	s12, s13
 8008272:	eeb0 9a66 	vmov.f32	s18, s13
 8008276:	eef0 9a66 	vmov.f32	s19, s13
 800827a:	eeb0 aa66 	vmov.f32	s20, s13
 800827e:	eef0 aa66 	vmov.f32	s21, s13
 8008282:	eeb0 ba66 	vmov.f32	s22, s13
 8008286:	f8dd b008 	ldr.w	fp, [sp, #8]
 800828a:	f102 0120 	add.w	r1, r2, #32
 800828e:	e729      	b.n	80080e4 <arm_fir_f32+0x354>

08008290 <arm_cmplx_mag_f32>:
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	ed2d 8b02 	vpush	{d8}
 8008298:	0897      	lsrs	r7, r2, #2
 800829a:	b084      	sub	sp, #16
 800829c:	d077      	beq.n	800838e <arm_cmplx_mag_f32+0xfe>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f100 0420 	add.w	r4, r0, #32
 80082a6:	f101 0510 	add.w	r5, r1, #16
 80082aa:	463e      	mov	r6, r7
 80082ac:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80082b0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80082b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c8:	f2c0 80c5 	blt.w	8008456 <arm_cmplx_mag_f32+0x1c6>
 80082cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80082d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80082d8:	f100 80cb 	bmi.w	8008472 <arm_cmplx_mag_f32+0x1e2>
 80082dc:	ed05 8a04 	vstr	s16, [r5, #-16]
 80082e0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80082e4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80082e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	f2c0 80a8 	blt.w	8008450 <arm_cmplx_mag_f32+0x1c0>
 8008300:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008308:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800830c:	f100 80a8 	bmi.w	8008460 <arm_cmplx_mag_f32+0x1d0>
 8008310:	ed05 8a03 	vstr	s16, [r5, #-12]
 8008314:	ed14 0a04 	vldr	s0, [r4, #-16]
 8008318:	ed54 7a03 	vldr	s15, [r4, #-12]
 800831c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008320:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008324:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008328:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008330:	f2c0 808b 	blt.w	800844a <arm_cmplx_mag_f32+0x1ba>
 8008334:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008340:	f100 80a9 	bmi.w	8008496 <arm_cmplx_mag_f32+0x206>
 8008344:	ed05 8a02 	vstr	s16, [r5, #-8]
 8008348:	ed14 0a02 	vldr	s0, [r4, #-8]
 800834c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008350:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008358:	ee30 0a27 	vadd.f32	s0, s0, s15
 800835c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008364:	db6e      	blt.n	8008444 <arm_cmplx_mag_f32+0x1b4>
 8008366:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008372:	f100 8087 	bmi.w	8008484 <arm_cmplx_mag_f32+0x1f4>
 8008376:	ed05 8a01 	vstr	s16, [r5, #-4]
 800837a:	3e01      	subs	r6, #1
 800837c:	f104 0420 	add.w	r4, r4, #32
 8008380:	f105 0510 	add.w	r5, r5, #16
 8008384:	d192      	bne.n	80082ac <arm_cmplx_mag_f32+0x1c>
 8008386:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800838a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800838e:	f012 0203 	ands.w	r2, r2, #3
 8008392:	d052      	beq.n	800843a <arm_cmplx_mag_f32+0x1aa>
 8008394:	ed90 0a00 	vldr	s0, [r0]
 8008398:	edd0 7a01 	vldr	s15, [r0, #4]
 800839c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083a4:	2300      	movs	r3, #0
 80083a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80083aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	bfb8      	it	lt
 80083b4:	600b      	strlt	r3, [r1, #0]
 80083b6:	db08      	blt.n	80083ca <arm_cmplx_mag_f32+0x13a>
 80083b8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80083bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80083c4:	d479      	bmi.n	80084ba <arm_cmplx_mag_f32+0x22a>
 80083c6:	ed81 8a00 	vstr	s16, [r1]
 80083ca:	3a01      	subs	r2, #1
 80083cc:	d035      	beq.n	800843a <arm_cmplx_mag_f32+0x1aa>
 80083ce:	ed90 0a02 	vldr	s0, [r0, #8]
 80083d2:	edd0 7a03 	vldr	s15, [r0, #12]
 80083d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083de:	2300      	movs	r3, #0
 80083e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80083e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ec:	bfb8      	it	lt
 80083ee:	604b      	strlt	r3, [r1, #4]
 80083f0:	db08      	blt.n	8008404 <arm_cmplx_mag_f32+0x174>
 80083f2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80083f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80083fe:	d453      	bmi.n	80084a8 <arm_cmplx_mag_f32+0x218>
 8008400:	ed81 8a01 	vstr	s16, [r1, #4]
 8008404:	2a01      	cmp	r2, #1
 8008406:	d018      	beq.n	800843a <arm_cmplx_mag_f32+0x1aa>
 8008408:	ed90 0a04 	vldr	s0, [r0, #16]
 800840c:	edd0 7a05 	vldr	s15, [r0, #20]
 8008410:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008418:	2300      	movs	r3, #0
 800841a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800841e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008426:	db19      	blt.n	800845c <arm_cmplx_mag_f32+0x1cc>
 8008428:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008430:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008434:	d44a      	bmi.n	80084cc <arm_cmplx_mag_f32+0x23c>
 8008436:	ed81 8a02 	vstr	s16, [r1, #8]
 800843a:	b004      	add	sp, #16
 800843c:	ecbd 8b02 	vpop	{d8}
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	f845 8c04 	str.w	r8, [r5, #-4]
 8008448:	e797      	b.n	800837a <arm_cmplx_mag_f32+0xea>
 800844a:	f845 8c08 	str.w	r8, [r5, #-8]
 800844e:	e77b      	b.n	8008348 <arm_cmplx_mag_f32+0xb8>
 8008450:	f845 8c0c 	str.w	r8, [r5, #-12]
 8008454:	e75e      	b.n	8008314 <arm_cmplx_mag_f32+0x84>
 8008456:	f845 8c10 	str.w	r8, [r5, #-16]
 800845a:	e741      	b.n	80082e0 <arm_cmplx_mag_f32+0x50>
 800845c:	608b      	str	r3, [r1, #8]
 800845e:	e7ec      	b.n	800843a <arm_cmplx_mag_f32+0x1aa>
 8008460:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008464:	9001      	str	r0, [sp, #4]
 8008466:	f003 fad5 	bl	800ba14 <sqrtf>
 800846a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800846e:	9801      	ldr	r0, [sp, #4]
 8008470:	e74e      	b.n	8008310 <arm_cmplx_mag_f32+0x80>
 8008472:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008476:	9001      	str	r0, [sp, #4]
 8008478:	f003 facc 	bl	800ba14 <sqrtf>
 800847c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008480:	9801      	ldr	r0, [sp, #4]
 8008482:	e72b      	b.n	80082dc <arm_cmplx_mag_f32+0x4c>
 8008484:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008488:	9001      	str	r0, [sp, #4]
 800848a:	f003 fac3 	bl	800ba14 <sqrtf>
 800848e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008492:	9801      	ldr	r0, [sp, #4]
 8008494:	e76f      	b.n	8008376 <arm_cmplx_mag_f32+0xe6>
 8008496:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800849a:	9001      	str	r0, [sp, #4]
 800849c:	f003 faba 	bl	800ba14 <sqrtf>
 80084a0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80084a4:	9801      	ldr	r0, [sp, #4]
 80084a6:	e74d      	b.n	8008344 <arm_cmplx_mag_f32+0xb4>
 80084a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ac:	9201      	str	r2, [sp, #4]
 80084ae:	f003 fab1 	bl	800ba14 <sqrtf>
 80084b2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	e7a2      	b.n	8008400 <arm_cmplx_mag_f32+0x170>
 80084ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084be:	9201      	str	r2, [sp, #4]
 80084c0:	f003 faa8 	bl	800ba14 <sqrtf>
 80084c4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80084c8:	9903      	ldr	r1, [sp, #12]
 80084ca:	e77c      	b.n	80083c6 <arm_cmplx_mag_f32+0x136>
 80084cc:	9101      	str	r1, [sp, #4]
 80084ce:	f003 faa1 	bl	800ba14 <sqrtf>
 80084d2:	9901      	ldr	r1, [sp, #4]
 80084d4:	e7af      	b.n	8008436 <arm_cmplx_mag_f32+0x1a6>
 80084d6:	bf00      	nop

080084d8 <arm_cos_f32>:
 80084d8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008560 <arm_cos_f32+0x88>
 80084dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80084e0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80084e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80084f4:	d504      	bpl.n	8008500 <arm_cos_f32+0x28>
 80084f6:	ee17 3a90 	vmov	r3, s15
 80084fa:	3b01      	subs	r3, #1
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008504:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008564 <arm_cos_f32+0x8c>
 8008508:	ee30 0a67 	vsub.f32	s0, s0, s15
 800850c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008510:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008514:	ee17 3a90 	vmov	r3, s15
 8008518:	b29b      	uxth	r3, r3
 800851a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851e:	d21a      	bcs.n	8008556 <arm_cos_f32+0x7e>
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	1c59      	adds	r1, r3, #1
 800852a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <arm_cos_f32+0x90>)
 8008530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008534:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008538:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800853c:	ed93 7a00 	vldr	s14, [r3]
 8008540:	edd2 6a00 	vldr	s13, [r2]
 8008544:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008548:	ee20 0a26 	vmul.f32	s0, s0, s13
 800854c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008550:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008554:	4770      	bx	lr
 8008556:	ee30 0a47 	vsub.f32	s0, s0, s14
 800855a:	2101      	movs	r1, #1
 800855c:	2300      	movs	r3, #0
 800855e:	e7e6      	b.n	800852e <arm_cos_f32+0x56>
 8008560:	3e22f983 	.word	0x3e22f983
 8008564:	44000000 	.word	0x44000000
 8008568:	08010310 	.word	0x08010310

0800856c <arm_scale_f32>:
 800856c:	b470      	push	{r4, r5, r6}
 800856e:	0896      	lsrs	r6, r2, #2
 8008570:	d025      	beq.n	80085be <arm_scale_f32+0x52>
 8008572:	f100 0410 	add.w	r4, r0, #16
 8008576:	f101 0310 	add.w	r3, r1, #16
 800857a:	4635      	mov	r5, r6
 800857c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008580:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008584:	3d01      	subs	r5, #1
 8008586:	ed43 7a04 	vstr	s15, [r3, #-16]
 800858a:	ed54 7a03 	vldr	s15, [r4, #-12]
 800858e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008592:	f104 0410 	add.w	r4, r4, #16
 8008596:	ed43 7a03 	vstr	s15, [r3, #-12]
 800859a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800859e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085a2:	f103 0310 	add.w	r3, r3, #16
 80085a6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80085aa:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80085ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085b2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80085b6:	d1e1      	bne.n	800857c <arm_scale_f32+0x10>
 80085b8:	0136      	lsls	r6, r6, #4
 80085ba:	4430      	add	r0, r6
 80085bc:	4431      	add	r1, r6
 80085be:	f012 0203 	ands.w	r2, r2, #3
 80085c2:	d015      	beq.n	80085f0 <arm_scale_f32+0x84>
 80085c4:	edd0 7a00 	vldr	s15, [r0]
 80085c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085cc:	3a01      	subs	r2, #1
 80085ce:	edc1 7a00 	vstr	s15, [r1]
 80085d2:	d00d      	beq.n	80085f0 <arm_scale_f32+0x84>
 80085d4:	edd0 7a01 	vldr	s15, [r0, #4]
 80085d8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80085dc:	2a01      	cmp	r2, #1
 80085de:	edc1 7a01 	vstr	s15, [r1, #4]
 80085e2:	d005      	beq.n	80085f0 <arm_scale_f32+0x84>
 80085e4:	edd0 7a02 	vldr	s15, [r0, #8]
 80085e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80085ec:	ed81 0a02 	vstr	s0, [r1, #8]
 80085f0:	bc70      	pop	{r4, r5, r6}
 80085f2:	4770      	bx	lr

080085f4 <arm_offset_f32>:
 80085f4:	b470      	push	{r4, r5, r6}
 80085f6:	0896      	lsrs	r6, r2, #2
 80085f8:	d025      	beq.n	8008646 <arm_offset_f32+0x52>
 80085fa:	f100 0410 	add.w	r4, r0, #16
 80085fe:	f101 0310 	add.w	r3, r1, #16
 8008602:	4635      	mov	r5, r6
 8008604:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008608:	ee77 7a80 	vadd.f32	s15, s15, s0
 800860c:	3d01      	subs	r5, #1
 800860e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008612:	ed54 7a03 	vldr	s15, [r4, #-12]
 8008616:	ee77 7a80 	vadd.f32	s15, s15, s0
 800861a:	f104 0410 	add.w	r4, r4, #16
 800861e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8008622:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008626:	ee77 7a80 	vadd.f32	s15, s15, s0
 800862a:	f103 0310 	add.w	r3, r3, #16
 800862e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008632:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8008636:	ee77 7a80 	vadd.f32	s15, s15, s0
 800863a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800863e:	d1e1      	bne.n	8008604 <arm_offset_f32+0x10>
 8008640:	0136      	lsls	r6, r6, #4
 8008642:	4430      	add	r0, r6
 8008644:	4431      	add	r1, r6
 8008646:	f012 0203 	ands.w	r2, r2, #3
 800864a:	d015      	beq.n	8008678 <arm_offset_f32+0x84>
 800864c:	edd0 7a00 	vldr	s15, [r0]
 8008650:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008654:	3a01      	subs	r2, #1
 8008656:	edc1 7a00 	vstr	s15, [r1]
 800865a:	d00d      	beq.n	8008678 <arm_offset_f32+0x84>
 800865c:	edd0 7a01 	vldr	s15, [r0, #4]
 8008660:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008664:	2a01      	cmp	r2, #1
 8008666:	edc1 7a01 	vstr	s15, [r1, #4]
 800866a:	d005      	beq.n	8008678 <arm_offset_f32+0x84>
 800866c:	edd0 7a02 	vldr	s15, [r0, #8]
 8008670:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008674:	ed81 0a02 	vstr	s0, [r1, #8]
 8008678:	bc70      	pop	{r4, r5, r6}
 800867a:	4770      	bx	lr

0800867c <arm_mult_f32>:
 800867c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8008680:	b4f0      	push	{r4, r5, r6, r7}
 8008682:	d033      	beq.n	80086ec <arm_mult_f32+0x70>
 8008684:	f100 0610 	add.w	r6, r0, #16
 8008688:	f101 0510 	add.w	r5, r1, #16
 800868c:	f102 0410 	add.w	r4, r2, #16
 8008690:	4667      	mov	r7, ip
 8008692:	ed15 7a04 	vldr	s14, [r5, #-16]
 8008696:	ed56 7a04 	vldr	s15, [r6, #-16]
 800869a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800869e:	3f01      	subs	r7, #1
 80086a0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80086a4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80086a8:	ed56 7a03 	vldr	s15, [r6, #-12]
 80086ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086b0:	f106 0610 	add.w	r6, r6, #16
 80086b4:	ed44 7a03 	vstr	s15, [r4, #-12]
 80086b8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80086bc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80086c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086c4:	f105 0510 	add.w	r5, r5, #16
 80086c8:	ed44 7a02 	vstr	s15, [r4, #-8]
 80086cc:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80086d0:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80086d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086d8:	f104 0410 	add.w	r4, r4, #16
 80086dc:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80086e0:	d1d7      	bne.n	8008692 <arm_mult_f32+0x16>
 80086e2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80086e6:	4420      	add	r0, r4
 80086e8:	4421      	add	r1, r4
 80086ea:	4422      	add	r2, r4
 80086ec:	f013 0303 	ands.w	r3, r3, #3
 80086f0:	d01b      	beq.n	800872a <arm_mult_f32+0xae>
 80086f2:	edd1 7a00 	vldr	s15, [r1]
 80086f6:	ed90 7a00 	vldr	s14, [r0]
 80086fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086fe:	3b01      	subs	r3, #1
 8008700:	edc2 7a00 	vstr	s15, [r2]
 8008704:	d011      	beq.n	800872a <arm_mult_f32+0xae>
 8008706:	edd0 7a01 	vldr	s15, [r0, #4]
 800870a:	ed91 7a01 	vldr	s14, [r1, #4]
 800870e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008712:	2b01      	cmp	r3, #1
 8008714:	edc2 7a01 	vstr	s15, [r2, #4]
 8008718:	d007      	beq.n	800872a <arm_mult_f32+0xae>
 800871a:	edd0 7a02 	vldr	s15, [r0, #8]
 800871e:	ed91 7a02 	vldr	s14, [r1, #8]
 8008722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008726:	edc2 7a02 	vstr	s15, [r2, #8]
 800872a:	bcf0      	pop	{r4, r5, r6, r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop

08008730 <arm_dot_prod_f32>:
 8008730:	b4f0      	push	{r4, r5, r6, r7}
 8008732:	0897      	lsrs	r7, r2, #2
 8008734:	eddf 5a29 	vldr	s11, [pc, #164]	; 80087dc <arm_dot_prod_f32+0xac>
 8008738:	d02d      	beq.n	8008796 <arm_dot_prod_f32+0x66>
 800873a:	f100 0510 	add.w	r5, r0, #16
 800873e:	f101 0410 	add.w	r4, r1, #16
 8008742:	463e      	mov	r6, r7
 8008744:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008748:	ed54 3a04 	vldr	s7, [r4, #-16]
 800874c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008750:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008754:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008758:	ed54 4a02 	vldr	s9, [r4, #-8]
 800875c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008760:	ed14 5a01 	vldr	s10, [r4, #-4]
 8008764:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008768:	ee27 7a04 	vmul.f32	s14, s14, s8
 800876c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008770:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008774:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008778:	ee66 6a05 	vmul.f32	s13, s12, s10
 800877c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008780:	3e01      	subs	r6, #1
 8008782:	f105 0510 	add.w	r5, r5, #16
 8008786:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800878a:	f104 0410 	add.w	r4, r4, #16
 800878e:	d1d9      	bne.n	8008744 <arm_dot_prod_f32+0x14>
 8008790:	013f      	lsls	r7, r7, #4
 8008792:	4438      	add	r0, r7
 8008794:	4439      	add	r1, r7
 8008796:	f012 0203 	ands.w	r2, r2, #3
 800879a:	d01b      	beq.n	80087d4 <arm_dot_prod_f32+0xa4>
 800879c:	edd1 7a00 	vldr	s15, [r1]
 80087a0:	ed90 7a00 	vldr	s14, [r0]
 80087a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087a8:	3a01      	subs	r2, #1
 80087aa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80087ae:	d011      	beq.n	80087d4 <arm_dot_prod_f32+0xa4>
 80087b0:	edd1 7a01 	vldr	s15, [r1, #4]
 80087b4:	ed90 7a01 	vldr	s14, [r0, #4]
 80087b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087bc:	2a01      	cmp	r2, #1
 80087be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80087c2:	d007      	beq.n	80087d4 <arm_dot_prod_f32+0xa4>
 80087c4:	edd0 7a02 	vldr	s15, [r0, #8]
 80087c8:	ed91 7a02 	vldr	s14, [r1, #8]
 80087cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087d0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80087d4:	edc3 5a00 	vstr	s11, [r3]
 80087d8:	bcf0      	pop	{r4, r5, r6, r7}
 80087da:	4770      	bx	lr
 80087dc:	00000000 	.word	0x00000000

080087e0 <arm_radix8_butterfly_f32>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	ed2d 8b10 	vpush	{d8-d15}
 80087e8:	b095      	sub	sp, #84	; 0x54
 80087ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80087ee:	4603      	mov	r3, r0
 80087f0:	3304      	adds	r3, #4
 80087f2:	ed9f bab9 	vldr	s22, [pc, #740]	; 8008ad8 <arm_radix8_butterfly_f32+0x2f8>
 80087f6:	9012      	str	r0, [sp, #72]	; 0x48
 80087f8:	468b      	mov	fp, r1
 80087fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80087fc:	4689      	mov	r9, r1
 80087fe:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8008802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008804:	960f      	str	r6, [sp, #60]	; 0x3c
 8008806:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800880a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800880e:	eb03 0508 	add.w	r5, r3, r8
 8008812:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8008816:	eb05 040e 	add.w	r4, r5, lr
 800881a:	0137      	lsls	r7, r6, #4
 800881c:	eba6 030a 	sub.w	r3, r6, sl
 8008820:	eb04 000e 	add.w	r0, r4, lr
 8008824:	44b2      	add	sl, r6
 8008826:	1d3a      	adds	r2, r7, #4
 8008828:	9702      	str	r7, [sp, #8]
 800882a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800882e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8008832:	ebae 0c06 	sub.w	ip, lr, r6
 8008836:	9703      	str	r7, [sp, #12]
 8008838:	eb03 0708 	add.w	r7, r3, r8
 800883c:	9701      	str	r7, [sp, #4]
 800883e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8008842:	9706      	str	r7, [sp, #24]
 8008844:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008846:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800884a:	f10e 0104 	add.w	r1, lr, #4
 800884e:	4439      	add	r1, r7
 8008850:	443a      	add	r2, r7
 8008852:	0137      	lsls	r7, r6, #4
 8008854:	00f6      	lsls	r6, r6, #3
 8008856:	9704      	str	r7, [sp, #16]
 8008858:	9605      	str	r6, [sp, #20]
 800885a:	9f01      	ldr	r7, [sp, #4]
 800885c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800885e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8008862:	f04f 0c00 	mov.w	ip, #0
 8008866:	edd4 6a00 	vldr	s13, [r4]
 800886a:	edd7 1a00 	vldr	s3, [r7]
 800886e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8008872:	edd5 5a00 	vldr	s11, [r5]
 8008876:	ed52 9a01 	vldr	s19, [r2, #-4]
 800887a:	ed90 6a00 	vldr	s12, [r0]
 800887e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008882:	ed93 3a00 	vldr	s6, [r3]
 8008886:	ee39 0a86 	vadd.f32	s0, s19, s12
 800888a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800888e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8008892:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008896:	ee35 7a02 	vadd.f32	s14, s10, s4
 800889a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800889e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088a2:	ee74 6a07 	vadd.f32	s13, s8, s14
 80088a6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80088aa:	ed46 6a01 	vstr	s13, [r6, #-4]
 80088ae:	ed85 4a00 	vstr	s8, [r5]
 80088b2:	edd1 6a00 	vldr	s13, [r1]
 80088b6:	ed94 9a01 	vldr	s18, [r4, #4]
 80088ba:	edd3 2a01 	vldr	s5, [r3, #4]
 80088be:	edd7 8a01 	vldr	s17, [r7, #4]
 80088c2:	edd6 0a00 	vldr	s1, [r6]
 80088c6:	edd5 3a01 	vldr	s7, [r5, #4]
 80088ca:	ed90 8a01 	vldr	s16, [r0, #4]
 80088ce:	ed92 7a00 	vldr	s14, [r2]
 80088d2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80088d6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80088da:	ee72 aae8 	vsub.f32	s21, s5, s17
 80088de:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80088e2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80088e6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80088ea:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80088ee:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80088f2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80088f6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80088fa:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80088fe:	ee77 0a08 	vadd.f32	s1, s14, s16
 8008902:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8008906:	ee37 7a48 	vsub.f32	s14, s14, s16
 800890a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800890e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8008912:	ee76 6a89 	vadd.f32	s13, s13, s18
 8008916:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800891a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800891e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008922:	ee35 5a42 	vsub.f32	s10, s10, s4
 8008926:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800892a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800892e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008932:	ee33 3a60 	vsub.f32	s6, s6, s1
 8008936:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800893a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800893e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8008942:	ee37 7a41 	vsub.f32	s14, s14, s2
 8008946:	ee73 1a84 	vadd.f32	s3, s7, s8
 800894a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800894e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8008952:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008956:	ee32 8a00 	vadd.f32	s16, s4, s0
 800895a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800895e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8008962:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008966:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800896a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800896e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008972:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008976:	ee75 4a87 	vadd.f32	s9, s11, s14
 800897a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800897e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008982:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008986:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800898a:	44dc      	add	ip, fp
 800898c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008990:	45e1      	cmp	r9, ip
 8008992:	ed86 8a00 	vstr	s16, [r6]
 8008996:	ed85 2a01 	vstr	s4, [r5, #4]
 800899a:	4456      	add	r6, sl
 800899c:	ed02 0a01 	vstr	s0, [r2, #-4]
 80089a0:	4455      	add	r5, sl
 80089a2:	edc0 6a00 	vstr	s13, [r0]
 80089a6:	ed82 1a00 	vstr	s2, [r2]
 80089aa:	ed80 5a01 	vstr	s10, [r0, #4]
 80089ae:	4452      	add	r2, sl
 80089b0:	ed01 3a01 	vstr	s6, [r1, #-4]
 80089b4:	4450      	add	r0, sl
 80089b6:	edc7 2a00 	vstr	s5, [r7]
 80089ba:	edc4 4a00 	vstr	s9, [r4]
 80089be:	ed83 7a00 	vstr	s14, [r3]
 80089c2:	edc1 5a00 	vstr	s11, [r1]
 80089c6:	edc7 3a01 	vstr	s7, [r7, #4]
 80089ca:	4451      	add	r1, sl
 80089cc:	ed84 6a01 	vstr	s12, [r4, #4]
 80089d0:	4457      	add	r7, sl
 80089d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80089d6:	4454      	add	r4, sl
 80089d8:	4453      	add	r3, sl
 80089da:	f63f af44 	bhi.w	8008866 <arm_radix8_butterfly_f32+0x86>
 80089de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	f240 81b7 	bls.w	8008d54 <arm_radix8_butterfly_f32+0x574>
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	9903      	ldr	r1, [sp, #12]
 80089ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089ec:	9e05      	ldr	r6, [sp, #20]
 80089ee:	9a04      	ldr	r2, [sp, #16]
 80089f0:	f103 0c08 	add.w	ip, r3, #8
 80089f4:	9b02      	ldr	r3, [sp, #8]
 80089f6:	3108      	adds	r1, #8
 80089f8:	f108 0808 	add.w	r8, r8, #8
 80089fc:	1841      	adds	r1, r0, r1
 80089fe:	3608      	adds	r6, #8
 8008a00:	330c      	adds	r3, #12
 8008a02:	4604      	mov	r4, r0
 8008a04:	4444      	add	r4, r8
 8008a06:	18c3      	adds	r3, r0, r3
 8008a08:	9109      	str	r1, [sp, #36]	; 0x24
 8008a0a:	1981      	adds	r1, r0, r6
 8008a0c:	f10e 0e08 	add.w	lr, lr, #8
 8008a10:	3208      	adds	r2, #8
 8008a12:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a14:	9107      	str	r1, [sp, #28]
 8008a16:	4604      	mov	r4, r0
 8008a18:	4601      	mov	r1, r0
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f100 030c 	add.w	r3, r0, #12
 8008a20:	4474      	add	r4, lr
 8008a22:	f04f 0801 	mov.w	r8, #1
 8008a26:	1882      	adds	r2, r0, r2
 8008a28:	4461      	add	r1, ip
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	940a      	str	r4, [sp, #40]	; 0x28
 8008a30:	46c1      	mov	r9, r8
 8008a32:	9208      	str	r2, [sp, #32]
 8008a34:	46d8      	mov	r8, fp
 8008a36:	9106      	str	r1, [sp, #24]
 8008a38:	f04f 0e00 	mov.w	lr, #0
 8008a3c:	469b      	mov	fp, r3
 8008a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a42:	449e      	add	lr, r3
 8008a44:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8008a48:	441a      	add	r2, r3
 8008a4a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a4c:	441a      	add	r2, r3
 8008a4e:	18d4      	adds	r4, r2, r3
 8008a50:	18e5      	adds	r5, r4, r3
 8008a52:	18ee      	adds	r6, r5, r3
 8008a54:	18f7      	adds	r7, r6, r3
 8008a56:	eb07 0c03 	add.w	ip, r7, r3
 8008a5a:	920d      	str	r2, [sp, #52]	; 0x34
 8008a5c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8008a60:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8008a64:	910c      	str	r1, [sp, #48]	; 0x30
 8008a66:	4419      	add	r1, r3
 8008a68:	9103      	str	r1, [sp, #12]
 8008a6a:	4419      	add	r1, r3
 8008a6c:	18ca      	adds	r2, r1, r3
 8008a6e:	9202      	str	r2, [sp, #8]
 8008a70:	441a      	add	r2, r3
 8008a72:	18d0      	adds	r0, r2, r3
 8008a74:	ed92 ea01 	vldr	s28, [r2, #4]
 8008a78:	9a02      	ldr	r2, [sp, #8]
 8008a7a:	edd4 7a00 	vldr	s15, [r4]
 8008a7e:	edd2 da01 	vldr	s27, [r2, #4]
 8008a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a84:	ed91 da01 	vldr	s26, [r1, #4]
 8008a88:	ed92 ca01 	vldr	s24, [r2, #4]
 8008a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a8e:	9903      	ldr	r1, [sp, #12]
 8008a90:	edcd 7a03 	vstr	s15, [sp, #12]
 8008a94:	edd2 7a00 	vldr	s15, [r2]
 8008a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a9a:	edcd 7a02 	vstr	s15, [sp, #8]
 8008a9e:	edd2 7a00 	vldr	s15, [r2]
 8008aa2:	edd0 ea01 	vldr	s29, [r0, #4]
 8008aa6:	edd1 ca01 	vldr	s25, [r1, #4]
 8008aaa:	eddc ba00 	vldr	s23, [ip]
 8008aae:	edd7 aa00 	vldr	s21, [r7]
 8008ab2:	ed96 aa00 	vldr	s20, [r6]
 8008ab6:	edd5 9a00 	vldr	s19, [r5]
 8008aba:	edcd 7a01 	vstr	s15, [sp, #4]
 8008abe:	4403      	add	r3, r0
 8008ac0:	ed93 fa01 	vldr	s30, [r3, #4]
 8008ac4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8008ac8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8008acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ad0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ad4:	46cc      	mov	ip, r9
 8008ad6:	e001      	b.n	8008adc <arm_radix8_butterfly_f32+0x2fc>
 8008ad8:	3f3504f3 	.word	0x3f3504f3
 8008adc:	ed91 6a00 	vldr	s12, [r1]
 8008ae0:	ed93 5a00 	vldr	s10, [r3]
 8008ae4:	edd0 fa00 	vldr	s31, [r0]
 8008ae8:	edd4 7a00 	vldr	s15, [r4]
 8008aec:	ed95 7a00 	vldr	s14, [r5]
 8008af0:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008af4:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008af8:	ed92 2a00 	vldr	s4, [r2]
 8008afc:	ed96 0a00 	vldr	s0, [r6]
 8008b00:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008b04:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008b08:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8008b0c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008b10:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008b14:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008b18:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008b1c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b24:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008b28:	edd4 8a01 	vldr	s17, [r4, #4]
 8008b2c:	ed92 9a01 	vldr	s18, [r2, #4]
 8008b30:	edd7 0a00 	vldr	s1, [r7]
 8008b34:	edd1 2a01 	vldr	s5, [r1, #4]
 8008b38:	ed95 7a01 	vldr	s14, [r5, #4]
 8008b3c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b40:	edd0 5a01 	vldr	s11, [r0, #4]
 8008b44:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008b48:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8008b4c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008b50:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008b54:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008b58:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008b5c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008b60:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008b64:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008b68:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008b6c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008b70:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008b74:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008b78:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008b7c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8008b80:	ee72 fa87 	vadd.f32	s31, s5, s14
 8008b84:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008b88:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008b8c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008b90:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008b94:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008b98:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008b9c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8008ba0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008ba4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008ba8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008bac:	ee74 0a22 	vadd.f32	s1, s8, s5
 8008bb0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008bb4:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008bb8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008bbc:	ee32 4a64 	vsub.f32	s8, s4, s9
 8008bc0:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008bc4:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008bc8:	ee33 9a49 	vsub.f32	s18, s6, s18
 8008bcc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8008bd0:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008bd4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008bd8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8008bdc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008be0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008be4:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008be8:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008bec:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008bf0:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008bf4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008bf8:	ed9d 2a01 	vldr	s4, [sp, #4]
 8008bfc:	eddd 1a02 	vldr	s3, [sp, #8]
 8008c00:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008c04:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008c08:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8008c0c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008c10:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008c14:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008c18:	ee76 5a49 	vsub.f32	s11, s12, s18
 8008c1c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008c20:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008c24:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008c28:	ee21 4a84 	vmul.f32	s8, s3, s8
 8008c2c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8008c30:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008c34:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008c38:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008c3c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8008c40:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008c44:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008c48:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8008c4c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8008c50:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008c54:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008c58:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008c5c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8008c60:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008c64:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008c68:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008c6c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8008c70:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008c74:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008c78:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008c7c:	eddd 5a03 	vldr	s11, [sp, #12]
 8008c80:	edc6 fa00 	vstr	s31, [r6]
 8008c84:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8008c88:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008c8c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8008c90:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008c94:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008c98:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8008c9c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8008ca0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008ca4:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008ca8:	ee74 4a89 	vadd.f32	s9, s9, s18
 8008cac:	ee34 3a43 	vsub.f32	s6, s8, s6
 8008cb0:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008cb4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008cb8:	44c4      	add	ip, r8
 8008cba:	45e3      	cmp	fp, ip
 8008cbc:	edc3 3a00 	vstr	s7, [r3]
 8008cc0:	edc3 6a01 	vstr	s13, [r3, #4]
 8008cc4:	4456      	add	r6, sl
 8008cc6:	ed07 1a01 	vstr	s2, [r7, #-4]
 8008cca:	edc7 0a00 	vstr	s1, [r7]
 8008cce:	4453      	add	r3, sl
 8008cd0:	ed80 2a00 	vstr	s4, [r0]
 8008cd4:	edc0 2a01 	vstr	s5, [r0, #4]
 8008cd8:	4457      	add	r7, sl
 8008cda:	edc2 1a00 	vstr	s3, [r2]
 8008cde:	ed82 7a01 	vstr	s14, [r2, #4]
 8008ce2:	4450      	add	r0, sl
 8008ce4:	ed85 8a00 	vstr	s16, [r5]
 8008ce8:	ed85 0a01 	vstr	s0, [r5, #4]
 8008cec:	4452      	add	r2, sl
 8008cee:	edc1 4a00 	vstr	s9, [r1]
 8008cf2:	4455      	add	r5, sl
 8008cf4:	ed81 3a01 	vstr	s6, [r1, #4]
 8008cf8:	edc4 8a00 	vstr	s17, [r4]
 8008cfc:	ed84 6a01 	vstr	s12, [r4, #4]
 8008d00:	4451      	add	r1, sl
 8008d02:	4454      	add	r4, sl
 8008d04:	f63f aeea 	bhi.w	8008adc <arm_radix8_butterfly_f32+0x2fc>
 8008d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	3308      	adds	r3, #8
 8008d12:	930a      	str	r3, [sp, #40]	; 0x28
 8008d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d16:	3308      	adds	r3, #8
 8008d18:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1a:	9b08      	ldr	r3, [sp, #32]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	9308      	str	r3, [sp, #32]
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	3308      	adds	r3, #8
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	9306      	str	r3, [sp, #24]
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	9305      	str	r3, [sp, #20]
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	3308      	adds	r3, #8
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d3a:	f109 0901 	add.w	r9, r9, #1
 8008d3e:	454b      	cmp	r3, r9
 8008d40:	f47f ae7d 	bne.w	8008a3e <arm_radix8_butterfly_f32+0x25e>
 8008d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	46d9      	mov	r9, fp
 8008d4c:	9310      	str	r3, [sp, #64]	; 0x40
 8008d4e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8008d52:	e554      	b.n	80087fe <arm_radix8_butterfly_f32+0x1e>
 8008d54:	b015      	add	sp, #84	; 0x54
 8008d56:	ecbd 8b10 	vpop	{d8-d15}
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	bf00      	nop

08008d60 <calloc>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <calloc+0xc>)
 8008d62:	460a      	mov	r2, r1
 8008d64:	4601      	mov	r1, r0
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	f000 b802 	b.w	8008d70 <_calloc_r>
 8008d6c:	20000078 	.word	0x20000078

08008d70 <_calloc_r>:
 8008d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d72:	fba1 2402 	umull	r2, r4, r1, r2
 8008d76:	b94c      	cbnz	r4, 8008d8c <_calloc_r+0x1c>
 8008d78:	4611      	mov	r1, r2
 8008d7a:	9201      	str	r2, [sp, #4]
 8008d7c:	f000 f82e 	bl	8008ddc <_malloc_r>
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	4605      	mov	r5, r0
 8008d84:	b930      	cbnz	r0, 8008d94 <_calloc_r+0x24>
 8008d86:	4628      	mov	r0, r5
 8008d88:	b003      	add	sp, #12
 8008d8a:	bd30      	pop	{r4, r5, pc}
 8008d8c:	220c      	movs	r2, #12
 8008d8e:	6002      	str	r2, [r0, #0]
 8008d90:	2500      	movs	r5, #0
 8008d92:	e7f8      	b.n	8008d86 <_calloc_r+0x16>
 8008d94:	4621      	mov	r1, r4
 8008d96:	f000 ff11 	bl	8009bbc <memset>
 8008d9a:	e7f4      	b.n	8008d86 <_calloc_r+0x16>

08008d9c <sbrk_aligned>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	4e0e      	ldr	r6, [pc, #56]	; (8008dd8 <sbrk_aligned+0x3c>)
 8008da0:	460c      	mov	r4, r1
 8008da2:	6831      	ldr	r1, [r6, #0]
 8008da4:	4605      	mov	r5, r0
 8008da6:	b911      	cbnz	r1, 8008dae <sbrk_aligned+0x12>
 8008da8:	f000 ff48 	bl	8009c3c <_sbrk_r>
 8008dac:	6030      	str	r0, [r6, #0]
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 ff43 	bl	8009c3c <_sbrk_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d00a      	beq.n	8008dd0 <sbrk_aligned+0x34>
 8008dba:	1cc4      	adds	r4, r0, #3
 8008dbc:	f024 0403 	bic.w	r4, r4, #3
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d007      	beq.n	8008dd4 <sbrk_aligned+0x38>
 8008dc4:	1a21      	subs	r1, r4, r0
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 ff38 	bl	8009c3c <_sbrk_r>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d101      	bne.n	8008dd4 <sbrk_aligned+0x38>
 8008dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	2000b848 	.word	0x2000b848

08008ddc <_malloc_r>:
 8008ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de0:	1ccd      	adds	r5, r1, #3
 8008de2:	f025 0503 	bic.w	r5, r5, #3
 8008de6:	3508      	adds	r5, #8
 8008de8:	2d0c      	cmp	r5, #12
 8008dea:	bf38      	it	cc
 8008dec:	250c      	movcc	r5, #12
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	4607      	mov	r7, r0
 8008df2:	db01      	blt.n	8008df8 <_malloc_r+0x1c>
 8008df4:	42a9      	cmp	r1, r5
 8008df6:	d905      	bls.n	8008e04 <_malloc_r+0x28>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ed8 <_malloc_r+0xfc>
 8008e08:	f000 f868 	bl	8008edc <__malloc_lock>
 8008e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e10:	461c      	mov	r4, r3
 8008e12:	bb5c      	cbnz	r4, 8008e6c <_malloc_r+0x90>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff ffc0 	bl	8008d9c <sbrk_aligned>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	4604      	mov	r4, r0
 8008e20:	d155      	bne.n	8008ece <_malloc_r+0xf2>
 8008e22:	f8d8 4000 	ldr.w	r4, [r8]
 8008e26:	4626      	mov	r6, r4
 8008e28:	2e00      	cmp	r6, #0
 8008e2a:	d145      	bne.n	8008eb8 <_malloc_r+0xdc>
 8008e2c:	2c00      	cmp	r4, #0
 8008e2e:	d048      	beq.n	8008ec2 <_malloc_r+0xe6>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	4631      	mov	r1, r6
 8008e34:	4638      	mov	r0, r7
 8008e36:	eb04 0903 	add.w	r9, r4, r3
 8008e3a:	f000 feff 	bl	8009c3c <_sbrk_r>
 8008e3e:	4581      	cmp	r9, r0
 8008e40:	d13f      	bne.n	8008ec2 <_malloc_r+0xe6>
 8008e42:	6821      	ldr	r1, [r4, #0]
 8008e44:	1a6d      	subs	r5, r5, r1
 8008e46:	4629      	mov	r1, r5
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff ffa7 	bl	8008d9c <sbrk_aligned>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d037      	beq.n	8008ec2 <_malloc_r+0xe6>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	442b      	add	r3, r5
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d038      	beq.n	8008ed2 <_malloc_r+0xf6>
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	42a2      	cmp	r2, r4
 8008e64:	d12b      	bne.n	8008ebe <_malloc_r+0xe2>
 8008e66:	2200      	movs	r2, #0
 8008e68:	605a      	str	r2, [r3, #4]
 8008e6a:	e00f      	b.n	8008e8c <_malloc_r+0xb0>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	1b52      	subs	r2, r2, r5
 8008e70:	d41f      	bmi.n	8008eb2 <_malloc_r+0xd6>
 8008e72:	2a0b      	cmp	r2, #11
 8008e74:	d917      	bls.n	8008ea6 <_malloc_r+0xca>
 8008e76:	1961      	adds	r1, r4, r5
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	6025      	str	r5, [r4, #0]
 8008e7c:	bf18      	it	ne
 8008e7e:	6059      	strne	r1, [r3, #4]
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	bf08      	it	eq
 8008e84:	f8c8 1000 	streq.w	r1, [r8]
 8008e88:	5162      	str	r2, [r4, r5]
 8008e8a:	604b      	str	r3, [r1, #4]
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f104 060b 	add.w	r6, r4, #11
 8008e92:	f000 f829 	bl	8008ee8 <__malloc_unlock>
 8008e96:	f026 0607 	bic.w	r6, r6, #7
 8008e9a:	1d23      	adds	r3, r4, #4
 8008e9c:	1af2      	subs	r2, r6, r3
 8008e9e:	d0ae      	beq.n	8008dfe <_malloc_r+0x22>
 8008ea0:	1b9b      	subs	r3, r3, r6
 8008ea2:	50a3      	str	r3, [r4, r2]
 8008ea4:	e7ab      	b.n	8008dfe <_malloc_r+0x22>
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	6862      	ldr	r2, [r4, #4]
 8008eaa:	d1dd      	bne.n	8008e68 <_malloc_r+0x8c>
 8008eac:	f8c8 2000 	str.w	r2, [r8]
 8008eb0:	e7ec      	b.n	8008e8c <_malloc_r+0xb0>
 8008eb2:	4623      	mov	r3, r4
 8008eb4:	6864      	ldr	r4, [r4, #4]
 8008eb6:	e7ac      	b.n	8008e12 <_malloc_r+0x36>
 8008eb8:	4634      	mov	r4, r6
 8008eba:	6876      	ldr	r6, [r6, #4]
 8008ebc:	e7b4      	b.n	8008e28 <_malloc_r+0x4c>
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	e7cc      	b.n	8008e5c <_malloc_r+0x80>
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f000 f80e 	bl	8008ee8 <__malloc_unlock>
 8008ecc:	e797      	b.n	8008dfe <_malloc_r+0x22>
 8008ece:	6025      	str	r5, [r4, #0]
 8008ed0:	e7dc      	b.n	8008e8c <_malloc_r+0xb0>
 8008ed2:	605b      	str	r3, [r3, #4]
 8008ed4:	deff      	udf	#255	; 0xff
 8008ed6:	bf00      	nop
 8008ed8:	2000b844 	.word	0x2000b844

08008edc <__malloc_lock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_lock+0x8>)
 8008ede:	f000 bef9 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	2000b98c 	.word	0x2000b98c

08008ee8 <__malloc_unlock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__malloc_unlock+0x8>)
 8008eea:	f000 bef4 	b.w	8009cd6 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	2000b98c 	.word	0x2000b98c

08008ef4 <__cvt>:
 8008ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	ec55 4b10 	vmov	r4, r5, d0
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	460e      	mov	r6, r1
 8008f00:	4619      	mov	r1, r3
 8008f02:	462b      	mov	r3, r5
 8008f04:	bfbb      	ittet	lt
 8008f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f0a:	461d      	movlt	r5, r3
 8008f0c:	2300      	movge	r3, #0
 8008f0e:	232d      	movlt	r3, #45	; 0x2d
 8008f10:	700b      	strb	r3, [r1, #0]
 8008f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f18:	4691      	mov	r9, r2
 8008f1a:	f023 0820 	bic.w	r8, r3, #32
 8008f1e:	bfbc      	itt	lt
 8008f20:	4622      	movlt	r2, r4
 8008f22:	4614      	movlt	r4, r2
 8008f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f28:	d005      	beq.n	8008f36 <__cvt+0x42>
 8008f2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f2e:	d100      	bne.n	8008f32 <__cvt+0x3e>
 8008f30:	3601      	adds	r6, #1
 8008f32:	2102      	movs	r1, #2
 8008f34:	e000      	b.n	8008f38 <__cvt+0x44>
 8008f36:	2103      	movs	r1, #3
 8008f38:	ab03      	add	r3, sp, #12
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	ab02      	add	r3, sp, #8
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	ec45 4b10 	vmov	d0, r4, r5
 8008f44:	4653      	mov	r3, sl
 8008f46:	4632      	mov	r2, r6
 8008f48:	f000 ff82 	bl	8009e50 <_dtoa_r>
 8008f4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f50:	4607      	mov	r7, r0
 8008f52:	d102      	bne.n	8008f5a <__cvt+0x66>
 8008f54:	f019 0f01 	tst.w	r9, #1
 8008f58:	d022      	beq.n	8008fa0 <__cvt+0xac>
 8008f5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f5e:	eb07 0906 	add.w	r9, r7, r6
 8008f62:	d110      	bne.n	8008f86 <__cvt+0x92>
 8008f64:	783b      	ldrb	r3, [r7, #0]
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d10a      	bne.n	8008f80 <__cvt+0x8c>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f76:	b918      	cbnz	r0, 8008f80 <__cvt+0x8c>
 8008f78:	f1c6 0601 	rsb	r6, r6, #1
 8008f7c:	f8ca 6000 	str.w	r6, [sl]
 8008f80:	f8da 3000 	ldr.w	r3, [sl]
 8008f84:	4499      	add	r9, r3
 8008f86:	2200      	movs	r2, #0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7f7 fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f92:	b108      	cbz	r0, 8008f98 <__cvt+0xa4>
 8008f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f98:	2230      	movs	r2, #48	; 0x30
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	454b      	cmp	r3, r9
 8008f9e:	d307      	bcc.n	8008fb0 <__cvt+0xbc>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa4:	1bdb      	subs	r3, r3, r7
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	b004      	add	sp, #16
 8008fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb0:	1c59      	adds	r1, r3, #1
 8008fb2:	9103      	str	r1, [sp, #12]
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	e7f0      	b.n	8008f9a <__cvt+0xa6>

08008fb8 <__exponent>:
 8008fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	bfb8      	it	lt
 8008fc0:	4249      	neglt	r1, r1
 8008fc2:	f803 2b02 	strb.w	r2, [r3], #2
 8008fc6:	bfb4      	ite	lt
 8008fc8:	222d      	movlt	r2, #45	; 0x2d
 8008fca:	222b      	movge	r2, #43	; 0x2b
 8008fcc:	2909      	cmp	r1, #9
 8008fce:	7042      	strb	r2, [r0, #1]
 8008fd0:	dd2a      	ble.n	8009028 <__exponent+0x70>
 8008fd2:	f10d 0207 	add.w	r2, sp, #7
 8008fd6:	4617      	mov	r7, r2
 8008fd8:	260a      	movs	r6, #10
 8008fda:	4694      	mov	ip, r2
 8008fdc:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fe0:	fb06 1415 	mls	r4, r6, r5, r1
 8008fe4:	3430      	adds	r4, #48	; 0x30
 8008fe6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008fea:	460c      	mov	r4, r1
 8008fec:	2c63      	cmp	r4, #99	; 0x63
 8008fee:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	dcf1      	bgt.n	8008fda <__exponent+0x22>
 8008ff6:	3130      	adds	r1, #48	; 0x30
 8008ff8:	f1ac 0402 	sub.w	r4, ip, #2
 8008ffc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009000:	1c41      	adds	r1, r0, #1
 8009002:	4622      	mov	r2, r4
 8009004:	42ba      	cmp	r2, r7
 8009006:	d30a      	bcc.n	800901e <__exponent+0x66>
 8009008:	f10d 0209 	add.w	r2, sp, #9
 800900c:	eba2 020c 	sub.w	r2, r2, ip
 8009010:	42bc      	cmp	r4, r7
 8009012:	bf88      	it	hi
 8009014:	2200      	movhi	r2, #0
 8009016:	4413      	add	r3, r2
 8009018:	1a18      	subs	r0, r3, r0
 800901a:	b003      	add	sp, #12
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009022:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009026:	e7ed      	b.n	8009004 <__exponent+0x4c>
 8009028:	2330      	movs	r3, #48	; 0x30
 800902a:	3130      	adds	r1, #48	; 0x30
 800902c:	7083      	strb	r3, [r0, #2]
 800902e:	70c1      	strb	r1, [r0, #3]
 8009030:	1d03      	adds	r3, r0, #4
 8009032:	e7f1      	b.n	8009018 <__exponent+0x60>

08009034 <_printf_float>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	ed2d 8b02 	vpush	{d8}
 800903c:	b08d      	sub	sp, #52	; 0x34
 800903e:	460c      	mov	r4, r1
 8009040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009044:	4616      	mov	r6, r2
 8009046:	461f      	mov	r7, r3
 8009048:	4605      	mov	r5, r0
 800904a:	f000 fdbf 	bl	8009bcc <_localeconv_r>
 800904e:	f8d0 a000 	ldr.w	sl, [r0]
 8009052:	4650      	mov	r0, sl
 8009054:	f7f7 f90c 	bl	8000270 <strlen>
 8009058:	2300      	movs	r3, #0
 800905a:	930a      	str	r3, [sp, #40]	; 0x28
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	9305      	str	r3, [sp, #20]
 8009060:	f8d8 3000 	ldr.w	r3, [r8]
 8009064:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009068:	3307      	adds	r3, #7
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	f103 0208 	add.w	r2, r3, #8
 8009072:	f8c8 2000 	str.w	r2, [r8]
 8009076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800907a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800907e:	9307      	str	r3, [sp, #28]
 8009080:	f8cd 8018 	str.w	r8, [sp, #24]
 8009084:	ee08 0a10 	vmov	s16, r0
 8009088:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800908c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009090:	4b9e      	ldr	r3, [pc, #632]	; (800930c <_printf_float+0x2d8>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	f7f7 fd49 	bl	8000b2c <__aeabi_dcmpun>
 800909a:	bb88      	cbnz	r0, 8009100 <_printf_float+0xcc>
 800909c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a0:	4b9a      	ldr	r3, [pc, #616]	; (800930c <_printf_float+0x2d8>)
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295
 80090a6:	f7f7 fd23 	bl	8000af0 <__aeabi_dcmple>
 80090aa:	bb48      	cbnz	r0, 8009100 <_printf_float+0xcc>
 80090ac:	2200      	movs	r2, #0
 80090ae:	2300      	movs	r3, #0
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 fd12 	bl	8000adc <__aeabi_dcmplt>
 80090b8:	b110      	cbz	r0, 80090c0 <_printf_float+0x8c>
 80090ba:	232d      	movs	r3, #45	; 0x2d
 80090bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c0:	4a93      	ldr	r2, [pc, #588]	; (8009310 <_printf_float+0x2dc>)
 80090c2:	4b94      	ldr	r3, [pc, #592]	; (8009314 <_printf_float+0x2e0>)
 80090c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090c8:	bf94      	ite	ls
 80090ca:	4690      	movls	r8, r2
 80090cc:	4698      	movhi	r8, r3
 80090ce:	2303      	movs	r3, #3
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	9b05      	ldr	r3, [sp, #20]
 80090d4:	f023 0304 	bic.w	r3, r3, #4
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	f04f 0900 	mov.w	r9, #0
 80090de:	9700      	str	r7, [sp, #0]
 80090e0:	4633      	mov	r3, r6
 80090e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80090e4:	4621      	mov	r1, r4
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 f9da 	bl	80094a0 <_printf_common>
 80090ec:	3001      	adds	r0, #1
 80090ee:	f040 8090 	bne.w	8009212 <_printf_float+0x1de>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	b00d      	add	sp, #52	; 0x34
 80090f8:	ecbd 8b02 	vpop	{d8}
 80090fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009100:	4642      	mov	r2, r8
 8009102:	464b      	mov	r3, r9
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 fd10 	bl	8000b2c <__aeabi_dcmpun>
 800910c:	b140      	cbz	r0, 8009120 <_printf_float+0xec>
 800910e:	464b      	mov	r3, r9
 8009110:	2b00      	cmp	r3, #0
 8009112:	bfbc      	itt	lt
 8009114:	232d      	movlt	r3, #45	; 0x2d
 8009116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800911a:	4a7f      	ldr	r2, [pc, #508]	; (8009318 <_printf_float+0x2e4>)
 800911c:	4b7f      	ldr	r3, [pc, #508]	; (800931c <_printf_float+0x2e8>)
 800911e:	e7d1      	b.n	80090c4 <_printf_float+0x90>
 8009120:	6863      	ldr	r3, [r4, #4]
 8009122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009126:	9206      	str	r2, [sp, #24]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	d13f      	bne.n	80091ac <_printf_float+0x178>
 800912c:	2306      	movs	r3, #6
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	9b05      	ldr	r3, [sp, #20]
 8009132:	6861      	ldr	r1, [r4, #4]
 8009134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009138:	2300      	movs	r3, #0
 800913a:	9303      	str	r3, [sp, #12]
 800913c:	ab0a      	add	r3, sp, #40	; 0x28
 800913e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009142:	ab09      	add	r3, sp, #36	; 0x24
 8009144:	ec49 8b10 	vmov	d0, r8, r9
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009150:	4628      	mov	r0, r5
 8009152:	f7ff fecf 	bl	8008ef4 <__cvt>
 8009156:	9b06      	ldr	r3, [sp, #24]
 8009158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800915a:	2b47      	cmp	r3, #71	; 0x47
 800915c:	4680      	mov	r8, r0
 800915e:	d108      	bne.n	8009172 <_printf_float+0x13e>
 8009160:	1cc8      	adds	r0, r1, #3
 8009162:	db02      	blt.n	800916a <_printf_float+0x136>
 8009164:	6863      	ldr	r3, [r4, #4]
 8009166:	4299      	cmp	r1, r3
 8009168:	dd41      	ble.n	80091ee <_printf_float+0x1ba>
 800916a:	f1ab 0302 	sub.w	r3, fp, #2
 800916e:	fa5f fb83 	uxtb.w	fp, r3
 8009172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009176:	d820      	bhi.n	80091ba <_printf_float+0x186>
 8009178:	3901      	subs	r1, #1
 800917a:	465a      	mov	r2, fp
 800917c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009180:	9109      	str	r1, [sp, #36]	; 0x24
 8009182:	f7ff ff19 	bl	8008fb8 <__exponent>
 8009186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009188:	1813      	adds	r3, r2, r0
 800918a:	2a01      	cmp	r2, #1
 800918c:	4681      	mov	r9, r0
 800918e:	6123      	str	r3, [r4, #16]
 8009190:	dc02      	bgt.n	8009198 <_printf_float+0x164>
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	07d2      	lsls	r2, r2, #31
 8009196:	d501      	bpl.n	800919c <_printf_float+0x168>
 8009198:	3301      	adds	r3, #1
 800919a:	6123      	str	r3, [r4, #16]
 800919c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d09c      	beq.n	80090de <_printf_float+0xaa>
 80091a4:	232d      	movs	r3, #45	; 0x2d
 80091a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091aa:	e798      	b.n	80090de <_printf_float+0xaa>
 80091ac:	9a06      	ldr	r2, [sp, #24]
 80091ae:	2a47      	cmp	r2, #71	; 0x47
 80091b0:	d1be      	bne.n	8009130 <_printf_float+0xfc>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1bc      	bne.n	8009130 <_printf_float+0xfc>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7b9      	b.n	800912e <_printf_float+0xfa>
 80091ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091be:	d118      	bne.n	80091f2 <_printf_float+0x1be>
 80091c0:	2900      	cmp	r1, #0
 80091c2:	6863      	ldr	r3, [r4, #4]
 80091c4:	dd0b      	ble.n	80091de <_printf_float+0x1aa>
 80091c6:	6121      	str	r1, [r4, #16]
 80091c8:	b913      	cbnz	r3, 80091d0 <_printf_float+0x19c>
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	07d0      	lsls	r0, r2, #31
 80091ce:	d502      	bpl.n	80091d6 <_printf_float+0x1a2>
 80091d0:	3301      	adds	r3, #1
 80091d2:	440b      	add	r3, r1
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80091d8:	f04f 0900 	mov.w	r9, #0
 80091dc:	e7de      	b.n	800919c <_printf_float+0x168>
 80091de:	b913      	cbnz	r3, 80091e6 <_printf_float+0x1b2>
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	07d2      	lsls	r2, r2, #31
 80091e4:	d501      	bpl.n	80091ea <_printf_float+0x1b6>
 80091e6:	3302      	adds	r3, #2
 80091e8:	e7f4      	b.n	80091d4 <_printf_float+0x1a0>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7f2      	b.n	80091d4 <_printf_float+0x1a0>
 80091ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f4:	4299      	cmp	r1, r3
 80091f6:	db05      	blt.n	8009204 <_printf_float+0x1d0>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	6121      	str	r1, [r4, #16]
 80091fc:	07d8      	lsls	r0, r3, #31
 80091fe:	d5ea      	bpl.n	80091d6 <_printf_float+0x1a2>
 8009200:	1c4b      	adds	r3, r1, #1
 8009202:	e7e7      	b.n	80091d4 <_printf_float+0x1a0>
 8009204:	2900      	cmp	r1, #0
 8009206:	bfd4      	ite	le
 8009208:	f1c1 0202 	rsble	r2, r1, #2
 800920c:	2201      	movgt	r2, #1
 800920e:	4413      	add	r3, r2
 8009210:	e7e0      	b.n	80091d4 <_printf_float+0x1a0>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	055a      	lsls	r2, r3, #21
 8009216:	d407      	bmi.n	8009228 <_printf_float+0x1f4>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	4642      	mov	r2, r8
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	d12c      	bne.n	8009280 <_printf_float+0x24c>
 8009226:	e764      	b.n	80090f2 <_printf_float+0xbe>
 8009228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800922c:	f240 80e0 	bls.w	80093f0 <_printf_float+0x3bc>
 8009230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	f7f7 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800923c:	2800      	cmp	r0, #0
 800923e:	d034      	beq.n	80092aa <_printf_float+0x276>
 8009240:	4a37      	ldr	r2, [pc, #220]	; (8009320 <_printf_float+0x2ec>)
 8009242:	2301      	movs	r3, #1
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f af51 	beq.w	80090f2 <_printf_float+0xbe>
 8009250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009254:	429a      	cmp	r2, r3
 8009256:	db02      	blt.n	800925e <_printf_float+0x22a>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	07d8      	lsls	r0, r3, #31
 800925c:	d510      	bpl.n	8009280 <_printf_float+0x24c>
 800925e:	ee18 3a10 	vmov	r3, s16
 8009262:	4652      	mov	r2, sl
 8009264:	4631      	mov	r1, r6
 8009266:	4628      	mov	r0, r5
 8009268:	47b8      	blx	r7
 800926a:	3001      	adds	r0, #1
 800926c:	f43f af41 	beq.w	80090f2 <_printf_float+0xbe>
 8009270:	f04f 0800 	mov.w	r8, #0
 8009274:	f104 091a 	add.w	r9, r4, #26
 8009278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800927a:	3b01      	subs	r3, #1
 800927c:	4543      	cmp	r3, r8
 800927e:	dc09      	bgt.n	8009294 <_printf_float+0x260>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	079b      	lsls	r3, r3, #30
 8009284:	f100 8107 	bmi.w	8009496 <_printf_float+0x462>
 8009288:	68e0      	ldr	r0, [r4, #12]
 800928a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928c:	4298      	cmp	r0, r3
 800928e:	bfb8      	it	lt
 8009290:	4618      	movlt	r0, r3
 8009292:	e730      	b.n	80090f6 <_printf_float+0xc2>
 8009294:	2301      	movs	r3, #1
 8009296:	464a      	mov	r2, r9
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f43f af27 	beq.w	80090f2 <_printf_float+0xbe>
 80092a4:	f108 0801 	add.w	r8, r8, #1
 80092a8:	e7e6      	b.n	8009278 <_printf_float+0x244>
 80092aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dc39      	bgt.n	8009324 <_printf_float+0x2f0>
 80092b0:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <_printf_float+0x2ec>)
 80092b2:	2301      	movs	r3, #1
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f af19 	beq.w	80090f2 <_printf_float+0xbe>
 80092c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d102      	bne.n	80092ce <_printf_float+0x29a>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	d5d8      	bpl.n	8009280 <_printf_float+0x24c>
 80092ce:	ee18 3a10 	vmov	r3, s16
 80092d2:	4652      	mov	r2, sl
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	f43f af09 	beq.w	80090f2 <_printf_float+0xbe>
 80092e0:	f04f 0900 	mov.w	r9, #0
 80092e4:	f104 0a1a 	add.w	sl, r4, #26
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	425b      	negs	r3, r3
 80092ec:	454b      	cmp	r3, r9
 80092ee:	dc01      	bgt.n	80092f4 <_printf_float+0x2c0>
 80092f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f2:	e792      	b.n	800921a <_printf_float+0x1e6>
 80092f4:	2301      	movs	r3, #1
 80092f6:	4652      	mov	r2, sl
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f aef7 	beq.w	80090f2 <_printf_float+0xbe>
 8009304:	f109 0901 	add.w	r9, r9, #1
 8009308:	e7ee      	b.n	80092e8 <_printf_float+0x2b4>
 800930a:	bf00      	nop
 800930c:	7fefffff 	.word	0x7fefffff
 8009310:	08020614 	.word	0x08020614
 8009314:	08020618 	.word	0x08020618
 8009318:	0802061c 	.word	0x0802061c
 800931c:	08020620 	.word	0x08020620
 8009320:	08020624 	.word	0x08020624
 8009324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009328:	429a      	cmp	r2, r3
 800932a:	bfa8      	it	ge
 800932c:	461a      	movge	r2, r3
 800932e:	2a00      	cmp	r2, #0
 8009330:	4691      	mov	r9, r2
 8009332:	dc37      	bgt.n	80093a4 <_printf_float+0x370>
 8009334:	f04f 0b00 	mov.w	fp, #0
 8009338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800933c:	f104 021a 	add.w	r2, r4, #26
 8009340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	eba3 0309 	sub.w	r3, r3, r9
 8009348:	455b      	cmp	r3, fp
 800934a:	dc33      	bgt.n	80093b4 <_printf_float+0x380>
 800934c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009350:	429a      	cmp	r2, r3
 8009352:	db3b      	blt.n	80093cc <_printf_float+0x398>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	07da      	lsls	r2, r3, #31
 8009358:	d438      	bmi.n	80093cc <_printf_float+0x398>
 800935a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800935e:	eba2 0903 	sub.w	r9, r2, r3
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	1ad2      	subs	r2, r2, r3
 8009366:	4591      	cmp	r9, r2
 8009368:	bfa8      	it	ge
 800936a:	4691      	movge	r9, r2
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	dc35      	bgt.n	80093de <_printf_float+0x3aa>
 8009372:	f04f 0800 	mov.w	r8, #0
 8009376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937a:	f104 0a1a 	add.w	sl, r4, #26
 800937e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	eba3 0309 	sub.w	r3, r3, r9
 8009388:	4543      	cmp	r3, r8
 800938a:	f77f af79 	ble.w	8009280 <_printf_float+0x24c>
 800938e:	2301      	movs	r3, #1
 8009390:	4652      	mov	r2, sl
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	f43f aeaa 	beq.w	80090f2 <_printf_float+0xbe>
 800939e:	f108 0801 	add.w	r8, r8, #1
 80093a2:	e7ec      	b.n	800937e <_printf_float+0x34a>
 80093a4:	4613      	mov	r3, r2
 80093a6:	4631      	mov	r1, r6
 80093a8:	4642      	mov	r2, r8
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	d1c0      	bne.n	8009334 <_printf_float+0x300>
 80093b2:	e69e      	b.n	80090f2 <_printf_float+0xbe>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4631      	mov	r1, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	9205      	str	r2, [sp, #20]
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	f43f ae97 	beq.w	80090f2 <_printf_float+0xbe>
 80093c4:	9a05      	ldr	r2, [sp, #20]
 80093c6:	f10b 0b01 	add.w	fp, fp, #1
 80093ca:	e7b9      	b.n	8009340 <_printf_float+0x30c>
 80093cc:	ee18 3a10 	vmov	r3, s16
 80093d0:	4652      	mov	r2, sl
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	d1be      	bne.n	800935a <_printf_float+0x326>
 80093dc:	e689      	b.n	80090f2 <_printf_float+0xbe>
 80093de:	9a05      	ldr	r2, [sp, #20]
 80093e0:	464b      	mov	r3, r9
 80093e2:	4442      	add	r2, r8
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	d1c1      	bne.n	8009372 <_printf_float+0x33e>
 80093ee:	e680      	b.n	80090f2 <_printf_float+0xbe>
 80093f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f2:	2a01      	cmp	r2, #1
 80093f4:	dc01      	bgt.n	80093fa <_printf_float+0x3c6>
 80093f6:	07db      	lsls	r3, r3, #31
 80093f8:	d53a      	bpl.n	8009470 <_printf_float+0x43c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4642      	mov	r2, r8
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f ae74 	beq.w	80090f2 <_printf_float+0xbe>
 800940a:	ee18 3a10 	vmov	r3, s16
 800940e:	4652      	mov	r2, sl
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f ae6b 	beq.w	80090f2 <_printf_float+0xbe>
 800941c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009420:	2200      	movs	r2, #0
 8009422:	2300      	movs	r3, #0
 8009424:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009428:	f7f7 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800942c:	b9d8      	cbnz	r0, 8009466 <_printf_float+0x432>
 800942e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009432:	f108 0201 	add.w	r2, r8, #1
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	d10e      	bne.n	800945e <_printf_float+0x42a>
 8009440:	e657      	b.n	80090f2 <_printf_float+0xbe>
 8009442:	2301      	movs	r3, #1
 8009444:	4652      	mov	r2, sl
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae50 	beq.w	80090f2 <_printf_float+0xbe>
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009458:	3b01      	subs	r3, #1
 800945a:	4543      	cmp	r3, r8
 800945c:	dcf1      	bgt.n	8009442 <_printf_float+0x40e>
 800945e:	464b      	mov	r3, r9
 8009460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009464:	e6da      	b.n	800921c <_printf_float+0x1e8>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f104 0a1a 	add.w	sl, r4, #26
 800946e:	e7f2      	b.n	8009456 <_printf_float+0x422>
 8009470:	2301      	movs	r3, #1
 8009472:	4642      	mov	r2, r8
 8009474:	e7df      	b.n	8009436 <_printf_float+0x402>
 8009476:	2301      	movs	r3, #1
 8009478:	464a      	mov	r2, r9
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae36 	beq.w	80090f2 <_printf_float+0xbe>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	4543      	cmp	r3, r8
 8009492:	dcf0      	bgt.n	8009476 <_printf_float+0x442>
 8009494:	e6f8      	b.n	8009288 <_printf_float+0x254>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0919 	add.w	r9, r4, #25
 800949e:	e7f4      	b.n	800948a <_printf_float+0x456>

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4616      	mov	r6, r2
 80094a6:	4699      	mov	r9, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bfb8      	it	lt
 80094b4:	4613      	movlt	r3, r2
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094bc:	4607      	mov	r7, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b10a      	cbz	r2, 80094c6 <_printf_common+0x26>
 80094c2:	3301      	adds	r3, #1
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0699      	lsls	r1, r3, #26
 80094ca:	bf42      	ittt	mi
 80094cc:	6833      	ldrmi	r3, [r6, #0]
 80094ce:	3302      	addmi	r3, #2
 80094d0:	6033      	strmi	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	f015 0506 	ands.w	r5, r5, #6
 80094d8:	d106      	bne.n	80094e8 <_printf_common+0x48>
 80094da:	f104 0a19 	add.w	sl, r4, #25
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc26      	bgt.n	8009536 <_printf_common+0x96>
 80094e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094ec:	1e13      	subs	r3, r2, #0
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	0692      	lsls	r2, r2, #26
 80094f6:	d42b      	bmi.n	8009550 <_printf_common+0xb0>
 80094f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094fc:	4649      	mov	r1, r9
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d01e      	beq.n	8009544 <_printf_common+0xa4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	2b04      	cmp	r3, #4
 8009510:	bf02      	ittt	eq
 8009512:	68e5      	ldreq	r5, [r4, #12]
 8009514:	6833      	ldreq	r3, [r6, #0]
 8009516:	1aed      	subeq	r5, r5, r3
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	bf0c      	ite	eq
 800951c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009520:	2500      	movne	r5, #0
 8009522:	4293      	cmp	r3, r2
 8009524:	bfc4      	itt	gt
 8009526:	1a9b      	subgt	r3, r3, r2
 8009528:	18ed      	addgt	r5, r5, r3
 800952a:	2600      	movs	r6, #0
 800952c:	341a      	adds	r4, #26
 800952e:	42b5      	cmp	r5, r6
 8009530:	d11a      	bne.n	8009568 <_printf_common+0xc8>
 8009532:	2000      	movs	r0, #0
 8009534:	e008      	b.n	8009548 <_printf_common+0xa8>
 8009536:	2301      	movs	r3, #1
 8009538:	4652      	mov	r2, sl
 800953a:	4649      	mov	r1, r9
 800953c:	4638      	mov	r0, r7
 800953e:	47c0      	blx	r8
 8009540:	3001      	adds	r0, #1
 8009542:	d103      	bne.n	800954c <_printf_common+0xac>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	3501      	adds	r5, #1
 800954e:	e7c6      	b.n	80094de <_printf_common+0x3e>
 8009550:	18e1      	adds	r1, r4, r3
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	2030      	movs	r0, #48	; 0x30
 8009556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800955a:	4422      	add	r2, r4
 800955c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009564:	3302      	adds	r3, #2
 8009566:	e7c7      	b.n	80094f8 <_printf_common+0x58>
 8009568:	2301      	movs	r3, #1
 800956a:	4622      	mov	r2, r4
 800956c:	4649      	mov	r1, r9
 800956e:	4638      	mov	r0, r7
 8009570:	47c0      	blx	r8
 8009572:	3001      	adds	r0, #1
 8009574:	d0e6      	beq.n	8009544 <_printf_common+0xa4>
 8009576:	3601      	adds	r6, #1
 8009578:	e7d9      	b.n	800952e <_printf_common+0x8e>
	...

0800957c <_printf_i>:
 800957c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	7e0f      	ldrb	r7, [r1, #24]
 8009582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009584:	2f78      	cmp	r7, #120	; 0x78
 8009586:	4691      	mov	r9, r2
 8009588:	4680      	mov	r8, r0
 800958a:	460c      	mov	r4, r1
 800958c:	469a      	mov	sl, r3
 800958e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009592:	d807      	bhi.n	80095a4 <_printf_i+0x28>
 8009594:	2f62      	cmp	r7, #98	; 0x62
 8009596:	d80a      	bhi.n	80095ae <_printf_i+0x32>
 8009598:	2f00      	cmp	r7, #0
 800959a:	f000 80d4 	beq.w	8009746 <_printf_i+0x1ca>
 800959e:	2f58      	cmp	r7, #88	; 0x58
 80095a0:	f000 80c0 	beq.w	8009724 <_printf_i+0x1a8>
 80095a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095ac:	e03a      	b.n	8009624 <_printf_i+0xa8>
 80095ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095b2:	2b15      	cmp	r3, #21
 80095b4:	d8f6      	bhi.n	80095a4 <_printf_i+0x28>
 80095b6:	a101      	add	r1, pc, #4	; (adr r1, 80095bc <_printf_i+0x40>)
 80095b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009629 	.word	0x08009629
 80095c4:	080095a5 	.word	0x080095a5
 80095c8:	080095a5 	.word	0x080095a5
 80095cc:	080095a5 	.word	0x080095a5
 80095d0:	080095a5 	.word	0x080095a5
 80095d4:	08009629 	.word	0x08009629
 80095d8:	080095a5 	.word	0x080095a5
 80095dc:	080095a5 	.word	0x080095a5
 80095e0:	080095a5 	.word	0x080095a5
 80095e4:	080095a5 	.word	0x080095a5
 80095e8:	0800972d 	.word	0x0800972d
 80095ec:	08009655 	.word	0x08009655
 80095f0:	080096e7 	.word	0x080096e7
 80095f4:	080095a5 	.word	0x080095a5
 80095f8:	080095a5 	.word	0x080095a5
 80095fc:	0800974f 	.word	0x0800974f
 8009600:	080095a5 	.word	0x080095a5
 8009604:	08009655 	.word	0x08009655
 8009608:	080095a5 	.word	0x080095a5
 800960c:	080095a5 	.word	0x080095a5
 8009610:	080096ef 	.word	0x080096ef
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	1d1a      	adds	r2, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	602a      	str	r2, [r5, #0]
 800961c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009624:	2301      	movs	r3, #1
 8009626:	e09f      	b.n	8009768 <_printf_i+0x1ec>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	682b      	ldr	r3, [r5, #0]
 800962c:	0607      	lsls	r7, r0, #24
 800962e:	f103 0104 	add.w	r1, r3, #4
 8009632:	6029      	str	r1, [r5, #0]
 8009634:	d501      	bpl.n	800963a <_printf_i+0xbe>
 8009636:	681e      	ldr	r6, [r3, #0]
 8009638:	e003      	b.n	8009642 <_printf_i+0xc6>
 800963a:	0646      	lsls	r6, r0, #25
 800963c:	d5fb      	bpl.n	8009636 <_printf_i+0xba>
 800963e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009642:	2e00      	cmp	r6, #0
 8009644:	da03      	bge.n	800964e <_printf_i+0xd2>
 8009646:	232d      	movs	r3, #45	; 0x2d
 8009648:	4276      	negs	r6, r6
 800964a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964e:	485a      	ldr	r0, [pc, #360]	; (80097b8 <_printf_i+0x23c>)
 8009650:	230a      	movs	r3, #10
 8009652:	e012      	b.n	800967a <_printf_i+0xfe>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	6820      	ldr	r0, [r4, #0]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	6029      	str	r1, [r5, #0]
 800965c:	0605      	lsls	r5, r0, #24
 800965e:	d501      	bpl.n	8009664 <_printf_i+0xe8>
 8009660:	681e      	ldr	r6, [r3, #0]
 8009662:	e002      	b.n	800966a <_printf_i+0xee>
 8009664:	0641      	lsls	r1, r0, #25
 8009666:	d5fb      	bpl.n	8009660 <_printf_i+0xe4>
 8009668:	881e      	ldrh	r6, [r3, #0]
 800966a:	4853      	ldr	r0, [pc, #332]	; (80097b8 <_printf_i+0x23c>)
 800966c:	2f6f      	cmp	r7, #111	; 0x6f
 800966e:	bf0c      	ite	eq
 8009670:	2308      	moveq	r3, #8
 8009672:	230a      	movne	r3, #10
 8009674:	2100      	movs	r1, #0
 8009676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800967a:	6865      	ldr	r5, [r4, #4]
 800967c:	60a5      	str	r5, [r4, #8]
 800967e:	2d00      	cmp	r5, #0
 8009680:	bfa2      	ittt	ge
 8009682:	6821      	ldrge	r1, [r4, #0]
 8009684:	f021 0104 	bicge.w	r1, r1, #4
 8009688:	6021      	strge	r1, [r4, #0]
 800968a:	b90e      	cbnz	r6, 8009690 <_printf_i+0x114>
 800968c:	2d00      	cmp	r5, #0
 800968e:	d04b      	beq.n	8009728 <_printf_i+0x1ac>
 8009690:	4615      	mov	r5, r2
 8009692:	fbb6 f1f3 	udiv	r1, r6, r3
 8009696:	fb03 6711 	mls	r7, r3, r1, r6
 800969a:	5dc7      	ldrb	r7, [r0, r7]
 800969c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096a0:	4637      	mov	r7, r6
 80096a2:	42bb      	cmp	r3, r7
 80096a4:	460e      	mov	r6, r1
 80096a6:	d9f4      	bls.n	8009692 <_printf_i+0x116>
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d10b      	bne.n	80096c4 <_printf_i+0x148>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	07de      	lsls	r6, r3, #31
 80096b0:	d508      	bpl.n	80096c4 <_printf_i+0x148>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	6861      	ldr	r1, [r4, #4]
 80096b6:	4299      	cmp	r1, r3
 80096b8:	bfde      	ittt	le
 80096ba:	2330      	movle	r3, #48	; 0x30
 80096bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096c4:	1b52      	subs	r2, r2, r5
 80096c6:	6122      	str	r2, [r4, #16]
 80096c8:	f8cd a000 	str.w	sl, [sp]
 80096cc:	464b      	mov	r3, r9
 80096ce:	aa03      	add	r2, sp, #12
 80096d0:	4621      	mov	r1, r4
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff fee4 	bl	80094a0 <_printf_common>
 80096d8:	3001      	adds	r0, #1
 80096da:	d14a      	bne.n	8009772 <_printf_i+0x1f6>
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	b004      	add	sp, #16
 80096e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f043 0320 	orr.w	r3, r3, #32
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	4833      	ldr	r0, [pc, #204]	; (80097bc <_printf_i+0x240>)
 80096f0:	2778      	movs	r7, #120	; 0x78
 80096f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	061f      	lsls	r7, r3, #24
 80096fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009700:	d402      	bmi.n	8009708 <_printf_i+0x18c>
 8009702:	065f      	lsls	r7, r3, #25
 8009704:	bf48      	it	mi
 8009706:	b2b6      	uxthmi	r6, r6
 8009708:	07df      	lsls	r7, r3, #31
 800970a:	bf48      	it	mi
 800970c:	f043 0320 	orrmi.w	r3, r3, #32
 8009710:	6029      	str	r1, [r5, #0]
 8009712:	bf48      	it	mi
 8009714:	6023      	strmi	r3, [r4, #0]
 8009716:	b91e      	cbnz	r6, 8009720 <_printf_i+0x1a4>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f023 0320 	bic.w	r3, r3, #32
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	2310      	movs	r3, #16
 8009722:	e7a7      	b.n	8009674 <_printf_i+0xf8>
 8009724:	4824      	ldr	r0, [pc, #144]	; (80097b8 <_printf_i+0x23c>)
 8009726:	e7e4      	b.n	80096f2 <_printf_i+0x176>
 8009728:	4615      	mov	r5, r2
 800972a:	e7bd      	b.n	80096a8 <_printf_i+0x12c>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	6826      	ldr	r6, [r4, #0]
 8009730:	6961      	ldr	r1, [r4, #20]
 8009732:	1d18      	adds	r0, r3, #4
 8009734:	6028      	str	r0, [r5, #0]
 8009736:	0635      	lsls	r5, r6, #24
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	d501      	bpl.n	8009740 <_printf_i+0x1c4>
 800973c:	6019      	str	r1, [r3, #0]
 800973e:	e002      	b.n	8009746 <_printf_i+0x1ca>
 8009740:	0670      	lsls	r0, r6, #25
 8009742:	d5fb      	bpl.n	800973c <_printf_i+0x1c0>
 8009744:	8019      	strh	r1, [r3, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	4615      	mov	r5, r2
 800974c:	e7bc      	b.n	80096c8 <_printf_i+0x14c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	1d1a      	adds	r2, r3, #4
 8009752:	602a      	str	r2, [r5, #0]
 8009754:	681d      	ldr	r5, [r3, #0]
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	2100      	movs	r1, #0
 800975a:	4628      	mov	r0, r5
 800975c:	f7f6 fd38 	bl	80001d0 <memchr>
 8009760:	b108      	cbz	r0, 8009766 <_printf_i+0x1ea>
 8009762:	1b40      	subs	r0, r0, r5
 8009764:	6060      	str	r0, [r4, #4]
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009770:	e7aa      	b.n	80096c8 <_printf_i+0x14c>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	462a      	mov	r2, r5
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d0ad      	beq.n	80096dc <_printf_i+0x160>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	079b      	lsls	r3, r3, #30
 8009784:	d413      	bmi.n	80097ae <_printf_i+0x232>
 8009786:	68e0      	ldr	r0, [r4, #12]
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	4298      	cmp	r0, r3
 800978c:	bfb8      	it	lt
 800978e:	4618      	movlt	r0, r3
 8009790:	e7a6      	b.n	80096e0 <_printf_i+0x164>
 8009792:	2301      	movs	r3, #1
 8009794:	4632      	mov	r2, r6
 8009796:	4649      	mov	r1, r9
 8009798:	4640      	mov	r0, r8
 800979a:	47d0      	blx	sl
 800979c:	3001      	adds	r0, #1
 800979e:	d09d      	beq.n	80096dc <_printf_i+0x160>
 80097a0:	3501      	adds	r5, #1
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	9903      	ldr	r1, [sp, #12]
 80097a6:	1a5b      	subs	r3, r3, r1
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	dcf2      	bgt.n	8009792 <_printf_i+0x216>
 80097ac:	e7eb      	b.n	8009786 <_printf_i+0x20a>
 80097ae:	2500      	movs	r5, #0
 80097b0:	f104 0619 	add.w	r6, r4, #25
 80097b4:	e7f5      	b.n	80097a2 <_printf_i+0x226>
 80097b6:	bf00      	nop
 80097b8:	08020626 	.word	0x08020626
 80097bc:	08020637 	.word	0x08020637

080097c0 <std>:
 80097c0:	2300      	movs	r3, #0
 80097c2:	b510      	push	{r4, lr}
 80097c4:	4604      	mov	r4, r0
 80097c6:	e9c0 3300 	strd	r3, r3, [r0]
 80097ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ce:	6083      	str	r3, [r0, #8]
 80097d0:	8181      	strh	r1, [r0, #12]
 80097d2:	6643      	str	r3, [r0, #100]	; 0x64
 80097d4:	81c2      	strh	r2, [r0, #14]
 80097d6:	6183      	str	r3, [r0, #24]
 80097d8:	4619      	mov	r1, r3
 80097da:	2208      	movs	r2, #8
 80097dc:	305c      	adds	r0, #92	; 0x5c
 80097de:	f000 f9ed 	bl	8009bbc <memset>
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <std+0x38>)
 80097e4:	6263      	str	r3, [r4, #36]	; 0x24
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <std+0x3c>)
 80097e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <std+0x40>)
 80097ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <std+0x44>)
 80097f0:	6224      	str	r4, [r4, #32]
 80097f2:	6323      	str	r3, [r4, #48]	; 0x30
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	bf00      	nop
 80097f8:	08009a0d 	.word	0x08009a0d
 80097fc:	08009a2f 	.word	0x08009a2f
 8009800:	08009a67 	.word	0x08009a67
 8009804:	08009a8b 	.word	0x08009a8b

08009808 <stdio_exit_handler>:
 8009808:	4a02      	ldr	r2, [pc, #8]	; (8009814 <stdio_exit_handler+0xc>)
 800980a:	4903      	ldr	r1, [pc, #12]	; (8009818 <stdio_exit_handler+0x10>)
 800980c:	4803      	ldr	r0, [pc, #12]	; (800981c <stdio_exit_handler+0x14>)
 800980e:	f000 b869 	b.w	80098e4 <_fwalk_sglue>
 8009812:	bf00      	nop
 8009814:	20000020 	.word	0x20000020
 8009818:	0800b569 	.word	0x0800b569
 800981c:	2000002c 	.word	0x2000002c

08009820 <cleanup_stdio>:
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <cleanup_stdio+0x34>)
 8009824:	4299      	cmp	r1, r3
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d001      	beq.n	8009830 <cleanup_stdio+0x10>
 800982c:	f001 fe9c 	bl	800b568 <_fflush_r>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <cleanup_stdio+0x38>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <cleanup_stdio+0x1e>
 8009838:	4620      	mov	r0, r4
 800983a:	f001 fe95 	bl	800b568 <_fflush_r>
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <cleanup_stdio+0x3c>)
 8009842:	4299      	cmp	r1, r3
 8009844:	d004      	beq.n	8009850 <cleanup_stdio+0x30>
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f001 be8c 	b.w	800b568 <_fflush_r>
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	2000b84c 	.word	0x2000b84c
 8009858:	2000b8b4 	.word	0x2000b8b4
 800985c:	2000b91c 	.word	0x2000b91c

08009860 <global_stdio_init.part.0>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <global_stdio_init.part.0+0x30>)
 8009864:	4c0b      	ldr	r4, [pc, #44]	; (8009894 <global_stdio_init.part.0+0x34>)
 8009866:	4a0c      	ldr	r2, [pc, #48]	; (8009898 <global_stdio_init.part.0+0x38>)
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	2200      	movs	r2, #0
 800986e:	2104      	movs	r1, #4
 8009870:	f7ff ffa6 	bl	80097c0 <std>
 8009874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009878:	2201      	movs	r2, #1
 800987a:	2109      	movs	r1, #9
 800987c:	f7ff ffa0 	bl	80097c0 <std>
 8009880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009884:	2202      	movs	r2, #2
 8009886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988a:	2112      	movs	r1, #18
 800988c:	f7ff bf98 	b.w	80097c0 <std>
 8009890:	2000b984 	.word	0x2000b984
 8009894:	2000b84c 	.word	0x2000b84c
 8009898:	08009809 	.word	0x08009809

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	; (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 ba19 	b.w	8009cd4 <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	2000b98d 	.word	0x2000b98d

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 ba14 	b.w	8009cd6 <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	2000b98d 	.word	0x2000b98d

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	f7ff fff0 	bl	800989c <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	b11b      	cbz	r3, 80098c8 <__sinit+0x14>
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f7ff bff0 	b.w	80098a8 <__sfp_lock_release>
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f5      	bne.n	80098c0 <__sinit+0xc>
 80098d4:	f7ff ffc4 	bl	8009860 <global_stdio_init.part.0>
 80098d8:	e7f2      	b.n	80098c0 <__sinit+0xc>
 80098da:	bf00      	nop
 80098dc:	08009821 	.word	0x08009821
 80098e0:	2000b984 	.word	0x2000b984

080098e4 <_fwalk_sglue>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	2600      	movs	r6, #0
 80098f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f4:	f1b9 0901 	subs.w	r9, r9, #1
 80098f8:	d505      	bpl.n	8009906 <_fwalk_sglue+0x22>
 80098fa:	6824      	ldr	r4, [r4, #0]
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d1f7      	bne.n	80098f0 <_fwalk_sglue+0xc>
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d907      	bls.n	800991c <_fwalk_sglue+0x38>
 800990c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009910:	3301      	adds	r3, #1
 8009912:	d003      	beq.n	800991c <_fwalk_sglue+0x38>
 8009914:	4629      	mov	r1, r5
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	4306      	orrs	r6, r0
 800991c:	3568      	adds	r5, #104	; 0x68
 800991e:	e7e9      	b.n	80098f4 <_fwalk_sglue+0x10>

08009920 <iprintf>:
 8009920:	b40f      	push	{r0, r1, r2, r3}
 8009922:	b507      	push	{r0, r1, r2, lr}
 8009924:	4906      	ldr	r1, [pc, #24]	; (8009940 <iprintf+0x20>)
 8009926:	ab04      	add	r3, sp, #16
 8009928:	6808      	ldr	r0, [r1, #0]
 800992a:	f853 2b04 	ldr.w	r2, [r3], #4
 800992e:	6881      	ldr	r1, [r0, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	f001 fc79 	bl	800b228 <_vfiprintf_r>
 8009936:	b003      	add	sp, #12
 8009938:	f85d eb04 	ldr.w	lr, [sp], #4
 800993c:	b004      	add	sp, #16
 800993e:	4770      	bx	lr
 8009940:	20000078 	.word	0x20000078

08009944 <putchar>:
 8009944:	4b02      	ldr	r3, [pc, #8]	; (8009950 <putchar+0xc>)
 8009946:	4601      	mov	r1, r0
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	6882      	ldr	r2, [r0, #8]
 800994c:	f001 be96 	b.w	800b67c <_putc_r>
 8009950:	20000078 	.word	0x20000078

08009954 <_puts_r>:
 8009954:	6a03      	ldr	r3, [r0, #32]
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	6884      	ldr	r4, [r0, #8]
 800995a:	4605      	mov	r5, r0
 800995c:	460e      	mov	r6, r1
 800995e:	b90b      	cbnz	r3, 8009964 <_puts_r+0x10>
 8009960:	f7ff ffa8 	bl	80098b4 <__sinit>
 8009964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009966:	07db      	lsls	r3, r3, #31
 8009968:	d405      	bmi.n	8009976 <_puts_r+0x22>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	0598      	lsls	r0, r3, #22
 800996e:	d402      	bmi.n	8009976 <_puts_r+0x22>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f9af 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	0719      	lsls	r1, r3, #28
 800997a:	d513      	bpl.n	80099a4 <_puts_r+0x50>
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	b18b      	cbz	r3, 80099a4 <_puts_r+0x50>
 8009980:	3e01      	subs	r6, #1
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009988:	3b01      	subs	r3, #1
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	b9e9      	cbnz	r1, 80099ca <_puts_r+0x76>
 800998e:	2b00      	cmp	r3, #0
 8009990:	da2e      	bge.n	80099f0 <_puts_r+0x9c>
 8009992:	4622      	mov	r2, r4
 8009994:	210a      	movs	r1, #10
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f87b 	bl	8009a92 <__swbuf_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d007      	beq.n	80099b0 <_puts_r+0x5c>
 80099a0:	250a      	movs	r5, #10
 80099a2:	e007      	b.n	80099b4 <_puts_r+0x60>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f8b0 	bl	8009b0c <__swsetup_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0e7      	beq.n	8009980 <_puts_r+0x2c>
 80099b0:	f04f 35ff 	mov.w	r5, #4294967295
 80099b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_puts_r+0x72>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	059b      	lsls	r3, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_puts_r+0x72>
 80099c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c2:	f000 f988 	bl	8009cd6 <__retarget_lock_release_recursive>
 80099c6:	4628      	mov	r0, r5
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da04      	bge.n	80099d8 <_puts_r+0x84>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	dc06      	bgt.n	80099e2 <_puts_r+0x8e>
 80099d4:	290a      	cmp	r1, #10
 80099d6:	d004      	beq.n	80099e2 <_puts_r+0x8e>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	7019      	strb	r1, [r3, #0]
 80099e0:	e7cf      	b.n	8009982 <_puts_r+0x2e>
 80099e2:	4622      	mov	r2, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f854 	bl	8009a92 <__swbuf_r>
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1c9      	bne.n	8009982 <_puts_r+0x2e>
 80099ee:	e7df      	b.n	80099b0 <_puts_r+0x5c>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	250a      	movs	r5, #10
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	701d      	strb	r5, [r3, #0]
 80099fa:	e7db      	b.n	80099b4 <_puts_r+0x60>

080099fc <puts>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <puts+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f7ff bfa7 	b.w	8009954 <_puts_r>
 8009a06:	bf00      	nop
 8009a08:	20000078 	.word	0x20000078

08009a0c <__sread>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	f000 f900 	bl	8009c18 <_read_r>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	bfab      	itete	ge
 8009a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a20:	181b      	addge	r3, r3, r0
 8009a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a26:	bfac      	ite	ge
 8009a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a2a:	81a3      	strhlt	r3, [r4, #12]
 8009a2c:	bd10      	pop	{r4, pc}

08009a2e <__swrite>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	461f      	mov	r7, r3
 8009a34:	898b      	ldrh	r3, [r1, #12]
 8009a36:	05db      	lsls	r3, r3, #23
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	d505      	bpl.n	8009a4c <__swrite+0x1e>
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	2302      	movs	r3, #2
 8009a46:	2200      	movs	r2, #0
 8009a48:	f000 f8d4 	bl	8009bf4 <_lseek_r>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f000 b8fb 	b.w	8009c5c <_write_r>

08009a66 <__sseek>:
 8009a66:	b510      	push	{r4, lr}
 8009a68:	460c      	mov	r4, r1
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	f000 f8c1 	bl	8009bf4 <_lseek_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	bf15      	itete	ne
 8009a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a82:	81a3      	strheq	r3, [r4, #12]
 8009a84:	bf18      	it	ne
 8009a86:	81a3      	strhne	r3, [r4, #12]
 8009a88:	bd10      	pop	{r4, pc}

08009a8a <__sclose>:
 8009a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8e:	f000 b8a1 	b.w	8009bd4 <_close_r>

08009a92 <__swbuf_r>:
 8009a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a94:	460e      	mov	r6, r1
 8009a96:	4614      	mov	r4, r2
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b118      	cbz	r0, 8009aa4 <__swbuf_r+0x12>
 8009a9c:	6a03      	ldr	r3, [r0, #32]
 8009a9e:	b90b      	cbnz	r3, 8009aa4 <__swbuf_r+0x12>
 8009aa0:	f7ff ff08 	bl	80098b4 <__sinit>
 8009aa4:	69a3      	ldr	r3, [r4, #24]
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	071a      	lsls	r2, r3, #28
 8009aac:	d525      	bpl.n	8009afa <__swbuf_r+0x68>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b31b      	cbz	r3, 8009afa <__swbuf_r+0x68>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	6922      	ldr	r2, [r4, #16]
 8009ab6:	1a98      	subs	r0, r3, r2
 8009ab8:	6963      	ldr	r3, [r4, #20]
 8009aba:	b2f6      	uxtb	r6, r6
 8009abc:	4283      	cmp	r3, r0
 8009abe:	4637      	mov	r7, r6
 8009ac0:	dc04      	bgt.n	8009acc <__swbuf_r+0x3a>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f001 fd4f 	bl	800b568 <_fflush_r>
 8009aca:	b9e0      	cbnz	r0, 8009b06 <__swbuf_r+0x74>
 8009acc:	68a3      	ldr	r3, [r4, #8]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	701e      	strb	r6, [r3, #0]
 8009ada:	6962      	ldr	r2, [r4, #20]
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d004      	beq.n	8009aec <__swbuf_r+0x5a>
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	07db      	lsls	r3, r3, #31
 8009ae6:	d506      	bpl.n	8009af6 <__swbuf_r+0x64>
 8009ae8:	2e0a      	cmp	r6, #10
 8009aea:	d104      	bne.n	8009af6 <__swbuf_r+0x64>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4628      	mov	r0, r5
 8009af0:	f001 fd3a 	bl	800b568 <_fflush_r>
 8009af4:	b938      	cbnz	r0, 8009b06 <__swbuf_r+0x74>
 8009af6:	4638      	mov	r0, r7
 8009af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009afa:	4621      	mov	r1, r4
 8009afc:	4628      	mov	r0, r5
 8009afe:	f000 f805 	bl	8009b0c <__swsetup_r>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d0d5      	beq.n	8009ab2 <__swbuf_r+0x20>
 8009b06:	f04f 37ff 	mov.w	r7, #4294967295
 8009b0a:	e7f4      	b.n	8009af6 <__swbuf_r+0x64>

08009b0c <__swsetup_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4b2a      	ldr	r3, [pc, #168]	; (8009bb8 <__swsetup_r+0xac>)
 8009b10:	4605      	mov	r5, r0
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	460c      	mov	r4, r1
 8009b16:	b118      	cbz	r0, 8009b20 <__swsetup_r+0x14>
 8009b18:	6a03      	ldr	r3, [r0, #32]
 8009b1a:	b90b      	cbnz	r3, 8009b20 <__swsetup_r+0x14>
 8009b1c:	f7ff feca 	bl	80098b4 <__sinit>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b26:	0718      	lsls	r0, r3, #28
 8009b28:	d422      	bmi.n	8009b70 <__swsetup_r+0x64>
 8009b2a:	06d9      	lsls	r1, r3, #27
 8009b2c:	d407      	bmi.n	8009b3e <__swsetup_r+0x32>
 8009b2e:	2309      	movs	r3, #9
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e034      	b.n	8009ba8 <__swsetup_r+0x9c>
 8009b3e:	0758      	lsls	r0, r3, #29
 8009b40:	d512      	bpl.n	8009b68 <__swsetup_r+0x5c>
 8009b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b44:	b141      	cbz	r1, 8009b58 <__swsetup_r+0x4c>
 8009b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	d002      	beq.n	8009b54 <__swsetup_r+0x48>
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f000 ff70 	bl	800aa34 <_free_r>
 8009b54:	2300      	movs	r3, #0
 8009b56:	6363      	str	r3, [r4, #52]	; 0x34
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	2300      	movs	r3, #0
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f043 0308 	orr.w	r3, r3, #8
 8009b6e:	81a3      	strh	r3, [r4, #12]
 8009b70:	6923      	ldr	r3, [r4, #16]
 8009b72:	b94b      	cbnz	r3, 8009b88 <__swsetup_r+0x7c>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b7e:	d003      	beq.n	8009b88 <__swsetup_r+0x7c>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f001 fd3e 	bl	800b604 <__smakebuf_r>
 8009b88:	89a0      	ldrh	r0, [r4, #12]
 8009b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b8e:	f010 0301 	ands.w	r3, r0, #1
 8009b92:	d00a      	beq.n	8009baa <__swsetup_r+0x9e>
 8009b94:	2300      	movs	r3, #0
 8009b96:	60a3      	str	r3, [r4, #8]
 8009b98:	6963      	ldr	r3, [r4, #20]
 8009b9a:	425b      	negs	r3, r3
 8009b9c:	61a3      	str	r3, [r4, #24]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	b943      	cbnz	r3, 8009bb4 <__swsetup_r+0xa8>
 8009ba2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ba6:	d1c4      	bne.n	8009b32 <__swsetup_r+0x26>
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	0781      	lsls	r1, r0, #30
 8009bac:	bf58      	it	pl
 8009bae:	6963      	ldrpl	r3, [r4, #20]
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	e7f4      	b.n	8009b9e <__swsetup_r+0x92>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7f7      	b.n	8009ba8 <__swsetup_r+0x9c>
 8009bb8:	20000078 	.word	0x20000078

08009bbc <memset>:
 8009bbc:	4402      	add	r2, r0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d100      	bne.n	8009bc6 <memset+0xa>
 8009bc4:	4770      	bx	lr
 8009bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bca:	e7f9      	b.n	8009bc0 <memset+0x4>

08009bcc <_localeconv_r>:
 8009bcc:	4800      	ldr	r0, [pc, #0]	; (8009bd0 <_localeconv_r+0x4>)
 8009bce:	4770      	bx	lr
 8009bd0:	2000016c 	.word	0x2000016c

08009bd4 <_close_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_close_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f9 f82f 	bl	8002c42 <_close>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_close_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_close_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	2000b988 	.word	0x2000b988

08009bf4 <_lseek_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4d07      	ldr	r5, [pc, #28]	; (8009c14 <_lseek_r+0x20>)
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	602a      	str	r2, [r5, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f7f9 f844 	bl	8002c90 <_lseek>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_lseek_r+0x1e>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_lseek_r+0x1e>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	2000b988 	.word	0x2000b988

08009c18 <_read_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	; (8009c38 <_read_r+0x20>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4608      	mov	r0, r1
 8009c20:	4611      	mov	r1, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f7f8 ffee 	bl	8002c08 <_read>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_read_r+0x1e>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_read_r+0x1e>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	2000b988 	.word	0x2000b988

08009c3c <_sbrk_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d06      	ldr	r5, [pc, #24]	; (8009c58 <_sbrk_r+0x1c>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	602b      	str	r3, [r5, #0]
 8009c48:	f7f9 f830 	bl	8002cac <_sbrk>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_sbrk_r+0x1a>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_sbrk_r+0x1a>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	2000b988 	.word	0x2000b988

08009c5c <_write_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	; (8009c7c <_write_r+0x20>)
 8009c60:	4604      	mov	r4, r0
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	602a      	str	r2, [r5, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f7f8 fcc2 	bl	80025f4 <_write>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_write_r+0x1e>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_write_r+0x1e>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	2000b988 	.word	0x2000b988

08009c80 <__errno>:
 8009c80:	4b01      	ldr	r3, [pc, #4]	; (8009c88 <__errno+0x8>)
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20000078 	.word	0x20000078

08009c8c <__libc_init_array>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	4d0d      	ldr	r5, [pc, #52]	; (8009cc4 <__libc_init_array+0x38>)
 8009c90:	4c0d      	ldr	r4, [pc, #52]	; (8009cc8 <__libc_init_array+0x3c>)
 8009c92:	1b64      	subs	r4, r4, r5
 8009c94:	10a4      	asrs	r4, r4, #2
 8009c96:	2600      	movs	r6, #0
 8009c98:	42a6      	cmp	r6, r4
 8009c9a:	d109      	bne.n	8009cb0 <__libc_init_array+0x24>
 8009c9c:	4d0b      	ldr	r5, [pc, #44]	; (8009ccc <__libc_init_array+0x40>)
 8009c9e:	4c0c      	ldr	r4, [pc, #48]	; (8009cd0 <__libc_init_array+0x44>)
 8009ca0:	f003 f874 	bl	800cd8c <_init>
 8009ca4:	1b64      	subs	r4, r4, r5
 8009ca6:	10a4      	asrs	r4, r4, #2
 8009ca8:	2600      	movs	r6, #0
 8009caa:	42a6      	cmp	r6, r4
 8009cac:	d105      	bne.n	8009cba <__libc_init_array+0x2e>
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb4:	4798      	blx	r3
 8009cb6:	3601      	adds	r6, #1
 8009cb8:	e7ee      	b.n	8009c98 <__libc_init_array+0xc>
 8009cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cbe:	4798      	blx	r3
 8009cc0:	3601      	adds	r6, #1
 8009cc2:	e7f2      	b.n	8009caa <__libc_init_array+0x1e>
 8009cc4:	080209c0 	.word	0x080209c0
 8009cc8:	080209c0 	.word	0x080209c0
 8009ccc:	080209c0 	.word	0x080209c0
 8009cd0:	080209c4 	.word	0x080209c4

08009cd4 <__retarget_lock_acquire_recursive>:
 8009cd4:	4770      	bx	lr

08009cd6 <__retarget_lock_release_recursive>:
 8009cd6:	4770      	bx	lr

08009cd8 <memcpy>:
 8009cd8:	440a      	add	r2, r1
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce0:	d100      	bne.n	8009ce4 <memcpy+0xc>
 8009ce2:	4770      	bx	lr
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	d1f9      	bne.n	8009ce6 <memcpy+0xe>
 8009cf2:	bd10      	pop	{r4, pc}

08009cf4 <frexpf>:
 8009cf4:	ee10 3a10 	vmov	r3, s0
 8009cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d02:	6001      	str	r1, [r0, #0]
 8009d04:	da19      	bge.n	8009d3a <frexpf+0x46>
 8009d06:	b1c2      	cbz	r2, 8009d3a <frexpf+0x46>
 8009d08:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009d0c:	d10a      	bne.n	8009d24 <frexpf+0x30>
 8009d0e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009d3c <frexpf+0x48>
 8009d12:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009d16:	f06f 0118 	mvn.w	r1, #24
 8009d1a:	ee17 3a90 	vmov	r3, s15
 8009d1e:	6001      	str	r1, [r0, #0]
 8009d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d24:	6801      	ldr	r1, [r0, #0]
 8009d26:	15d2      	asrs	r2, r2, #23
 8009d28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d2c:	3a7e      	subs	r2, #126	; 0x7e
 8009d2e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8009d32:	4411      	add	r1, r2
 8009d34:	ee00 3a10 	vmov	s0, r3
 8009d38:	6001      	str	r1, [r0, #0]
 8009d3a:	4770      	bx	lr
 8009d3c:	4c000000 	.word	0x4c000000

08009d40 <quorem>:
 8009d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	6903      	ldr	r3, [r0, #16]
 8009d46:	690c      	ldr	r4, [r1, #16]
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	db7e      	blt.n	8009e4c <quorem+0x10c>
 8009d4e:	3c01      	subs	r4, #1
 8009d50:	f101 0814 	add.w	r8, r1, #20
 8009d54:	f100 0514 	add.w	r5, r0, #20
 8009d58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d66:	3301      	adds	r3, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d72:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d76:	d331      	bcc.n	8009ddc <quorem+0x9c>
 8009d78:	f04f 0e00 	mov.w	lr, #0
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	46ac      	mov	ip, r5
 8009d80:	46f2      	mov	sl, lr
 8009d82:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d86:	b293      	uxth	r3, r2
 8009d88:	fb06 e303 	mla	r3, r6, r3, lr
 8009d8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d90:	0c1a      	lsrs	r2, r3, #16
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	ebaa 0303 	sub.w	r3, sl, r3
 8009d98:	f8dc a000 	ldr.w	sl, [ip]
 8009d9c:	fa13 f38a 	uxtah	r3, r3, sl
 8009da0:	fb06 220e 	mla	r2, r6, lr, r2
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dac:	b292      	uxth	r2, r2
 8009dae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009db2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009db6:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dba:	4581      	cmp	r9, r0
 8009dbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dc0:	f84c 3b04 	str.w	r3, [ip], #4
 8009dc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dc8:	d2db      	bcs.n	8009d82 <quorem+0x42>
 8009dca:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dce:	b92b      	cbnz	r3, 8009ddc <quorem+0x9c>
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	3b04      	subs	r3, #4
 8009dd4:	429d      	cmp	r5, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	d32c      	bcc.n	8009e34 <quorem+0xf4>
 8009dda:	613c      	str	r4, [r7, #16]
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f001 f8f9 	bl	800afd4 <__mcmp>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	db22      	blt.n	8009e2c <quorem+0xec>
 8009de6:	3601      	adds	r6, #1
 8009de8:	4629      	mov	r1, r5
 8009dea:	2000      	movs	r0, #0
 8009dec:	f858 2b04 	ldr.w	r2, [r8], #4
 8009df0:	f8d1 c000 	ldr.w	ip, [r1]
 8009df4:	b293      	uxth	r3, r2
 8009df6:	1ac3      	subs	r3, r0, r3
 8009df8:	0c12      	lsrs	r2, r2, #16
 8009dfa:	fa13 f38c 	uxtah	r3, r3, ip
 8009dfe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e0c:	45c1      	cmp	r9, r8
 8009e0e:	f841 3b04 	str.w	r3, [r1], #4
 8009e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e16:	d2e9      	bcs.n	8009dec <quorem+0xac>
 8009e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e20:	b922      	cbnz	r2, 8009e2c <quorem+0xec>
 8009e22:	3b04      	subs	r3, #4
 8009e24:	429d      	cmp	r5, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	d30a      	bcc.n	8009e40 <quorem+0x100>
 8009e2a:	613c      	str	r4, [r7, #16]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	b003      	add	sp, #12
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	3b04      	subs	r3, #4
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d1ce      	bne.n	8009dda <quorem+0x9a>
 8009e3c:	3c01      	subs	r4, #1
 8009e3e:	e7c9      	b.n	8009dd4 <quorem+0x94>
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	3b04      	subs	r3, #4
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1f0      	bne.n	8009e2a <quorem+0xea>
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	e7eb      	b.n	8009e24 <quorem+0xe4>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7ee      	b.n	8009e2e <quorem+0xee>

08009e50 <_dtoa_r>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	ed2d 8b04 	vpush	{d8-d9}
 8009e58:	69c5      	ldr	r5, [r0, #28]
 8009e5a:	b093      	sub	sp, #76	; 0x4c
 8009e5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e60:	ec57 6b10 	vmov	r6, r7, d0
 8009e64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e68:	9107      	str	r1, [sp, #28]
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8009e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009e70:	b975      	cbnz	r5, 8009e90 <_dtoa_r+0x40>
 8009e72:	2010      	movs	r0, #16
 8009e74:	f000 fe2a 	bl	800aacc <malloc>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	61e0      	str	r0, [r4, #28]
 8009e7c:	b920      	cbnz	r0, 8009e88 <_dtoa_r+0x38>
 8009e7e:	4bae      	ldr	r3, [pc, #696]	; (800a138 <_dtoa_r+0x2e8>)
 8009e80:	21ef      	movs	r1, #239	; 0xef
 8009e82:	48ae      	ldr	r0, [pc, #696]	; (800a13c <_dtoa_r+0x2ec>)
 8009e84:	f001 fc50 	bl	800b728 <__assert_func>
 8009e88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e8c:	6005      	str	r5, [r0, #0]
 8009e8e:	60c5      	str	r5, [r0, #12]
 8009e90:	69e3      	ldr	r3, [r4, #28]
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	b151      	cbz	r1, 8009eac <_dtoa_r+0x5c>
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	604a      	str	r2, [r1, #4]
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4093      	lsls	r3, r2
 8009e9e:	608b      	str	r3, [r1, #8]
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fe5b 	bl	800ab5c <_Bfree>
 8009ea6:	69e3      	ldr	r3, [r4, #28]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	1e3b      	subs	r3, r7, #0
 8009eae:	bfbb      	ittet	lt
 8009eb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eb4:	9303      	strlt	r3, [sp, #12]
 8009eb6:	2300      	movge	r3, #0
 8009eb8:	2201      	movlt	r2, #1
 8009eba:	bfac      	ite	ge
 8009ebc:	f8c8 3000 	strge.w	r3, [r8]
 8009ec0:	f8c8 2000 	strlt.w	r2, [r8]
 8009ec4:	4b9e      	ldr	r3, [pc, #632]	; (800a140 <_dtoa_r+0x2f0>)
 8009ec6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009eca:	ea33 0308 	bics.w	r3, r3, r8
 8009ece:	d11b      	bne.n	8009f08 <_dtoa_r+0xb8>
 8009ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ed2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009edc:	4333      	orrs	r3, r6
 8009ede:	f000 8593 	beq.w	800aa08 <_dtoa_r+0xbb8>
 8009ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee4:	b963      	cbnz	r3, 8009f00 <_dtoa_r+0xb0>
 8009ee6:	4b97      	ldr	r3, [pc, #604]	; (800a144 <_dtoa_r+0x2f4>)
 8009ee8:	e027      	b.n	8009f3a <_dtoa_r+0xea>
 8009eea:	4b97      	ldr	r3, [pc, #604]	; (800a148 <_dtoa_r+0x2f8>)
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	3308      	adds	r3, #8
 8009ef0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	9800      	ldr	r0, [sp, #0]
 8009ef6:	b013      	add	sp, #76	; 0x4c
 8009ef8:	ecbd 8b04 	vpop	{d8-d9}
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	4b90      	ldr	r3, [pc, #576]	; (800a144 <_dtoa_r+0x2f4>)
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	3303      	adds	r3, #3
 8009f06:	e7f3      	b.n	8009ef0 <_dtoa_r+0xa0>
 8009f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	ec51 0b17 	vmov	r0, r1, d7
 8009f12:	eeb0 8a47 	vmov.f32	s16, s14
 8009f16:	eef0 8a67 	vmov.f32	s17, s15
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f7f6 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f20:	4681      	mov	r9, r0
 8009f22:	b160      	cbz	r0, 8009f3e <_dtoa_r+0xee>
 8009f24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f26:	2301      	movs	r3, #1
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8568 	beq.w	800aa02 <_dtoa_r+0xbb2>
 8009f32:	4b86      	ldr	r3, [pc, #536]	; (800a14c <_dtoa_r+0x2fc>)
 8009f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	e7da      	b.n	8009ef4 <_dtoa_r+0xa4>
 8009f3e:	aa10      	add	r2, sp, #64	; 0x40
 8009f40:	a911      	add	r1, sp, #68	; 0x44
 8009f42:	4620      	mov	r0, r4
 8009f44:	eeb0 0a48 	vmov.f32	s0, s16
 8009f48:	eef0 0a68 	vmov.f32	s1, s17
 8009f4c:	f001 f8e8 	bl	800b120 <__d2b>
 8009f50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f54:	4682      	mov	sl, r0
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	d07f      	beq.n	800a05a <_dtoa_r+0x20a>
 8009f5a:	ee18 3a90 	vmov	r3, s17
 8009f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f66:	ec51 0b18 	vmov	r0, r1, d8
 8009f6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f76:	4619      	mov	r1, r3
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4b75      	ldr	r3, [pc, #468]	; (800a150 <_dtoa_r+0x300>)
 8009f7c:	f7f6 f984 	bl	8000288 <__aeabi_dsub>
 8009f80:	a367      	add	r3, pc, #412	; (adr r3, 800a120 <_dtoa_r+0x2d0>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 fb37 	bl	80005f8 <__aeabi_dmul>
 8009f8a:	a367      	add	r3, pc, #412	; (adr r3, 800a128 <_dtoa_r+0x2d8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 f97c 	bl	800028c <__adddf3>
 8009f94:	4606      	mov	r6, r0
 8009f96:	4628      	mov	r0, r5
 8009f98:	460f      	mov	r7, r1
 8009f9a:	f7f6 fac3 	bl	8000524 <__aeabi_i2d>
 8009f9e:	a364      	add	r3, pc, #400	; (adr r3, 800a130 <_dtoa_r+0x2e0>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fb28 	bl	80005f8 <__aeabi_dmul>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 f96c 	bl	800028c <__adddf3>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	f7f6 fdce 	bl	8000b58 <__aeabi_d2iz>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4683      	mov	fp, r0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fd89 	bl	8000adc <__aeabi_dcmplt>
 8009fca:	b148      	cbz	r0, 8009fe0 <_dtoa_r+0x190>
 8009fcc:	4658      	mov	r0, fp
 8009fce:	f7f6 faa9 	bl	8000524 <__aeabi_i2d>
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	f7f6 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fda:	b908      	cbnz	r0, 8009fe0 <_dtoa_r+0x190>
 8009fdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fe0:	f1bb 0f16 	cmp.w	fp, #22
 8009fe4:	d857      	bhi.n	800a096 <_dtoa_r+0x246>
 8009fe6:	4b5b      	ldr	r3, [pc, #364]	; (800a154 <_dtoa_r+0x304>)
 8009fe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	ec51 0b18 	vmov	r0, r1, d8
 8009ff4:	f7f6 fd72 	bl	8000adc <__aeabi_dcmplt>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d04e      	beq.n	800a09a <_dtoa_r+0x24a>
 8009ffc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a000:	2300      	movs	r3, #0
 800a002:	930c      	str	r3, [sp, #48]	; 0x30
 800a004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a006:	1b5b      	subs	r3, r3, r5
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	bf45      	ittet	mi
 800a00c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a010:	9305      	strmi	r3, [sp, #20]
 800a012:	2300      	movpl	r3, #0
 800a014:	2300      	movmi	r3, #0
 800a016:	9206      	str	r2, [sp, #24]
 800a018:	bf54      	ite	pl
 800a01a:	9305      	strpl	r3, [sp, #20]
 800a01c:	9306      	strmi	r3, [sp, #24]
 800a01e:	f1bb 0f00 	cmp.w	fp, #0
 800a022:	db3c      	blt.n	800a09e <_dtoa_r+0x24e>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a02a:	445b      	add	r3, fp
 800a02c:	9306      	str	r3, [sp, #24]
 800a02e:	2300      	movs	r3, #0
 800a030:	9308      	str	r3, [sp, #32]
 800a032:	9b07      	ldr	r3, [sp, #28]
 800a034:	2b09      	cmp	r3, #9
 800a036:	d868      	bhi.n	800a10a <_dtoa_r+0x2ba>
 800a038:	2b05      	cmp	r3, #5
 800a03a:	bfc4      	itt	gt
 800a03c:	3b04      	subgt	r3, #4
 800a03e:	9307      	strgt	r3, [sp, #28]
 800a040:	9b07      	ldr	r3, [sp, #28]
 800a042:	f1a3 0302 	sub.w	r3, r3, #2
 800a046:	bfcc      	ite	gt
 800a048:	2500      	movgt	r5, #0
 800a04a:	2501      	movle	r5, #1
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	f200 8085 	bhi.w	800a15c <_dtoa_r+0x30c>
 800a052:	e8df f003 	tbb	[pc, r3]
 800a056:	3b2e      	.short	0x3b2e
 800a058:	5839      	.short	0x5839
 800a05a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a05e:	441d      	add	r5, r3
 800a060:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a064:	2b20      	cmp	r3, #32
 800a066:	bfc1      	itttt	gt
 800a068:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a06c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a070:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a074:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a078:	bfd6      	itet	le
 800a07a:	f1c3 0320 	rsble	r3, r3, #32
 800a07e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a082:	fa06 f003 	lslle.w	r0, r6, r3
 800a086:	f7f6 fa3d 	bl	8000504 <__aeabi_ui2d>
 800a08a:	2201      	movs	r2, #1
 800a08c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a090:	3d01      	subs	r5, #1
 800a092:	920e      	str	r2, [sp, #56]	; 0x38
 800a094:	e76f      	b.n	8009f76 <_dtoa_r+0x126>
 800a096:	2301      	movs	r3, #1
 800a098:	e7b3      	b.n	800a002 <_dtoa_r+0x1b2>
 800a09a:	900c      	str	r0, [sp, #48]	; 0x30
 800a09c:	e7b2      	b.n	800a004 <_dtoa_r+0x1b4>
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	eba3 030b 	sub.w	r3, r3, fp
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	f1cb 0300 	rsb	r3, fp, #0
 800a0aa:	9308      	str	r3, [sp, #32]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0b0:	e7bf      	b.n	800a032 <_dtoa_r+0x1e2>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc52      	bgt.n	800a162 <_dtoa_r+0x312>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0c6:	e00b      	b.n	800a0e0 <_dtoa_r+0x290>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e7f3      	b.n	800a0b4 <_dtoa_r+0x264>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d2:	445b      	add	r3, fp
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	bfb8      	it	lt
 800a0de:	2301      	movlt	r3, #1
 800a0e0:	69e0      	ldr	r0, [r4, #28]
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	f102 0614 	add.w	r6, r2, #20
 800a0ea:	429e      	cmp	r6, r3
 800a0ec:	d93d      	bls.n	800a16a <_dtoa_r+0x31a>
 800a0ee:	6041      	str	r1, [r0, #4]
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fcf3 	bl	800aadc <_Balloc>
 800a0f6:	9000      	str	r0, [sp, #0]
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d139      	bne.n	800a170 <_dtoa_r+0x320>
 800a0fc:	4b16      	ldr	r3, [pc, #88]	; (800a158 <_dtoa_r+0x308>)
 800a0fe:	4602      	mov	r2, r0
 800a100:	f240 11af 	movw	r1, #431	; 0x1af
 800a104:	e6bd      	b.n	8009e82 <_dtoa_r+0x32>
 800a106:	2301      	movs	r3, #1
 800a108:	e7e1      	b.n	800a0ce <_dtoa_r+0x27e>
 800a10a:	2501      	movs	r5, #1
 800a10c:	2300      	movs	r3, #0
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	9509      	str	r5, [sp, #36]	; 0x24
 800a112:	f04f 33ff 	mov.w	r3, #4294967295
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	2200      	movs	r2, #0
 800a11c:	2312      	movs	r3, #18
 800a11e:	e7d1      	b.n	800a0c4 <_dtoa_r+0x274>
 800a120:	636f4361 	.word	0x636f4361
 800a124:	3fd287a7 	.word	0x3fd287a7
 800a128:	8b60c8b3 	.word	0x8b60c8b3
 800a12c:	3fc68a28 	.word	0x3fc68a28
 800a130:	509f79fb 	.word	0x509f79fb
 800a134:	3fd34413 	.word	0x3fd34413
 800a138:	08020655 	.word	0x08020655
 800a13c:	0802066c 	.word	0x0802066c
 800a140:	7ff00000 	.word	0x7ff00000
 800a144:	08020651 	.word	0x08020651
 800a148:	08020648 	.word	0x08020648
 800a14c:	08020625 	.word	0x08020625
 800a150:	3ff80000 	.word	0x3ff80000
 800a154:	08020758 	.word	0x08020758
 800a158:	080206c4 	.word	0x080206c4
 800a15c:	2301      	movs	r3, #1
 800a15e:	9309      	str	r3, [sp, #36]	; 0x24
 800a160:	e7d7      	b.n	800a112 <_dtoa_r+0x2c2>
 800a162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	e7ba      	b.n	800a0e0 <_dtoa_r+0x290>
 800a16a:	3101      	adds	r1, #1
 800a16c:	0052      	lsls	r2, r2, #1
 800a16e:	e7ba      	b.n	800a0e6 <_dtoa_r+0x296>
 800a170:	69e3      	ldr	r3, [r4, #28]
 800a172:	9a00      	ldr	r2, [sp, #0]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	2b0e      	cmp	r3, #14
 800a17a:	f200 80a8 	bhi.w	800a2ce <_dtoa_r+0x47e>
 800a17e:	2d00      	cmp	r5, #0
 800a180:	f000 80a5 	beq.w	800a2ce <_dtoa_r+0x47e>
 800a184:	f1bb 0f00 	cmp.w	fp, #0
 800a188:	dd38      	ble.n	800a1fc <_dtoa_r+0x3ac>
 800a18a:	4bc0      	ldr	r3, [pc, #768]	; (800a48c <_dtoa_r+0x63c>)
 800a18c:	f00b 020f 	and.w	r2, fp, #15
 800a190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a194:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a198:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a19c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1a0:	d019      	beq.n	800a1d6 <_dtoa_r+0x386>
 800a1a2:	4bbb      	ldr	r3, [pc, #748]	; (800a490 <_dtoa_r+0x640>)
 800a1a4:	ec51 0b18 	vmov	r0, r1, d8
 800a1a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1ac:	f7f6 fb4e 	bl	800084c <__aeabi_ddiv>
 800a1b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b4:	f008 080f 	and.w	r8, r8, #15
 800a1b8:	2503      	movs	r5, #3
 800a1ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a490 <_dtoa_r+0x640>
 800a1be:	f1b8 0f00 	cmp.w	r8, #0
 800a1c2:	d10a      	bne.n	800a1da <_dtoa_r+0x38a>
 800a1c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	f7f6 fb3e 	bl	800084c <__aeabi_ddiv>
 800a1d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d4:	e02b      	b.n	800a22e <_dtoa_r+0x3de>
 800a1d6:	2502      	movs	r5, #2
 800a1d8:	e7ef      	b.n	800a1ba <_dtoa_r+0x36a>
 800a1da:	f018 0f01 	tst.w	r8, #1
 800a1de:	d008      	beq.n	800a1f2 <_dtoa_r+0x3a2>
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a1e8:	f7f6 fa06 	bl	80005f8 <__aeabi_dmul>
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1f6:	f109 0908 	add.w	r9, r9, #8
 800a1fa:	e7e0      	b.n	800a1be <_dtoa_r+0x36e>
 800a1fc:	f000 809f 	beq.w	800a33e <_dtoa_r+0x4ee>
 800a200:	f1cb 0600 	rsb	r6, fp, #0
 800a204:	4ba1      	ldr	r3, [pc, #644]	; (800a48c <_dtoa_r+0x63c>)
 800a206:	4fa2      	ldr	r7, [pc, #648]	; (800a490 <_dtoa_r+0x640>)
 800a208:	f006 020f 	and.w	r2, r6, #15
 800a20c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	ec51 0b18 	vmov	r0, r1, d8
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a220:	1136      	asrs	r6, r6, #4
 800a222:	2300      	movs	r3, #0
 800a224:	2502      	movs	r5, #2
 800a226:	2e00      	cmp	r6, #0
 800a228:	d17e      	bne.n	800a328 <_dtoa_r+0x4d8>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1d0      	bne.n	800a1d0 <_dtoa_r+0x380>
 800a22e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a230:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8084 	beq.w	800a342 <_dtoa_r+0x4f2>
 800a23a:	4b96      	ldr	r3, [pc, #600]	; (800a494 <_dtoa_r+0x644>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f7f6 fc4b 	bl	8000adc <__aeabi_dcmplt>
 800a246:	2800      	cmp	r0, #0
 800a248:	d07b      	beq.n	800a342 <_dtoa_r+0x4f2>
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d078      	beq.n	800a342 <_dtoa_r+0x4f2>
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dd39      	ble.n	800a2ca <_dtoa_r+0x47a>
 800a256:	4b90      	ldr	r3, [pc, #576]	; (800a498 <_dtoa_r+0x648>)
 800a258:	2200      	movs	r2, #0
 800a25a:	4640      	mov	r0, r8
 800a25c:	4649      	mov	r1, r9
 800a25e:	f7f6 f9cb 	bl	80005f8 <__aeabi_dmul>
 800a262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a266:	9e01      	ldr	r6, [sp, #4]
 800a268:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a26c:	3501      	adds	r5, #1
 800a26e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a272:	4628      	mov	r0, r5
 800a274:	f7f6 f956 	bl	8000524 <__aeabi_i2d>
 800a278:	4642      	mov	r2, r8
 800a27a:	464b      	mov	r3, r9
 800a27c:	f7f6 f9bc 	bl	80005f8 <__aeabi_dmul>
 800a280:	4b86      	ldr	r3, [pc, #536]	; (800a49c <_dtoa_r+0x64c>)
 800a282:	2200      	movs	r2, #0
 800a284:	f7f6 f802 	bl	800028c <__adddf3>
 800a288:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	2e00      	cmp	r6, #0
 800a294:	d158      	bne.n	800a348 <_dtoa_r+0x4f8>
 800a296:	4b82      	ldr	r3, [pc, #520]	; (800a4a0 <_dtoa_r+0x650>)
 800a298:	2200      	movs	r2, #0
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f5 fff3 	bl	8000288 <__aeabi_dsub>
 800a2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	f7f6 fc35 	bl	8000b18 <__aeabi_dcmpgt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	f040 8296 	bne.w	800a7e0 <_dtoa_r+0x990>
 800a2b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2be:	4649      	mov	r1, r9
 800a2c0:	f7f6 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	f040 8289 	bne.w	800a7dc <_dtoa_r+0x98c>
 800a2ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f2c0 814e 	blt.w	800a572 <_dtoa_r+0x722>
 800a2d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a2da:	f300 814a 	bgt.w	800a572 <_dtoa_r+0x722>
 800a2de:	4b6b      	ldr	r3, [pc, #428]	; (800a48c <_dtoa_r+0x63c>)
 800a2e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f280 80dc 	bge.w	800a4a8 <_dtoa_r+0x658>
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f300 80d8 	bgt.w	800a4a8 <_dtoa_r+0x658>
 800a2f8:	f040 826f 	bne.w	800a7da <_dtoa_r+0x98a>
 800a2fc:	4b68      	ldr	r3, [pc, #416]	; (800a4a0 <_dtoa_r+0x650>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	f7f6 f978 	bl	80005f8 <__aeabi_dmul>
 800a308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a30c:	f7f6 fbfa 	bl	8000b04 <__aeabi_dcmpge>
 800a310:	9e04      	ldr	r6, [sp, #16]
 800a312:	4637      	mov	r7, r6
 800a314:	2800      	cmp	r0, #0
 800a316:	f040 8245 	bne.w	800a7a4 <_dtoa_r+0x954>
 800a31a:	9d00      	ldr	r5, [sp, #0]
 800a31c:	2331      	movs	r3, #49	; 0x31
 800a31e:	f805 3b01 	strb.w	r3, [r5], #1
 800a322:	f10b 0b01 	add.w	fp, fp, #1
 800a326:	e241      	b.n	800a7ac <_dtoa_r+0x95c>
 800a328:	07f2      	lsls	r2, r6, #31
 800a32a:	d505      	bpl.n	800a338 <_dtoa_r+0x4e8>
 800a32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a330:	f7f6 f962 	bl	80005f8 <__aeabi_dmul>
 800a334:	3501      	adds	r5, #1
 800a336:	2301      	movs	r3, #1
 800a338:	1076      	asrs	r6, r6, #1
 800a33a:	3708      	adds	r7, #8
 800a33c:	e773      	b.n	800a226 <_dtoa_r+0x3d6>
 800a33e:	2502      	movs	r5, #2
 800a340:	e775      	b.n	800a22e <_dtoa_r+0x3de>
 800a342:	9e04      	ldr	r6, [sp, #16]
 800a344:	465f      	mov	r7, fp
 800a346:	e792      	b.n	800a26e <_dtoa_r+0x41e>
 800a348:	9900      	ldr	r1, [sp, #0]
 800a34a:	4b50      	ldr	r3, [pc, #320]	; (800a48c <_dtoa_r+0x63c>)
 800a34c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a350:	4431      	add	r1, r6
 800a352:	9102      	str	r1, [sp, #8]
 800a354:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a356:	eeb0 9a47 	vmov.f32	s18, s14
 800a35a:	eef0 9a67 	vmov.f32	s19, s15
 800a35e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a366:	2900      	cmp	r1, #0
 800a368:	d044      	beq.n	800a3f4 <_dtoa_r+0x5a4>
 800a36a:	494e      	ldr	r1, [pc, #312]	; (800a4a4 <_dtoa_r+0x654>)
 800a36c:	2000      	movs	r0, #0
 800a36e:	f7f6 fa6d 	bl	800084c <__aeabi_ddiv>
 800a372:	ec53 2b19 	vmov	r2, r3, d9
 800a376:	f7f5 ff87 	bl	8000288 <__aeabi_dsub>
 800a37a:	9d00      	ldr	r5, [sp, #0]
 800a37c:	ec41 0b19 	vmov	d9, r0, r1
 800a380:	4649      	mov	r1, r9
 800a382:	4640      	mov	r0, r8
 800a384:	f7f6 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800a388:	4606      	mov	r6, r0
 800a38a:	f7f6 f8cb 	bl	8000524 <__aeabi_i2d>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4640      	mov	r0, r8
 800a394:	4649      	mov	r1, r9
 800a396:	f7f5 ff77 	bl	8000288 <__aeabi_dsub>
 800a39a:	3630      	adds	r6, #48	; 0x30
 800a39c:	f805 6b01 	strb.w	r6, [r5], #1
 800a3a0:	ec53 2b19 	vmov	r2, r3, d9
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4689      	mov	r9, r1
 800a3a8:	f7f6 fb98 	bl	8000adc <__aeabi_dcmplt>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d164      	bne.n	800a47a <_dtoa_r+0x62a>
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	4937      	ldr	r1, [pc, #220]	; (800a494 <_dtoa_r+0x644>)
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	f7f5 ff66 	bl	8000288 <__aeabi_dsub>
 800a3bc:	ec53 2b19 	vmov	r2, r3, d9
 800a3c0:	f7f6 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f040 80b6 	bne.w	800a536 <_dtoa_r+0x6e6>
 800a3ca:	9b02      	ldr	r3, [sp, #8]
 800a3cc:	429d      	cmp	r5, r3
 800a3ce:	f43f af7c 	beq.w	800a2ca <_dtoa_r+0x47a>
 800a3d2:	4b31      	ldr	r3, [pc, #196]	; (800a498 <_dtoa_r+0x648>)
 800a3d4:	ec51 0b19 	vmov	r0, r1, d9
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f6 f90d 	bl	80005f8 <__aeabi_dmul>
 800a3de:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <_dtoa_r+0x648>)
 800a3e0:	ec41 0b19 	vmov	d9, r0, r1
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f6 f905 	bl	80005f8 <__aeabi_dmul>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	4689      	mov	r9, r1
 800a3f2:	e7c5      	b.n	800a380 <_dtoa_r+0x530>
 800a3f4:	ec51 0b17 	vmov	r0, r1, d7
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	9b02      	ldr	r3, [sp, #8]
 800a3fe:	9d00      	ldr	r5, [sp, #0]
 800a400:	930f      	str	r3, [sp, #60]	; 0x3c
 800a402:	ec41 0b19 	vmov	d9, r0, r1
 800a406:	4649      	mov	r1, r9
 800a408:	4640      	mov	r0, r8
 800a40a:	f7f6 fba5 	bl	8000b58 <__aeabi_d2iz>
 800a40e:	4606      	mov	r6, r0
 800a410:	f7f6 f888 	bl	8000524 <__aeabi_i2d>
 800a414:	3630      	adds	r6, #48	; 0x30
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	f805 6b01 	strb.w	r6, [r5], #1
 800a426:	9b02      	ldr	r3, [sp, #8]
 800a428:	429d      	cmp	r5, r3
 800a42a:	4680      	mov	r8, r0
 800a42c:	4689      	mov	r9, r1
 800a42e:	f04f 0200 	mov.w	r2, #0
 800a432:	d124      	bne.n	800a47e <_dtoa_r+0x62e>
 800a434:	4b1b      	ldr	r3, [pc, #108]	; (800a4a4 <_dtoa_r+0x654>)
 800a436:	ec51 0b19 	vmov	r0, r1, d9
 800a43a:	f7f5 ff27 	bl	800028c <__adddf3>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f6 fb67 	bl	8000b18 <__aeabi_dcmpgt>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d173      	bne.n	800a536 <_dtoa_r+0x6e6>
 800a44e:	ec53 2b19 	vmov	r2, r3, d9
 800a452:	4914      	ldr	r1, [pc, #80]	; (800a4a4 <_dtoa_r+0x654>)
 800a454:	2000      	movs	r0, #0
 800a456:	f7f5 ff17 	bl	8000288 <__aeabi_dsub>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	f7f6 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800a466:	2800      	cmp	r0, #0
 800a468:	f43f af2f 	beq.w	800a2ca <_dtoa_r+0x47a>
 800a46c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a46e:	1e6b      	subs	r3, r5, #1
 800a470:	930f      	str	r3, [sp, #60]	; 0x3c
 800a472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a476:	2b30      	cmp	r3, #48	; 0x30
 800a478:	d0f8      	beq.n	800a46c <_dtoa_r+0x61c>
 800a47a:	46bb      	mov	fp, r7
 800a47c:	e04a      	b.n	800a514 <_dtoa_r+0x6c4>
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <_dtoa_r+0x648>)
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	4680      	mov	r8, r0
 800a486:	4689      	mov	r9, r1
 800a488:	e7bd      	b.n	800a406 <_dtoa_r+0x5b6>
 800a48a:	bf00      	nop
 800a48c:	08020758 	.word	0x08020758
 800a490:	08020730 	.word	0x08020730
 800a494:	3ff00000 	.word	0x3ff00000
 800a498:	40240000 	.word	0x40240000
 800a49c:	401c0000 	.word	0x401c0000
 800a4a0:	40140000 	.word	0x40140000
 800a4a4:	3fe00000 	.word	0x3fe00000
 800a4a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4ac:	9d00      	ldr	r5, [sp, #0]
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	464b      	mov	r3, r9
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 f9c9 	bl	800084c <__aeabi_ddiv>
 800a4ba:	f7f6 fb4d 	bl	8000b58 <__aeabi_d2iz>
 800a4be:	9001      	str	r0, [sp, #4]
 800a4c0:	f7f6 f830 	bl	8000524 <__aeabi_i2d>
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f5 fed8 	bl	8000288 <__aeabi_dsub>
 800a4d8:	9e01      	ldr	r6, [sp, #4]
 800a4da:	9f04      	ldr	r7, [sp, #16]
 800a4dc:	3630      	adds	r6, #48	; 0x30
 800a4de:	f805 6b01 	strb.w	r6, [r5], #1
 800a4e2:	9e00      	ldr	r6, [sp, #0]
 800a4e4:	1bae      	subs	r6, r5, r6
 800a4e6:	42b7      	cmp	r7, r6
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	d134      	bne.n	800a558 <_dtoa_r+0x708>
 800a4ee:	f7f5 fecd 	bl	800028c <__adddf3>
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	f7f6 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 800a4fe:	b9c8      	cbnz	r0, 800a534 <_dtoa_r+0x6e4>
 800a500:	4642      	mov	r2, r8
 800a502:	464b      	mov	r3, r9
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800a50c:	b110      	cbz	r0, 800a514 <_dtoa_r+0x6c4>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	07db      	lsls	r3, r3, #31
 800a512:	d40f      	bmi.n	800a534 <_dtoa_r+0x6e4>
 800a514:	4651      	mov	r1, sl
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fb20 	bl	800ab5c <_Bfree>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a520:	702b      	strb	r3, [r5, #0]
 800a522:	f10b 0301 	add.w	r3, fp, #1
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f43f ace2 	beq.w	8009ef4 <_dtoa_r+0xa4>
 800a530:	601d      	str	r5, [r3, #0]
 800a532:	e4df      	b.n	8009ef4 <_dtoa_r+0xa4>
 800a534:	465f      	mov	r7, fp
 800a536:	462b      	mov	r3, r5
 800a538:	461d      	mov	r5, r3
 800a53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a53e:	2a39      	cmp	r2, #57	; 0x39
 800a540:	d106      	bne.n	800a550 <_dtoa_r+0x700>
 800a542:	9a00      	ldr	r2, [sp, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d1f7      	bne.n	800a538 <_dtoa_r+0x6e8>
 800a548:	9900      	ldr	r1, [sp, #0]
 800a54a:	2230      	movs	r2, #48	; 0x30
 800a54c:	3701      	adds	r7, #1
 800a54e:	700a      	strb	r2, [r1, #0]
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	3201      	adds	r2, #1
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	e790      	b.n	800a47a <_dtoa_r+0x62a>
 800a558:	4ba3      	ldr	r3, [pc, #652]	; (800a7e8 <_dtoa_r+0x998>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	f7f6 f84c 	bl	80005f8 <__aeabi_dmul>
 800a560:	2200      	movs	r2, #0
 800a562:	2300      	movs	r3, #0
 800a564:	4606      	mov	r6, r0
 800a566:	460f      	mov	r7, r1
 800a568:	f7f6 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d09e      	beq.n	800a4ae <_dtoa_r+0x65e>
 800a570:	e7d0      	b.n	800a514 <_dtoa_r+0x6c4>
 800a572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a574:	2a00      	cmp	r2, #0
 800a576:	f000 80ca 	beq.w	800a70e <_dtoa_r+0x8be>
 800a57a:	9a07      	ldr	r2, [sp, #28]
 800a57c:	2a01      	cmp	r2, #1
 800a57e:	f300 80ad 	bgt.w	800a6dc <_dtoa_r+0x88c>
 800a582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a584:	2a00      	cmp	r2, #0
 800a586:	f000 80a5 	beq.w	800a6d4 <_dtoa_r+0x884>
 800a58a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a58e:	9e08      	ldr	r6, [sp, #32]
 800a590:	9d05      	ldr	r5, [sp, #20]
 800a592:	9a05      	ldr	r2, [sp, #20]
 800a594:	441a      	add	r2, r3
 800a596:	9205      	str	r2, [sp, #20]
 800a598:	9a06      	ldr	r2, [sp, #24]
 800a59a:	2101      	movs	r1, #1
 800a59c:	441a      	add	r2, r3
 800a59e:	4620      	mov	r0, r4
 800a5a0:	9206      	str	r2, [sp, #24]
 800a5a2:	f000 fb91 	bl	800acc8 <__i2b>
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	b165      	cbz	r5, 800a5c4 <_dtoa_r+0x774>
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	dd09      	ble.n	800a5c4 <_dtoa_r+0x774>
 800a5b0:	42ab      	cmp	r3, r5
 800a5b2:	9a05      	ldr	r2, [sp, #20]
 800a5b4:	bfa8      	it	ge
 800a5b6:	462b      	movge	r3, r5
 800a5b8:	1ad2      	subs	r2, r2, r3
 800a5ba:	9205      	str	r2, [sp, #20]
 800a5bc:	9a06      	ldr	r2, [sp, #24]
 800a5be:	1aed      	subs	r5, r5, r3
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	9306      	str	r3, [sp, #24]
 800a5c4:	9b08      	ldr	r3, [sp, #32]
 800a5c6:	b1f3      	cbz	r3, 800a606 <_dtoa_r+0x7b6>
 800a5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 80a3 	beq.w	800a716 <_dtoa_r+0x8c6>
 800a5d0:	2e00      	cmp	r6, #0
 800a5d2:	dd10      	ble.n	800a5f6 <_dtoa_r+0x7a6>
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fc35 	bl	800ae48 <__pow5mult>
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fb85 	bl	800acf4 <__multiply>
 800a5ea:	4651      	mov	r1, sl
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fab4 	bl	800ab5c <_Bfree>
 800a5f4:	46c2      	mov	sl, r8
 800a5f6:	9b08      	ldr	r3, [sp, #32]
 800a5f8:	1b9a      	subs	r2, r3, r6
 800a5fa:	d004      	beq.n	800a606 <_dtoa_r+0x7b6>
 800a5fc:	4651      	mov	r1, sl
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 fc22 	bl	800ae48 <__pow5mult>
 800a604:	4682      	mov	sl, r0
 800a606:	2101      	movs	r1, #1
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 fb5d 	bl	800acc8 <__i2b>
 800a60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a610:	2b00      	cmp	r3, #0
 800a612:	4606      	mov	r6, r0
 800a614:	f340 8081 	ble.w	800a71a <_dtoa_r+0x8ca>
 800a618:	461a      	mov	r2, r3
 800a61a:	4601      	mov	r1, r0
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fc13 	bl	800ae48 <__pow5mult>
 800a622:	9b07      	ldr	r3, [sp, #28]
 800a624:	2b01      	cmp	r3, #1
 800a626:	4606      	mov	r6, r0
 800a628:	dd7a      	ble.n	800a720 <_dtoa_r+0x8d0>
 800a62a:	f04f 0800 	mov.w	r8, #0
 800a62e:	6933      	ldr	r3, [r6, #16]
 800a630:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a634:	6918      	ldr	r0, [r3, #16]
 800a636:	f000 faf9 	bl	800ac2c <__hi0bits>
 800a63a:	f1c0 0020 	rsb	r0, r0, #32
 800a63e:	9b06      	ldr	r3, [sp, #24]
 800a640:	4418      	add	r0, r3
 800a642:	f010 001f 	ands.w	r0, r0, #31
 800a646:	f000 8094 	beq.w	800a772 <_dtoa_r+0x922>
 800a64a:	f1c0 0320 	rsb	r3, r0, #32
 800a64e:	2b04      	cmp	r3, #4
 800a650:	f340 8085 	ble.w	800a75e <_dtoa_r+0x90e>
 800a654:	9b05      	ldr	r3, [sp, #20]
 800a656:	f1c0 001c 	rsb	r0, r0, #28
 800a65a:	4403      	add	r3, r0
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	4403      	add	r3, r0
 800a662:	4405      	add	r5, r0
 800a664:	9306      	str	r3, [sp, #24]
 800a666:	9b05      	ldr	r3, [sp, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dd05      	ble.n	800a678 <_dtoa_r+0x828>
 800a66c:	4651      	mov	r1, sl
 800a66e:	461a      	mov	r2, r3
 800a670:	4620      	mov	r0, r4
 800a672:	f000 fc43 	bl	800aefc <__lshift>
 800a676:	4682      	mov	sl, r0
 800a678:	9b06      	ldr	r3, [sp, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dd05      	ble.n	800a68a <_dtoa_r+0x83a>
 800a67e:	4631      	mov	r1, r6
 800a680:	461a      	mov	r2, r3
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fc3a 	bl	800aefc <__lshift>
 800a688:	4606      	mov	r6, r0
 800a68a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d072      	beq.n	800a776 <_dtoa_r+0x926>
 800a690:	4631      	mov	r1, r6
 800a692:	4650      	mov	r0, sl
 800a694:	f000 fc9e 	bl	800afd4 <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	da6c      	bge.n	800a776 <_dtoa_r+0x926>
 800a69c:	2300      	movs	r3, #0
 800a69e:	4651      	mov	r1, sl
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 fa7c 	bl	800aba0 <__multadd>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 81b0 	beq.w	800aa16 <_dtoa_r+0xbc6>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 fa6f 	bl	800aba0 <__multadd>
 800a6c2:	9b01      	ldr	r3, [sp, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	f300 8096 	bgt.w	800a7f8 <_dtoa_r+0x9a8>
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	dc59      	bgt.n	800a786 <_dtoa_r+0x936>
 800a6d2:	e091      	b.n	800a7f8 <_dtoa_r+0x9a8>
 800a6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6da:	e758      	b.n	800a58e <_dtoa_r+0x73e>
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	1e5e      	subs	r6, r3, #1
 800a6e0:	9b08      	ldr	r3, [sp, #32]
 800a6e2:	42b3      	cmp	r3, r6
 800a6e4:	bfbf      	itttt	lt
 800a6e6:	9b08      	ldrlt	r3, [sp, #32]
 800a6e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a6ea:	9608      	strlt	r6, [sp, #32]
 800a6ec:	1af3      	sublt	r3, r6, r3
 800a6ee:	bfb4      	ite	lt
 800a6f0:	18d2      	addlt	r2, r2, r3
 800a6f2:	1b9e      	subge	r6, r3, r6
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	bfbc      	itt	lt
 800a6f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a6fa:	2600      	movlt	r6, #0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	bfb7      	itett	lt
 800a700:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a704:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a708:	1a9d      	sublt	r5, r3, r2
 800a70a:	2300      	movlt	r3, #0
 800a70c:	e741      	b.n	800a592 <_dtoa_r+0x742>
 800a70e:	9e08      	ldr	r6, [sp, #32]
 800a710:	9d05      	ldr	r5, [sp, #20]
 800a712:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a714:	e748      	b.n	800a5a8 <_dtoa_r+0x758>
 800a716:	9a08      	ldr	r2, [sp, #32]
 800a718:	e770      	b.n	800a5fc <_dtoa_r+0x7ac>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	dc19      	bgt.n	800a754 <_dtoa_r+0x904>
 800a720:	9b02      	ldr	r3, [sp, #8]
 800a722:	b9bb      	cbnz	r3, 800a754 <_dtoa_r+0x904>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a72a:	b99b      	cbnz	r3, 800a754 <_dtoa_r+0x904>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a732:	0d1b      	lsrs	r3, r3, #20
 800a734:	051b      	lsls	r3, r3, #20
 800a736:	b183      	cbz	r3, 800a75a <_dtoa_r+0x90a>
 800a738:	9b05      	ldr	r3, [sp, #20]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	9b06      	ldr	r3, [sp, #24]
 800a740:	3301      	adds	r3, #1
 800a742:	9306      	str	r3, [sp, #24]
 800a744:	f04f 0801 	mov.w	r8, #1
 800a748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f af6f 	bne.w	800a62e <_dtoa_r+0x7de>
 800a750:	2001      	movs	r0, #1
 800a752:	e774      	b.n	800a63e <_dtoa_r+0x7ee>
 800a754:	f04f 0800 	mov.w	r8, #0
 800a758:	e7f6      	b.n	800a748 <_dtoa_r+0x8f8>
 800a75a:	4698      	mov	r8, r3
 800a75c:	e7f4      	b.n	800a748 <_dtoa_r+0x8f8>
 800a75e:	d082      	beq.n	800a666 <_dtoa_r+0x816>
 800a760:	9a05      	ldr	r2, [sp, #20]
 800a762:	331c      	adds	r3, #28
 800a764:	441a      	add	r2, r3
 800a766:	9205      	str	r2, [sp, #20]
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	441a      	add	r2, r3
 800a76c:	441d      	add	r5, r3
 800a76e:	9206      	str	r2, [sp, #24]
 800a770:	e779      	b.n	800a666 <_dtoa_r+0x816>
 800a772:	4603      	mov	r3, r0
 800a774:	e7f4      	b.n	800a760 <_dtoa_r+0x910>
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	dc37      	bgt.n	800a7ec <_dtoa_r+0x99c>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dd34      	ble.n	800a7ec <_dtoa_r+0x99c>
 800a782:	9b04      	ldr	r3, [sp, #16]
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	b963      	cbnz	r3, 800a7a4 <_dtoa_r+0x954>
 800a78a:	4631      	mov	r1, r6
 800a78c:	2205      	movs	r2, #5
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fa06 	bl	800aba0 <__multadd>
 800a794:	4601      	mov	r1, r0
 800a796:	4606      	mov	r6, r0
 800a798:	4650      	mov	r0, sl
 800a79a:	f000 fc1b 	bl	800afd4 <__mcmp>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f73f adbb 	bgt.w	800a31a <_dtoa_r+0x4ca>
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	9d00      	ldr	r5, [sp, #0]
 800a7a8:	ea6f 0b03 	mvn.w	fp, r3
 800a7ac:	f04f 0800 	mov.w	r8, #0
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 f9d2 	bl	800ab5c <_Bfree>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f43f aeab 	beq.w	800a514 <_dtoa_r+0x6c4>
 800a7be:	f1b8 0f00 	cmp.w	r8, #0
 800a7c2:	d005      	beq.n	800a7d0 <_dtoa_r+0x980>
 800a7c4:	45b8      	cmp	r8, r7
 800a7c6:	d003      	beq.n	800a7d0 <_dtoa_r+0x980>
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f9c6 	bl	800ab5c <_Bfree>
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f9c2 	bl	800ab5c <_Bfree>
 800a7d8:	e69c      	b.n	800a514 <_dtoa_r+0x6c4>
 800a7da:	2600      	movs	r6, #0
 800a7dc:	4637      	mov	r7, r6
 800a7de:	e7e1      	b.n	800a7a4 <_dtoa_r+0x954>
 800a7e0:	46bb      	mov	fp, r7
 800a7e2:	4637      	mov	r7, r6
 800a7e4:	e599      	b.n	800a31a <_dtoa_r+0x4ca>
 800a7e6:	bf00      	nop
 800a7e8:	40240000 	.word	0x40240000
 800a7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80c8 	beq.w	800a984 <_dtoa_r+0xb34>
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	2d00      	cmp	r5, #0
 800a7fa:	dd05      	ble.n	800a808 <_dtoa_r+0x9b8>
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	462a      	mov	r2, r5
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fb7b 	bl	800aefc <__lshift>
 800a806:	4607      	mov	r7, r0
 800a808:	f1b8 0f00 	cmp.w	r8, #0
 800a80c:	d05b      	beq.n	800a8c6 <_dtoa_r+0xa76>
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4620      	mov	r0, r4
 800a812:	f000 f963 	bl	800aadc <_Balloc>
 800a816:	4605      	mov	r5, r0
 800a818:	b928      	cbnz	r0, 800a826 <_dtoa_r+0x9d6>
 800a81a:	4b83      	ldr	r3, [pc, #524]	; (800aa28 <_dtoa_r+0xbd8>)
 800a81c:	4602      	mov	r2, r0
 800a81e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a822:	f7ff bb2e 	b.w	8009e82 <_dtoa_r+0x32>
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	3202      	adds	r2, #2
 800a82a:	0092      	lsls	r2, r2, #2
 800a82c:	f107 010c 	add.w	r1, r7, #12
 800a830:	300c      	adds	r0, #12
 800a832:	f7ff fa51 	bl	8009cd8 <memcpy>
 800a836:	2201      	movs	r2, #1
 800a838:	4629      	mov	r1, r5
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fb5e 	bl	800aefc <__lshift>
 800a840:	9b00      	ldr	r3, [sp, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a84a:	4413      	add	r3, r2
 800a84c:	9308      	str	r3, [sp, #32]
 800a84e:	9b02      	ldr	r3, [sp, #8]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	46b8      	mov	r8, r7
 800a856:	9306      	str	r3, [sp, #24]
 800a858:	4607      	mov	r7, r0
 800a85a:	9b04      	ldr	r3, [sp, #16]
 800a85c:	4631      	mov	r1, r6
 800a85e:	3b01      	subs	r3, #1
 800a860:	4650      	mov	r0, sl
 800a862:	9301      	str	r3, [sp, #4]
 800a864:	f7ff fa6c 	bl	8009d40 <quorem>
 800a868:	4641      	mov	r1, r8
 800a86a:	9002      	str	r0, [sp, #8]
 800a86c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a870:	4650      	mov	r0, sl
 800a872:	f000 fbaf 	bl	800afd4 <__mcmp>
 800a876:	463a      	mov	r2, r7
 800a878:	9005      	str	r0, [sp, #20]
 800a87a:	4631      	mov	r1, r6
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fbc5 	bl	800b00c <__mdiff>
 800a882:	68c2      	ldr	r2, [r0, #12]
 800a884:	4605      	mov	r5, r0
 800a886:	bb02      	cbnz	r2, 800a8ca <_dtoa_r+0xa7a>
 800a888:	4601      	mov	r1, r0
 800a88a:	4650      	mov	r0, sl
 800a88c:	f000 fba2 	bl	800afd4 <__mcmp>
 800a890:	4602      	mov	r2, r0
 800a892:	4629      	mov	r1, r5
 800a894:	4620      	mov	r0, r4
 800a896:	9209      	str	r2, [sp, #36]	; 0x24
 800a898:	f000 f960 	bl	800ab5c <_Bfree>
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a0:	9d04      	ldr	r5, [sp, #16]
 800a8a2:	ea43 0102 	orr.w	r1, r3, r2
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	4319      	orrs	r1, r3
 800a8aa:	d110      	bne.n	800a8ce <_dtoa_r+0xa7e>
 800a8ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8b0:	d029      	beq.n	800a906 <_dtoa_r+0xab6>
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd02      	ble.n	800a8be <_dtoa_r+0xa6e>
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	f883 9000 	strb.w	r9, [r3]
 800a8c4:	e774      	b.n	800a7b0 <_dtoa_r+0x960>
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	e7ba      	b.n	800a840 <_dtoa_r+0x9f0>
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	e7e1      	b.n	800a892 <_dtoa_r+0xa42>
 800a8ce:	9b05      	ldr	r3, [sp, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db04      	blt.n	800a8de <_dtoa_r+0xa8e>
 800a8d4:	9907      	ldr	r1, [sp, #28]
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	9906      	ldr	r1, [sp, #24]
 800a8da:	430b      	orrs	r3, r1
 800a8dc:	d120      	bne.n	800a920 <_dtoa_r+0xad0>
 800a8de:	2a00      	cmp	r2, #0
 800a8e0:	dded      	ble.n	800a8be <_dtoa_r+0xa6e>
 800a8e2:	4651      	mov	r1, sl
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 fb08 	bl	800aefc <__lshift>
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4682      	mov	sl, r0
 800a8f0:	f000 fb70 	bl	800afd4 <__mcmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	dc03      	bgt.n	800a900 <_dtoa_r+0xab0>
 800a8f8:	d1e1      	bne.n	800a8be <_dtoa_r+0xa6e>
 800a8fa:	f019 0f01 	tst.w	r9, #1
 800a8fe:	d0de      	beq.n	800a8be <_dtoa_r+0xa6e>
 800a900:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a904:	d1d8      	bne.n	800a8b8 <_dtoa_r+0xa68>
 800a906:	9a01      	ldr	r2, [sp, #4]
 800a908:	2339      	movs	r3, #57	; 0x39
 800a90a:	7013      	strb	r3, [r2, #0]
 800a90c:	462b      	mov	r3, r5
 800a90e:	461d      	mov	r5, r3
 800a910:	3b01      	subs	r3, #1
 800a912:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a916:	2a39      	cmp	r2, #57	; 0x39
 800a918:	d06c      	beq.n	800a9f4 <_dtoa_r+0xba4>
 800a91a:	3201      	adds	r2, #1
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	e747      	b.n	800a7b0 <_dtoa_r+0x960>
 800a920:	2a00      	cmp	r2, #0
 800a922:	dd07      	ble.n	800a934 <_dtoa_r+0xae4>
 800a924:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a928:	d0ed      	beq.n	800a906 <_dtoa_r+0xab6>
 800a92a:	9a01      	ldr	r2, [sp, #4]
 800a92c:	f109 0301 	add.w	r3, r9, #1
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	e73d      	b.n	800a7b0 <_dtoa_r+0x960>
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	9a08      	ldr	r2, [sp, #32]
 800a938:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d043      	beq.n	800a9c8 <_dtoa_r+0xb78>
 800a940:	4651      	mov	r1, sl
 800a942:	2300      	movs	r3, #0
 800a944:	220a      	movs	r2, #10
 800a946:	4620      	mov	r0, r4
 800a948:	f000 f92a 	bl	800aba0 <__multadd>
 800a94c:	45b8      	cmp	r8, r7
 800a94e:	4682      	mov	sl, r0
 800a950:	f04f 0300 	mov.w	r3, #0
 800a954:	f04f 020a 	mov.w	r2, #10
 800a958:	4641      	mov	r1, r8
 800a95a:	4620      	mov	r0, r4
 800a95c:	d107      	bne.n	800a96e <_dtoa_r+0xb1e>
 800a95e:	f000 f91f 	bl	800aba0 <__multadd>
 800a962:	4680      	mov	r8, r0
 800a964:	4607      	mov	r7, r0
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	3301      	adds	r3, #1
 800a96a:	9304      	str	r3, [sp, #16]
 800a96c:	e775      	b.n	800a85a <_dtoa_r+0xa0a>
 800a96e:	f000 f917 	bl	800aba0 <__multadd>
 800a972:	4639      	mov	r1, r7
 800a974:	4680      	mov	r8, r0
 800a976:	2300      	movs	r3, #0
 800a978:	220a      	movs	r2, #10
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f910 	bl	800aba0 <__multadd>
 800a980:	4607      	mov	r7, r0
 800a982:	e7f0      	b.n	800a966 <_dtoa_r+0xb16>
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	9d00      	ldr	r5, [sp, #0]
 800a98a:	4631      	mov	r1, r6
 800a98c:	4650      	mov	r0, sl
 800a98e:	f7ff f9d7 	bl	8009d40 <quorem>
 800a992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	f805 9b01 	strb.w	r9, [r5], #1
 800a99c:	1aea      	subs	r2, r5, r3
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	dd07      	ble.n	800a9b4 <_dtoa_r+0xb64>
 800a9a4:	4651      	mov	r1, sl
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f8f8 	bl	800aba0 <__multadd>
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	e7ea      	b.n	800a98a <_dtoa_r+0xb3a>
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bfc8      	it	gt
 800a9ba:	461d      	movgt	r5, r3
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	bfd8      	it	le
 800a9c0:	2501      	movle	r5, #1
 800a9c2:	441d      	add	r5, r3
 800a9c4:	f04f 0800 	mov.w	r8, #0
 800a9c8:	4651      	mov	r1, sl
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fa95 	bl	800aefc <__lshift>
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4682      	mov	sl, r0
 800a9d6:	f000 fafd 	bl	800afd4 <__mcmp>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	dc96      	bgt.n	800a90c <_dtoa_r+0xabc>
 800a9de:	d102      	bne.n	800a9e6 <_dtoa_r+0xb96>
 800a9e0:	f019 0f01 	tst.w	r9, #1
 800a9e4:	d192      	bne.n	800a90c <_dtoa_r+0xabc>
 800a9e6:	462b      	mov	r3, r5
 800a9e8:	461d      	mov	r5, r3
 800a9ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9ee:	2a30      	cmp	r2, #48	; 0x30
 800a9f0:	d0fa      	beq.n	800a9e8 <_dtoa_r+0xb98>
 800a9f2:	e6dd      	b.n	800a7b0 <_dtoa_r+0x960>
 800a9f4:	9a00      	ldr	r2, [sp, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d189      	bne.n	800a90e <_dtoa_r+0xabe>
 800a9fa:	f10b 0b01 	add.w	fp, fp, #1
 800a9fe:	2331      	movs	r3, #49	; 0x31
 800aa00:	e796      	b.n	800a930 <_dtoa_r+0xae0>
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <_dtoa_r+0xbdc>)
 800aa04:	f7ff ba99 	b.w	8009f3a <_dtoa_r+0xea>
 800aa08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f47f aa6d 	bne.w	8009eea <_dtoa_r+0x9a>
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <_dtoa_r+0xbe0>)
 800aa12:	f7ff ba92 	b.w	8009f3a <_dtoa_r+0xea>
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	dcb5      	bgt.n	800a988 <_dtoa_r+0xb38>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	f73f aeb1 	bgt.w	800a786 <_dtoa_r+0x936>
 800aa24:	e7b0      	b.n	800a988 <_dtoa_r+0xb38>
 800aa26:	bf00      	nop
 800aa28:	080206c4 	.word	0x080206c4
 800aa2c:	08020624 	.word	0x08020624
 800aa30:	08020648 	.word	0x08020648

0800aa34 <_free_r>:
 800aa34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa36:	2900      	cmp	r1, #0
 800aa38:	d044      	beq.n	800aac4 <_free_r+0x90>
 800aa3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3e:	9001      	str	r0, [sp, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f1a1 0404 	sub.w	r4, r1, #4
 800aa46:	bfb8      	it	lt
 800aa48:	18e4      	addlt	r4, r4, r3
 800aa4a:	f7fe fa47 	bl	8008edc <__malloc_lock>
 800aa4e:	4a1e      	ldr	r2, [pc, #120]	; (800aac8 <_free_r+0x94>)
 800aa50:	9801      	ldr	r0, [sp, #4]
 800aa52:	6813      	ldr	r3, [r2, #0]
 800aa54:	b933      	cbnz	r3, 800aa64 <_free_r+0x30>
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	6014      	str	r4, [r2, #0]
 800aa5a:	b003      	add	sp, #12
 800aa5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa60:	f7fe ba42 	b.w	8008ee8 <__malloc_unlock>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d908      	bls.n	800aa7a <_free_r+0x46>
 800aa68:	6825      	ldr	r5, [r4, #0]
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	bf01      	itttt	eq
 800aa70:	6819      	ldreq	r1, [r3, #0]
 800aa72:	685b      	ldreq	r3, [r3, #4]
 800aa74:	1949      	addeq	r1, r1, r5
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	e7ed      	b.n	800aa56 <_free_r+0x22>
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	b10b      	cbz	r3, 800aa84 <_free_r+0x50>
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d9fa      	bls.n	800aa7a <_free_r+0x46>
 800aa84:	6811      	ldr	r1, [r2, #0]
 800aa86:	1855      	adds	r5, r2, r1
 800aa88:	42a5      	cmp	r5, r4
 800aa8a:	d10b      	bne.n	800aaa4 <_free_r+0x70>
 800aa8c:	6824      	ldr	r4, [r4, #0]
 800aa8e:	4421      	add	r1, r4
 800aa90:	1854      	adds	r4, r2, r1
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	6011      	str	r1, [r2, #0]
 800aa96:	d1e0      	bne.n	800aa5a <_free_r+0x26>
 800aa98:	681c      	ldr	r4, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	6053      	str	r3, [r2, #4]
 800aa9e:	440c      	add	r4, r1
 800aaa0:	6014      	str	r4, [r2, #0]
 800aaa2:	e7da      	b.n	800aa5a <_free_r+0x26>
 800aaa4:	d902      	bls.n	800aaac <_free_r+0x78>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	6003      	str	r3, [r0, #0]
 800aaaa:	e7d6      	b.n	800aa5a <_free_r+0x26>
 800aaac:	6825      	ldr	r5, [r4, #0]
 800aaae:	1961      	adds	r1, r4, r5
 800aab0:	428b      	cmp	r3, r1
 800aab2:	bf04      	itt	eq
 800aab4:	6819      	ldreq	r1, [r3, #0]
 800aab6:	685b      	ldreq	r3, [r3, #4]
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	bf04      	itt	eq
 800aabc:	1949      	addeq	r1, r1, r5
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	6054      	str	r4, [r2, #4]
 800aac2:	e7ca      	b.n	800aa5a <_free_r+0x26>
 800aac4:	b003      	add	sp, #12
 800aac6:	bd30      	pop	{r4, r5, pc}
 800aac8:	2000b844 	.word	0x2000b844

0800aacc <malloc>:
 800aacc:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <malloc+0xc>)
 800aace:	4601      	mov	r1, r0
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	f7fe b983 	b.w	8008ddc <_malloc_r>
 800aad6:	bf00      	nop
 800aad8:	20000078 	.word	0x20000078

0800aadc <_Balloc>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	69c6      	ldr	r6, [r0, #28]
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	b976      	cbnz	r6, 800ab04 <_Balloc+0x28>
 800aae6:	2010      	movs	r0, #16
 800aae8:	f7ff fff0 	bl	800aacc <malloc>
 800aaec:	4602      	mov	r2, r0
 800aaee:	61e0      	str	r0, [r4, #28]
 800aaf0:	b920      	cbnz	r0, 800aafc <_Balloc+0x20>
 800aaf2:	4b18      	ldr	r3, [pc, #96]	; (800ab54 <_Balloc+0x78>)
 800aaf4:	4818      	ldr	r0, [pc, #96]	; (800ab58 <_Balloc+0x7c>)
 800aaf6:	216b      	movs	r1, #107	; 0x6b
 800aaf8:	f000 fe16 	bl	800b728 <__assert_func>
 800aafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab00:	6006      	str	r6, [r0, #0]
 800ab02:	60c6      	str	r6, [r0, #12]
 800ab04:	69e6      	ldr	r6, [r4, #28]
 800ab06:	68f3      	ldr	r3, [r6, #12]
 800ab08:	b183      	cbz	r3, 800ab2c <_Balloc+0x50>
 800ab0a:	69e3      	ldr	r3, [r4, #28]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab12:	b9b8      	cbnz	r0, 800ab44 <_Balloc+0x68>
 800ab14:	2101      	movs	r1, #1
 800ab16:	fa01 f605 	lsl.w	r6, r1, r5
 800ab1a:	1d72      	adds	r2, r6, #5
 800ab1c:	0092      	lsls	r2, r2, #2
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7fe f926 	bl	8008d70 <_calloc_r>
 800ab24:	b160      	cbz	r0, 800ab40 <_Balloc+0x64>
 800ab26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab2a:	e00e      	b.n	800ab4a <_Balloc+0x6e>
 800ab2c:	2221      	movs	r2, #33	; 0x21
 800ab2e:	2104      	movs	r1, #4
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7fe f91d 	bl	8008d70 <_calloc_r>
 800ab36:	69e3      	ldr	r3, [r4, #28]
 800ab38:	60f0      	str	r0, [r6, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e4      	bne.n	800ab0a <_Balloc+0x2e>
 800ab40:	2000      	movs	r0, #0
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	6802      	ldr	r2, [r0, #0]
 800ab46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab50:	e7f7      	b.n	800ab42 <_Balloc+0x66>
 800ab52:	bf00      	nop
 800ab54:	08020655 	.word	0x08020655
 800ab58:	080206d5 	.word	0x080206d5

0800ab5c <_Bfree>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	69c6      	ldr	r6, [r0, #28]
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b976      	cbnz	r6, 800ab84 <_Bfree+0x28>
 800ab66:	2010      	movs	r0, #16
 800ab68:	f7ff ffb0 	bl	800aacc <malloc>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	61e8      	str	r0, [r5, #28]
 800ab70:	b920      	cbnz	r0, 800ab7c <_Bfree+0x20>
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <_Bfree+0x3c>)
 800ab74:	4809      	ldr	r0, [pc, #36]	; (800ab9c <_Bfree+0x40>)
 800ab76:	218f      	movs	r1, #143	; 0x8f
 800ab78:	f000 fdd6 	bl	800b728 <__assert_func>
 800ab7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab80:	6006      	str	r6, [r0, #0]
 800ab82:	60c6      	str	r6, [r0, #12]
 800ab84:	b13c      	cbz	r4, 800ab96 <_Bfree+0x3a>
 800ab86:	69eb      	ldr	r3, [r5, #28]
 800ab88:	6862      	ldr	r2, [r4, #4]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab90:	6021      	str	r1, [r4, #0]
 800ab92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	08020655 	.word	0x08020655
 800ab9c:	080206d5 	.word	0x080206d5

0800aba0 <__multadd>:
 800aba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba4:	690d      	ldr	r5, [r1, #16]
 800aba6:	4607      	mov	r7, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	461e      	mov	r6, r3
 800abac:	f101 0c14 	add.w	ip, r1, #20
 800abb0:	2000      	movs	r0, #0
 800abb2:	f8dc 3000 	ldr.w	r3, [ip]
 800abb6:	b299      	uxth	r1, r3
 800abb8:	fb02 6101 	mla	r1, r2, r1, r6
 800abbc:	0c1e      	lsrs	r6, r3, #16
 800abbe:	0c0b      	lsrs	r3, r1, #16
 800abc0:	fb02 3306 	mla	r3, r2, r6, r3
 800abc4:	b289      	uxth	r1, r1
 800abc6:	3001      	adds	r0, #1
 800abc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abcc:	4285      	cmp	r5, r0
 800abce:	f84c 1b04 	str.w	r1, [ip], #4
 800abd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abd6:	dcec      	bgt.n	800abb2 <__multadd+0x12>
 800abd8:	b30e      	cbz	r6, 800ac1e <__multadd+0x7e>
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	42ab      	cmp	r3, r5
 800abde:	dc19      	bgt.n	800ac14 <__multadd+0x74>
 800abe0:	6861      	ldr	r1, [r4, #4]
 800abe2:	4638      	mov	r0, r7
 800abe4:	3101      	adds	r1, #1
 800abe6:	f7ff ff79 	bl	800aadc <_Balloc>
 800abea:	4680      	mov	r8, r0
 800abec:	b928      	cbnz	r0, 800abfa <__multadd+0x5a>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <__multadd+0x84>)
 800abf2:	480d      	ldr	r0, [pc, #52]	; (800ac28 <__multadd+0x88>)
 800abf4:	21ba      	movs	r1, #186	; 0xba
 800abf6:	f000 fd97 	bl	800b728 <__assert_func>
 800abfa:	6922      	ldr	r2, [r4, #16]
 800abfc:	3202      	adds	r2, #2
 800abfe:	f104 010c 	add.w	r1, r4, #12
 800ac02:	0092      	lsls	r2, r2, #2
 800ac04:	300c      	adds	r0, #12
 800ac06:	f7ff f867 	bl	8009cd8 <memcpy>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f7ff ffa5 	bl	800ab5c <_Bfree>
 800ac12:	4644      	mov	r4, r8
 800ac14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac18:	3501      	adds	r5, #1
 800ac1a:	615e      	str	r6, [r3, #20]
 800ac1c:	6125      	str	r5, [r4, #16]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	080206c4 	.word	0x080206c4
 800ac28:	080206d5 	.word	0x080206d5

0800ac2c <__hi0bits>:
 800ac2c:	0c03      	lsrs	r3, r0, #16
 800ac2e:	041b      	lsls	r3, r3, #16
 800ac30:	b9d3      	cbnz	r3, 800ac68 <__hi0bits+0x3c>
 800ac32:	0400      	lsls	r0, r0, #16
 800ac34:	2310      	movs	r3, #16
 800ac36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac3a:	bf04      	itt	eq
 800ac3c:	0200      	lsleq	r0, r0, #8
 800ac3e:	3308      	addeq	r3, #8
 800ac40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac44:	bf04      	itt	eq
 800ac46:	0100      	lsleq	r0, r0, #4
 800ac48:	3304      	addeq	r3, #4
 800ac4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac4e:	bf04      	itt	eq
 800ac50:	0080      	lsleq	r0, r0, #2
 800ac52:	3302      	addeq	r3, #2
 800ac54:	2800      	cmp	r0, #0
 800ac56:	db05      	blt.n	800ac64 <__hi0bits+0x38>
 800ac58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac5c:	f103 0301 	add.w	r3, r3, #1
 800ac60:	bf08      	it	eq
 800ac62:	2320      	moveq	r3, #32
 800ac64:	4618      	mov	r0, r3
 800ac66:	4770      	bx	lr
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e7e4      	b.n	800ac36 <__hi0bits+0xa>

0800ac6c <__lo0bits>:
 800ac6c:	6803      	ldr	r3, [r0, #0]
 800ac6e:	f013 0207 	ands.w	r2, r3, #7
 800ac72:	d00c      	beq.n	800ac8e <__lo0bits+0x22>
 800ac74:	07d9      	lsls	r1, r3, #31
 800ac76:	d422      	bmi.n	800acbe <__lo0bits+0x52>
 800ac78:	079a      	lsls	r2, r3, #30
 800ac7a:	bf49      	itett	mi
 800ac7c:	085b      	lsrmi	r3, r3, #1
 800ac7e:	089b      	lsrpl	r3, r3, #2
 800ac80:	6003      	strmi	r3, [r0, #0]
 800ac82:	2201      	movmi	r2, #1
 800ac84:	bf5c      	itt	pl
 800ac86:	6003      	strpl	r3, [r0, #0]
 800ac88:	2202      	movpl	r2, #2
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4770      	bx	lr
 800ac8e:	b299      	uxth	r1, r3
 800ac90:	b909      	cbnz	r1, 800ac96 <__lo0bits+0x2a>
 800ac92:	0c1b      	lsrs	r3, r3, #16
 800ac94:	2210      	movs	r2, #16
 800ac96:	b2d9      	uxtb	r1, r3
 800ac98:	b909      	cbnz	r1, 800ac9e <__lo0bits+0x32>
 800ac9a:	3208      	adds	r2, #8
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	0719      	lsls	r1, r3, #28
 800aca0:	bf04      	itt	eq
 800aca2:	091b      	lsreq	r3, r3, #4
 800aca4:	3204      	addeq	r2, #4
 800aca6:	0799      	lsls	r1, r3, #30
 800aca8:	bf04      	itt	eq
 800acaa:	089b      	lsreq	r3, r3, #2
 800acac:	3202      	addeq	r2, #2
 800acae:	07d9      	lsls	r1, r3, #31
 800acb0:	d403      	bmi.n	800acba <__lo0bits+0x4e>
 800acb2:	085b      	lsrs	r3, r3, #1
 800acb4:	f102 0201 	add.w	r2, r2, #1
 800acb8:	d003      	beq.n	800acc2 <__lo0bits+0x56>
 800acba:	6003      	str	r3, [r0, #0]
 800acbc:	e7e5      	b.n	800ac8a <__lo0bits+0x1e>
 800acbe:	2200      	movs	r2, #0
 800acc0:	e7e3      	b.n	800ac8a <__lo0bits+0x1e>
 800acc2:	2220      	movs	r2, #32
 800acc4:	e7e1      	b.n	800ac8a <__lo0bits+0x1e>
	...

0800acc8 <__i2b>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	460c      	mov	r4, r1
 800accc:	2101      	movs	r1, #1
 800acce:	f7ff ff05 	bl	800aadc <_Balloc>
 800acd2:	4602      	mov	r2, r0
 800acd4:	b928      	cbnz	r0, 800ace2 <__i2b+0x1a>
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <__i2b+0x24>)
 800acd8:	4805      	ldr	r0, [pc, #20]	; (800acf0 <__i2b+0x28>)
 800acda:	f240 1145 	movw	r1, #325	; 0x145
 800acde:	f000 fd23 	bl	800b728 <__assert_func>
 800ace2:	2301      	movs	r3, #1
 800ace4:	6144      	str	r4, [r0, #20]
 800ace6:	6103      	str	r3, [r0, #16]
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	080206c4 	.word	0x080206c4
 800acf0:	080206d5 	.word	0x080206d5

0800acf4 <__multiply>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	4691      	mov	r9, r2
 800acfa:	690a      	ldr	r2, [r1, #16]
 800acfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	bfb8      	it	lt
 800ad04:	460b      	movlt	r3, r1
 800ad06:	460c      	mov	r4, r1
 800ad08:	bfbc      	itt	lt
 800ad0a:	464c      	movlt	r4, r9
 800ad0c:	4699      	movlt	r9, r3
 800ad0e:	6927      	ldr	r7, [r4, #16]
 800ad10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad14:	68a3      	ldr	r3, [r4, #8]
 800ad16:	6861      	ldr	r1, [r4, #4]
 800ad18:	eb07 060a 	add.w	r6, r7, sl
 800ad1c:	42b3      	cmp	r3, r6
 800ad1e:	b085      	sub	sp, #20
 800ad20:	bfb8      	it	lt
 800ad22:	3101      	addlt	r1, #1
 800ad24:	f7ff feda 	bl	800aadc <_Balloc>
 800ad28:	b930      	cbnz	r0, 800ad38 <__multiply+0x44>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4b44      	ldr	r3, [pc, #272]	; (800ae40 <__multiply+0x14c>)
 800ad2e:	4845      	ldr	r0, [pc, #276]	; (800ae44 <__multiply+0x150>)
 800ad30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ad34:	f000 fcf8 	bl	800b728 <__assert_func>
 800ad38:	f100 0514 	add.w	r5, r0, #20
 800ad3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad40:	462b      	mov	r3, r5
 800ad42:	2200      	movs	r2, #0
 800ad44:	4543      	cmp	r3, r8
 800ad46:	d321      	bcc.n	800ad8c <__multiply+0x98>
 800ad48:	f104 0314 	add.w	r3, r4, #20
 800ad4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad50:	f109 0314 	add.w	r3, r9, #20
 800ad54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad58:	9202      	str	r2, [sp, #8]
 800ad5a:	1b3a      	subs	r2, r7, r4
 800ad5c:	3a15      	subs	r2, #21
 800ad5e:	f022 0203 	bic.w	r2, r2, #3
 800ad62:	3204      	adds	r2, #4
 800ad64:	f104 0115 	add.w	r1, r4, #21
 800ad68:	428f      	cmp	r7, r1
 800ad6a:	bf38      	it	cc
 800ad6c:	2204      	movcc	r2, #4
 800ad6e:	9201      	str	r2, [sp, #4]
 800ad70:	9a02      	ldr	r2, [sp, #8]
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d80c      	bhi.n	800ad92 <__multiply+0x9e>
 800ad78:	2e00      	cmp	r6, #0
 800ad7a:	dd03      	ble.n	800ad84 <__multiply+0x90>
 800ad7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d05b      	beq.n	800ae3c <__multiply+0x148>
 800ad84:	6106      	str	r6, [r0, #16]
 800ad86:	b005      	add	sp, #20
 800ad88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8c:	f843 2b04 	str.w	r2, [r3], #4
 800ad90:	e7d8      	b.n	800ad44 <__multiply+0x50>
 800ad92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad96:	f1ba 0f00 	cmp.w	sl, #0
 800ad9a:	d024      	beq.n	800ade6 <__multiply+0xf2>
 800ad9c:	f104 0e14 	add.w	lr, r4, #20
 800ada0:	46a9      	mov	r9, r5
 800ada2:	f04f 0c00 	mov.w	ip, #0
 800ada6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800adaa:	f8d9 1000 	ldr.w	r1, [r9]
 800adae:	fa1f fb82 	uxth.w	fp, r2
 800adb2:	b289      	uxth	r1, r1
 800adb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800adb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800adbc:	f8d9 2000 	ldr.w	r2, [r9]
 800adc0:	4461      	add	r1, ip
 800adc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adc6:	fb0a c20b 	mla	r2, sl, fp, ip
 800adca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adce:	b289      	uxth	r1, r1
 800add0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800add4:	4577      	cmp	r7, lr
 800add6:	f849 1b04 	str.w	r1, [r9], #4
 800adda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adde:	d8e2      	bhi.n	800ada6 <__multiply+0xb2>
 800ade0:	9a01      	ldr	r2, [sp, #4]
 800ade2:	f845 c002 	str.w	ip, [r5, r2]
 800ade6:	9a03      	ldr	r2, [sp, #12]
 800ade8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adec:	3304      	adds	r3, #4
 800adee:	f1b9 0f00 	cmp.w	r9, #0
 800adf2:	d021      	beq.n	800ae38 <__multiply+0x144>
 800adf4:	6829      	ldr	r1, [r5, #0]
 800adf6:	f104 0c14 	add.w	ip, r4, #20
 800adfa:	46ae      	mov	lr, r5
 800adfc:	f04f 0a00 	mov.w	sl, #0
 800ae00:	f8bc b000 	ldrh.w	fp, [ip]
 800ae04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae08:	fb09 220b 	mla	r2, r9, fp, r2
 800ae0c:	4452      	add	r2, sl
 800ae0e:	b289      	uxth	r1, r1
 800ae10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae14:	f84e 1b04 	str.w	r1, [lr], #4
 800ae18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae20:	f8be 1000 	ldrh.w	r1, [lr]
 800ae24:	fb09 110a 	mla	r1, r9, sl, r1
 800ae28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ae2c:	4567      	cmp	r7, ip
 800ae2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae32:	d8e5      	bhi.n	800ae00 <__multiply+0x10c>
 800ae34:	9a01      	ldr	r2, [sp, #4]
 800ae36:	50a9      	str	r1, [r5, r2]
 800ae38:	3504      	adds	r5, #4
 800ae3a:	e799      	b.n	800ad70 <__multiply+0x7c>
 800ae3c:	3e01      	subs	r6, #1
 800ae3e:	e79b      	b.n	800ad78 <__multiply+0x84>
 800ae40:	080206c4 	.word	0x080206c4
 800ae44:	080206d5 	.word	0x080206d5

0800ae48 <__pow5mult>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	f012 0203 	ands.w	r2, r2, #3
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	d007      	beq.n	800ae68 <__pow5mult+0x20>
 800ae58:	4c25      	ldr	r4, [pc, #148]	; (800aef0 <__pow5mult+0xa8>)
 800ae5a:	3a01      	subs	r2, #1
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae62:	f7ff fe9d 	bl	800aba0 <__multadd>
 800ae66:	4607      	mov	r7, r0
 800ae68:	10ad      	asrs	r5, r5, #2
 800ae6a:	d03d      	beq.n	800aee8 <__pow5mult+0xa0>
 800ae6c:	69f4      	ldr	r4, [r6, #28]
 800ae6e:	b97c      	cbnz	r4, 800ae90 <__pow5mult+0x48>
 800ae70:	2010      	movs	r0, #16
 800ae72:	f7ff fe2b 	bl	800aacc <malloc>
 800ae76:	4602      	mov	r2, r0
 800ae78:	61f0      	str	r0, [r6, #28]
 800ae7a:	b928      	cbnz	r0, 800ae88 <__pow5mult+0x40>
 800ae7c:	4b1d      	ldr	r3, [pc, #116]	; (800aef4 <__pow5mult+0xac>)
 800ae7e:	481e      	ldr	r0, [pc, #120]	; (800aef8 <__pow5mult+0xb0>)
 800ae80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae84:	f000 fc50 	bl	800b728 <__assert_func>
 800ae88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae8c:	6004      	str	r4, [r0, #0]
 800ae8e:	60c4      	str	r4, [r0, #12]
 800ae90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae98:	b94c      	cbnz	r4, 800aeae <__pow5mult+0x66>
 800ae9a:	f240 2171 	movw	r1, #625	; 0x271
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f7ff ff12 	bl	800acc8 <__i2b>
 800aea4:	2300      	movs	r3, #0
 800aea6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeaa:	4604      	mov	r4, r0
 800aeac:	6003      	str	r3, [r0, #0]
 800aeae:	f04f 0900 	mov.w	r9, #0
 800aeb2:	07eb      	lsls	r3, r5, #31
 800aeb4:	d50a      	bpl.n	800aecc <__pow5mult+0x84>
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7ff ff1a 	bl	800acf4 <__multiply>
 800aec0:	4639      	mov	r1, r7
 800aec2:	4680      	mov	r8, r0
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff fe49 	bl	800ab5c <_Bfree>
 800aeca:	4647      	mov	r7, r8
 800aecc:	106d      	asrs	r5, r5, #1
 800aece:	d00b      	beq.n	800aee8 <__pow5mult+0xa0>
 800aed0:	6820      	ldr	r0, [r4, #0]
 800aed2:	b938      	cbnz	r0, 800aee4 <__pow5mult+0x9c>
 800aed4:	4622      	mov	r2, r4
 800aed6:	4621      	mov	r1, r4
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ff0b 	bl	800acf4 <__multiply>
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	f8c0 9000 	str.w	r9, [r0]
 800aee4:	4604      	mov	r4, r0
 800aee6:	e7e4      	b.n	800aeb2 <__pow5mult+0x6a>
 800aee8:	4638      	mov	r0, r7
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	bf00      	nop
 800aef0:	08020820 	.word	0x08020820
 800aef4:	08020655 	.word	0x08020655
 800aef8:	080206d5 	.word	0x080206d5

0800aefc <__lshift>:
 800aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	6849      	ldr	r1, [r1, #4]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	4607      	mov	r7, r0
 800af0e:	4691      	mov	r9, r2
 800af10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af14:	f108 0601 	add.w	r6, r8, #1
 800af18:	42b3      	cmp	r3, r6
 800af1a:	db0b      	blt.n	800af34 <__lshift+0x38>
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff fddd 	bl	800aadc <_Balloc>
 800af22:	4605      	mov	r5, r0
 800af24:	b948      	cbnz	r0, 800af3a <__lshift+0x3e>
 800af26:	4602      	mov	r2, r0
 800af28:	4b28      	ldr	r3, [pc, #160]	; (800afcc <__lshift+0xd0>)
 800af2a:	4829      	ldr	r0, [pc, #164]	; (800afd0 <__lshift+0xd4>)
 800af2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af30:	f000 fbfa 	bl	800b728 <__assert_func>
 800af34:	3101      	adds	r1, #1
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	e7ee      	b.n	800af18 <__lshift+0x1c>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f100 0114 	add.w	r1, r0, #20
 800af40:	f100 0210 	add.w	r2, r0, #16
 800af44:	4618      	mov	r0, r3
 800af46:	4553      	cmp	r3, sl
 800af48:	db33      	blt.n	800afb2 <__lshift+0xb6>
 800af4a:	6920      	ldr	r0, [r4, #16]
 800af4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af50:	f104 0314 	add.w	r3, r4, #20
 800af54:	f019 091f 	ands.w	r9, r9, #31
 800af58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af60:	d02b      	beq.n	800afba <__lshift+0xbe>
 800af62:	f1c9 0e20 	rsb	lr, r9, #32
 800af66:	468a      	mov	sl, r1
 800af68:	2200      	movs	r2, #0
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	fa00 f009 	lsl.w	r0, r0, r9
 800af70:	4310      	orrs	r0, r2
 800af72:	f84a 0b04 	str.w	r0, [sl], #4
 800af76:	f853 2b04 	ldr.w	r2, [r3], #4
 800af7a:	459c      	cmp	ip, r3
 800af7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800af80:	d8f3      	bhi.n	800af6a <__lshift+0x6e>
 800af82:	ebac 0304 	sub.w	r3, ip, r4
 800af86:	3b15      	subs	r3, #21
 800af88:	f023 0303 	bic.w	r3, r3, #3
 800af8c:	3304      	adds	r3, #4
 800af8e:	f104 0015 	add.w	r0, r4, #21
 800af92:	4584      	cmp	ip, r0
 800af94:	bf38      	it	cc
 800af96:	2304      	movcc	r3, #4
 800af98:	50ca      	str	r2, [r1, r3]
 800af9a:	b10a      	cbz	r2, 800afa0 <__lshift+0xa4>
 800af9c:	f108 0602 	add.w	r6, r8, #2
 800afa0:	3e01      	subs	r6, #1
 800afa2:	4638      	mov	r0, r7
 800afa4:	612e      	str	r6, [r5, #16]
 800afa6:	4621      	mov	r1, r4
 800afa8:	f7ff fdd8 	bl	800ab5c <_Bfree>
 800afac:	4628      	mov	r0, r5
 800afae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800afb6:	3301      	adds	r3, #1
 800afb8:	e7c5      	b.n	800af46 <__lshift+0x4a>
 800afba:	3904      	subs	r1, #4
 800afbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800afc4:	459c      	cmp	ip, r3
 800afc6:	d8f9      	bhi.n	800afbc <__lshift+0xc0>
 800afc8:	e7ea      	b.n	800afa0 <__lshift+0xa4>
 800afca:	bf00      	nop
 800afcc:	080206c4 	.word	0x080206c4
 800afd0:	080206d5 	.word	0x080206d5

0800afd4 <__mcmp>:
 800afd4:	b530      	push	{r4, r5, lr}
 800afd6:	6902      	ldr	r2, [r0, #16]
 800afd8:	690c      	ldr	r4, [r1, #16]
 800afda:	1b12      	subs	r2, r2, r4
 800afdc:	d10e      	bne.n	800affc <__mcmp+0x28>
 800afde:	f100 0314 	add.w	r3, r0, #20
 800afe2:	3114      	adds	r1, #20
 800afe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aff4:	42a5      	cmp	r5, r4
 800aff6:	d003      	beq.n	800b000 <__mcmp+0x2c>
 800aff8:	d305      	bcc.n	800b006 <__mcmp+0x32>
 800affa:	2201      	movs	r2, #1
 800affc:	4610      	mov	r0, r2
 800affe:	bd30      	pop	{r4, r5, pc}
 800b000:	4283      	cmp	r3, r0
 800b002:	d3f3      	bcc.n	800afec <__mcmp+0x18>
 800b004:	e7fa      	b.n	800affc <__mcmp+0x28>
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	e7f7      	b.n	800affc <__mcmp+0x28>

0800b00c <__mdiff>:
 800b00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	460c      	mov	r4, r1
 800b012:	4606      	mov	r6, r0
 800b014:	4611      	mov	r1, r2
 800b016:	4620      	mov	r0, r4
 800b018:	4690      	mov	r8, r2
 800b01a:	f7ff ffdb 	bl	800afd4 <__mcmp>
 800b01e:	1e05      	subs	r5, r0, #0
 800b020:	d110      	bne.n	800b044 <__mdiff+0x38>
 800b022:	4629      	mov	r1, r5
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff fd59 	bl	800aadc <_Balloc>
 800b02a:	b930      	cbnz	r0, 800b03a <__mdiff+0x2e>
 800b02c:	4b3a      	ldr	r3, [pc, #232]	; (800b118 <__mdiff+0x10c>)
 800b02e:	4602      	mov	r2, r0
 800b030:	f240 2137 	movw	r1, #567	; 0x237
 800b034:	4839      	ldr	r0, [pc, #228]	; (800b11c <__mdiff+0x110>)
 800b036:	f000 fb77 	bl	800b728 <__assert_func>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b044:	bfa4      	itt	ge
 800b046:	4643      	movge	r3, r8
 800b048:	46a0      	movge	r8, r4
 800b04a:	4630      	mov	r0, r6
 800b04c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b050:	bfa6      	itte	ge
 800b052:	461c      	movge	r4, r3
 800b054:	2500      	movge	r5, #0
 800b056:	2501      	movlt	r5, #1
 800b058:	f7ff fd40 	bl	800aadc <_Balloc>
 800b05c:	b920      	cbnz	r0, 800b068 <__mdiff+0x5c>
 800b05e:	4b2e      	ldr	r3, [pc, #184]	; (800b118 <__mdiff+0x10c>)
 800b060:	4602      	mov	r2, r0
 800b062:	f240 2145 	movw	r1, #581	; 0x245
 800b066:	e7e5      	b.n	800b034 <__mdiff+0x28>
 800b068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b06c:	6926      	ldr	r6, [r4, #16]
 800b06e:	60c5      	str	r5, [r0, #12]
 800b070:	f104 0914 	add.w	r9, r4, #20
 800b074:	f108 0514 	add.w	r5, r8, #20
 800b078:	f100 0e14 	add.w	lr, r0, #20
 800b07c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b084:	f108 0210 	add.w	r2, r8, #16
 800b088:	46f2      	mov	sl, lr
 800b08a:	2100      	movs	r1, #0
 800b08c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b094:	fa11 f88b 	uxtah	r8, r1, fp
 800b098:	b299      	uxth	r1, r3
 800b09a:	0c1b      	lsrs	r3, r3, #16
 800b09c:	eba8 0801 	sub.w	r8, r8, r1
 800b0a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0a8:	fa1f f888 	uxth.w	r8, r8
 800b0ac:	1419      	asrs	r1, r3, #16
 800b0ae:	454e      	cmp	r6, r9
 800b0b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0b4:	f84a 3b04 	str.w	r3, [sl], #4
 800b0b8:	d8e8      	bhi.n	800b08c <__mdiff+0x80>
 800b0ba:	1b33      	subs	r3, r6, r4
 800b0bc:	3b15      	subs	r3, #21
 800b0be:	f023 0303 	bic.w	r3, r3, #3
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	3415      	adds	r4, #21
 800b0c6:	42a6      	cmp	r6, r4
 800b0c8:	bf38      	it	cc
 800b0ca:	2304      	movcc	r3, #4
 800b0cc:	441d      	add	r5, r3
 800b0ce:	4473      	add	r3, lr
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	462e      	mov	r6, r5
 800b0d4:	4566      	cmp	r6, ip
 800b0d6:	d30e      	bcc.n	800b0f6 <__mdiff+0xea>
 800b0d8:	f10c 0203 	add.w	r2, ip, #3
 800b0dc:	1b52      	subs	r2, r2, r5
 800b0de:	f022 0203 	bic.w	r2, r2, #3
 800b0e2:	3d03      	subs	r5, #3
 800b0e4:	45ac      	cmp	ip, r5
 800b0e6:	bf38      	it	cc
 800b0e8:	2200      	movcc	r2, #0
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0f0:	b17a      	cbz	r2, 800b112 <__mdiff+0x106>
 800b0f2:	6107      	str	r7, [r0, #16]
 800b0f4:	e7a4      	b.n	800b040 <__mdiff+0x34>
 800b0f6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0fa:	fa11 f288 	uxtah	r2, r1, r8
 800b0fe:	1414      	asrs	r4, r2, #16
 800b100:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b104:	b292      	uxth	r2, r2
 800b106:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b10a:	f84e 2b04 	str.w	r2, [lr], #4
 800b10e:	1421      	asrs	r1, r4, #16
 800b110:	e7e0      	b.n	800b0d4 <__mdiff+0xc8>
 800b112:	3f01      	subs	r7, #1
 800b114:	e7ea      	b.n	800b0ec <__mdiff+0xe0>
 800b116:	bf00      	nop
 800b118:	080206c4 	.word	0x080206c4
 800b11c:	080206d5 	.word	0x080206d5

0800b120 <__d2b>:
 800b120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b124:	460f      	mov	r7, r1
 800b126:	2101      	movs	r1, #1
 800b128:	ec59 8b10 	vmov	r8, r9, d0
 800b12c:	4616      	mov	r6, r2
 800b12e:	f7ff fcd5 	bl	800aadc <_Balloc>
 800b132:	4604      	mov	r4, r0
 800b134:	b930      	cbnz	r0, 800b144 <__d2b+0x24>
 800b136:	4602      	mov	r2, r0
 800b138:	4b24      	ldr	r3, [pc, #144]	; (800b1cc <__d2b+0xac>)
 800b13a:	4825      	ldr	r0, [pc, #148]	; (800b1d0 <__d2b+0xb0>)
 800b13c:	f240 310f 	movw	r1, #783	; 0x30f
 800b140:	f000 faf2 	bl	800b728 <__assert_func>
 800b144:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b14c:	bb2d      	cbnz	r5, 800b19a <__d2b+0x7a>
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	f1b8 0300 	subs.w	r3, r8, #0
 800b154:	d026      	beq.n	800b1a4 <__d2b+0x84>
 800b156:	4668      	mov	r0, sp
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	f7ff fd87 	bl	800ac6c <__lo0bits>
 800b15e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b162:	b1e8      	cbz	r0, 800b1a0 <__d2b+0x80>
 800b164:	f1c0 0320 	rsb	r3, r0, #32
 800b168:	fa02 f303 	lsl.w	r3, r2, r3
 800b16c:	430b      	orrs	r3, r1
 800b16e:	40c2      	lsrs	r2, r0
 800b170:	6163      	str	r3, [r4, #20]
 800b172:	9201      	str	r2, [sp, #4]
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	61a3      	str	r3, [r4, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bf14      	ite	ne
 800b17c:	2202      	movne	r2, #2
 800b17e:	2201      	moveq	r2, #1
 800b180:	6122      	str	r2, [r4, #16]
 800b182:	b1bd      	cbz	r5, 800b1b4 <__d2b+0x94>
 800b184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b188:	4405      	add	r5, r0
 800b18a:	603d      	str	r5, [r7, #0]
 800b18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b190:	6030      	str	r0, [r6, #0]
 800b192:	4620      	mov	r0, r4
 800b194:	b003      	add	sp, #12
 800b196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b19e:	e7d6      	b.n	800b14e <__d2b+0x2e>
 800b1a0:	6161      	str	r1, [r4, #20]
 800b1a2:	e7e7      	b.n	800b174 <__d2b+0x54>
 800b1a4:	a801      	add	r0, sp, #4
 800b1a6:	f7ff fd61 	bl	800ac6c <__lo0bits>
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	6163      	str	r3, [r4, #20]
 800b1ae:	3020      	adds	r0, #32
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	e7e5      	b.n	800b180 <__d2b+0x60>
 800b1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1bc:	6038      	str	r0, [r7, #0]
 800b1be:	6918      	ldr	r0, [r3, #16]
 800b1c0:	f7ff fd34 	bl	800ac2c <__hi0bits>
 800b1c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1c8:	e7e2      	b.n	800b190 <__d2b+0x70>
 800b1ca:	bf00      	nop
 800b1cc:	080206c4 	.word	0x080206c4
 800b1d0:	080206d5 	.word	0x080206d5

0800b1d4 <__sfputc_r>:
 800b1d4:	6893      	ldr	r3, [r2, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	b410      	push	{r4}
 800b1dc:	6093      	str	r3, [r2, #8]
 800b1de:	da08      	bge.n	800b1f2 <__sfputc_r+0x1e>
 800b1e0:	6994      	ldr	r4, [r2, #24]
 800b1e2:	42a3      	cmp	r3, r4
 800b1e4:	db01      	blt.n	800b1ea <__sfputc_r+0x16>
 800b1e6:	290a      	cmp	r1, #10
 800b1e8:	d103      	bne.n	800b1f2 <__sfputc_r+0x1e>
 800b1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ee:	f7fe bc50 	b.w	8009a92 <__swbuf_r>
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	1c58      	adds	r0, r3, #1
 800b1f6:	6010      	str	r0, [r2, #0]
 800b1f8:	7019      	strb	r1, [r3, #0]
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <__sfputs_r>:
 800b202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	18d5      	adds	r5, r2, r3
 800b20c:	42ac      	cmp	r4, r5
 800b20e:	d101      	bne.n	800b214 <__sfputs_r+0x12>
 800b210:	2000      	movs	r0, #0
 800b212:	e007      	b.n	800b224 <__sfputs_r+0x22>
 800b214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b218:	463a      	mov	r2, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ffda 	bl	800b1d4 <__sfputc_r>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d1f3      	bne.n	800b20c <__sfputs_r+0xa>
 800b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b228 <_vfiprintf_r>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	460d      	mov	r5, r1
 800b22e:	b09d      	sub	sp, #116	; 0x74
 800b230:	4614      	mov	r4, r2
 800b232:	4698      	mov	r8, r3
 800b234:	4606      	mov	r6, r0
 800b236:	b118      	cbz	r0, 800b240 <_vfiprintf_r+0x18>
 800b238:	6a03      	ldr	r3, [r0, #32]
 800b23a:	b90b      	cbnz	r3, 800b240 <_vfiprintf_r+0x18>
 800b23c:	f7fe fb3a 	bl	80098b4 <__sinit>
 800b240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b242:	07d9      	lsls	r1, r3, #31
 800b244:	d405      	bmi.n	800b252 <_vfiprintf_r+0x2a>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	059a      	lsls	r2, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_vfiprintf_r+0x2a>
 800b24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24e:	f7fe fd41 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	071b      	lsls	r3, r3, #28
 800b256:	d501      	bpl.n	800b25c <_vfiprintf_r+0x34>
 800b258:	692b      	ldr	r3, [r5, #16]
 800b25a:	b99b      	cbnz	r3, 800b284 <_vfiprintf_r+0x5c>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4630      	mov	r0, r6
 800b260:	f7fe fc54 	bl	8009b0c <__swsetup_r>
 800b264:	b170      	cbz	r0, 800b284 <_vfiprintf_r+0x5c>
 800b266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b268:	07dc      	lsls	r4, r3, #31
 800b26a:	d504      	bpl.n	800b276 <_vfiprintf_r+0x4e>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b01d      	add	sp, #116	; 0x74
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	89ab      	ldrh	r3, [r5, #12]
 800b278:	0598      	lsls	r0, r3, #22
 800b27a:	d4f7      	bmi.n	800b26c <_vfiprintf_r+0x44>
 800b27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27e:	f7fe fd2a 	bl	8009cd6 <__retarget_lock_release_recursive>
 800b282:	e7f3      	b.n	800b26c <_vfiprintf_r+0x44>
 800b284:	2300      	movs	r3, #0
 800b286:	9309      	str	r3, [sp, #36]	; 0x24
 800b288:	2320      	movs	r3, #32
 800b28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b292:	2330      	movs	r3, #48	; 0x30
 800b294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b448 <_vfiprintf_r+0x220>
 800b298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b29c:	f04f 0901 	mov.w	r9, #1
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	469a      	mov	sl, r3
 800b2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a8:	b10a      	cbz	r2, 800b2ae <_vfiprintf_r+0x86>
 800b2aa:	2a25      	cmp	r2, #37	; 0x25
 800b2ac:	d1f9      	bne.n	800b2a2 <_vfiprintf_r+0x7a>
 800b2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b2b2:	d00b      	beq.n	800b2cc <_vfiprintf_r+0xa4>
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7ff ffa1 	bl	800b202 <__sfputs_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f000 80a9 	beq.w	800b418 <_vfiprintf_r+0x1f0>
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	445a      	add	r2, fp
 800b2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80a1 	beq.w	800b418 <_vfiprintf_r+0x1f0>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e0:	f10a 0a01 	add.w	sl, sl, #1
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f6:	4854      	ldr	r0, [pc, #336]	; (800b448 <_vfiprintf_r+0x220>)
 800b2f8:	f7f4 ff6a 	bl	80001d0 <memchr>
 800b2fc:	9a04      	ldr	r2, [sp, #16]
 800b2fe:	b9d8      	cbnz	r0, 800b338 <_vfiprintf_r+0x110>
 800b300:	06d1      	lsls	r1, r2, #27
 800b302:	bf44      	itt	mi
 800b304:	2320      	movmi	r3, #32
 800b306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30a:	0713      	lsls	r3, r2, #28
 800b30c:	bf44      	itt	mi
 800b30e:	232b      	movmi	r3, #43	; 0x2b
 800b310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b314:	f89a 3000 	ldrb.w	r3, [sl]
 800b318:	2b2a      	cmp	r3, #42	; 0x2a
 800b31a:	d015      	beq.n	800b348 <_vfiprintf_r+0x120>
 800b31c:	9a07      	ldr	r2, [sp, #28]
 800b31e:	4654      	mov	r4, sl
 800b320:	2000      	movs	r0, #0
 800b322:	f04f 0c0a 	mov.w	ip, #10
 800b326:	4621      	mov	r1, r4
 800b328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b32c:	3b30      	subs	r3, #48	; 0x30
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d94d      	bls.n	800b3ce <_vfiprintf_r+0x1a6>
 800b332:	b1b0      	cbz	r0, 800b362 <_vfiprintf_r+0x13a>
 800b334:	9207      	str	r2, [sp, #28]
 800b336:	e014      	b.n	800b362 <_vfiprintf_r+0x13a>
 800b338:	eba0 0308 	sub.w	r3, r0, r8
 800b33c:	fa09 f303 	lsl.w	r3, r9, r3
 800b340:	4313      	orrs	r3, r2
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	46a2      	mov	sl, r4
 800b346:	e7d2      	b.n	800b2ee <_vfiprintf_r+0xc6>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	1d19      	adds	r1, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	9103      	str	r1, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfbb      	ittet	lt
 800b354:	425b      	neglt	r3, r3
 800b356:	f042 0202 	orrlt.w	r2, r2, #2
 800b35a:	9307      	strge	r3, [sp, #28]
 800b35c:	9307      	strlt	r3, [sp, #28]
 800b35e:	bfb8      	it	lt
 800b360:	9204      	strlt	r2, [sp, #16]
 800b362:	7823      	ldrb	r3, [r4, #0]
 800b364:	2b2e      	cmp	r3, #46	; 0x2e
 800b366:	d10c      	bne.n	800b382 <_vfiprintf_r+0x15a>
 800b368:	7863      	ldrb	r3, [r4, #1]
 800b36a:	2b2a      	cmp	r3, #42	; 0x2a
 800b36c:	d134      	bne.n	800b3d8 <_vfiprintf_r+0x1b0>
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	9203      	str	r2, [sp, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b37e:	3402      	adds	r4, #2
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b458 <_vfiprintf_r+0x230>
 800b386:	7821      	ldrb	r1, [r4, #0]
 800b388:	2203      	movs	r2, #3
 800b38a:	4650      	mov	r0, sl
 800b38c:	f7f4 ff20 	bl	80001d0 <memchr>
 800b390:	b138      	cbz	r0, 800b3a2 <_vfiprintf_r+0x17a>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	eba0 000a 	sub.w	r0, r0, sl
 800b398:	2240      	movs	r2, #64	; 0x40
 800b39a:	4082      	lsls	r2, r0
 800b39c:	4313      	orrs	r3, r2
 800b39e:	3401      	adds	r4, #1
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a6:	4829      	ldr	r0, [pc, #164]	; (800b44c <_vfiprintf_r+0x224>)
 800b3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ac:	2206      	movs	r2, #6
 800b3ae:	f7f4 ff0f 	bl	80001d0 <memchr>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d03f      	beq.n	800b436 <_vfiprintf_r+0x20e>
 800b3b6:	4b26      	ldr	r3, [pc, #152]	; (800b450 <_vfiprintf_r+0x228>)
 800b3b8:	bb1b      	cbnz	r3, 800b402 <_vfiprintf_r+0x1da>
 800b3ba:	9b03      	ldr	r3, [sp, #12]
 800b3bc:	3307      	adds	r3, #7
 800b3be:	f023 0307 	bic.w	r3, r3, #7
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	9303      	str	r3, [sp, #12]
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	443b      	add	r3, r7
 800b3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b3cc:	e768      	b.n	800b2a0 <_vfiprintf_r+0x78>
 800b3ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	e7a6      	b.n	800b326 <_vfiprintf_r+0xfe>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	3401      	adds	r4, #1
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	f04f 0c0a 	mov.w	ip, #10
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ea:	3a30      	subs	r2, #48	; 0x30
 800b3ec:	2a09      	cmp	r2, #9
 800b3ee:	d903      	bls.n	800b3f8 <_vfiprintf_r+0x1d0>
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0c6      	beq.n	800b382 <_vfiprintf_r+0x15a>
 800b3f4:	9105      	str	r1, [sp, #20]
 800b3f6:	e7c4      	b.n	800b382 <_vfiprintf_r+0x15a>
 800b3f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	2301      	movs	r3, #1
 800b400:	e7f0      	b.n	800b3e4 <_vfiprintf_r+0x1bc>
 800b402:	ab03      	add	r3, sp, #12
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	462a      	mov	r2, r5
 800b408:	4b12      	ldr	r3, [pc, #72]	; (800b454 <_vfiprintf_r+0x22c>)
 800b40a:	a904      	add	r1, sp, #16
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fd fe11 	bl	8009034 <_printf_float>
 800b412:	4607      	mov	r7, r0
 800b414:	1c78      	adds	r0, r7, #1
 800b416:	d1d6      	bne.n	800b3c6 <_vfiprintf_r+0x19e>
 800b418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d405      	bmi.n	800b42a <_vfiprintf_r+0x202>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d402      	bmi.n	800b42a <_vfiprintf_r+0x202>
 800b424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b426:	f7fe fc56 	bl	8009cd6 <__retarget_lock_release_recursive>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	065b      	lsls	r3, r3, #25
 800b42e:	f53f af1d 	bmi.w	800b26c <_vfiprintf_r+0x44>
 800b432:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b434:	e71c      	b.n	800b270 <_vfiprintf_r+0x48>
 800b436:	ab03      	add	r3, sp, #12
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	462a      	mov	r2, r5
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <_vfiprintf_r+0x22c>)
 800b43e:	a904      	add	r1, sp, #16
 800b440:	4630      	mov	r0, r6
 800b442:	f7fe f89b 	bl	800957c <_printf_i>
 800b446:	e7e4      	b.n	800b412 <_vfiprintf_r+0x1ea>
 800b448:	0802082c 	.word	0x0802082c
 800b44c:	08020836 	.word	0x08020836
 800b450:	08009035 	.word	0x08009035
 800b454:	0800b203 	.word	0x0800b203
 800b458:	08020832 	.word	0x08020832

0800b45c <__sflush_r>:
 800b45c:	898a      	ldrh	r2, [r1, #12]
 800b45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	0710      	lsls	r0, r2, #28
 800b466:	460c      	mov	r4, r1
 800b468:	d458      	bmi.n	800b51c <__sflush_r+0xc0>
 800b46a:	684b      	ldr	r3, [r1, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dc05      	bgt.n	800b47c <__sflush_r+0x20>
 800b470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b472:	2b00      	cmp	r3, #0
 800b474:	dc02      	bgt.n	800b47c <__sflush_r+0x20>
 800b476:	2000      	movs	r0, #0
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d0f9      	beq.n	800b476 <__sflush_r+0x1a>
 800b482:	2300      	movs	r3, #0
 800b484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b488:	682f      	ldr	r7, [r5, #0]
 800b48a:	6a21      	ldr	r1, [r4, #32]
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	d032      	beq.n	800b4f6 <__sflush_r+0x9a>
 800b490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	075a      	lsls	r2, r3, #29
 800b496:	d505      	bpl.n	800b4a4 <__sflush_r+0x48>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	1ac0      	subs	r0, r0, r3
 800b49c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b49e:	b10b      	cbz	r3, 800b4a4 <__sflush_r+0x48>
 800b4a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4a2:	1ac0      	subs	r0, r0, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4aa:	6a21      	ldr	r1, [r4, #32]
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b0      	blx	r6
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	d106      	bne.n	800b4c4 <__sflush_r+0x68>
 800b4b6:	6829      	ldr	r1, [r5, #0]
 800b4b8:	291d      	cmp	r1, #29
 800b4ba:	d82b      	bhi.n	800b514 <__sflush_r+0xb8>
 800b4bc:	4a29      	ldr	r2, [pc, #164]	; (800b564 <__sflush_r+0x108>)
 800b4be:	410a      	asrs	r2, r1
 800b4c0:	07d6      	lsls	r6, r2, #31
 800b4c2:	d427      	bmi.n	800b514 <__sflush_r+0xb8>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	6062      	str	r2, [r4, #4]
 800b4c8:	04d9      	lsls	r1, r3, #19
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	d504      	bpl.n	800b4da <__sflush_r+0x7e>
 800b4d0:	1c42      	adds	r2, r0, #1
 800b4d2:	d101      	bne.n	800b4d8 <__sflush_r+0x7c>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b903      	cbnz	r3, 800b4da <__sflush_r+0x7e>
 800b4d8:	6560      	str	r0, [r4, #84]	; 0x54
 800b4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4dc:	602f      	str	r7, [r5, #0]
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d0c9      	beq.n	800b476 <__sflush_r+0x1a>
 800b4e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	d002      	beq.n	800b4f0 <__sflush_r+0x94>
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7ff faa2 	bl	800aa34 <_free_r>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	6360      	str	r0, [r4, #52]	; 0x34
 800b4f4:	e7c0      	b.n	800b478 <__sflush_r+0x1c>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	47b0      	blx	r6
 800b4fc:	1c41      	adds	r1, r0, #1
 800b4fe:	d1c8      	bne.n	800b492 <__sflush_r+0x36>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0c5      	beq.n	800b492 <__sflush_r+0x36>
 800b506:	2b1d      	cmp	r3, #29
 800b508:	d001      	beq.n	800b50e <__sflush_r+0xb2>
 800b50a:	2b16      	cmp	r3, #22
 800b50c:	d101      	bne.n	800b512 <__sflush_r+0xb6>
 800b50e:	602f      	str	r7, [r5, #0]
 800b510:	e7b1      	b.n	800b476 <__sflush_r+0x1a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7ad      	b.n	800b478 <__sflush_r+0x1c>
 800b51c:	690f      	ldr	r7, [r1, #16]
 800b51e:	2f00      	cmp	r7, #0
 800b520:	d0a9      	beq.n	800b476 <__sflush_r+0x1a>
 800b522:	0793      	lsls	r3, r2, #30
 800b524:	680e      	ldr	r6, [r1, #0]
 800b526:	bf08      	it	eq
 800b528:	694b      	ldreq	r3, [r1, #20]
 800b52a:	600f      	str	r7, [r1, #0]
 800b52c:	bf18      	it	ne
 800b52e:	2300      	movne	r3, #0
 800b530:	eba6 0807 	sub.w	r8, r6, r7
 800b534:	608b      	str	r3, [r1, #8]
 800b536:	f1b8 0f00 	cmp.w	r8, #0
 800b53a:	dd9c      	ble.n	800b476 <__sflush_r+0x1a>
 800b53c:	6a21      	ldr	r1, [r4, #32]
 800b53e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b540:	4643      	mov	r3, r8
 800b542:	463a      	mov	r2, r7
 800b544:	4628      	mov	r0, r5
 800b546:	47b0      	blx	r6
 800b548:	2800      	cmp	r0, #0
 800b54a:	dc06      	bgt.n	800b55a <__sflush_r+0xfe>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	e78e      	b.n	800b478 <__sflush_r+0x1c>
 800b55a:	4407      	add	r7, r0
 800b55c:	eba8 0800 	sub.w	r8, r8, r0
 800b560:	e7e9      	b.n	800b536 <__sflush_r+0xda>
 800b562:	bf00      	nop
 800b564:	dfbffffe 	.word	0xdfbffffe

0800b568 <_fflush_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	690b      	ldr	r3, [r1, #16]
 800b56c:	4605      	mov	r5, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	b913      	cbnz	r3, 800b578 <_fflush_r+0x10>
 800b572:	2500      	movs	r5, #0
 800b574:	4628      	mov	r0, r5
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	b118      	cbz	r0, 800b582 <_fflush_r+0x1a>
 800b57a:	6a03      	ldr	r3, [r0, #32]
 800b57c:	b90b      	cbnz	r3, 800b582 <_fflush_r+0x1a>
 800b57e:	f7fe f999 	bl	80098b4 <__sinit>
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f3      	beq.n	800b572 <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x32>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x32>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f7fe fb9d 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff5d 	bl	800b45c <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5a4:	07da      	lsls	r2, r3, #31
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	d4e4      	bmi.n	800b574 <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4e1      	bmi.n	800b574 <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b2:	f7fe fb90 	bl	8009cd6 <__retarget_lock_release_recursive>
 800b5b6:	e7dd      	b.n	800b574 <_fflush_r+0xc>

0800b5b8 <__swhatbuf_r>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c0:	2900      	cmp	r1, #0
 800b5c2:	b096      	sub	sp, #88	; 0x58
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	461e      	mov	r6, r3
 800b5c8:	da0d      	bge.n	800b5e6 <__swhatbuf_r+0x2e>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5d0:	f04f 0100 	mov.w	r1, #0
 800b5d4:	bf0c      	ite	eq
 800b5d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5da:	2340      	movne	r3, #64	; 0x40
 800b5dc:	2000      	movs	r0, #0
 800b5de:	6031      	str	r1, [r6, #0]
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	b016      	add	sp, #88	; 0x58
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f000 f87c 	bl	800b6e4 <_fstat_r>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	dbec      	blt.n	800b5ca <__swhatbuf_r+0x12>
 800b5f0:	9901      	ldr	r1, [sp, #4]
 800b5f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5fa:	4259      	negs	r1, r3
 800b5fc:	4159      	adcs	r1, r3
 800b5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b602:	e7eb      	b.n	800b5dc <__swhatbuf_r+0x24>

0800b604 <__smakebuf_r>:
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b608:	079d      	lsls	r5, r3, #30
 800b60a:	4606      	mov	r6, r0
 800b60c:	460c      	mov	r4, r1
 800b60e:	d507      	bpl.n	800b620 <__smakebuf_r+0x1c>
 800b610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	6123      	str	r3, [r4, #16]
 800b618:	2301      	movs	r3, #1
 800b61a:	6163      	str	r3, [r4, #20]
 800b61c:	b002      	add	sp, #8
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	ab01      	add	r3, sp, #4
 800b622:	466a      	mov	r2, sp
 800b624:	f7ff ffc8 	bl	800b5b8 <__swhatbuf_r>
 800b628:	9900      	ldr	r1, [sp, #0]
 800b62a:	4605      	mov	r5, r0
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7fd fbd5 	bl	8008ddc <_malloc_r>
 800b632:	b948      	cbnz	r0, 800b648 <__smakebuf_r+0x44>
 800b634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b638:	059a      	lsls	r2, r3, #22
 800b63a:	d4ef      	bmi.n	800b61c <__smakebuf_r+0x18>
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	f043 0302 	orr.w	r3, r3, #2
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	e7e3      	b.n	800b610 <__smakebuf_r+0xc>
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	9b00      	ldr	r3, [sp, #0]
 800b654:	6163      	str	r3, [r4, #20]
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	6120      	str	r0, [r4, #16]
 800b65a:	b15b      	cbz	r3, 800b674 <__smakebuf_r+0x70>
 800b65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b660:	4630      	mov	r0, r6
 800b662:	f000 f851 	bl	800b708 <_isatty_r>
 800b666:	b128      	cbz	r0, 800b674 <__smakebuf_r+0x70>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f023 0303 	bic.w	r3, r3, #3
 800b66e:	f043 0301 	orr.w	r3, r3, #1
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	431d      	orrs	r5, r3
 800b678:	81a5      	strh	r5, [r4, #12]
 800b67a:	e7cf      	b.n	800b61c <__smakebuf_r+0x18>

0800b67c <_putc_r>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	460d      	mov	r5, r1
 800b680:	4614      	mov	r4, r2
 800b682:	4606      	mov	r6, r0
 800b684:	b118      	cbz	r0, 800b68e <_putc_r+0x12>
 800b686:	6a03      	ldr	r3, [r0, #32]
 800b688:	b90b      	cbnz	r3, 800b68e <_putc_r+0x12>
 800b68a:	f7fe f913 	bl	80098b4 <__sinit>
 800b68e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b690:	07d8      	lsls	r0, r3, #31
 800b692:	d405      	bmi.n	800b6a0 <_putc_r+0x24>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	0599      	lsls	r1, r3, #22
 800b698:	d402      	bmi.n	800b6a0 <_putc_r+0x24>
 800b69a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b69c:	f7fe fb1a 	bl	8009cd4 <__retarget_lock_acquire_recursive>
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	da05      	bge.n	800b6b6 <_putc_r+0x3a>
 800b6aa:	69a2      	ldr	r2, [r4, #24]
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	db12      	blt.n	800b6d6 <_putc_r+0x5a>
 800b6b0:	b2eb      	uxtb	r3, r5
 800b6b2:	2b0a      	cmp	r3, #10
 800b6b4:	d00f      	beq.n	800b6d6 <_putc_r+0x5a>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	701d      	strb	r5, [r3, #0]
 800b6be:	b2ed      	uxtb	r5, r5
 800b6c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c2:	07da      	lsls	r2, r3, #31
 800b6c4:	d405      	bmi.n	800b6d2 <_putc_r+0x56>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	059b      	lsls	r3, r3, #22
 800b6ca:	d402      	bmi.n	800b6d2 <_putc_r+0x56>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f7fe fb02 	bl	8009cd6 <__retarget_lock_release_recursive>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7fe f9d9 	bl	8009a92 <__swbuf_r>
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	e7ed      	b.n	800b6c0 <_putc_r+0x44>

0800b6e4 <_fstat_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	; (800b704 <_fstat_r+0x20>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	f7f7 fab2 	bl	8002c5a <_fstat>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	d102      	bne.n	800b700 <_fstat_r+0x1c>
 800b6fa:	682b      	ldr	r3, [r5, #0]
 800b6fc:	b103      	cbz	r3, 800b700 <_fstat_r+0x1c>
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	bf00      	nop
 800b704:	2000b988 	.word	0x2000b988

0800b708 <_isatty_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d06      	ldr	r5, [pc, #24]	; (800b724 <_isatty_r+0x1c>)
 800b70c:	2300      	movs	r3, #0
 800b70e:	4604      	mov	r4, r0
 800b710:	4608      	mov	r0, r1
 800b712:	602b      	str	r3, [r5, #0]
 800b714:	f7f7 fab1 	bl	8002c7a <_isatty>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_isatty_r+0x1a>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_isatty_r+0x1a>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	2000b988 	.word	0x2000b988

0800b728 <__assert_func>:
 800b728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b72a:	4614      	mov	r4, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <__assert_func+0x2c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4605      	mov	r5, r0
 800b734:	68d8      	ldr	r0, [r3, #12]
 800b736:	b14c      	cbz	r4, 800b74c <__assert_func+0x24>
 800b738:	4b07      	ldr	r3, [pc, #28]	; (800b758 <__assert_func+0x30>)
 800b73a:	9100      	str	r1, [sp, #0]
 800b73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b740:	4906      	ldr	r1, [pc, #24]	; (800b75c <__assert_func+0x34>)
 800b742:	462b      	mov	r3, r5
 800b744:	f000 f82e 	bl	800b7a4 <fiprintf>
 800b748:	f000 f83e 	bl	800b7c8 <abort>
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <__assert_func+0x38>)
 800b74e:	461c      	mov	r4, r3
 800b750:	e7f3      	b.n	800b73a <__assert_func+0x12>
 800b752:	bf00      	nop
 800b754:	20000078 	.word	0x20000078
 800b758:	08020847 	.word	0x08020847
 800b75c:	08020854 	.word	0x08020854
 800b760:	08020882 	.word	0x08020882

0800b764 <__ascii_mbtowc>:
 800b764:	b082      	sub	sp, #8
 800b766:	b901      	cbnz	r1, 800b76a <__ascii_mbtowc+0x6>
 800b768:	a901      	add	r1, sp, #4
 800b76a:	b142      	cbz	r2, 800b77e <__ascii_mbtowc+0x1a>
 800b76c:	b14b      	cbz	r3, 800b782 <__ascii_mbtowc+0x1e>
 800b76e:	7813      	ldrb	r3, [r2, #0]
 800b770:	600b      	str	r3, [r1, #0]
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	1e10      	subs	r0, r2, #0
 800b776:	bf18      	it	ne
 800b778:	2001      	movne	r0, #1
 800b77a:	b002      	add	sp, #8
 800b77c:	4770      	bx	lr
 800b77e:	4610      	mov	r0, r2
 800b780:	e7fb      	b.n	800b77a <__ascii_mbtowc+0x16>
 800b782:	f06f 0001 	mvn.w	r0, #1
 800b786:	e7f8      	b.n	800b77a <__ascii_mbtowc+0x16>

0800b788 <__ascii_wctomb>:
 800b788:	b149      	cbz	r1, 800b79e <__ascii_wctomb+0x16>
 800b78a:	2aff      	cmp	r2, #255	; 0xff
 800b78c:	bf85      	ittet	hi
 800b78e:	238a      	movhi	r3, #138	; 0x8a
 800b790:	6003      	strhi	r3, [r0, #0]
 800b792:	700a      	strbls	r2, [r1, #0]
 800b794:	f04f 30ff 	movhi.w	r0, #4294967295
 800b798:	bf98      	it	ls
 800b79a:	2001      	movls	r0, #1
 800b79c:	4770      	bx	lr
 800b79e:	4608      	mov	r0, r1
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <fiprintf>:
 800b7a4:	b40e      	push	{r1, r2, r3}
 800b7a6:	b503      	push	{r0, r1, lr}
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	ab03      	add	r3, sp, #12
 800b7ac:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <fiprintf+0x20>)
 800b7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b2:	6800      	ldr	r0, [r0, #0]
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	f7ff fd37 	bl	800b228 <_vfiprintf_r>
 800b7ba:	b002      	add	sp, #8
 800b7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7c0:	b003      	add	sp, #12
 800b7c2:	4770      	bx	lr
 800b7c4:	20000078 	.word	0x20000078

0800b7c8 <abort>:
 800b7c8:	b508      	push	{r3, lr}
 800b7ca:	2006      	movs	r0, #6
 800b7cc:	f000 f82c 	bl	800b828 <raise>
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	f7f7 fa0f 	bl	8002bf4 <_exit>

0800b7d6 <_raise_r>:
 800b7d6:	291f      	cmp	r1, #31
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4604      	mov	r4, r0
 800b7dc:	460d      	mov	r5, r1
 800b7de:	d904      	bls.n	800b7ea <_raise_r+0x14>
 800b7e0:	2316      	movs	r3, #22
 800b7e2:	6003      	str	r3, [r0, #0]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b7ec:	b112      	cbz	r2, 800b7f4 <_raise_r+0x1e>
 800b7ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7f2:	b94b      	cbnz	r3, 800b808 <_raise_r+0x32>
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 f831 	bl	800b85c <_getpid_r>
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	4620      	mov	r0, r4
 800b800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b804:	f000 b818 	b.w	800b838 <_kill_r>
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d00a      	beq.n	800b822 <_raise_r+0x4c>
 800b80c:	1c59      	adds	r1, r3, #1
 800b80e:	d103      	bne.n	800b818 <_raise_r+0x42>
 800b810:	2316      	movs	r3, #22
 800b812:	6003      	str	r3, [r0, #0]
 800b814:	2001      	movs	r0, #1
 800b816:	e7e7      	b.n	800b7e8 <_raise_r+0x12>
 800b818:	2400      	movs	r4, #0
 800b81a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b81e:	4628      	mov	r0, r5
 800b820:	4798      	blx	r3
 800b822:	2000      	movs	r0, #0
 800b824:	e7e0      	b.n	800b7e8 <_raise_r+0x12>
	...

0800b828 <raise>:
 800b828:	4b02      	ldr	r3, [pc, #8]	; (800b834 <raise+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f7ff bfd2 	b.w	800b7d6 <_raise_r>
 800b832:	bf00      	nop
 800b834:	20000078 	.word	0x20000078

0800b838 <_kill_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_kill_r+0x20>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	4611      	mov	r1, r2
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	f7f7 f9c5 	bl	8002bd4 <_kill>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	d102      	bne.n	800b854 <_kill_r+0x1c>
 800b84e:	682b      	ldr	r3, [r5, #0]
 800b850:	b103      	cbz	r3, 800b854 <_kill_r+0x1c>
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	bd38      	pop	{r3, r4, r5, pc}
 800b856:	bf00      	nop
 800b858:	2000b988 	.word	0x2000b988

0800b85c <_getpid_r>:
 800b85c:	f7f7 b9b2 	b.w	8002bc4 <_getpid>

0800b860 <log10>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	ed2d 8b02 	vpush	{d8}
 800b866:	ec55 4b10 	vmov	r4, r5, d0
 800b86a:	f000 fa65 	bl	800bd38 <__ieee754_log10>
 800b86e:	4622      	mov	r2, r4
 800b870:	462b      	mov	r3, r5
 800b872:	4620      	mov	r0, r4
 800b874:	4629      	mov	r1, r5
 800b876:	eeb0 8a40 	vmov.f32	s16, s0
 800b87a:	eef0 8a60 	vmov.f32	s17, s1
 800b87e:	f7f5 f955 	bl	8000b2c <__aeabi_dcmpun>
 800b882:	b998      	cbnz	r0, 800b8ac <log10+0x4c>
 800b884:	2200      	movs	r2, #0
 800b886:	2300      	movs	r3, #0
 800b888:	4620      	mov	r0, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	f7f5 f930 	bl	8000af0 <__aeabi_dcmple>
 800b890:	b160      	cbz	r0, 800b8ac <log10+0x4c>
 800b892:	2200      	movs	r2, #0
 800b894:	2300      	movs	r3, #0
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f5 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800b89e:	b160      	cbz	r0, 800b8ba <log10+0x5a>
 800b8a0:	f7fe f9ee 	bl	8009c80 <__errno>
 800b8a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b8d0 <log10+0x70>
 800b8a8:	2322      	movs	r3, #34	; 0x22
 800b8aa:	6003      	str	r3, [r0, #0]
 800b8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b0:	eef0 0a68 	vmov.f32	s1, s17
 800b8b4:	ecbd 8b02 	vpop	{d8}
 800b8b8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ba:	f7fe f9e1 	bl	8009c80 <__errno>
 800b8be:	ecbd 8b02 	vpop	{d8}
 800b8c2:	2321      	movs	r3, #33	; 0x21
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ca:	4803      	ldr	r0, [pc, #12]	; (800b8d8 <log10+0x78>)
 800b8cc:	f000 b8cc 	b.w	800ba68 <nan>
 800b8d0:	00000000 	.word	0x00000000
 800b8d4:	fff00000 	.word	0xfff00000
 800b8d8:	08020882 	.word	0x08020882

0800b8dc <pow>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	ed2d 8b02 	vpush	{d8}
 800b8e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b8e6:	eef0 8a60 	vmov.f32	s17, s1
 800b8ea:	ec55 4b11 	vmov	r4, r5, d1
 800b8ee:	f000 faaf 	bl	800be50 <__ieee754_pow>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	ec57 6b10 	vmov	r6, r7, d0
 800b8fe:	f7f5 f915 	bl	8000b2c <__aeabi_dcmpun>
 800b902:	2800      	cmp	r0, #0
 800b904:	d13b      	bne.n	800b97e <pow+0xa2>
 800b906:	ec51 0b18 	vmov	r0, r1, d8
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	f7f5 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 800b912:	b1b8      	cbz	r0, 800b944 <pow+0x68>
 800b914:	2200      	movs	r2, #0
 800b916:	2300      	movs	r3, #0
 800b918:	4620      	mov	r0, r4
 800b91a:	4629      	mov	r1, r5
 800b91c:	f7f5 f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b920:	2800      	cmp	r0, #0
 800b922:	d146      	bne.n	800b9b2 <pow+0xd6>
 800b924:	ec45 4b10 	vmov	d0, r4, r5
 800b928:	f000 f892 	bl	800ba50 <finite>
 800b92c:	b338      	cbz	r0, 800b97e <pow+0xa2>
 800b92e:	2200      	movs	r2, #0
 800b930:	2300      	movs	r3, #0
 800b932:	4620      	mov	r0, r4
 800b934:	4629      	mov	r1, r5
 800b936:	f7f5 f8d1 	bl	8000adc <__aeabi_dcmplt>
 800b93a:	b300      	cbz	r0, 800b97e <pow+0xa2>
 800b93c:	f7fe f9a0 	bl	8009c80 <__errno>
 800b940:	2322      	movs	r3, #34	; 0x22
 800b942:	e01b      	b.n	800b97c <pow+0xa0>
 800b944:	ec47 6b10 	vmov	d0, r6, r7
 800b948:	f000 f882 	bl	800ba50 <finite>
 800b94c:	b9e0      	cbnz	r0, 800b988 <pow+0xac>
 800b94e:	eeb0 0a48 	vmov.f32	s0, s16
 800b952:	eef0 0a68 	vmov.f32	s1, s17
 800b956:	f000 f87b 	bl	800ba50 <finite>
 800b95a:	b1a8      	cbz	r0, 800b988 <pow+0xac>
 800b95c:	ec45 4b10 	vmov	d0, r4, r5
 800b960:	f000 f876 	bl	800ba50 <finite>
 800b964:	b180      	cbz	r0, 800b988 <pow+0xac>
 800b966:	4632      	mov	r2, r6
 800b968:	463b      	mov	r3, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f5 f8dd 	bl	8000b2c <__aeabi_dcmpun>
 800b972:	2800      	cmp	r0, #0
 800b974:	d0e2      	beq.n	800b93c <pow+0x60>
 800b976:	f7fe f983 	bl	8009c80 <__errno>
 800b97a:	2321      	movs	r3, #33	; 0x21
 800b97c:	6003      	str	r3, [r0, #0]
 800b97e:	ecbd 8b02 	vpop	{d8}
 800b982:	ec47 6b10 	vmov	d0, r6, r7
 800b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b988:	2200      	movs	r2, #0
 800b98a:	2300      	movs	r3, #0
 800b98c:	4630      	mov	r0, r6
 800b98e:	4639      	mov	r1, r7
 800b990:	f7f5 f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b994:	2800      	cmp	r0, #0
 800b996:	d0f2      	beq.n	800b97e <pow+0xa2>
 800b998:	eeb0 0a48 	vmov.f32	s0, s16
 800b99c:	eef0 0a68 	vmov.f32	s1, s17
 800b9a0:	f000 f856 	bl	800ba50 <finite>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d0ea      	beq.n	800b97e <pow+0xa2>
 800b9a8:	ec45 4b10 	vmov	d0, r4, r5
 800b9ac:	f000 f850 	bl	800ba50 <finite>
 800b9b0:	e7c3      	b.n	800b93a <pow+0x5e>
 800b9b2:	4f01      	ldr	r7, [pc, #4]	; (800b9b8 <pow+0xdc>)
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	e7e2      	b.n	800b97e <pow+0xa2>
 800b9b8:	3ff00000 	.word	0x3ff00000

0800b9bc <sqrt>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	ed2d 8b02 	vpush	{d8}
 800b9c2:	ec55 4b10 	vmov	r4, r5, d0
 800b9c6:	f000 f857 	bl	800ba78 <__ieee754_sqrt>
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b9d6:	eef0 8a60 	vmov.f32	s17, s1
 800b9da:	f7f5 f8a7 	bl	8000b2c <__aeabi_dcmpun>
 800b9de:	b990      	cbnz	r0, 800ba06 <sqrt+0x4a>
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f5 f878 	bl	8000adc <__aeabi_dcmplt>
 800b9ec:	b158      	cbz	r0, 800ba06 <sqrt+0x4a>
 800b9ee:	f7fe f947 	bl	8009c80 <__errno>
 800b9f2:	2321      	movs	r3, #33	; 0x21
 800b9f4:	6003      	str	r3, [r0, #0]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f7f4 ff25 	bl	800084c <__aeabi_ddiv>
 800ba02:	ec41 0b18 	vmov	d8, r0, r1
 800ba06:	eeb0 0a48 	vmov.f32	s0, s16
 800ba0a:	eef0 0a68 	vmov.f32	s1, s17
 800ba0e:	ecbd 8b02 	vpop	{d8}
 800ba12:	bd38      	pop	{r3, r4, r5, pc}

0800ba14 <sqrtf>:
 800ba14:	b508      	push	{r3, lr}
 800ba16:	ed2d 8b02 	vpush	{d8}
 800ba1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ba1e:	f000 f905 	bl	800bc2c <__ieee754_sqrtf>
 800ba22:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	d60c      	bvs.n	800ba46 <sqrtf+0x32>
 800ba2c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ba4c <sqrtf+0x38>
 800ba30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba38:	d505      	bpl.n	800ba46 <sqrtf+0x32>
 800ba3a:	f7fe f921 	bl	8009c80 <__errno>
 800ba3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ba42:	2321      	movs	r3, #33	; 0x21
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	ecbd 8b02 	vpop	{d8}
 800ba4a:	bd08      	pop	{r3, pc}
 800ba4c:	00000000 	.word	0x00000000

0800ba50 <finite>:
 800ba50:	b082      	sub	sp, #8
 800ba52:	ed8d 0b00 	vstr	d0, [sp]
 800ba56:	9801      	ldr	r0, [sp, #4]
 800ba58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba5c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba60:	0fc0      	lsrs	r0, r0, #31
 800ba62:	b002      	add	sp, #8
 800ba64:	4770      	bx	lr
	...

0800ba68 <nan>:
 800ba68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba70 <nan+0x8>
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	00000000 	.word	0x00000000
 800ba74:	7ff80000 	.word	0x7ff80000

0800ba78 <__ieee754_sqrt>:
 800ba78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	ec55 4b10 	vmov	r4, r5, d0
 800ba80:	4e67      	ldr	r6, [pc, #412]	; (800bc20 <__ieee754_sqrt+0x1a8>)
 800ba82:	43ae      	bics	r6, r5
 800ba84:	ee10 0a10 	vmov	r0, s0
 800ba88:	ee10 2a10 	vmov	r2, s0
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	462b      	mov	r3, r5
 800ba90:	d10d      	bne.n	800baae <__ieee754_sqrt+0x36>
 800ba92:	f7f4 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7f4 fbf5 	bl	800028c <__adddf3>
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	ec45 4b10 	vmov	d0, r4, r5
 800baaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	2d00      	cmp	r5, #0
 800bab0:	dc0b      	bgt.n	800baca <__ieee754_sqrt+0x52>
 800bab2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bab6:	4326      	orrs	r6, r4
 800bab8:	d0f5      	beq.n	800baa6 <__ieee754_sqrt+0x2e>
 800baba:	b135      	cbz	r5, 800baca <__ieee754_sqrt+0x52>
 800babc:	f7f4 fbe4 	bl	8000288 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	f7f4 fec2 	bl	800084c <__aeabi_ddiv>
 800bac8:	e7eb      	b.n	800baa2 <__ieee754_sqrt+0x2a>
 800baca:	1509      	asrs	r1, r1, #20
 800bacc:	f000 808d 	beq.w	800bbea <__ieee754_sqrt+0x172>
 800bad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bad4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800badc:	07c9      	lsls	r1, r1, #31
 800bade:	bf5c      	itt	pl
 800bae0:	005b      	lslpl	r3, r3, #1
 800bae2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bae6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800baea:	bf58      	it	pl
 800baec:	0052      	lslpl	r2, r2, #1
 800baee:	2500      	movs	r5, #0
 800baf0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800baf4:	1076      	asrs	r6, r6, #1
 800baf6:	0052      	lsls	r2, r2, #1
 800baf8:	f04f 0e16 	mov.w	lr, #22
 800bafc:	46ac      	mov	ip, r5
 800bafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb02:	eb0c 0001 	add.w	r0, ip, r1
 800bb06:	4298      	cmp	r0, r3
 800bb08:	bfde      	ittt	le
 800bb0a:	1a1b      	suble	r3, r3, r0
 800bb0c:	eb00 0c01 	addle.w	ip, r0, r1
 800bb10:	186d      	addle	r5, r5, r1
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	f1be 0e01 	subs.w	lr, lr, #1
 800bb18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb24:	d1ed      	bne.n	800bb02 <__ieee754_sqrt+0x8a>
 800bb26:	4674      	mov	r4, lr
 800bb28:	2720      	movs	r7, #32
 800bb2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bb2e:	4563      	cmp	r3, ip
 800bb30:	eb01 000e 	add.w	r0, r1, lr
 800bb34:	dc02      	bgt.n	800bb3c <__ieee754_sqrt+0xc4>
 800bb36:	d113      	bne.n	800bb60 <__ieee754_sqrt+0xe8>
 800bb38:	4290      	cmp	r0, r2
 800bb3a:	d811      	bhi.n	800bb60 <__ieee754_sqrt+0xe8>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	eb00 0e01 	add.w	lr, r0, r1
 800bb42:	da57      	bge.n	800bbf4 <__ieee754_sqrt+0x17c>
 800bb44:	f1be 0f00 	cmp.w	lr, #0
 800bb48:	db54      	blt.n	800bbf4 <__ieee754_sqrt+0x17c>
 800bb4a:	f10c 0801 	add.w	r8, ip, #1
 800bb4e:	eba3 030c 	sub.w	r3, r3, ip
 800bb52:	4290      	cmp	r0, r2
 800bb54:	bf88      	it	hi
 800bb56:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bb5a:	1a12      	subs	r2, r2, r0
 800bb5c:	440c      	add	r4, r1
 800bb5e:	46c4      	mov	ip, r8
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	3f01      	subs	r7, #1
 800bb64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb70:	d1dd      	bne.n	800bb2e <__ieee754_sqrt+0xb6>
 800bb72:	4313      	orrs	r3, r2
 800bb74:	d01b      	beq.n	800bbae <__ieee754_sqrt+0x136>
 800bb76:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bc24 <__ieee754_sqrt+0x1ac>
 800bb7a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bc28 <__ieee754_sqrt+0x1b0>
 800bb7e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb82:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb86:	f7f4 fb7f 	bl	8000288 <__aeabi_dsub>
 800bb8a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	f7f4 ffab 	bl	8000af0 <__aeabi_dcmple>
 800bb9a:	b140      	cbz	r0, 800bbae <__ieee754_sqrt+0x136>
 800bb9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bba0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bba4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bba8:	d126      	bne.n	800bbf8 <__ieee754_sqrt+0x180>
 800bbaa:	3501      	adds	r5, #1
 800bbac:	463c      	mov	r4, r7
 800bbae:	106a      	asrs	r2, r5, #1
 800bbb0:	0863      	lsrs	r3, r4, #1
 800bbb2:	07e9      	lsls	r1, r5, #31
 800bbb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bbb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bbbc:	bf48      	it	mi
 800bbbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bbc6:	461c      	mov	r4, r3
 800bbc8:	e76d      	b.n	800baa6 <__ieee754_sqrt+0x2e>
 800bbca:	0ad3      	lsrs	r3, r2, #11
 800bbcc:	3815      	subs	r0, #21
 800bbce:	0552      	lsls	r2, r2, #21
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0fa      	beq.n	800bbca <__ieee754_sqrt+0x152>
 800bbd4:	02dc      	lsls	r4, r3, #11
 800bbd6:	d50a      	bpl.n	800bbee <__ieee754_sqrt+0x176>
 800bbd8:	f1c1 0420 	rsb	r4, r1, #32
 800bbdc:	fa22 f404 	lsr.w	r4, r2, r4
 800bbe0:	1e4d      	subs	r5, r1, #1
 800bbe2:	408a      	lsls	r2, r1
 800bbe4:	4323      	orrs	r3, r4
 800bbe6:	1b41      	subs	r1, r0, r5
 800bbe8:	e772      	b.n	800bad0 <__ieee754_sqrt+0x58>
 800bbea:	4608      	mov	r0, r1
 800bbec:	e7f0      	b.n	800bbd0 <__ieee754_sqrt+0x158>
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	e7ef      	b.n	800bbd4 <__ieee754_sqrt+0x15c>
 800bbf4:	46e0      	mov	r8, ip
 800bbf6:	e7aa      	b.n	800bb4e <__ieee754_sqrt+0xd6>
 800bbf8:	f7f4 fb48 	bl	800028c <__adddf3>
 800bbfc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4640      	mov	r0, r8
 800bc06:	4649      	mov	r1, r9
 800bc08:	f7f4 ff68 	bl	8000adc <__aeabi_dcmplt>
 800bc0c:	b120      	cbz	r0, 800bc18 <__ieee754_sqrt+0x1a0>
 800bc0e:	1ca0      	adds	r0, r4, #2
 800bc10:	bf08      	it	eq
 800bc12:	3501      	addeq	r5, #1
 800bc14:	3402      	adds	r4, #2
 800bc16:	e7ca      	b.n	800bbae <__ieee754_sqrt+0x136>
 800bc18:	3401      	adds	r4, #1
 800bc1a:	f024 0401 	bic.w	r4, r4, #1
 800bc1e:	e7c6      	b.n	800bbae <__ieee754_sqrt+0x136>
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	200001e8 	.word	0x200001e8
 800bc28:	200001f0 	.word	0x200001f0

0800bc2c <__ieee754_sqrtf>:
 800bc2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc30:	4770      	bx	lr
 800bc32:	0000      	movs	r0, r0
 800bc34:	0000      	movs	r0, r0
	...

0800bc38 <floor>:
 800bc38:	ec51 0b10 	vmov	r0, r1, d0
 800bc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800bc48:	2e13      	cmp	r6, #19
 800bc4a:	ee10 5a10 	vmov	r5, s0
 800bc4e:	ee10 8a10 	vmov	r8, s0
 800bc52:	460c      	mov	r4, r1
 800bc54:	dc31      	bgt.n	800bcba <floor+0x82>
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	da14      	bge.n	800bc84 <floor+0x4c>
 800bc5a:	a333      	add	r3, pc, #204	; (adr r3, 800bd28 <floor+0xf0>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	2200      	movs	r2, #0
 800bc66:	2300      	movs	r3, #0
 800bc68:	f7f4 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 800bc6c:	b138      	cbz	r0, 800bc7e <floor+0x46>
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	da53      	bge.n	800bd1a <floor+0xe2>
 800bc72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bc76:	4325      	orrs	r5, r4
 800bc78:	d052      	beq.n	800bd20 <floor+0xe8>
 800bc7a:	4c2d      	ldr	r4, [pc, #180]	; (800bd30 <floor+0xf8>)
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	e024      	b.n	800bcce <floor+0x96>
 800bc84:	4f2b      	ldr	r7, [pc, #172]	; (800bd34 <floor+0xfc>)
 800bc86:	4137      	asrs	r7, r6
 800bc88:	ea01 0307 	and.w	r3, r1, r7
 800bc8c:	4303      	orrs	r3, r0
 800bc8e:	d01e      	beq.n	800bcce <floor+0x96>
 800bc90:	a325      	add	r3, pc, #148	; (adr r3, 800bd28 <floor+0xf0>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 faf9 	bl	800028c <__adddf3>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f7f4 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d0eb      	beq.n	800bc7e <floor+0x46>
 800bca6:	2c00      	cmp	r4, #0
 800bca8:	bfbe      	ittt	lt
 800bcaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bcae:	4133      	asrlt	r3, r6
 800bcb0:	18e4      	addlt	r4, r4, r3
 800bcb2:	ea24 0407 	bic.w	r4, r4, r7
 800bcb6:	2500      	movs	r5, #0
 800bcb8:	e7e1      	b.n	800bc7e <floor+0x46>
 800bcba:	2e33      	cmp	r6, #51	; 0x33
 800bcbc:	dd0b      	ble.n	800bcd6 <floor+0x9e>
 800bcbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bcc2:	d104      	bne.n	800bcce <floor+0x96>
 800bcc4:	ee10 2a10 	vmov	r2, s0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	f7f4 fadf 	bl	800028c <__adddf3>
 800bcce:	ec41 0b10 	vmov	d0, r0, r1
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800bcda:	f04f 37ff 	mov.w	r7, #4294967295
 800bcde:	40df      	lsrs	r7, r3
 800bce0:	4238      	tst	r0, r7
 800bce2:	d0f4      	beq.n	800bcce <floor+0x96>
 800bce4:	a310      	add	r3, pc, #64	; (adr r3, 800bd28 <floor+0xf0>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f7f4 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0c1      	beq.n	800bc7e <floor+0x46>
 800bcfa:	2c00      	cmp	r4, #0
 800bcfc:	da0a      	bge.n	800bd14 <floor+0xdc>
 800bcfe:	2e14      	cmp	r6, #20
 800bd00:	d101      	bne.n	800bd06 <floor+0xce>
 800bd02:	3401      	adds	r4, #1
 800bd04:	e006      	b.n	800bd14 <floor+0xdc>
 800bd06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	40b3      	lsls	r3, r6
 800bd0e:	441d      	add	r5, r3
 800bd10:	45a8      	cmp	r8, r5
 800bd12:	d8f6      	bhi.n	800bd02 <floor+0xca>
 800bd14:	ea25 0507 	bic.w	r5, r5, r7
 800bd18:	e7b1      	b.n	800bc7e <floor+0x46>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	462c      	mov	r4, r5
 800bd1e:	e7ae      	b.n	800bc7e <floor+0x46>
 800bd20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bd24:	e7ab      	b.n	800bc7e <floor+0x46>
 800bd26:	bf00      	nop
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	bff00000 	.word	0xbff00000
 800bd34:	000fffff 	.word	0x000fffff

0800bd38 <__ieee754_log10>:
 800bd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	ec55 4b10 	vmov	r4, r5, d0
 800bd40:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800bd44:	462b      	mov	r3, r5
 800bd46:	da2f      	bge.n	800bda8 <__ieee754_log10+0x70>
 800bd48:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800bd4c:	4322      	orrs	r2, r4
 800bd4e:	d109      	bne.n	800bd64 <__ieee754_log10+0x2c>
 800bd50:	493b      	ldr	r1, [pc, #236]	; (800be40 <__ieee754_log10+0x108>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	2000      	movs	r0, #0
 800bd58:	f7f4 fd78 	bl	800084c <__aeabi_ddiv>
 800bd5c:	ec41 0b10 	vmov	d0, r0, r1
 800bd60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd64:	2d00      	cmp	r5, #0
 800bd66:	da09      	bge.n	800bd7c <__ieee754_log10+0x44>
 800bd68:	ee10 2a10 	vmov	r2, s0
 800bd6c:	ee10 0a10 	vmov	r0, s0
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 fa89 	bl	8000288 <__aeabi_dsub>
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e7ed      	b.n	800bd58 <__ieee754_log10+0x20>
 800bd7c:	4b31      	ldr	r3, [pc, #196]	; (800be44 <__ieee754_log10+0x10c>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4629      	mov	r1, r5
 800bd82:	ee10 0a10 	vmov	r0, s0
 800bd86:	f7f4 fc37 	bl	80005f8 <__aeabi_dmul>
 800bd8a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800bd8e:	4604      	mov	r4, r0
 800bd90:	460d      	mov	r5, r1
 800bd92:	460b      	mov	r3, r1
 800bd94:	492c      	ldr	r1, [pc, #176]	; (800be48 <__ieee754_log10+0x110>)
 800bd96:	428b      	cmp	r3, r1
 800bd98:	dd08      	ble.n	800bdac <__ieee754_log10+0x74>
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fa73 	bl	800028c <__adddf3>
 800bda6:	e7d9      	b.n	800bd5c <__ieee754_log10+0x24>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	e7f3      	b.n	800bd94 <__ieee754_log10+0x5c>
 800bdac:	1518      	asrs	r0, r3, #20
 800bdae:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800bdb2:	4410      	add	r0, r2
 800bdb4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800bdb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800bdbc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800bdc0:	f7f4 fbb0 	bl	8000524 <__aeabi_i2d>
 800bdc4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800bdc8:	3303      	adds	r3, #3
 800bdca:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800bdce:	ec45 4b10 	vmov	d0, r4, r5
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	f000 fe1f 	bl	800ca18 <__ieee754_log>
 800bdda:	a313      	add	r3, pc, #76	; (adr r3, 800be28 <__ieee754_log10+0xf0>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	ec59 8b10 	vmov	r8, r9, d0
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	a310      	add	r3, pc, #64	; (adr r3, 800be30 <__ieee754_log10+0xf8>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fbfd 	bl	80005f8 <__aeabi_dmul>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 fa41 	bl	800028c <__adddf3>
 800be0a:	a30b      	add	r3, pc, #44	; (adr r3, 800be38 <__ieee754_log10+0x100>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	4604      	mov	r4, r0
 800be12:	460d      	mov	r5, r1
 800be14:	4630      	mov	r0, r6
 800be16:	4639      	mov	r1, r7
 800be18:	f7f4 fbee 	bl	80005f8 <__aeabi_dmul>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4620      	mov	r0, r4
 800be22:	4629      	mov	r1, r5
 800be24:	e7bd      	b.n	800bda2 <__ieee754_log10+0x6a>
 800be26:	bf00      	nop
 800be28:	11f12b36 	.word	0x11f12b36
 800be2c:	3d59fef3 	.word	0x3d59fef3
 800be30:	1526e50e 	.word	0x1526e50e
 800be34:	3fdbcb7b 	.word	0x3fdbcb7b
 800be38:	509f6000 	.word	0x509f6000
 800be3c:	3fd34413 	.word	0x3fd34413
 800be40:	c3500000 	.word	0xc3500000
 800be44:	43500000 	.word	0x43500000
 800be48:	7fefffff 	.word	0x7fefffff
 800be4c:	00000000 	.word	0x00000000

0800be50 <__ieee754_pow>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	ed2d 8b06 	vpush	{d8-d10}
 800be58:	b089      	sub	sp, #36	; 0x24
 800be5a:	ed8d 1b00 	vstr	d1, [sp]
 800be5e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800be62:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800be66:	ea58 0102 	orrs.w	r1, r8, r2
 800be6a:	ec57 6b10 	vmov	r6, r7, d0
 800be6e:	d115      	bne.n	800be9c <__ieee754_pow+0x4c>
 800be70:	19b3      	adds	r3, r6, r6
 800be72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800be76:	4152      	adcs	r2, r2
 800be78:	4299      	cmp	r1, r3
 800be7a:	4b89      	ldr	r3, [pc, #548]	; (800c0a0 <__ieee754_pow+0x250>)
 800be7c:	4193      	sbcs	r3, r2
 800be7e:	f080 84d1 	bcs.w	800c824 <__ieee754_pow+0x9d4>
 800be82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 f9ff 	bl	800028c <__adddf3>
 800be8e:	ec41 0b10 	vmov	d0, r0, r1
 800be92:	b009      	add	sp, #36	; 0x24
 800be94:	ecbd 8b06 	vpop	{d8-d10}
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	4b81      	ldr	r3, [pc, #516]	; (800c0a4 <__ieee754_pow+0x254>)
 800be9e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bea2:	429c      	cmp	r4, r3
 800bea4:	ee10 aa10 	vmov	sl, s0
 800bea8:	463d      	mov	r5, r7
 800beaa:	dc06      	bgt.n	800beba <__ieee754_pow+0x6a>
 800beac:	d101      	bne.n	800beb2 <__ieee754_pow+0x62>
 800beae:	2e00      	cmp	r6, #0
 800beb0:	d1e7      	bne.n	800be82 <__ieee754_pow+0x32>
 800beb2:	4598      	cmp	r8, r3
 800beb4:	dc01      	bgt.n	800beba <__ieee754_pow+0x6a>
 800beb6:	d10f      	bne.n	800bed8 <__ieee754_pow+0x88>
 800beb8:	b172      	cbz	r2, 800bed8 <__ieee754_pow+0x88>
 800beba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bebe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bec2:	ea55 050a 	orrs.w	r5, r5, sl
 800bec6:	d1dc      	bne.n	800be82 <__ieee754_pow+0x32>
 800bec8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800becc:	18db      	adds	r3, r3, r3
 800bece:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bed2:	4152      	adcs	r2, r2
 800bed4:	429d      	cmp	r5, r3
 800bed6:	e7d0      	b.n	800be7a <__ieee754_pow+0x2a>
 800bed8:	2d00      	cmp	r5, #0
 800beda:	da3b      	bge.n	800bf54 <__ieee754_pow+0x104>
 800bedc:	4b72      	ldr	r3, [pc, #456]	; (800c0a8 <__ieee754_pow+0x258>)
 800bede:	4598      	cmp	r8, r3
 800bee0:	dc51      	bgt.n	800bf86 <__ieee754_pow+0x136>
 800bee2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bee6:	4598      	cmp	r8, r3
 800bee8:	f340 84ab 	ble.w	800c842 <__ieee754_pow+0x9f2>
 800beec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bef4:	2b14      	cmp	r3, #20
 800bef6:	dd0f      	ble.n	800bf18 <__ieee754_pow+0xc8>
 800bef8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800befc:	fa22 f103 	lsr.w	r1, r2, r3
 800bf00:	fa01 f303 	lsl.w	r3, r1, r3
 800bf04:	4293      	cmp	r3, r2
 800bf06:	f040 849c 	bne.w	800c842 <__ieee754_pow+0x9f2>
 800bf0a:	f001 0101 	and.w	r1, r1, #1
 800bf0e:	f1c1 0302 	rsb	r3, r1, #2
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	b182      	cbz	r2, 800bf38 <__ieee754_pow+0xe8>
 800bf16:	e05f      	b.n	800bfd8 <__ieee754_pow+0x188>
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	d15b      	bne.n	800bfd4 <__ieee754_pow+0x184>
 800bf1c:	f1c3 0314 	rsb	r3, r3, #20
 800bf20:	fa48 f103 	asr.w	r1, r8, r3
 800bf24:	fa01 f303 	lsl.w	r3, r1, r3
 800bf28:	4543      	cmp	r3, r8
 800bf2a:	f040 8487 	bne.w	800c83c <__ieee754_pow+0x9ec>
 800bf2e:	f001 0101 	and.w	r1, r1, #1
 800bf32:	f1c1 0302 	rsb	r3, r1, #2
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	4b5c      	ldr	r3, [pc, #368]	; (800c0ac <__ieee754_pow+0x25c>)
 800bf3a:	4598      	cmp	r8, r3
 800bf3c:	d132      	bne.n	800bfa4 <__ieee754_pow+0x154>
 800bf3e:	f1b9 0f00 	cmp.w	r9, #0
 800bf42:	f280 8477 	bge.w	800c834 <__ieee754_pow+0x9e4>
 800bf46:	4959      	ldr	r1, [pc, #356]	; (800c0ac <__ieee754_pow+0x25c>)
 800bf48:	4632      	mov	r2, r6
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f7f4 fc7d 	bl	800084c <__aeabi_ddiv>
 800bf52:	e79c      	b.n	800be8e <__ieee754_pow+0x3e>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9304      	str	r3, [sp, #16]
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	d13d      	bne.n	800bfd8 <__ieee754_pow+0x188>
 800bf5c:	4b51      	ldr	r3, [pc, #324]	; (800c0a4 <__ieee754_pow+0x254>)
 800bf5e:	4598      	cmp	r8, r3
 800bf60:	d1ea      	bne.n	800bf38 <__ieee754_pow+0xe8>
 800bf62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bf66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bf6a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf6e:	f000 8459 	beq.w	800c824 <__ieee754_pow+0x9d4>
 800bf72:	4b4f      	ldr	r3, [pc, #316]	; (800c0b0 <__ieee754_pow+0x260>)
 800bf74:	429c      	cmp	r4, r3
 800bf76:	dd08      	ble.n	800bf8a <__ieee754_pow+0x13a>
 800bf78:	f1b9 0f00 	cmp.w	r9, #0
 800bf7c:	f2c0 8456 	blt.w	800c82c <__ieee754_pow+0x9dc>
 800bf80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf84:	e783      	b.n	800be8e <__ieee754_pow+0x3e>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e7e5      	b.n	800bf56 <__ieee754_pow+0x106>
 800bf8a:	f1b9 0f00 	cmp.w	r9, #0
 800bf8e:	f04f 0000 	mov.w	r0, #0
 800bf92:	f04f 0100 	mov.w	r1, #0
 800bf96:	f6bf af7a 	bge.w	800be8e <__ieee754_pow+0x3e>
 800bf9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bf9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bfa2:	e774      	b.n	800be8e <__ieee754_pow+0x3e>
 800bfa4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bfa8:	d106      	bne.n	800bfb8 <__ieee754_pow+0x168>
 800bfaa:	4632      	mov	r2, r6
 800bfac:	463b      	mov	r3, r7
 800bfae:	4630      	mov	r0, r6
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 fb21 	bl	80005f8 <__aeabi_dmul>
 800bfb6:	e76a      	b.n	800be8e <__ieee754_pow+0x3e>
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	; (800c0b4 <__ieee754_pow+0x264>)
 800bfba:	4599      	cmp	r9, r3
 800bfbc:	d10c      	bne.n	800bfd8 <__ieee754_pow+0x188>
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	db0a      	blt.n	800bfd8 <__ieee754_pow+0x188>
 800bfc2:	ec47 6b10 	vmov	d0, r6, r7
 800bfc6:	b009      	add	sp, #36	; 0x24
 800bfc8:	ecbd 8b06 	vpop	{d8-d10}
 800bfcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	f7ff bd52 	b.w	800ba78 <__ieee754_sqrt>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9304      	str	r3, [sp, #16]
 800bfd8:	ec47 6b10 	vmov	d0, r6, r7
 800bfdc:	f000 fc62 	bl	800c8a4 <fabs>
 800bfe0:	ec51 0b10 	vmov	r0, r1, d0
 800bfe4:	f1ba 0f00 	cmp.w	sl, #0
 800bfe8:	d129      	bne.n	800c03e <__ieee754_pow+0x1ee>
 800bfea:	b124      	cbz	r4, 800bff6 <__ieee754_pow+0x1a6>
 800bfec:	4b2f      	ldr	r3, [pc, #188]	; (800c0ac <__ieee754_pow+0x25c>)
 800bfee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d123      	bne.n	800c03e <__ieee754_pow+0x1ee>
 800bff6:	f1b9 0f00 	cmp.w	r9, #0
 800bffa:	da05      	bge.n	800c008 <__ieee754_pow+0x1b8>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	2000      	movs	r0, #0
 800c002:	492a      	ldr	r1, [pc, #168]	; (800c0ac <__ieee754_pow+0x25c>)
 800c004:	f7f4 fc22 	bl	800084c <__aeabi_ddiv>
 800c008:	2d00      	cmp	r5, #0
 800c00a:	f6bf af40 	bge.w	800be8e <__ieee754_pow+0x3e>
 800c00e:	9b04      	ldr	r3, [sp, #16]
 800c010:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c014:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c018:	431c      	orrs	r4, r3
 800c01a:	d108      	bne.n	800c02e <__ieee754_pow+0x1de>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4610      	mov	r0, r2
 800c022:	4619      	mov	r1, r3
 800c024:	f7f4 f930 	bl	8000288 <__aeabi_dsub>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	e78f      	b.n	800bf4e <__ieee754_pow+0xfe>
 800c02e:	9b04      	ldr	r3, [sp, #16]
 800c030:	2b01      	cmp	r3, #1
 800c032:	f47f af2c 	bne.w	800be8e <__ieee754_pow+0x3e>
 800c036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c03a:	4619      	mov	r1, r3
 800c03c:	e727      	b.n	800be8e <__ieee754_pow+0x3e>
 800c03e:	0feb      	lsrs	r3, r5, #31
 800c040:	3b01      	subs	r3, #1
 800c042:	9306      	str	r3, [sp, #24]
 800c044:	9a06      	ldr	r2, [sp, #24]
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	4313      	orrs	r3, r2
 800c04a:	d102      	bne.n	800c052 <__ieee754_pow+0x202>
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	e7e6      	b.n	800c020 <__ieee754_pow+0x1d0>
 800c052:	4b19      	ldr	r3, [pc, #100]	; (800c0b8 <__ieee754_pow+0x268>)
 800c054:	4598      	cmp	r8, r3
 800c056:	f340 80fb 	ble.w	800c250 <__ieee754_pow+0x400>
 800c05a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c05e:	4598      	cmp	r8, r3
 800c060:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <__ieee754_pow+0x260>)
 800c062:	dd0c      	ble.n	800c07e <__ieee754_pow+0x22e>
 800c064:	429c      	cmp	r4, r3
 800c066:	dc0f      	bgt.n	800c088 <__ieee754_pow+0x238>
 800c068:	f1b9 0f00 	cmp.w	r9, #0
 800c06c:	da0f      	bge.n	800c08e <__ieee754_pow+0x23e>
 800c06e:	2000      	movs	r0, #0
 800c070:	b009      	add	sp, #36	; 0x24
 800c072:	ecbd 8b06 	vpop	{d8-d10}
 800c076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07a:	f000 bcc2 	b.w	800ca02 <__math_oflow>
 800c07e:	429c      	cmp	r4, r3
 800c080:	dbf2      	blt.n	800c068 <__ieee754_pow+0x218>
 800c082:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <__ieee754_pow+0x25c>)
 800c084:	429c      	cmp	r4, r3
 800c086:	dd19      	ble.n	800c0bc <__ieee754_pow+0x26c>
 800c088:	f1b9 0f00 	cmp.w	r9, #0
 800c08c:	dcef      	bgt.n	800c06e <__ieee754_pow+0x21e>
 800c08e:	2000      	movs	r0, #0
 800c090:	b009      	add	sp, #36	; 0x24
 800c092:	ecbd 8b06 	vpop	{d8-d10}
 800c096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09a:	f000 bca9 	b.w	800c9f0 <__math_uflow>
 800c09e:	bf00      	nop
 800c0a0:	fff00000 	.word	0xfff00000
 800c0a4:	7ff00000 	.word	0x7ff00000
 800c0a8:	433fffff 	.word	0x433fffff
 800c0ac:	3ff00000 	.word	0x3ff00000
 800c0b0:	3fefffff 	.word	0x3fefffff
 800c0b4:	3fe00000 	.word	0x3fe00000
 800c0b8:	41e00000 	.word	0x41e00000
 800c0bc:	4b60      	ldr	r3, [pc, #384]	; (800c240 <__ieee754_pow+0x3f0>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f7f4 f8e2 	bl	8000288 <__aeabi_dsub>
 800c0c4:	a354      	add	r3, pc, #336	; (adr r3, 800c218 <__ieee754_pow+0x3c8>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	460d      	mov	r5, r1
 800c0ce:	f7f4 fa93 	bl	80005f8 <__aeabi_dmul>
 800c0d2:	a353      	add	r3, pc, #332	; (adr r3, 800c220 <__ieee754_pow+0x3d0>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	4606      	mov	r6, r0
 800c0da:	460f      	mov	r7, r1
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7f4 fa8a 	bl	80005f8 <__aeabi_dmul>
 800c0e4:	4b57      	ldr	r3, [pc, #348]	; (800c244 <__ieee754_pow+0x3f4>)
 800c0e6:	4682      	mov	sl, r0
 800c0e8:	468b      	mov	fp, r1
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 fa82 	bl	80005f8 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	a14b      	add	r1, pc, #300	; (adr r1, 800c228 <__ieee754_pow+0x3d8>)
 800c0fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0fe:	f7f4 f8c3 	bl	8000288 <__aeabi_dsub>
 800c102:	4622      	mov	r2, r4
 800c104:	462b      	mov	r3, r5
 800c106:	f7f4 fa77 	bl	80005f8 <__aeabi_dmul>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	2000      	movs	r0, #0
 800c110:	494d      	ldr	r1, [pc, #308]	; (800c248 <__ieee754_pow+0x3f8>)
 800c112:	f7f4 f8b9 	bl	8000288 <__aeabi_dsub>
 800c116:	4622      	mov	r2, r4
 800c118:	4680      	mov	r8, r0
 800c11a:	4689      	mov	r9, r1
 800c11c:	462b      	mov	r3, r5
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 fa69 	bl	80005f8 <__aeabi_dmul>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fa63 	bl	80005f8 <__aeabi_dmul>
 800c132:	a33f      	add	r3, pc, #252	; (adr r3, 800c230 <__ieee754_pow+0x3e0>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f7f4 fa5e 	bl	80005f8 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4650      	mov	r0, sl
 800c142:	4659      	mov	r1, fp
 800c144:	f7f4 f8a0 	bl	8000288 <__aeabi_dsub>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4680      	mov	r8, r0
 800c14e:	4689      	mov	r9, r1
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 f89a 	bl	800028c <__adddf3>
 800c158:	2000      	movs	r0, #0
 800c15a:	4632      	mov	r2, r6
 800c15c:	463b      	mov	r3, r7
 800c15e:	4604      	mov	r4, r0
 800c160:	460d      	mov	r5, r1
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	f7f4 f88b 	bl	8000288 <__aeabi_dsub>
 800c172:	9b04      	ldr	r3, [sp, #16]
 800c174:	9a06      	ldr	r2, [sp, #24]
 800c176:	3b01      	subs	r3, #1
 800c178:	4313      	orrs	r3, r2
 800c17a:	4682      	mov	sl, r0
 800c17c:	468b      	mov	fp, r1
 800c17e:	f040 81e7 	bne.w	800c550 <__ieee754_pow+0x700>
 800c182:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c238 <__ieee754_pow+0x3e8>
 800c186:	eeb0 8a47 	vmov.f32	s16, s14
 800c18a:	eef0 8a67 	vmov.f32	s17, s15
 800c18e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c192:	2600      	movs	r6, #0
 800c194:	4632      	mov	r2, r6
 800c196:	463b      	mov	r3, r7
 800c198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c19c:	f7f4 f874 	bl	8000288 <__aeabi_dsub>
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	462b      	mov	r3, r5
 800c1a4:	f7f4 fa28 	bl	80005f8 <__aeabi_dmul>
 800c1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1ac:	4680      	mov	r8, r0
 800c1ae:	4689      	mov	r9, r1
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	4659      	mov	r1, fp
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f4 f864 	bl	800028c <__adddf3>
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	4689      	mov	r9, r1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 fa12 	bl	80005f8 <__aeabi_dmul>
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	4602      	mov	r2, r0
 800c1dc:	4649      	mov	r1, r9
 800c1de:	4640      	mov	r0, r8
 800c1e0:	f7f4 f854 	bl	800028c <__adddf3>
 800c1e4:	4b19      	ldr	r3, [pc, #100]	; (800c24c <__ieee754_pow+0x3fc>)
 800c1e6:	4299      	cmp	r1, r3
 800c1e8:	ec45 4b19 	vmov	d9, r4, r5
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	460f      	mov	r7, r1
 800c1f0:	468b      	mov	fp, r1
 800c1f2:	f340 82f0 	ble.w	800c7d6 <__ieee754_pow+0x986>
 800c1f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c1fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c1fe:	4303      	orrs	r3, r0
 800c200:	f000 81e4 	beq.w	800c5cc <__ieee754_pow+0x77c>
 800c204:	ec51 0b18 	vmov	r0, r1, d8
 800c208:	2200      	movs	r2, #0
 800c20a:	2300      	movs	r3, #0
 800c20c:	f7f4 fc66 	bl	8000adc <__aeabi_dcmplt>
 800c210:	3800      	subs	r0, #0
 800c212:	bf18      	it	ne
 800c214:	2001      	movne	r0, #1
 800c216:	e72b      	b.n	800c070 <__ieee754_pow+0x220>
 800c218:	60000000 	.word	0x60000000
 800c21c:	3ff71547 	.word	0x3ff71547
 800c220:	f85ddf44 	.word	0xf85ddf44
 800c224:	3e54ae0b 	.word	0x3e54ae0b
 800c228:	55555555 	.word	0x55555555
 800c22c:	3fd55555 	.word	0x3fd55555
 800c230:	652b82fe 	.word	0x652b82fe
 800c234:	3ff71547 	.word	0x3ff71547
 800c238:	00000000 	.word	0x00000000
 800c23c:	bff00000 	.word	0xbff00000
 800c240:	3ff00000 	.word	0x3ff00000
 800c244:	3fd00000 	.word	0x3fd00000
 800c248:	3fe00000 	.word	0x3fe00000
 800c24c:	408fffff 	.word	0x408fffff
 800c250:	4bd5      	ldr	r3, [pc, #852]	; (800c5a8 <__ieee754_pow+0x758>)
 800c252:	402b      	ands	r3, r5
 800c254:	2200      	movs	r2, #0
 800c256:	b92b      	cbnz	r3, 800c264 <__ieee754_pow+0x414>
 800c258:	4bd4      	ldr	r3, [pc, #848]	; (800c5ac <__ieee754_pow+0x75c>)
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c262:	460c      	mov	r4, r1
 800c264:	1523      	asrs	r3, r4, #20
 800c266:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c26a:	4413      	add	r3, r2
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	4bd0      	ldr	r3, [pc, #832]	; (800c5b0 <__ieee754_pow+0x760>)
 800c270:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c274:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c278:	429c      	cmp	r4, r3
 800c27a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c27e:	dd08      	ble.n	800c292 <__ieee754_pow+0x442>
 800c280:	4bcc      	ldr	r3, [pc, #816]	; (800c5b4 <__ieee754_pow+0x764>)
 800c282:	429c      	cmp	r4, r3
 800c284:	f340 8162 	ble.w	800c54c <__ieee754_pow+0x6fc>
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	3301      	adds	r3, #1
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c292:	2400      	movs	r4, #0
 800c294:	00e3      	lsls	r3, r4, #3
 800c296:	9307      	str	r3, [sp, #28]
 800c298:	4bc7      	ldr	r3, [pc, #796]	; (800c5b8 <__ieee754_pow+0x768>)
 800c29a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c29e:	ed93 7b00 	vldr	d7, [r3]
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	ec53 2b17 	vmov	r2, r3, d7
 800c2a8:	eeb0 9a47 	vmov.f32	s18, s14
 800c2ac:	eef0 9a67 	vmov.f32	s19, s15
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	f7f3 ffe9 	bl	8000288 <__aeabi_dsub>
 800c2b6:	4652      	mov	r2, sl
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	460f      	mov	r7, r1
 800c2bc:	462b      	mov	r3, r5
 800c2be:	ec51 0b19 	vmov	r0, r1, d9
 800c2c2:	f7f3 ffe3 	bl	800028c <__adddf3>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	49bb      	ldr	r1, [pc, #748]	; (800c5bc <__ieee754_pow+0x76c>)
 800c2ce:	f7f4 fabd 	bl	800084c <__aeabi_ddiv>
 800c2d2:	ec41 0b1a 	vmov	d10, r0, r1
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4630      	mov	r0, r6
 800c2dc:	4639      	mov	r1, r7
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2ee:	46ab      	mov	fp, r5
 800c2f0:	106d      	asrs	r5, r5, #1
 800c2f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c2f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c2fa:	ec41 0b18 	vmov	d8, r0, r1
 800c2fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c302:	2200      	movs	r2, #0
 800c304:	4640      	mov	r0, r8
 800c306:	4649      	mov	r1, r9
 800c308:	4614      	mov	r4, r2
 800c30a:	461d      	mov	r5, r3
 800c30c:	f7f4 f974 	bl	80005f8 <__aeabi_dmul>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4630      	mov	r0, r6
 800c316:	4639      	mov	r1, r7
 800c318:	f7f3 ffb6 	bl	8000288 <__aeabi_dsub>
 800c31c:	ec53 2b19 	vmov	r2, r3, d9
 800c320:	4606      	mov	r6, r0
 800c322:	460f      	mov	r7, r1
 800c324:	4620      	mov	r0, r4
 800c326:	4629      	mov	r1, r5
 800c328:	f7f3 ffae 	bl	8000288 <__aeabi_dsub>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4650      	mov	r0, sl
 800c332:	4659      	mov	r1, fp
 800c334:	f7f3 ffa8 	bl	8000288 <__aeabi_dsub>
 800c338:	4642      	mov	r2, r8
 800c33a:	464b      	mov	r3, r9
 800c33c:	f7f4 f95c 	bl	80005f8 <__aeabi_dmul>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f3 ff9e 	bl	8000288 <__aeabi_dsub>
 800c34c:	ec53 2b1a 	vmov	r2, r3, d10
 800c350:	f7f4 f952 	bl	80005f8 <__aeabi_dmul>
 800c354:	ec53 2b18 	vmov	r2, r3, d8
 800c358:	ec41 0b19 	vmov	d9, r0, r1
 800c35c:	ec51 0b18 	vmov	r0, r1, d8
 800c360:	f7f4 f94a 	bl	80005f8 <__aeabi_dmul>
 800c364:	a37c      	add	r3, pc, #496	; (adr r3, 800c558 <__ieee754_pow+0x708>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	f7f4 f943 	bl	80005f8 <__aeabi_dmul>
 800c372:	a37b      	add	r3, pc, #492	; (adr r3, 800c560 <__ieee754_pow+0x710>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 ff88 	bl	800028c <__adddf3>
 800c37c:	4622      	mov	r2, r4
 800c37e:	462b      	mov	r3, r5
 800c380:	f7f4 f93a 	bl	80005f8 <__aeabi_dmul>
 800c384:	a378      	add	r3, pc, #480	; (adr r3, 800c568 <__ieee754_pow+0x718>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f3 ff7f 	bl	800028c <__adddf3>
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	f7f4 f931 	bl	80005f8 <__aeabi_dmul>
 800c396:	a376      	add	r3, pc, #472	; (adr r3, 800c570 <__ieee754_pow+0x720>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f3 ff76 	bl	800028c <__adddf3>
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	462b      	mov	r3, r5
 800c3a4:	f7f4 f928 	bl	80005f8 <__aeabi_dmul>
 800c3a8:	a373      	add	r3, pc, #460	; (adr r3, 800c578 <__ieee754_pow+0x728>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f7f3 ff6d 	bl	800028c <__adddf3>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	f7f4 f91f 	bl	80005f8 <__aeabi_dmul>
 800c3ba:	a371      	add	r3, pc, #452	; (adr r3, 800c580 <__ieee754_pow+0x730>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7f3 ff64 	bl	800028c <__adddf3>
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	ec51 0b18 	vmov	r0, r1, d8
 800c3ec:	f7f3 ff4e 	bl	800028c <__adddf3>
 800c3f0:	ec53 2b19 	vmov	r2, r3, d9
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	462b      	mov	r3, r5
 800c3fc:	f7f3 ff46 	bl	800028c <__adddf3>
 800c400:	4642      	mov	r2, r8
 800c402:	4682      	mov	sl, r0
 800c404:	468b      	mov	fp, r1
 800c406:	464b      	mov	r3, r9
 800c408:	4640      	mov	r0, r8
 800c40a:	4649      	mov	r1, r9
 800c40c:	f7f4 f8f4 	bl	80005f8 <__aeabi_dmul>
 800c410:	4b6b      	ldr	r3, [pc, #428]	; (800c5c0 <__ieee754_pow+0x770>)
 800c412:	2200      	movs	r2, #0
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	f7f3 ff38 	bl	800028c <__adddf3>
 800c41c:	4652      	mov	r2, sl
 800c41e:	465b      	mov	r3, fp
 800c420:	f7f3 ff34 	bl	800028c <__adddf3>
 800c424:	2000      	movs	r0, #0
 800c426:	4604      	mov	r4, r0
 800c428:	460d      	mov	r5, r1
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	f7f4 f8e1 	bl	80005f8 <__aeabi_dmul>
 800c436:	4b62      	ldr	r3, [pc, #392]	; (800c5c0 <__ieee754_pow+0x770>)
 800c438:	4680      	mov	r8, r0
 800c43a:	4689      	mov	r9, r1
 800c43c:	2200      	movs	r2, #0
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	f7f3 ff21 	bl	8000288 <__aeabi_dsub>
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	f7f3 ff1d 	bl	8000288 <__aeabi_dsub>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4650      	mov	r0, sl
 800c454:	4659      	mov	r1, fp
 800c456:	f7f3 ff17 	bl	8000288 <__aeabi_dsub>
 800c45a:	ec53 2b18 	vmov	r2, r3, d8
 800c45e:	f7f4 f8cb 	bl	80005f8 <__aeabi_dmul>
 800c462:	4622      	mov	r2, r4
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	462b      	mov	r3, r5
 800c46a:	ec51 0b19 	vmov	r0, r1, d9
 800c46e:	f7f4 f8c3 	bl	80005f8 <__aeabi_dmul>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f3 ff07 	bl	800028c <__adddf3>
 800c47e:	4606      	mov	r6, r0
 800c480:	460f      	mov	r7, r1
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	f7f3 feff 	bl	800028c <__adddf3>
 800c48e:	a33e      	add	r3, pc, #248	; (adr r3, 800c588 <__ieee754_pow+0x738>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	2000      	movs	r0, #0
 800c496:	4604      	mov	r4, r0
 800c498:	460d      	mov	r5, r1
 800c49a:	f7f4 f8ad 	bl	80005f8 <__aeabi_dmul>
 800c49e:	4642      	mov	r2, r8
 800c4a0:	ec41 0b18 	vmov	d8, r0, r1
 800c4a4:	464b      	mov	r3, r9
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	f7f3 feed 	bl	8000288 <__aeabi_dsub>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	f7f3 fee7 	bl	8000288 <__aeabi_dsub>
 800c4ba:	a335      	add	r3, pc, #212	; (adr r3, 800c590 <__ieee754_pow+0x740>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f7f4 f89a 	bl	80005f8 <__aeabi_dmul>
 800c4c4:	a334      	add	r3, pc, #208	; (adr r3, 800c598 <__ieee754_pow+0x748>)
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	460f      	mov	r7, r1
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f4 f891 	bl	80005f8 <__aeabi_dmul>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4630      	mov	r0, r6
 800c4dc:	4639      	mov	r1, r7
 800c4de:	f7f3 fed5 	bl	800028c <__adddf3>
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4b37      	ldr	r3, [pc, #220]	; (800c5c4 <__ieee754_pow+0x774>)
 800c4e6:	4413      	add	r3, r2
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 fece 	bl	800028c <__adddf3>
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	9805      	ldr	r0, [sp, #20]
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	f7f4 f815 	bl	8000524 <__aeabi_i2d>
 800c4fa:	9a07      	ldr	r2, [sp, #28]
 800c4fc:	4b32      	ldr	r3, [pc, #200]	; (800c5c8 <__ieee754_pow+0x778>)
 800c4fe:	4413      	add	r3, r2
 800c500:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c504:	4606      	mov	r6, r0
 800c506:	460f      	mov	r7, r1
 800c508:	4652      	mov	r2, sl
 800c50a:	465b      	mov	r3, fp
 800c50c:	ec51 0b18 	vmov	r0, r1, d8
 800c510:	f7f3 febc 	bl	800028c <__adddf3>
 800c514:	4642      	mov	r2, r8
 800c516:	464b      	mov	r3, r9
 800c518:	f7f3 feb8 	bl	800028c <__adddf3>
 800c51c:	4632      	mov	r2, r6
 800c51e:	463b      	mov	r3, r7
 800c520:	f7f3 feb4 	bl	800028c <__adddf3>
 800c524:	2000      	movs	r0, #0
 800c526:	4632      	mov	r2, r6
 800c528:	463b      	mov	r3, r7
 800c52a:	4604      	mov	r4, r0
 800c52c:	460d      	mov	r5, r1
 800c52e:	f7f3 feab 	bl	8000288 <__aeabi_dsub>
 800c532:	4642      	mov	r2, r8
 800c534:	464b      	mov	r3, r9
 800c536:	f7f3 fea7 	bl	8000288 <__aeabi_dsub>
 800c53a:	ec53 2b18 	vmov	r2, r3, d8
 800c53e:	f7f3 fea3 	bl	8000288 <__aeabi_dsub>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	4650      	mov	r0, sl
 800c548:	4659      	mov	r1, fp
 800c54a:	e610      	b.n	800c16e <__ieee754_pow+0x31e>
 800c54c:	2401      	movs	r4, #1
 800c54e:	e6a1      	b.n	800c294 <__ieee754_pow+0x444>
 800c550:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c5a0 <__ieee754_pow+0x750>
 800c554:	e617      	b.n	800c186 <__ieee754_pow+0x336>
 800c556:	bf00      	nop
 800c558:	4a454eef 	.word	0x4a454eef
 800c55c:	3fca7e28 	.word	0x3fca7e28
 800c560:	93c9db65 	.word	0x93c9db65
 800c564:	3fcd864a 	.word	0x3fcd864a
 800c568:	a91d4101 	.word	0xa91d4101
 800c56c:	3fd17460 	.word	0x3fd17460
 800c570:	518f264d 	.word	0x518f264d
 800c574:	3fd55555 	.word	0x3fd55555
 800c578:	db6fabff 	.word	0xdb6fabff
 800c57c:	3fdb6db6 	.word	0x3fdb6db6
 800c580:	33333303 	.word	0x33333303
 800c584:	3fe33333 	.word	0x3fe33333
 800c588:	e0000000 	.word	0xe0000000
 800c58c:	3feec709 	.word	0x3feec709
 800c590:	dc3a03fd 	.word	0xdc3a03fd
 800c594:	3feec709 	.word	0x3feec709
 800c598:	145b01f5 	.word	0x145b01f5
 800c59c:	be3e2fe0 	.word	0xbe3e2fe0
 800c5a0:	00000000 	.word	0x00000000
 800c5a4:	3ff00000 	.word	0x3ff00000
 800c5a8:	7ff00000 	.word	0x7ff00000
 800c5ac:	43400000 	.word	0x43400000
 800c5b0:	0003988e 	.word	0x0003988e
 800c5b4:	000bb679 	.word	0x000bb679
 800c5b8:	08020988 	.word	0x08020988
 800c5bc:	3ff00000 	.word	0x3ff00000
 800c5c0:	40080000 	.word	0x40080000
 800c5c4:	080209a8 	.word	0x080209a8
 800c5c8:	08020998 	.word	0x08020998
 800c5cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800c89c <__ieee754_pow+0xa4c>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	4640      	mov	r0, r8
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	f7f3 fe59 	bl	800028c <__adddf3>
 800c5da:	4622      	mov	r2, r4
 800c5dc:	ec41 0b1a 	vmov	d10, r0, r1
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f7f3 fe4f 	bl	8000288 <__aeabi_dsub>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	ec51 0b1a 	vmov	r0, r1, d10
 800c5f2:	f7f4 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f47f ae04 	bne.w	800c204 <__ieee754_pow+0x3b4>
 800c5fc:	4aa2      	ldr	r2, [pc, #648]	; (800c888 <__ieee754_pow+0xa38>)
 800c5fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c602:	4293      	cmp	r3, r2
 800c604:	f340 8107 	ble.w	800c816 <__ieee754_pow+0x9c6>
 800c608:	151b      	asrs	r3, r3, #20
 800c60a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c60e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c612:	fa4a fa03 	asr.w	sl, sl, r3
 800c616:	44da      	add	sl, fp
 800c618:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c61c:	489b      	ldr	r0, [pc, #620]	; (800c88c <__ieee754_pow+0xa3c>)
 800c61e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c622:	4108      	asrs	r0, r1
 800c624:	ea00 030a 	and.w	r3, r0, sl
 800c628:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c62c:	f1c1 0114 	rsb	r1, r1, #20
 800c630:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c634:	fa4a fa01 	asr.w	sl, sl, r1
 800c638:	f1bb 0f00 	cmp.w	fp, #0
 800c63c:	f04f 0200 	mov.w	r2, #0
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	bfb8      	it	lt
 800c646:	f1ca 0a00 	rsblt	sl, sl, #0
 800c64a:	f7f3 fe1d 	bl	8000288 <__aeabi_dsub>
 800c64e:	ec41 0b19 	vmov	d9, r0, r1
 800c652:	4642      	mov	r2, r8
 800c654:	464b      	mov	r3, r9
 800c656:	ec51 0b19 	vmov	r0, r1, d9
 800c65a:	f7f3 fe17 	bl	800028c <__adddf3>
 800c65e:	a37a      	add	r3, pc, #488	; (adr r3, 800c848 <__ieee754_pow+0x9f8>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	2000      	movs	r0, #0
 800c666:	4604      	mov	r4, r0
 800c668:	460d      	mov	r5, r1
 800c66a:	f7f3 ffc5 	bl	80005f8 <__aeabi_dmul>
 800c66e:	ec53 2b19 	vmov	r2, r3, d9
 800c672:	4606      	mov	r6, r0
 800c674:	460f      	mov	r7, r1
 800c676:	4620      	mov	r0, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	f7f3 fe05 	bl	8000288 <__aeabi_dsub>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 fdff 	bl	8000288 <__aeabi_dsub>
 800c68a:	a371      	add	r3, pc, #452	; (adr r3, 800c850 <__ieee754_pow+0xa00>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 ffb2 	bl	80005f8 <__aeabi_dmul>
 800c694:	a370      	add	r3, pc, #448	; (adr r3, 800c858 <__ieee754_pow+0xa08>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	4680      	mov	r8, r0
 800c69c:	4689      	mov	r9, r1
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f3 fded 	bl	800028c <__adddf3>
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f3 fde5 	bl	800028c <__adddf3>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	4689      	mov	r9, r1
 800c6ca:	f7f3 fddd 	bl	8000288 <__aeabi_dsub>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	4642      	mov	r2, r8
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	f7f3 ff87 	bl	80005f8 <__aeabi_dmul>
 800c6ea:	a35d      	add	r3, pc, #372	; (adr r3, 800c860 <__ieee754_pow+0xa10>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	f7f3 ff80 	bl	80005f8 <__aeabi_dmul>
 800c6f8:	a35b      	add	r3, pc, #364	; (adr r3, 800c868 <__ieee754_pow+0xa18>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f7f3 fdc3 	bl	8000288 <__aeabi_dsub>
 800c702:	4622      	mov	r2, r4
 800c704:	462b      	mov	r3, r5
 800c706:	f7f3 ff77 	bl	80005f8 <__aeabi_dmul>
 800c70a:	a359      	add	r3, pc, #356	; (adr r3, 800c870 <__ieee754_pow+0xa20>)
 800c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c710:	f7f3 fdbc 	bl	800028c <__adddf3>
 800c714:	4622      	mov	r2, r4
 800c716:	462b      	mov	r3, r5
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	a356      	add	r3, pc, #344	; (adr r3, 800c878 <__ieee754_pow+0xa28>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	f7f3 fdb1 	bl	8000288 <__aeabi_dsub>
 800c726:	4622      	mov	r2, r4
 800c728:	462b      	mov	r3, r5
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	a354      	add	r3, pc, #336	; (adr r3, 800c880 <__ieee754_pow+0xa30>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 fdaa 	bl	800028c <__adddf3>
 800c738:	4622      	mov	r2, r4
 800c73a:	462b      	mov	r3, r5
 800c73c:	f7f3 ff5c 	bl	80005f8 <__aeabi_dmul>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4640      	mov	r0, r8
 800c746:	4649      	mov	r1, r9
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4604      	mov	r4, r0
 800c74e:	460d      	mov	r5, r1
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f3 ff4e 	bl	80005f8 <__aeabi_dmul>
 800c75c:	2200      	movs	r2, #0
 800c75e:	ec41 0b19 	vmov	d9, r0, r1
 800c762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f3 fd8d 	bl	8000288 <__aeabi_dsub>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	ec51 0b19 	vmov	r0, r1, d9
 800c776:	f7f4 f869 	bl	800084c <__aeabi_ddiv>
 800c77a:	4632      	mov	r2, r6
 800c77c:	4604      	mov	r4, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	463b      	mov	r3, r7
 800c782:	4640      	mov	r0, r8
 800c784:	4649      	mov	r1, r9
 800c786:	f7f3 ff37 	bl	80005f8 <__aeabi_dmul>
 800c78a:	4632      	mov	r2, r6
 800c78c:	463b      	mov	r3, r7
 800c78e:	f7f3 fd7d 	bl	800028c <__adddf3>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd75 	bl	8000288 <__aeabi_dsub>
 800c79e:	4642      	mov	r2, r8
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	f7f3 fd71 	bl	8000288 <__aeabi_dsub>
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	4939      	ldr	r1, [pc, #228]	; (800c890 <__ieee754_pow+0xa40>)
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	ec41 0b10 	vmov	d0, r0, r1
 800c7b6:	ee10 3a90 	vmov	r3, s1
 800c7ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c7be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7c2:	da2b      	bge.n	800c81c <__ieee754_pow+0x9cc>
 800c7c4:	4650      	mov	r0, sl
 800c7c6:	f000 f877 	bl	800c8b8 <scalbn>
 800c7ca:	ec51 0b10 	vmov	r0, r1, d0
 800c7ce:	ec53 2b18 	vmov	r2, r3, d8
 800c7d2:	f7ff bbee 	b.w	800bfb2 <__ieee754_pow+0x162>
 800c7d6:	4b2f      	ldr	r3, [pc, #188]	; (800c894 <__ieee754_pow+0xa44>)
 800c7d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7dc:	429e      	cmp	r6, r3
 800c7de:	f77f af0d 	ble.w	800c5fc <__ieee754_pow+0x7ac>
 800c7e2:	4b2d      	ldr	r3, [pc, #180]	; (800c898 <__ieee754_pow+0xa48>)
 800c7e4:	440b      	add	r3, r1
 800c7e6:	4303      	orrs	r3, r0
 800c7e8:	d009      	beq.n	800c7fe <__ieee754_pow+0x9ae>
 800c7ea:	ec51 0b18 	vmov	r0, r1, d8
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f7f4 f973 	bl	8000adc <__aeabi_dcmplt>
 800c7f6:	3800      	subs	r0, #0
 800c7f8:	bf18      	it	ne
 800c7fa:	2001      	movne	r0, #1
 800c7fc:	e448      	b.n	800c090 <__ieee754_pow+0x240>
 800c7fe:	4622      	mov	r2, r4
 800c800:	462b      	mov	r3, r5
 800c802:	f7f3 fd41 	bl	8000288 <__aeabi_dsub>
 800c806:	4642      	mov	r2, r8
 800c808:	464b      	mov	r3, r9
 800c80a:	f7f4 f97b 	bl	8000b04 <__aeabi_dcmpge>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f43f aef4 	beq.w	800c5fc <__ieee754_pow+0x7ac>
 800c814:	e7e9      	b.n	800c7ea <__ieee754_pow+0x99a>
 800c816:	f04f 0a00 	mov.w	sl, #0
 800c81a:	e71a      	b.n	800c652 <__ieee754_pow+0x802>
 800c81c:	ec51 0b10 	vmov	r0, r1, d0
 800c820:	4619      	mov	r1, r3
 800c822:	e7d4      	b.n	800c7ce <__ieee754_pow+0x97e>
 800c824:	491a      	ldr	r1, [pc, #104]	; (800c890 <__ieee754_pow+0xa40>)
 800c826:	2000      	movs	r0, #0
 800c828:	f7ff bb31 	b.w	800be8e <__ieee754_pow+0x3e>
 800c82c:	2000      	movs	r0, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	f7ff bb2d 	b.w	800be8e <__ieee754_pow+0x3e>
 800c834:	4630      	mov	r0, r6
 800c836:	4639      	mov	r1, r7
 800c838:	f7ff bb29 	b.w	800be8e <__ieee754_pow+0x3e>
 800c83c:	9204      	str	r2, [sp, #16]
 800c83e:	f7ff bb7b 	b.w	800bf38 <__ieee754_pow+0xe8>
 800c842:	2300      	movs	r3, #0
 800c844:	f7ff bb65 	b.w	800bf12 <__ieee754_pow+0xc2>
 800c848:	00000000 	.word	0x00000000
 800c84c:	3fe62e43 	.word	0x3fe62e43
 800c850:	fefa39ef 	.word	0xfefa39ef
 800c854:	3fe62e42 	.word	0x3fe62e42
 800c858:	0ca86c39 	.word	0x0ca86c39
 800c85c:	be205c61 	.word	0xbe205c61
 800c860:	72bea4d0 	.word	0x72bea4d0
 800c864:	3e663769 	.word	0x3e663769
 800c868:	c5d26bf1 	.word	0xc5d26bf1
 800c86c:	3ebbbd41 	.word	0x3ebbbd41
 800c870:	af25de2c 	.word	0xaf25de2c
 800c874:	3f11566a 	.word	0x3f11566a
 800c878:	16bebd93 	.word	0x16bebd93
 800c87c:	3f66c16c 	.word	0x3f66c16c
 800c880:	5555553e 	.word	0x5555553e
 800c884:	3fc55555 	.word	0x3fc55555
 800c888:	3fe00000 	.word	0x3fe00000
 800c88c:	fff00000 	.word	0xfff00000
 800c890:	3ff00000 	.word	0x3ff00000
 800c894:	4090cbff 	.word	0x4090cbff
 800c898:	3f6f3400 	.word	0x3f6f3400
 800c89c:	652b82fe 	.word	0x652b82fe
 800c8a0:	3c971547 	.word	0x3c971547

0800c8a4 <fabs>:
 800c8a4:	ec51 0b10 	vmov	r0, r1, d0
 800c8a8:	ee10 2a10 	vmov	r2, s0
 800c8ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8b0:	ec43 2b10 	vmov	d0, r2, r3
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <scalbn>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	ec55 4b10 	vmov	r4, r5, d0
 800c8be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	b999      	cbnz	r1, 800c8f0 <scalbn+0x38>
 800c8c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8cc:	4323      	orrs	r3, r4
 800c8ce:	d03f      	beq.n	800c950 <scalbn+0x98>
 800c8d0:	4b35      	ldr	r3, [pc, #212]	; (800c9a8 <scalbn+0xf0>)
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	ee10 0a10 	vmov	r0, s0
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	4b33      	ldr	r3, [pc, #204]	; (800c9ac <scalbn+0xf4>)
 800c8e0:	429e      	cmp	r6, r3
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	da10      	bge.n	800c90a <scalbn+0x52>
 800c8e8:	a327      	add	r3, pc, #156	; (adr r3, 800c988 <scalbn+0xd0>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	e01f      	b.n	800c930 <scalbn+0x78>
 800c8f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c8f4:	4291      	cmp	r1, r2
 800c8f6:	d10c      	bne.n	800c912 <scalbn+0x5a>
 800c8f8:	ee10 2a10 	vmov	r2, s0
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fcc4 	bl	800028c <__adddf3>
 800c904:	4604      	mov	r4, r0
 800c906:	460d      	mov	r5, r1
 800c908:	e022      	b.n	800c950 <scalbn+0x98>
 800c90a:	460b      	mov	r3, r1
 800c90c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c910:	3936      	subs	r1, #54	; 0x36
 800c912:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c916:	4296      	cmp	r6, r2
 800c918:	dd0d      	ble.n	800c936 <scalbn+0x7e>
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	a11c      	add	r1, pc, #112	; (adr r1, 800c990 <scalbn+0xd8>)
 800c91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c922:	da02      	bge.n	800c92a <scalbn+0x72>
 800c924:	a11c      	add	r1, pc, #112	; (adr r1, 800c998 <scalbn+0xe0>)
 800c926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92a:	a319      	add	r3, pc, #100	; (adr r3, 800c990 <scalbn+0xd8>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	f7f3 fe62 	bl	80005f8 <__aeabi_dmul>
 800c934:	e7e6      	b.n	800c904 <scalbn+0x4c>
 800c936:	1872      	adds	r2, r6, r1
 800c938:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c93c:	428a      	cmp	r2, r1
 800c93e:	dcec      	bgt.n	800c91a <scalbn+0x62>
 800c940:	2a00      	cmp	r2, #0
 800c942:	dd08      	ble.n	800c956 <scalbn+0x9e>
 800c944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c948:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c94c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c950:	ec45 4b10 	vmov	d0, r4, r5
 800c954:	bd70      	pop	{r4, r5, r6, pc}
 800c956:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c95a:	da08      	bge.n	800c96e <scalbn+0xb6>
 800c95c:	2d00      	cmp	r5, #0
 800c95e:	a10a      	add	r1, pc, #40	; (adr r1, 800c988 <scalbn+0xd0>)
 800c960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c964:	dac0      	bge.n	800c8e8 <scalbn+0x30>
 800c966:	a10e      	add	r1, pc, #56	; (adr r1, 800c9a0 <scalbn+0xe8>)
 800c968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96c:	e7bc      	b.n	800c8e8 <scalbn+0x30>
 800c96e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c972:	3236      	adds	r2, #54	; 0x36
 800c974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c978:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c97c:	4620      	mov	r0, r4
 800c97e:	4b0c      	ldr	r3, [pc, #48]	; (800c9b0 <scalbn+0xf8>)
 800c980:	2200      	movs	r2, #0
 800c982:	e7d5      	b.n	800c930 <scalbn+0x78>
 800c984:	f3af 8000 	nop.w
 800c988:	c2f8f359 	.word	0xc2f8f359
 800c98c:	01a56e1f 	.word	0x01a56e1f
 800c990:	8800759c 	.word	0x8800759c
 800c994:	7e37e43c 	.word	0x7e37e43c
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	fe37e43c 	.word	0xfe37e43c
 800c9a0:	c2f8f359 	.word	0xc2f8f359
 800c9a4:	81a56e1f 	.word	0x81a56e1f
 800c9a8:	43500000 	.word	0x43500000
 800c9ac:	ffff3cb0 	.word	0xffff3cb0
 800c9b0:	3c900000 	.word	0x3c900000

0800c9b4 <with_errno>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	4616      	mov	r6, r2
 800c9bc:	f7fd f960 	bl	8009c80 <__errno>
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	6006      	str	r6, [r0, #0]
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}

0800c9c8 <xflow>:
 800c9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ca:	4614      	mov	r4, r2
 800c9cc:	461d      	mov	r5, r3
 800c9ce:	b108      	cbz	r0, 800c9d4 <xflow+0xc>
 800c9d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c9d4:	e9cd 2300 	strd	r2, r3, [sp]
 800c9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f7f3 fe0a 	bl	80005f8 <__aeabi_dmul>
 800c9e4:	2222      	movs	r2, #34	; 0x22
 800c9e6:	b003      	add	sp, #12
 800c9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9ec:	f7ff bfe2 	b.w	800c9b4 <with_errno>

0800c9f0 <__math_uflow>:
 800c9f0:	b508      	push	{r3, lr}
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9f8:	f7ff ffe6 	bl	800c9c8 <xflow>
 800c9fc:	ec41 0b10 	vmov	d0, r0, r1
 800ca00:	bd08      	pop	{r3, pc}

0800ca02 <__math_oflow>:
 800ca02:	b508      	push	{r3, lr}
 800ca04:	2200      	movs	r2, #0
 800ca06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca0a:	f7ff ffdd 	bl	800c9c8 <xflow>
 800ca0e:	ec41 0b10 	vmov	d0, r0, r1
 800ca12:	bd08      	pop	{r3, pc}
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <__ieee754_log>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	ec51 0b10 	vmov	r0, r1, d0
 800ca20:	ed2d 8b04 	vpush	{d8-d9}
 800ca24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ca28:	b083      	sub	sp, #12
 800ca2a:	460d      	mov	r5, r1
 800ca2c:	da29      	bge.n	800ca82 <__ieee754_log+0x6a>
 800ca2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca32:	4303      	orrs	r3, r0
 800ca34:	ee10 2a10 	vmov	r2, s0
 800ca38:	d10c      	bne.n	800ca54 <__ieee754_log+0x3c>
 800ca3a:	49cf      	ldr	r1, [pc, #828]	; (800cd78 <__ieee754_log+0x360>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	2000      	movs	r0, #0
 800ca42:	f7f3 ff03 	bl	800084c <__aeabi_ddiv>
 800ca46:	ec41 0b10 	vmov	d0, r0, r1
 800ca4a:	b003      	add	sp, #12
 800ca4c:	ecbd 8b04 	vpop	{d8-d9}
 800ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca54:	2900      	cmp	r1, #0
 800ca56:	da05      	bge.n	800ca64 <__ieee754_log+0x4c>
 800ca58:	460b      	mov	r3, r1
 800ca5a:	f7f3 fc15 	bl	8000288 <__aeabi_dsub>
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2300      	movs	r3, #0
 800ca62:	e7ee      	b.n	800ca42 <__ieee754_log+0x2a>
 800ca64:	4bc5      	ldr	r3, [pc, #788]	; (800cd7c <__ieee754_log+0x364>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	f7f3 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ca6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ca70:	460d      	mov	r5, r1
 800ca72:	4ac3      	ldr	r2, [pc, #780]	; (800cd80 <__ieee754_log+0x368>)
 800ca74:	4295      	cmp	r5, r2
 800ca76:	dd06      	ble.n	800ca86 <__ieee754_log+0x6e>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	f7f3 fc06 	bl	800028c <__adddf3>
 800ca80:	e7e1      	b.n	800ca46 <__ieee754_log+0x2e>
 800ca82:	2300      	movs	r3, #0
 800ca84:	e7f5      	b.n	800ca72 <__ieee754_log+0x5a>
 800ca86:	152c      	asrs	r4, r5, #20
 800ca88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ca8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ca90:	441c      	add	r4, r3
 800ca92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ca96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ca9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800caa2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800caa6:	ea42 0105 	orr.w	r1, r2, r5
 800caaa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800caae:	2200      	movs	r2, #0
 800cab0:	4bb4      	ldr	r3, [pc, #720]	; (800cd84 <__ieee754_log+0x36c>)
 800cab2:	f7f3 fbe9 	bl	8000288 <__aeabi_dsub>
 800cab6:	1cab      	adds	r3, r5, #2
 800cab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	4682      	mov	sl, r0
 800cac0:	468b      	mov	fp, r1
 800cac2:	f04f 0200 	mov.w	r2, #0
 800cac6:	dc53      	bgt.n	800cb70 <__ieee754_log+0x158>
 800cac8:	2300      	movs	r3, #0
 800caca:	f7f3 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cace:	b1d0      	cbz	r0, 800cb06 <__ieee754_log+0xee>
 800cad0:	2c00      	cmp	r4, #0
 800cad2:	f000 8122 	beq.w	800cd1a <__ieee754_log+0x302>
 800cad6:	4620      	mov	r0, r4
 800cad8:	f7f3 fd24 	bl	8000524 <__aeabi_i2d>
 800cadc:	a390      	add	r3, pc, #576	; (adr r3, 800cd20 <__ieee754_log+0x308>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	f7f3 fd87 	bl	80005f8 <__aeabi_dmul>
 800caea:	a38f      	add	r3, pc, #572	; (adr r3, 800cd28 <__ieee754_log+0x310>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	4604      	mov	r4, r0
 800caf2:	460d      	mov	r5, r1
 800caf4:	4630      	mov	r0, r6
 800caf6:	4639      	mov	r1, r7
 800caf8:	f7f3 fd7e 	bl	80005f8 <__aeabi_dmul>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4620      	mov	r0, r4
 800cb02:	4629      	mov	r1, r5
 800cb04:	e7ba      	b.n	800ca7c <__ieee754_log+0x64>
 800cb06:	a38a      	add	r3, pc, #552	; (adr r3, 800cd30 <__ieee754_log+0x318>)
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	4650      	mov	r0, sl
 800cb0e:	4659      	mov	r1, fp
 800cb10:	f7f3 fd72 	bl	80005f8 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	2000      	movs	r0, #0
 800cb1a:	499b      	ldr	r1, [pc, #620]	; (800cd88 <__ieee754_log+0x370>)
 800cb1c:	f7f3 fbb4 	bl	8000288 <__aeabi_dsub>
 800cb20:	4652      	mov	r2, sl
 800cb22:	4606      	mov	r6, r0
 800cb24:	460f      	mov	r7, r1
 800cb26:	465b      	mov	r3, fp
 800cb28:	4650      	mov	r0, sl
 800cb2a:	4659      	mov	r1, fp
 800cb2c:	f7f3 fd64 	bl	80005f8 <__aeabi_dmul>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4630      	mov	r0, r6
 800cb36:	4639      	mov	r1, r7
 800cb38:	f7f3 fd5e 	bl	80005f8 <__aeabi_dmul>
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	460f      	mov	r7, r1
 800cb40:	b914      	cbnz	r4, 800cb48 <__ieee754_log+0x130>
 800cb42:	4632      	mov	r2, r6
 800cb44:	463b      	mov	r3, r7
 800cb46:	e0a2      	b.n	800cc8e <__ieee754_log+0x276>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7f3 fceb 	bl	8000524 <__aeabi_i2d>
 800cb4e:	a374      	add	r3, pc, #464	; (adr r3, 800cd20 <__ieee754_log+0x308>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	4680      	mov	r8, r0
 800cb56:	4689      	mov	r9, r1
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	a372      	add	r3, pc, #456	; (adr r3, 800cd28 <__ieee754_log+0x310>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	4640      	mov	r0, r8
 800cb68:	4649      	mov	r1, r9
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	e0a7      	b.n	800ccc0 <__ieee754_log+0x2a8>
 800cb70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb74:	f7f3 fb8a 	bl	800028c <__adddf3>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4650      	mov	r0, sl
 800cb7e:	4659      	mov	r1, fp
 800cb80:	f7f3 fe64 	bl	800084c <__aeabi_ddiv>
 800cb84:	ec41 0b18 	vmov	d8, r0, r1
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f7f3 fccb 	bl	8000524 <__aeabi_i2d>
 800cb8e:	ec53 2b18 	vmov	r2, r3, d8
 800cb92:	ec41 0b19 	vmov	d9, r0, r1
 800cb96:	ec51 0b18 	vmov	r0, r1, d8
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cba2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4680      	mov	r8, r0
 800cbae:	4689      	mov	r9, r1
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	a360      	add	r3, pc, #384	; (adr r3, 800cd38 <__ieee754_log+0x320>)
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	4606      	mov	r6, r0
 800cbbc:	460f      	mov	r7, r1
 800cbbe:	f7f3 fd1b 	bl	80005f8 <__aeabi_dmul>
 800cbc2:	a35f      	add	r3, pc, #380	; (adr r3, 800cd40 <__ieee754_log+0x328>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	f7f3 fb60 	bl	800028c <__adddf3>
 800cbcc:	4632      	mov	r2, r6
 800cbce:	463b      	mov	r3, r7
 800cbd0:	f7f3 fd12 	bl	80005f8 <__aeabi_dmul>
 800cbd4:	a35c      	add	r3, pc, #368	; (adr r3, 800cd48 <__ieee754_log+0x330>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fb57 	bl	800028c <__adddf3>
 800cbde:	4632      	mov	r2, r6
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	f7f3 fd09 	bl	80005f8 <__aeabi_dmul>
 800cbe6:	a35a      	add	r3, pc, #360	; (adr r3, 800cd50 <__ieee754_log+0x338>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f3 fb4e 	bl	800028c <__adddf3>
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	464b      	mov	r3, r9
 800cbf4:	f7f3 fd00 	bl	80005f8 <__aeabi_dmul>
 800cbf8:	a357      	add	r3, pc, #348	; (adr r3, 800cd58 <__ieee754_log+0x340>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	4680      	mov	r8, r0
 800cc00:	4689      	mov	r9, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fcf7 	bl	80005f8 <__aeabi_dmul>
 800cc0a:	a355      	add	r3, pc, #340	; (adr r3, 800cd60 <__ieee754_log+0x348>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 fb3c 	bl	800028c <__adddf3>
 800cc14:	4632      	mov	r2, r6
 800cc16:	463b      	mov	r3, r7
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	a352      	add	r3, pc, #328	; (adr r3, 800cd68 <__ieee754_log+0x350>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f3 fb33 	bl	800028c <__adddf3>
 800cc26:	4632      	mov	r2, r6
 800cc28:	463b      	mov	r3, r7
 800cc2a:	f7f3 fce5 	bl	80005f8 <__aeabi_dmul>
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4602      	mov	r2, r0
 800cc32:	4649      	mov	r1, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	f7f3 fb29 	bl	800028c <__adddf3>
 800cc3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	3551      	adds	r5, #81	; 0x51
 800cc42:	431d      	orrs	r5, r3
 800cc44:	2d00      	cmp	r5, #0
 800cc46:	4680      	mov	r8, r0
 800cc48:	4689      	mov	r9, r1
 800cc4a:	dd48      	ble.n	800ccde <__ieee754_log+0x2c6>
 800cc4c:	4b4e      	ldr	r3, [pc, #312]	; (800cd88 <__ieee754_log+0x370>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	4650      	mov	r0, sl
 800cc52:	4659      	mov	r1, fp
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	4652      	mov	r2, sl
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	f7f3 fccc 	bl	80005f8 <__aeabi_dmul>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4606      	mov	r6, r0
 800cc66:	460f      	mov	r7, r1
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	ec53 2b18 	vmov	r2, r3, d8
 800cc74:	f7f3 fcc0 	bl	80005f8 <__aeabi_dmul>
 800cc78:	4680      	mov	r8, r0
 800cc7a:	4689      	mov	r9, r1
 800cc7c:	b964      	cbnz	r4, 800cc98 <__ieee754_log+0x280>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 faff 	bl	8000288 <__aeabi_dsub>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4650      	mov	r0, sl
 800cc90:	4659      	mov	r1, fp
 800cc92:	f7f3 faf9 	bl	8000288 <__aeabi_dsub>
 800cc96:	e6d6      	b.n	800ca46 <__ieee754_log+0x2e>
 800cc98:	a321      	add	r3, pc, #132	; (adr r3, 800cd20 <__ieee754_log+0x308>)
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	ec51 0b19 	vmov	r0, r1, d9
 800cca2:	f7f3 fca9 	bl	80005f8 <__aeabi_dmul>
 800cca6:	a320      	add	r3, pc, #128	; (adr r3, 800cd28 <__ieee754_log+0x310>)
 800cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccac:	4604      	mov	r4, r0
 800ccae:	460d      	mov	r5, r1
 800ccb0:	ec51 0b19 	vmov	r0, r1, d9
 800ccb4:	f7f3 fca0 	bl	80005f8 <__aeabi_dmul>
 800ccb8:	4642      	mov	r2, r8
 800ccba:	464b      	mov	r3, r9
 800ccbc:	f7f3 fae6 	bl	800028c <__adddf3>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 fade 	bl	8000288 <__aeabi_dsub>
 800cccc:	4652      	mov	r2, sl
 800ccce:	465b      	mov	r3, fp
 800ccd0:	f7f3 fada 	bl	8000288 <__aeabi_dsub>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	e7d9      	b.n	800cc92 <__ieee754_log+0x27a>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4650      	mov	r0, sl
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7f3 facf 	bl	8000288 <__aeabi_dsub>
 800ccea:	ec53 2b18 	vmov	r2, r3, d8
 800ccee:	f7f3 fc83 	bl	80005f8 <__aeabi_dmul>
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	460f      	mov	r7, r1
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	f43f af23 	beq.w	800cb42 <__ieee754_log+0x12a>
 800ccfc:	a308      	add	r3, pc, #32	; (adr r3, 800cd20 <__ieee754_log+0x308>)
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	ec51 0b19 	vmov	r0, r1, d9
 800cd06:	f7f3 fc77 	bl	80005f8 <__aeabi_dmul>
 800cd0a:	a307      	add	r3, pc, #28	; (adr r3, 800cd28 <__ieee754_log+0x310>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	4604      	mov	r4, r0
 800cd12:	460d      	mov	r5, r1
 800cd14:	ec51 0b19 	vmov	r0, r1, d9
 800cd18:	e727      	b.n	800cb6a <__ieee754_log+0x152>
 800cd1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cd70 <__ieee754_log+0x358>
 800cd1e:	e694      	b.n	800ca4a <__ieee754_log+0x32>
 800cd20:	fee00000 	.word	0xfee00000
 800cd24:	3fe62e42 	.word	0x3fe62e42
 800cd28:	35793c76 	.word	0x35793c76
 800cd2c:	3dea39ef 	.word	0x3dea39ef
 800cd30:	55555555 	.word	0x55555555
 800cd34:	3fd55555 	.word	0x3fd55555
 800cd38:	df3e5244 	.word	0xdf3e5244
 800cd3c:	3fc2f112 	.word	0x3fc2f112
 800cd40:	96cb03de 	.word	0x96cb03de
 800cd44:	3fc74664 	.word	0x3fc74664
 800cd48:	94229359 	.word	0x94229359
 800cd4c:	3fd24924 	.word	0x3fd24924
 800cd50:	55555593 	.word	0x55555593
 800cd54:	3fe55555 	.word	0x3fe55555
 800cd58:	d078c69f 	.word	0xd078c69f
 800cd5c:	3fc39a09 	.word	0x3fc39a09
 800cd60:	1d8e78af 	.word	0x1d8e78af
 800cd64:	3fcc71c5 	.word	0x3fcc71c5
 800cd68:	9997fa04 	.word	0x9997fa04
 800cd6c:	3fd99999 	.word	0x3fd99999
	...
 800cd78:	c3500000 	.word	0xc3500000
 800cd7c:	43500000 	.word	0x43500000
 800cd80:	7fefffff 	.word	0x7fefffff
 800cd84:	3ff00000 	.word	0x3ff00000
 800cd88:	3fe00000 	.word	0x3fe00000

0800cd8c <_init>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr

0800cd98 <_fini>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	bf00      	nop
 800cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9e:	bc08      	pop	{r3}
 800cda0:	469e      	mov	lr, r3
 800cda2:	4770      	bx	lr
