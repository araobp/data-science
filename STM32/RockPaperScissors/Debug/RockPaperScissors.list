
RockPaperScissors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000821c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cec  080083c0  080083c0  000183c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  0002080c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  20000000  0800a0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .AI_RAM       000000ec  20000720  0800a7dc  00020720  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000360  2000080c  0800a8c8  0002080c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20000b6c  0800a8c8  00020b6c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 13 .comment      00000108  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a252  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b88  00000000  00000000  0003ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000843e  00000000  00000000  0003e71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000cf8  00000000  00000000  00046b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b24  00000000  00000000  00047858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000295b1  00000000  00000000  0004837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019333  00000000  00000000  0007192d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9537  00000000  00000000  0008ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003650  00000000  00000000  00184198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  001877e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0018785a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000000fa  00000000  00000000  0018787a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000080c 	.word	0x2000080c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008394 	.word	0x08008394

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000810 	.word	0x20000810
 80001cc:	08008394 	.word	0x08008394

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <rps_init>:
  for (int i = 0; i < len; i++) {
    normalized_data[i] = (in_data[i] - mean) / std;
  }
}

void rps_init(void) {
 8000f44:	b538      	push	{r3, r4, r5, lr}

  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <rps_init+0x50>)
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f48:	4d13      	ldr	r5, [pc, #76]	; (8000f98 <rps_init+0x54>)
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);

  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f4a:	4c14      	ldr	r4, [pc, #80]	; (8000f9c <rps_init+0x58>)
  printf("--- AI ROCK PAPER SCISSORS ---\r\n");
 8000f4c:	f005 f9d0 	bl	80062f0 <puts>
  nn_name = ai_mnetwork_find(NULL, 0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4608      	mov	r0, r1
 8000f54:	f001 ff50 	bl	8002df8 <ai_mnetwork_find>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	6028      	str	r0, [r5, #0]
  printf("[NETWORK FIND] NN_NAME: %s\n", nn_name);
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <rps_init+0x5c>)
 8000f5e:	f005 f961 	bl	8006224 <iprintf>
  ai_error ai_err = ai_mnetwork_create(nn_name, &handle, NULL);
 8000f62:	4621      	mov	r1, r4
 8000f64:	6828      	ldr	r0, [r5, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f001 ff54 	bl	8002e14 <ai_mnetwork_create>
  printf("[NETWORK CREATION] err.type: 0x%02X, err.code: 0x%02X\n",
 8000f6c:	0a02      	lsrs	r2, r0, #8
 8000f6e:	b2c1      	uxtb	r1, r0
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <rps_init+0x60>)
 8000f72:	f005 f957 	bl	8006224 <iprintf>
      ai_err.type, ai_err.code);

  bool success = ai_mnetwork_init(handle);
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	f001 ff76 	bl	8002e68 <ai_mnetwork_init>
 8000f7c:	4601      	mov	r1, r0
  printf("[NETWORK INITIALIZATION] %d\n", success);  // 0: Failure, 1; Success
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <rps_init+0x64>)
 8000f80:	f005 f950 	bl	8006224 <iprintf>

  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f84:	2208      	movs	r2, #8
}
 8000f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  dct2_2d_init_f32(&S, WIDTH, HEIGHT);
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <rps_init+0x68>)
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f000 b8bd 	b.w	800110c <dct2_2d_init_f32>
 8000f92:	bf00      	nop
 8000f94:	080083e0 	.word	0x080083e0
 8000f98:	20000850 	.word	0x20000850
 8000f9c:	2000084c 	.word	0x2000084c
 8000fa0:	08008400 	.word	0x08008400
 8000fa4:	0800841c 	.word	0x0800841c
 8000fa8:	08008453 	.word	0x08008453
 8000fac:	20000828 	.word	0x20000828

08000fb0 <dct2_init_f32>:
 * @brief  Initialization function for the DCT2.
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     width      length of the DCT2.
 * @return        none.
 */
void dct2_init_f32(dct2_instance_f32 *S, uint16_t width) {
 8000fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb4:	ed2d 8b04 	vpush	{d8-d9}
 8000fb8:	460d      	mov	r5, r1
 8000fba:	b083      	sub	sp, #12
 8000fbc:	4604      	mov	r4, r0
  float32_t *pDataW = NULL;
  float32_t *pDataW_I = NULL;
  float32_t *pDataX = NULL;
  S->width = width;

  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fbe:	2300      	movs	r3, #0
  S->width = width;
 8000fc0:	f820 1b04 	strh.w	r1, [r0], #4
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fc4:	2201      	movs	r2, #1

  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fc6:	fb05 f605 	mul.w	r6, r5, r5
  arm_mat_init_f32(&(S->Y), width, 1, NULL);
 8000fca:	f002 f869 	bl	80030a0 <arm_mat_init_f32>
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f004 fb3f 	bl	8005654 <calloc>
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fd6:	462a      	mov	r2, r5
  pDataW = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fd8:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W), width, width, pDataW);
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f104 000c 	add.w	r0, r4, #12
 8000fe0:	f002 f85e 	bl	80030a0 <arm_mat_init_f32>

  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f004 fb34 	bl	8005654 <calloc>
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000fec:	462a      	mov	r2, r5
  pDataW_I = (float32_t *) (calloc(width * width, sizeof(float32_t)));
 8000fee:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->W_I), width, width, pDataW_I);
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f104 0014 	add.w	r0, r4, #20
 8000ff6:	f002 f853 	bl	80030a0 <arm_mat_init_f32>

  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f004 fb29 	bl	8005654 <calloc>
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8001002:	4629      	mov	r1, r5
  pDataX = (float32_t *) (calloc(width, sizeof(float32_t)));
 8001004:	4603      	mov	r3, r0
  arm_mat_init_f32(&(S->X), width, 1, pDataX);
 8001006:	2201      	movs	r2, #1
 8001008:	f104 001c 	add.w	r0, r4, #28
 800100c:	f002 f848 	bl	80030a0 <arm_mat_init_f32>

  for (int k = 0; k < S->width; k++) {
 8001010:	2500      	movs	r5, #0
 8001012:	8823      	ldrh	r3, [r4, #0]
 8001014:	42ab      	cmp	r3, r5
 8001016:	dd6a      	ble.n	80010ee <dct2_init_f32+0x13e>
 8001018:	006b      	lsls	r3, r5, #1
 800101a:	462f      	mov	r7, r5
 800101c:	9301      	str	r3, [sp, #4]
    for (int n = 0; n < S->width; n++) {
 800101e:	2600      	movs	r6, #0
 8001020:	e023      	b.n	800106a <dct2_init_f32+0xba>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001022:	6923      	ldr	r3, [r4, #16]
 8001024:	fb05 620a 	mla	r2, r5, sl, r6
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001028:	4638      	mov	r0, r7
      S->W.pData[k * S->width + n] = arm_cos_f32(
 800102a:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
          (k * (2 * n + 1) * M_PI) / (2 * S->width));
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	a334      	add	r3, pc, #208	; (adr r3, 8001104 <dct2_init_f32+0x154>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fade 	bl	80005f8 <__aeabi_dmul>
 800103c:	4680      	mov	r8, r0
 800103e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001042:	4689      	mov	r9, r1
 8001044:	f7ff fa6e 	bl	8000524 <__aeabi_i2d>
 8001048:	460b      	mov	r3, r1
 800104a:	4602      	mov	r2, r0
 800104c:	4649      	mov	r1, r9
 800104e:	4640      	mov	r0, r8
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
      S->W.pData[k * S->width + n] = arm_cos_f32(
 8001054:	f7ff fda8 	bl	8000ba8 <__aeabi_d2f>
 8001058:	ee00 0a10 	vmov	s0, r0
 800105c:	f002 f824 	bl	80030a8 <arm_cos_f32>
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	ed8b 0a00 	vstr	s0, [fp]
    for (int n = 0; n < S->width; n++) {
 8001066:	3601      	adds	r6, #1
 8001068:	441f      	add	r7, r3
 800106a:	f8b4 a000 	ldrh.w	sl, [r4]
 800106e:	45b2      	cmp	sl, r6
 8001070:	dcd7      	bgt.n	8001022 <dct2_init_f32+0x72>
  for (int k = 0; k < S->width; k++) {
 8001072:	3501      	adds	r5, #1
 8001074:	e7cd      	b.n	8001012 <dct2_init_f32+0x62>
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 8001076:	2d00      	cmp	r5, #0
  }

  for (int n = 0; n < S->width; n++) {
    for (int k = 0; k < S->width; k++) {
      S->W_I.pData[n * S->width + k] = c_k(k)
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001078:	4638      	mov	r0, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 800107a:	bf14      	ite	ne
 800107c:	eeb0 9a48 	vmovne.f32	s18, s16
 8001080:	eeb0 9a68 	vmoveq.f32	s18, s17
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 8001084:	f7ff fa4e 	bl	8000524 <__aeabi_i2d>
 8001088:	a31e      	add	r3, pc, #120	; (adr r3, 8001104 <dct2_init_f32+0x154>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4680      	mov	r8, r0
 8001094:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8001098:	4689      	mov	r9, r1
 800109a:	f7ff fa43 	bl	8000524 <__aeabi_i2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4640      	mov	r0, r8
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff fbd1 	bl	800084c <__aeabi_ddiv>
 80010aa:	f7ff fd7d 	bl	8000ba8 <__aeabi_d2f>
 80010ae:	ee00 0a10 	vmov	s0, r0
 80010b2:	f001 fff9 	bl	80030a8 <arm_cos_f32>
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010b6:	8822      	ldrh	r2, [r4, #0]
 80010b8:	69a3      	ldr	r3, [r4, #24]
 80010ba:	fb06 5202 	mla	r2, r6, r2, r5
          * arm_cos_f32((k * (2 * n + 1) * M_PI) / (2 * S->width));
 80010be:	ee20 0a09 	vmul.f32	s0, s0, s18
      S->W_I.pData[n * S->width + k] = c_k(k)
 80010c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80010c6:	ed83 0a00 	vstr	s0, [r3]
    for (int k = 0; k < S->width; k++) {
 80010ca:	3501      	adds	r5, #1
 80010cc:	445f      	add	r7, fp
 80010ce:	f8b4 a000 	ldrh.w	sl, [r4]
 80010d2:	45aa      	cmp	sl, r5
 80010d4:	dccf      	bgt.n	8001076 <dct2_init_f32+0xc6>
  for (int n = 0; n < S->width; n++) {
 80010d6:	3601      	adds	r6, #1
 80010d8:	8823      	ldrh	r3, [r4, #0]
 80010da:	42b3      	cmp	r3, r6
 80010dc:	dd0b      	ble.n	80010f6 <dct2_init_f32+0x146>
 80010de:	0073      	lsls	r3, r6, #1
 80010e0:	2700      	movs	r7, #0
 80010e2:	f103 0b01 	add.w	fp, r3, #1
    for (int k = 0; k < S->width; k++) {
 80010e6:	463d      	mov	r5, r7
  return (k == 0) ? 1.0 / sqrt(2.0) : 1.0;
 80010e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80010ec:	e7ef      	b.n	80010ce <dct2_init_f32+0x11e>
 80010ee:	eddf 8a04 	vldr	s17, [pc, #16]	; 8001100 <dct2_init_f32+0x150>
  for (int n = 0; n < S->width; n++) {
 80010f2:	2600      	movs	r6, #0
 80010f4:	e7f0      	b.n	80010d8 <dct2_init_f32+0x128>
    }
  }

}
 80010f6:	b003      	add	sp, #12
 80010f8:	ecbd 8b04 	vpop	{d8-d9}
 80010fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001100:	3f3504f3 	.word	0x3f3504f3
 8001104:	54442d18 	.word	0x54442d18
 8001108:	400921fb 	.word	0x400921fb

0800110c <dct2_2d_init_f32>:
 * @param[in]     *S         points to an instance of floating-point DCT2 structure.
 * @param[in]     height     DCT2 2D width.
 * @param[in]     width      DCT2 2D height.
 * @return        none.
 */
void dct2_2d_init_f32(dct2_instance_f32 *S, uint16_t height, uint16_t width) {
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
  dct2_init_f32(S, width);
 8001112:	4611      	mov	r1, r2
 8001114:	f7ff ff4c 	bl	8000fb0 <dct2_init_f32>
  S->height = height;
 8001118:	8065      	strh	r5, [r4, #2]
}
 800111a:	bd38      	pop	{r3, r4, r5, pc}

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b500      	push	{lr}
 800111e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001120:	2244      	movs	r2, #68	; 0x44
 8001122:	2100      	movs	r1, #0
 8001124:	a805      	add	r0, sp, #20
 8001126:	f005 f9c3 	bl	80064b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112a:	2214      	movs	r2, #20
 800112c:	2100      	movs	r1, #0
 800112e:	4668      	mov	r0, sp
 8001130:	f005 f9be 	bl	80064b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001134:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001138:	f000 fc8c 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 800113c:	b108      	cbz	r0, 8001142 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2210      	movs	r2, #16
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001148:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800114e:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001152:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001156:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001164:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f000 fd3b 	bl	8001be0 <HAL_RCC_OscConfig>
 800116a:	b108      	cbz	r0, 8001170 <SystemClock_Config+0x54>
 800116c:	b672      	cpsid	i
  while (1)
 800116e:	e7fe      	b.n	800116e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	220f      	movs	r2, #15
 8001176:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117a:	2104      	movs	r1, #4
 800117c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001182:	f000 ffad 	bl	80020e0 <HAL_RCC_ClockConfig>
 8001186:	b108      	cbz	r0, 800118c <SystemClock_Config+0x70>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <SystemClock_Config+0x6e>
}
 800118c:	b017      	add	sp, #92	; 0x5c
 800118e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001194 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x34>)
{
 8001198:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800119a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800119e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	f001 fdce 	bl	8002d56 <HAL_UART_Init>
 80011ba:	b108      	cbz	r0, 80011c0 <MX_USART2_UART_Init+0x2c>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <MX_USART2_UART_Init+0x2a>
}
 80011c0:	bd08      	pop	{r3, pc}
 80011c2:	bf00      	nop
 80011c4:	200008cc 	.word	0x200008cc
 80011c8:	40004400 	.word	0x40004400

080011cc <main>:
{
 80011cc:	b500      	push	{lr}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80011d0:	f000 f9da 	bl	8001588 <HAL_Init>
  SystemClock_Config();
 80011d4:	f7ff ffa2 	bl	800111c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2214      	movs	r2, #20
 80011da:	2100      	movs	r1, #0
 80011dc:	eb0d 0002 	add.w	r0, sp, r2
 80011e0:	f005 f966 	bl	80064b0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <main+0x100>)
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f0:	f002 0204 	and.w	r2, r2, #4
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001202:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
 8001212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001214:	f002 0201 	and.w	r2, r2, #1
 8001218:	9203      	str	r2, [sp, #12]
 800121a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121e:	f042 0202 	orr.w	r2, r2, #2
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122e:	2120      	movs	r1, #32
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001236:	f000 fb63 	bl	8001900 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001244:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001248:	4821      	ldr	r0, [pc, #132]	; (80012d0 <main+0x104>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	a905      	add	r1, sp, #20
 800124e:	f000 fa79 	bl	8001744 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2501      	movs	r5, #1
 8001254:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001264:	f000 fa6e 	bl	8001744 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <main+0x108>)
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <main+0x10c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800126c:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800126e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 8001272:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001274:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001276:	f000 fa07 	bl	8001688 <HAL_CRC_Init>
 800127a:	b108      	cbz	r0, 8001280 <main+0xb4>
 800127c:	b672      	cpsid	i
  while (1)
 800127e:	e7fe      	b.n	800127e <main+0xb2>
  hi2c1.Instance = I2C1;
 8001280:	4c16      	ldr	r4, [pc, #88]	; (80012dc <main+0x110>)
  hi2c1.Init.Timing = 0x10909CEC;
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0x114>)
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <main+0x118>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800128c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 8001296:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129a:	f000 fb36 	bl	800190a <HAL_I2C_Init>
 800129e:	4601      	mov	r1, r0
 80012a0:	b108      	cbz	r0, 80012a6 <main+0xda>
 80012a2:	b672      	cpsid	i
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 fb80 	bl	80019ac <HAL_I2CEx_ConfigAnalogFilter>
 80012ac:	4601      	mov	r1, r0
 80012ae:	b108      	cbz	r0, 80012b4 <main+0xe8>
 80012b0:	b672      	cpsid	i
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <main+0xe6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b4:	4620      	mov	r0, r4
 80012b6:	f000 fb9f 	bl	80019f8 <HAL_I2CEx_ConfigDigitalFilter>
 80012ba:	b108      	cbz	r0, 80012c0 <main+0xf4>
 80012bc:	b672      	cpsid	i
  while (1)
 80012be:	e7fe      	b.n	80012be <main+0xf2>
  MX_USART2_UART_Init();
 80012c0:	f7ff ff68 	bl	8001194 <MX_USART2_UART_Init>
  rps_init();
 80012c4:	f7ff fe3e 	bl	8000f44 <rps_init>
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0xfc>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800
 80012d4:	20000854 	.word	0x20000854
 80012d8:	40023000 	.word	0x40023000
 80012dc:	20000878 	.word	0x20000878
 80012e0:	40005400 	.word	0x40005400
 80012e4:	10909cec 	.word	0x10909cec

080012e8 <_write>:
int _write(int file, char *ptr, int len) {
 80012e8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80012ee:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <_write+0x14>)
 80012f2:	b292      	uxth	r2, r2
 80012f4:	f001 fca2 	bl	8002c3c <HAL_UART_Transmit>
}
 80012f8:	4620      	mov	r0, r4
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	200008cc 	.word	0x200008cc

08001300 <Error_Handler>:
 8001300:	b672      	cpsid	i
  while (1)
 8001302:	e7fe      	b.n	8001302 <Error_Handler+0x2>

08001304 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x2c>)
 8001306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	661a      	str	r2, [r3, #96]	; 0x60
 800130e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001310:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	f002 0201 	and.w	r2, r2, #1
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800131c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001320:	659a      	str	r2, [r3, #88]	; 0x58
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	b002      	add	sp, #8
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001334:	6802      	ldr	r2, [r0, #0]
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_CRC_MspInit+0x24>)
 8001338:	429a      	cmp	r2, r3
{
 800133a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800133c:	d10a      	bne.n	8001354 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800133e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001348:	649a      	str	r2, [r3, #72]	; 0x48
 800134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001354:	b002      	add	sp, #8
 8001356:	4770      	bx	lr
 8001358:	40023000 	.word	0x40023000

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b510      	push	{r4, lr}
 800135e:	b0aa      	sub	sp, #168	; 0xa8
 8001360:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	2214      	movs	r2, #20
 8001364:	2100      	movs	r1, #0
 8001366:	a803      	add	r0, sp, #12
 8001368:	f005 f8a2 	bl	80064b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	2288      	movs	r2, #136	; 0x88
 800136e:	2100      	movs	r1, #0
 8001370:	a808      	add	r0, sp, #32
 8001372:	f005 f89d 	bl	80064b0 <memset>
  if(hi2c->Instance==I2C1)
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x7c>)
 800137a:	429a      	cmp	r2, r3
 800137c:	d129      	bne.n	80013d2 <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800137e:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001380:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001382:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f001 f87c 	bl	8002480 <HAL_RCCEx_PeriphCLKConfig>
 8001388:	b108      	cbz	r0, 800138e <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 800138a:	f7ff ffb9 	bl	8001300 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4c13      	ldr	r4, [pc, #76]	; (80013dc <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64e3      	str	r3, [r4, #76]	; 0x4c
 800139a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013a8:	2312      	movs	r3, #18
 80013aa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2100      	movs	r1, #0
 80013b0:	2303      	movs	r3, #3
 80013b2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f000 f9c2 	bl	8001744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80013c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d2:	b02a      	add	sp, #168	; 0xa8
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	b0aa      	sub	sp, #168	; 0xa8
 80013e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	2214      	movs	r2, #20
 80013ec:	2100      	movs	r1, #0
 80013ee:	a803      	add	r0, sp, #12
 80013f0:	f005 f85e 	bl	80064b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	2288      	movs	r2, #136	; 0x88
 80013f6:	2100      	movs	r1, #0
 80013f8:	a808      	add	r0, sp, #32
 80013fa:	f005 f859 	bl	80064b0 <memset>
  if(huart->Instance==USART2)
 80013fe:	6822      	ldr	r2, [r4, #0]
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d135      	bne.n	8001472 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001406:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800140a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f001 f838 	bl	8002480 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	b108      	cbz	r0, 8001416 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001412:	f7ff ff75 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_UART_MspInit+0x98>)
 8001418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800141a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
 8001420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001422:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001426:	9201      	str	r2, [sp, #4]
 8001428:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	64da      	str	r2, [r3, #76]	; 0x4c
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2602      	movs	r6, #2
 800143e:	2304      	movs	r3, #4
 8001440:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2503      	movs	r5, #3
 8001446:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001448:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800144a:	a903      	add	r1, sp, #12
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001454:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001456:	f000 f975 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 800145a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001460:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800146e:	f000 f969 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001472:	b02a      	add	sp, #168	; 0xa8
 8001474:	bd70      	pop	{r4, r5, r6, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler>

08001482 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler>

08001484 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler>

08001486 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler>

08001488 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler>

0800148a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 b890 	b.w	80015b4 <HAL_IncTick>

08001494 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <_sbrk+0x30>)
 8001496:	6811      	ldr	r1, [r2, #0]
{
 8001498:	b510      	push	{r4, lr}
 800149a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800149c:	b909      	cbnz	r1, 80014a2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <_sbrk+0x34>)
 80014a0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	4909      	ldr	r1, [pc, #36]	; (80014cc <_sbrk+0x38>)
 80014a6:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <_sbrk+0x3c>)
 80014a8:	4403      	add	r3, r0
 80014aa:	1b09      	subs	r1, r1, r4
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d906      	bls.n	80014be <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80014b0:	f005 f872 	bl	8006598 <__errno>
 80014b4:	230c      	movs	r3, #12
 80014b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014bc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014be:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80014c0:	e7fc      	b.n	80014bc <_sbrk+0x28>
 80014c2:	bf00      	nop
 80014c4:	20000950 	.word	0x20000950
 80014c8:	20000b70 	.word	0x20000b70
 80014cc:	20018000 	.word	0x20018000
 80014d0:	00000800 	.word	0x00000800

080014d4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <SystemInit+0x10>)
 80014d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff fff2 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f005 f845 	bl	80065a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff fe57 	bl	80011cc <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000720 	.word	0x20000720
  ldr r2, =_sidata
 800152c:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 8001530:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 8001534:	20000b6c 	.word	0x20000b6c

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>
	...

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_InitTick+0x40>)
 8001540:	781a      	ldrb	r2, [r3, #0]
{
 8001542:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001544:	b90a      	cbnz	r2, 800154a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001548:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_InitTick+0x44>)
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	fbb0 f0f3 	udiv	r0, r0, r3
 800155a:	f000 f881 	bl	8001660 <HAL_SYSTICK_Config>
 800155e:	4604      	mov	r4, r0
 8001560:	2800      	cmp	r0, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001564:	2d0f      	cmp	r5, #15
 8001566:	d8ee      	bhi.n	8001546 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	4602      	mov	r2, r0
 800156a:	4629      	mov	r1, r5
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f844 	bl	80015fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_InitTick+0x48>)
 8001576:	4620      	mov	r0, r4
 8001578:	601d      	str	r5, [r3, #0]
  return status;
 800157a:	e7e5      	b.n	8001548 <HAL_InitTick+0xc>
 800157c:	20000004 	.word	0x20000004
 8001580:	20000000 	.word	0x20000000
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_Init+0x28>)
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001590:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001592:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	f000 f81f 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff ffce 	bl	800153c <HAL_InitTick>
 80015a0:	4604      	mov	r4, r0
 80015a2:	b918      	cbnz	r0, 80015ac <HAL_Init+0x24>
    HAL_MspInit();
 80015a4:	f7ff feae 	bl	8001304 <HAL_MspInit>
}
 80015a8:	4620      	mov	r0, r4
 80015aa:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80015ac:	2401      	movs	r4, #1
 80015ae:	e7fb      	b.n	80015a8 <HAL_Init+0x20>
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x10>)
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_IncTick+0x14>)
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000954 	.word	0x20000954
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015cc:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <HAL_GetTick+0x8>)
 80015ce:	6818      	ldr	r0, [r3, #0]
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000954 	.word	0x20000954

080015d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b530      	push	{r4, r5, lr}
 8001600:	68dc      	ldr	r4, [r3, #12]
 8001602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	2b04      	cmp	r3, #4
 800160e:	bf28      	it	cs
 8001610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001618:	bf8c      	ite	hi
 800161a:	3c03      	subhi	r4, #3
 800161c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161e:	fa05 f303 	lsl.w	r3, r5, r3
 8001622:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001626:	40a5      	lsls	r5, r4
 8001628:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800162e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	bfac      	ite	ge
 8001636:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	4a08      	ldrlt	r2, [pc, #32]	; (800165c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	bfb8      	it	lt
 8001642:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	b2db      	uxtb	r3, r3
 8001648:	bfaa      	itet	ge
 800164a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001654:	bd30      	pop	{r4, r5, pc}
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	3801      	subs	r0, #1
 8001662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001666:	d20b      	bcs.n	8001680 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	21f0      	movs	r1, #240	; 0xf0
 8001672:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001676:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001678:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001680:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001688:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b908      	cbnz	r0, 8001692 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800168e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001690:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001692:	7f43      	ldrb	r3, [r0, #29]
 8001694:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001698:	b913      	cbnz	r3, 80016a0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800169a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800169c:	f7ff fe4a 	bl	8001334 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016a4:	7923      	ldrb	r3, [r4, #4]
 80016a6:	b9e3      	cbnz	r3, 80016e2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <HAL_CRC_Init+0x70>)
 80016ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	f022 0218 	bic.w	r2, r2, #24
 80016b4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016b6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016b8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016ba:	b9d2      	cbnz	r2, 80016f2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016c0:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	6961      	ldr	r1, [r4, #20]
 80016c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69a1      	ldr	r1, [r4, #24]
 80016d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80016da:	2301      	movs	r3, #1
 80016dc:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80016de:	2000      	movs	r0, #0
 80016e0:	e7d6      	b.n	8001690 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016e2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80016e6:	4620      	mov	r0, r4
 80016e8:	f000 f808 	bl	80016fc <HAL_CRCEx_Polynomial_Set>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0e2      	beq.n	80016b6 <HAL_CRC_Init+0x2e>
 80016f0:	e7cd      	b.n	800168e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016f2:	6922      	ldr	r2, [r4, #16]
 80016f4:	e7e4      	b.n	80016c0 <HAL_CRC_Init+0x38>
 80016f6:	bf00      	nop
 80016f8:	04c11db7 	.word	0x04c11db7

080016fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80016fc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80016fe:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001700:	3b01      	subs	r3, #1
 8001702:	d31c      	bcc.n	800173e <HAL_CRCEx_Polynomial_Set+0x42>
 8001704:	fa21 f403 	lsr.w	r4, r1, r3
 8001708:	07e4      	lsls	r4, r4, #31
 800170a:	d5f9      	bpl.n	8001700 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800170c:	2a10      	cmp	r2, #16
 800170e:	d012      	beq.n	8001736 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001710:	d804      	bhi.n	800171c <HAL_CRCEx_Polynomial_Set+0x20>
 8001712:	b13a      	cbz	r2, 8001724 <HAL_CRCEx_Polynomial_Set+0x28>
 8001714:	2a08      	cmp	r2, #8
 8001716:	d010      	beq.n	800173a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001718:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800171a:	e00b      	b.n	8001734 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800171c:	2a18      	cmp	r2, #24
 800171e:	d1fb      	bne.n	8001718 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001720:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001722:	d8f9      	bhi.n	8001718 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001724:	6800      	ldr	r0, [r0, #0]
 8001726:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001728:	6883      	ldr	r3, [r0, #8]
 800172a:	f023 0318 	bic.w	r3, r3, #24
 800172e:	4313      	orrs	r3, r2
 8001730:	6083      	str	r3, [r0, #8]
 8001732:	2000      	movs	r0, #0
}
 8001734:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001736:	2b07      	cmp	r3, #7
 8001738:	e7f3      	b.n	8001722 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800173a:	2b0f      	cmp	r3, #15
 800173c:	e7f1      	b.n	8001722 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800173e:	2a00      	cmp	r2, #0
 8001740:	d1ea      	bne.n	8001718 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001742:	e7ef      	b.n	8001724 <HAL_CRCEx_Polynomial_Set+0x28>

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001748:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80018fc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174c:	4c69      	ldr	r4, [pc, #420]	; (80018f4 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001750:	680a      	ldr	r2, [r1, #0]
 8001752:	fa32 f503 	lsrs.w	r5, r2, r3
 8001756:	d102      	bne.n	800175e <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001758:	b003      	add	sp, #12
 800175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175e:	f04f 0e01 	mov.w	lr, #1
 8001762:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001766:	ea1e 0202 	ands.w	r2, lr, r2
 800176a:	f000 8090 	beq.w	800188e <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176e:	684d      	ldr	r5, [r1, #4]
 8001770:	f005 0603 	and.w	r6, r5, #3
 8001774:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001778:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177c:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001782:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001784:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	f200 8083 	bhi.w	8001892 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 800178c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800178e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001792:	68cf      	ldr	r7, [r1, #12]
 8001794:	fa07 f708 	lsl.w	r7, r7, r8
 8001798:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800179c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800179e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80017a8:	409f      	lsls	r7, r3
 80017aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80017ae:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80017b0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b2:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b6:	688f      	ldr	r7, [r1, #8]
 80017b8:	fa07 f708 	lsl.w	r7, r7, r8
 80017bc:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80017c2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c4:	d071      	beq.n	80018aa <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80017c6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c8:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017cc:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d0:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80017d6:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d8:	d059      	beq.n	800188e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017de:	f046 0601 	orr.w	r6, r6, #1
 80017e2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80017e6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80017ea:	f023 0703 	bic.w	r7, r3, #3
 80017ee:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017f2:	f006 0601 	and.w	r6, r6, #1
 80017f6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017fa:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001800:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001802:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001804:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001808:	f04f 0c0f 	mov.w	ip, #15
 800180c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001810:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001814:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001818:	d05f      	beq.n	80018da <HAL_GPIO_Init+0x196>
 800181a:	4e37      	ldr	r6, [pc, #220]	; (80018f8 <HAL_GPIO_Init+0x1b4>)
 800181c:	42b0      	cmp	r0, r6
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0x19a>
 8001820:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001824:	42b0      	cmp	r0, r6
 8001826:	d05c      	beq.n	80018e2 <HAL_GPIO_Init+0x19e>
 8001828:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800182c:	42b0      	cmp	r0, r6
 800182e:	d05a      	beq.n	80018e6 <HAL_GPIO_Init+0x1a2>
 8001830:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001834:	42b0      	cmp	r0, r6
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0x1a6>
 8001838:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800183c:	42b0      	cmp	r0, r6
 800183e:	d056      	beq.n	80018ee <HAL_GPIO_Init+0x1aa>
 8001840:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001844:	42b0      	cmp	r0, r6
 8001846:	bf0c      	ite	eq
 8001848:	2606      	moveq	r6, #6
 800184a:	2607      	movne	r6, #7
 800184c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001850:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001854:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001856:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001858:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800185e:	bf0c      	ite	eq
 8001860:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001862:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001864:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001866:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001868:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800186c:	bf0c      	ite	eq
 800186e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001870:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001872:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001874:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001876:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800187a:	bf0c      	ite	eq
 800187c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800187e:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001880:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001882:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001884:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001886:	bf54      	ite	pl
 8001888:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800188a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800188c:	6026      	str	r6, [r4, #0]
    position++;
 800188e:	3301      	adds	r3, #1
 8001890:	e75e      	b.n	8001750 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001892:	2e03      	cmp	r6, #3
 8001894:	d18c      	bne.n	80017b0 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001896:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001898:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800189c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80018a0:	409f      	lsls	r7, r3
 80018a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 80018a6:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a8:	e78d      	b.n	80017c6 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 80018aa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80018ae:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80018b6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80018be:	f04f 0e0f 	mov.w	lr, #15
 80018c2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80018c6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ca:	690f      	ldr	r7, [r1, #16]
 80018cc:	fa07 f70b 	lsl.w	r7, r7, fp
 80018d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80018d4:	f8ca 7020 	str.w	r7, [sl, #32]
 80018d8:	e775      	b.n	80017c6 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018da:	2600      	movs	r6, #0
 80018dc:	e7b6      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018de:	2601      	movs	r6, #1
 80018e0:	e7b4      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018e2:	2602      	movs	r6, #2
 80018e4:	e7b2      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018e6:	2603      	movs	r6, #3
 80018e8:	e7b0      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018ea:	2604      	movs	r6, #4
 80018ec:	e7ae      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018ee:	2605      	movs	r6, #5
 80018f0:	e7ac      	b.n	800184c <HAL_GPIO_Init+0x108>
 80018f2:	bf00      	nop
 80018f4:	40010400 	.word	0x40010400
 80018f8:	48000400 	.word	0x48000400
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	b10a      	cbz	r2, 8001906 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001902:	6181      	str	r1, [r0, #24]
 8001904:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001906:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001908:	4770      	bx	lr

0800190a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800190a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800190c:	4604      	mov	r4, r0
 800190e:	2800      	cmp	r0, #0
 8001910:	d04a      	beq.n	80019a8 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001912:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800191a:	b91b      	cbnz	r3, 8001924 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800191c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001920:	f7ff fd1c 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	2324      	movs	r3, #36	; 0x24
 8001926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001942:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001944:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001948:	2901      	cmp	r1, #1
 800194a:	d124      	bne.n	8001996 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001950:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001966:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800196a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800196c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001974:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001988:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800198a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001994:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001996:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800199a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800199c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800199e:	bf04      	itt	eq
 80019a0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80019a4:	605a      	streq	r2, [r3, #4]
 80019a6:	e7d4      	b.n	8001952 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
 80019aa:	e7f3      	b.n	8001994 <HAL_I2C_Init+0x8a>

080019ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ac:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	b2dc      	uxtb	r4, r3
 80019b6:	d11d      	bne.n	80019f4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d019      	beq.n	80019f4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	2324      	movs	r3, #36	; 0x24
 80019c2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4311      	orrs	r1, r2
 80019dc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80019f0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80019f2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80019f4:	2002      	movs	r0, #2
 80019f6:	e7fc      	b.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080019f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019f8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	b2dc      	uxtb	r4, r3
 8001a02:	d11c      	bne.n	8001a3e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d018      	beq.n	8001a3e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0c:	2324      	movs	r3, #36	; 0x24
 8001a0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a12:	6803      	ldr	r3, [r0, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a1c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a1e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a22:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a26:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001a3a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001a3c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001a3e:	2002      	movs	r0, #2
 8001a40:	e7fc      	b.n	8001a3c <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001a44 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_PWREx_GetVoltageRange+0xc>)
 8001a46:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001a48:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a56:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a60:	d11d      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a66:	d101      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a68:	2000      	movs	r0, #0
 8001a6a:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2132      	movs	r1, #50	; 0x32
 8001a7e:	434b      	muls	r3, r1
 8001a80:	490e      	ldr	r1, [pc, #56]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a88:	6951      	ldr	r1, [r2, #20]
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	d500      	bpl.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001a8e:	b923      	cbnz	r3, 8001a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a90:	6953      	ldr	r3, [r2, #20]
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	d5e8      	bpl.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001a96:	2003      	movs	r0, #3
}
 8001a98:	4770      	bx	lr
        wait_loop_index--;
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	e7f4      	b.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa2:	bf1f      	itttt	ne
 8001aa4:	6813      	ldrne	r3, [r2, #0]
 8001aa6:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001aaa:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001aae:	6013      	strne	r3, [r2, #0]
 8001ab0:	e7da      	b.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	000f4240 	.word	0x000f4240

08001ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ac2:	4d1e      	ldr	r5, [pc, #120]	; (8001b3c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001ac4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ac6:	00da      	lsls	r2, r3, #3
{
 8001ac8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aca:	d518      	bpl.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001acc:	f7ff ffba 	bl	8001a44 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ad4:	d123      	bne.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ad6:	2c80      	cmp	r4, #128	; 0x80
 8001ad8:	d929      	bls.n	8001b2e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ada:	2ca0      	cmp	r4, #160	; 0xa0
 8001adc:	bf8c      	ite	hi
 8001ade:	2402      	movhi	r4, #2
 8001ae0:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ae2:	4917      	ldr	r1, [pc, #92]	; (8001b40 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001ae4:	680a      	ldr	r2, [r1, #0]
 8001ae6:	f022 0207 	bic.w	r2, r2, #7
 8001aea:	4322      	orrs	r2, r4
 8001aec:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aee:	6808      	ldr	r0, [r1, #0]
 8001af0:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001af4:	1b00      	subs	r0, r0, r4
 8001af6:	bf18      	it	ne
 8001af8:	2001      	movne	r0, #1
 8001afa:	b003      	add	sp, #12
 8001afc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b10:	f7ff ff98 	bl	8001a44 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b1c:	e7d8      	b.n	8001ad0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001b1e:	2c80      	cmp	r4, #128	; 0x80
 8001b20:	d807      	bhi.n	8001b32 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001b22:	d008      	beq.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001b24:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001b28:	425c      	negs	r4, r3
 8001b2a:	415c      	adcs	r4, r3
 8001b2c:	e7d9      	b.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b2e:	2400      	movs	r4, #0
 8001b30:	e7d7      	b.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b32:	2403      	movs	r4, #3
 8001b34:	e7d5      	b.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b36:	2402      	movs	r4, #2
 8001b38:	e7d3      	b.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40022000 	.word	0x40022000

08001b44 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001b46:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b48:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4a:	f012 020c 	ands.w	r2, r2, #12
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x18>
 8001b50:	2a0c      	cmp	r2, #12
 8001b52:	d115      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b54:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b58:	2901      	cmp	r1, #1
 8001b5a:	d118      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b5c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001b5e:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b62:	bf55      	itete	pl
 8001b64:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b68:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b6e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b72:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b76:	b34a      	cbz	r2, 8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b78:	2a0c      	cmp	r2, #12
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x4c>
 8001b7c:	2000      	movs	r0, #0
  return sysclockfreq;
 8001b7e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b80:	2a04      	cmp	r2, #4
 8001b82:	d022      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b84:	2a08      	cmp	r2, #8
 8001b86:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b88:	bf18      	it	ne
 8001b8a:	2000      	movne	r0, #0
 8001b8c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b8e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001b96:	2a02      	cmp	r2, #2
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x82>
 8001b9a:	490f      	ldr	r1, [pc, #60]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b9c:	2a03      	cmp	r2, #3
 8001b9e:	bf08      	it	eq
 8001ba0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba2:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001baa:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bac:	68d8      	ldr	r0, [r3, #12]
 8001bae:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb2:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bb6:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb8:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bba:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bbc:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001bc0:	fbb2 f0f0 	udiv	r0, r2, r0
 8001bc4:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc8:	e7eb      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08008488 	.word	0x08008488
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	00f42400 	.word	0x00f42400

08001be0 <HAL_RCC_OscConfig>:
{
 8001be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001be4:	4605      	mov	r5, r0
 8001be6:	b918      	cbnz	r0, 8001bf0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
}
 8001bea:	b003      	add	sp, #12
 8001bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf0:	4c92      	ldr	r4, [pc, #584]	; (8001e3c <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	d53d      	bpl.n	8001c80 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c04:	b11e      	cbz	r6, 8001c0e <HAL_RCC_OscConfig+0x2e>
 8001c06:	2e0c      	cmp	r6, #12
 8001c08:	d166      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c0a:	2f01      	cmp	r7, #1
 8001c0c:	d164      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	0798      	lsls	r0, r3, #30
 8001c12:	d502      	bpl.n	8001c1a <HAL_RCC_OscConfig+0x3a>
 8001c14:	69ab      	ldr	r3, [r5, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0e6      	beq.n	8001be8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	6a28      	ldr	r0, [r5, #32]
 8001c1e:	0719      	lsls	r1, r3, #28
 8001c20:	bf56      	itet	pl
 8001c22:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001c26:	6823      	ldrmi	r3, [r4, #0]
 8001c28:	091b      	lsrpl	r3, r3, #4
 8001c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2e:	4298      	cmp	r0, r3
 8001c30:	d93b      	bls.n	8001caa <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c32:	f7ff ff45 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d1d6      	bne.n	8001be8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	6a2a      	ldr	r2, [r5, #32]
 8001c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	6863      	ldr	r3, [r4, #4]
 8001c50:	69ea      	ldr	r2, [r5, #28]
 8001c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c5a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5c:	f7ff ff72 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001c60:	68a3      	ldr	r3, [r4, #8]
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x260>)
 8001c64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	40d8      	lsrs	r0, r3
 8001c70:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <HAL_RCC_OscConfig+0x264>)
 8001c72:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001c74:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <HAL_RCC_OscConfig+0x268>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	f7ff fc60 	bl	800153c <HAL_InitTick>
        if(status != HAL_OK)
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1b4      	bne.n	8001bea <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	07d8      	lsls	r0, r3, #31
 8001c84:	d45f      	bmi.n	8001d46 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	682b      	ldr	r3, [r5, #0]
 8001c88:	0799      	lsls	r1, r3, #30
 8001c8a:	f100 809e 	bmi.w	8001dca <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	0718      	lsls	r0, r3, #28
 8001c92:	f100 80db 	bmi.w	8001e4c <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	0759      	lsls	r1, r3, #29
 8001c9a:	f100 8101 	bmi.w	8001ea0 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 816a 	bne.w	8001f7a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e79f      	b.n	8001bea <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb8:	4303      	orrs	r3, r0
 8001cba:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	69ea      	ldr	r2, [r5, #28]
 8001cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cc8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d1c6      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cce:	f7ff fef7 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d0c2      	beq.n	8001c5c <HAL_RCC_OscConfig+0x7c>
 8001cd6:	e787      	b.n	8001be8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cd8:	69ab      	ldr	r3, [r5, #24]
 8001cda:	b31b      	cbz	r3, 8001d24 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fc72 	bl	80015cc <HAL_GetTick>
 8001ce8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	079a      	lsls	r2, r3, #30
 8001cee:	d511      	bpl.n	8001d14 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6023      	str	r3, [r4, #0]
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	6a2a      	ldr	r2, [r5, #32]
 8001cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d00:	4313      	orrs	r3, r2
 8001d02:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d04:	6863      	ldr	r3, [r4, #4]
 8001d06:	69ea      	ldr	r2, [r5, #28]
 8001d08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d10:	6063      	str	r3, [r4, #4]
 8001d12:	e7b5      	b.n	8001c80 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d14:	f7ff fc5a 	bl	80015cc <HAL_GetTick>
 8001d18:	eba0 0008 	sub.w	r0, r0, r8
 8001d1c:	2802      	cmp	r0, #2
 8001d1e:	d9e4      	bls.n	8001cea <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	e762      	b.n	8001bea <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fc4e 	bl	80015cc <HAL_GetTick>
 8001d30:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	079b      	lsls	r3, r3, #30
 8001d36:	d5a3      	bpl.n	8001c80 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d38:	f7ff fc48 	bl	80015cc <HAL_GetTick>
 8001d3c:	eba0 0008 	sub.w	r0, r0, r8
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9f6      	bls.n	8001d32 <HAL_RCC_OscConfig+0x152>
 8001d44:	e7ec      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d46:	2e08      	cmp	r6, #8
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_OscConfig+0x172>
 8001d4a:	2e0c      	cmp	r6, #12
 8001d4c:	d108      	bne.n	8001d60 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d4e:	2f03      	cmp	r7, #3
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	039a      	lsls	r2, r3, #14
 8001d56:	d596      	bpl.n	8001c86 <HAL_RCC_OscConfig+0xa6>
 8001d58:	686b      	ldr	r3, [r5, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d193      	bne.n	8001c86 <HAL_RCC_OscConfig+0xa6>
 8001d5e:	e743      	b.n	8001be8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	686b      	ldr	r3, [r5, #4]
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d110      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1aa>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d70:	f7ff fc2c 	bl	80015cc <HAL_GetTick>
 8001d74:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	039b      	lsls	r3, r3, #14
 8001d7a:	d484      	bmi.n	8001c86 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fc26 	bl	80015cc <HAL_GetTick>
 8001d80:	eba0 0008 	sub.w	r0, r0, r8
 8001d84:	2864      	cmp	r0, #100	; 0x64
 8001d86:	d9f6      	bls.n	8001d76 <HAL_RCC_OscConfig+0x196>
 8001d88:	e7ca      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8e:	d104      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1ba>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	e7e6      	b.n	8001d68 <HAL_RCC_OscConfig+0x188>
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001da0:	6022      	str	r2, [r4, #0]
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001da8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001dae:	f7ff fc0d 	bl	80015cc <HAL_GetTick>
 8001db2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	0398      	lsls	r0, r3, #14
 8001db8:	f57f af65 	bpl.w	8001c86 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fc06 	bl	80015cc <HAL_GetTick>
 8001dc0:	eba0 0008 	sub.w	r0, r0, r8
 8001dc4:	2864      	cmp	r0, #100	; 0x64
 8001dc6:	d9f5      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1d4>
 8001dc8:	e7aa      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dca:	2e04      	cmp	r6, #4
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
 8001dce:	2e0c      	cmp	r6, #12
 8001dd0:	d110      	bne.n	8001df4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dd2:	2f02      	cmp	r7, #2
 8001dd4:	d10e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	0559      	lsls	r1, r3, #21
 8001dda:	d503      	bpl.n	8001de4 <HAL_RCC_OscConfig+0x204>
 8001ddc:	68eb      	ldr	r3, [r5, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f43f af02 	beq.w	8001be8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	6863      	ldr	r3, [r4, #4]
 8001de6:	692a      	ldr	r2, [r5, #16]
 8001de8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001dec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001df0:	6063      	str	r3, [r4, #4]
 8001df2:	e74c      	b.n	8001c8e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	68eb      	ldr	r3, [r5, #12]
 8001df6:	b17b      	cbz	r3, 8001e18 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e00:	f7ff fbe4 	bl	80015cc <HAL_GetTick>
 8001e04:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	055a      	lsls	r2, r3, #21
 8001e0a:	d4eb      	bmi.n	8001de4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fbde 	bl	80015cc <HAL_GetTick>
 8001e10:	1bc0      	subs	r0, r0, r7
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f7      	bls.n	8001e06 <HAL_RCC_OscConfig+0x226>
 8001e16:	e783      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e20:	f7ff fbd4 	bl	80015cc <HAL_GetTick>
 8001e24:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	055b      	lsls	r3, r3, #21
 8001e2a:	f57f af30 	bpl.w	8001c8e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fbcd 	bl	80015cc <HAL_GetTick>
 8001e32:	1bc0      	subs	r0, r0, r7
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d9f6      	bls.n	8001e26 <HAL_RCC_OscConfig+0x246>
 8001e38:	e772      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08008470 	.word	0x08008470
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4c:	696b      	ldr	r3, [r5, #20]
 8001e4e:	b19b      	cbz	r3, 8001e78 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001e50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fbb6 	bl	80015cc <HAL_GetTick>
 8001e60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e66:	079a      	lsls	r2, r3, #30
 8001e68:	f53f af15 	bmi.w	8001c96 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbae 	bl	80015cc <HAL_GetTick>
 8001e70:	1bc0      	subs	r0, r0, r7
 8001e72:	2802      	cmp	r0, #2
 8001e74:	d9f5      	bls.n	8001e62 <HAL_RCC_OscConfig+0x282>
 8001e76:	e753      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001e78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e84:	f7ff fba2 	bl	80015cc <HAL_GetTick>
 8001e88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e8e:	079b      	lsls	r3, r3, #30
 8001e90:	f57f af01 	bpl.w	8001c96 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fb9a 	bl	80015cc <HAL_GetTick>
 8001e98:	1bc0      	subs	r0, r0, r7
 8001e9a:	2802      	cmp	r0, #2
 8001e9c:	d9f5      	bls.n	8001e8a <HAL_RCC_OscConfig+0x2aa>
 8001e9e:	e73f      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea2:	00df      	lsls	r7, r3, #3
 8001ea4:	d429      	bmi.n	8001efa <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001eb8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4f85      	ldr	r7, [pc, #532]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	05d8      	lsls	r0, r3, #23
 8001ec2:	d51d      	bpl.n	8001f00 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	68ab      	ldr	r3, [r5, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d12b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x342>
 8001eca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb79 	bl	80015cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ede:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ee4:	079a      	lsls	r2, r3, #30
 8001ee6:	d542      	bpl.n	8001f6e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001ee8:	f1b8 0f00 	cmp.w	r8, #0
 8001eec:	f43f aed7 	beq.w	8001c9e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ef8:	e6d1      	b.n	8001c9e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	f04f 0800 	mov.w	r8, #0
 8001efe:	e7dd      	b.n	8001ebc <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f08:	f7ff fb60 	bl	80015cc <HAL_GetTick>
 8001f0c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	05d9      	lsls	r1, r3, #23
 8001f12:	d4d7      	bmi.n	8001ec4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff fb5a 	bl	80015cc <HAL_GetTick>
 8001f18:	eba0 0009 	sub.w	r0, r0, r9
 8001f1c:	2802      	cmp	r0, #2
 8001f1e:	d9f6      	bls.n	8001f0e <HAL_RCC_OscConfig+0x32e>
 8001f20:	e6fe      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x354>
 8001f26:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001f32:	e7ca      	b.n	8001eca <HAL_RCC_OscConfig+0x2ea>
 8001f34:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001f40:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f44:	f022 0204 	bic.w	r2, r2, #4
 8001f48:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1c2      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb3c 	bl	80015cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f5e:	079b      	lsls	r3, r3, #30
 8001f60:	d5c2      	bpl.n	8001ee8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fb33 	bl	80015cc <HAL_GetTick>
 8001f66:	1bc0      	subs	r0, r0, r7
 8001f68:	4548      	cmp	r0, r9
 8001f6a:	d9f6      	bls.n	8001f5a <HAL_RCC_OscConfig+0x37a>
 8001f6c:	e6d8      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff fb2d 	bl	80015cc <HAL_GetTick>
 8001f72:	1bc0      	subs	r0, r0, r7
 8001f74:	4548      	cmp	r0, r9
 8001f76:	d9b3      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x300>
 8001f78:	e6d2      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 808f 	bne.w	800209e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001f80:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001f84:	f003 0103 	and.w	r1, r3, #3
 8001f88:	4291      	cmp	r1, r2
 8001f8a:	d124      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001f8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f92:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001f98:	d11d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001fa4:	d117      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fa6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001fa8:	3a07      	subs	r2, #7
 8001faa:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001fae:	bf18      	it	ne
 8001fb0:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb2:	4291      	cmp	r1, r2
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001fb8:	0852      	lsrs	r2, r2, #1
 8001fba:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001fbe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fc8:	0852      	lsrs	r2, r2, #1
 8001fca:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001fce:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001fd4:	d04a      	beq.n	800206c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd6:	2e0c      	cmp	r6, #12
 8001fd8:	f43f ae06 	beq.w	8001be8 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	015f      	lsls	r7, r3, #5
 8001fe0:	f53f ae02 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	00de      	lsls	r6, r3, #3
 8001fe8:	f53f adfe 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001ff4:	f7ff faea 	bl	80015cc <HAL_GetTick>
 8001ff8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	0198      	lsls	r0, r3, #6
 8001ffe:	d42f      	bmi.n	8002060 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	68e2      	ldr	r2, [r4, #12]
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_RCC_OscConfig+0x4f8>)
 8002004:	4013      	ands	r3, r2
 8002006:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002008:	4313      	orrs	r3, r2
 800200a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800200c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002010:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002012:	3a01      	subs	r2, #1
 8002014:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002018:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800201a:	0912      	lsrs	r2, r2, #4
 800201c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002020:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	3a01      	subs	r2, #1
 8002026:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800202a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800202c:	0852      	lsrs	r2, r2, #1
 800202e:	3a01      	subs	r2, #1
 8002030:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002034:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203c:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800203e:	68e3      	ldr	r3, [r4, #12]
 8002040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002044:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002046:	f7ff fac1 	bl	80015cc <HAL_GetTick>
 800204a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	0199      	lsls	r1, r3, #6
 8002050:	f53f ae29 	bmi.w	8001ca6 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff faba 	bl	80015cc <HAL_GetTick>
 8002058:	1b40      	subs	r0, r0, r5
 800205a:	2802      	cmp	r0, #2
 800205c:	d9f6      	bls.n	800204c <HAL_RCC_OscConfig+0x46c>
 800205e:	e65f      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fab4 	bl	80015cc <HAL_GetTick>
 8002064:	1b80      	subs	r0, r0, r6
 8002066:	2802      	cmp	r0, #2
 8002068:	d9c7      	bls.n	8001ffa <HAL_RCC_OscConfig+0x41a>
 800206a:	e659      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	019a      	lsls	r2, r3, #6
 8002070:	f53f ae19 	bmi.w	8001ca6 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	68e3      	ldr	r3, [r4, #12]
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002084:	f7ff faa2 	bl	80015cc <HAL_GetTick>
 8002088:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	f53f ae0a 	bmi.w	8001ca6 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa9b 	bl	80015cc <HAL_GetTick>
 8002096:	1b40      	subs	r0, r0, r5
 8002098:	2802      	cmp	r0, #2
 800209a:	d9f6      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
 800209c:	e640      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209e:	2e0c      	cmp	r6, #12
 80020a0:	f43f ada2 	beq.w	8001be8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa8e 	bl	80015cc <HAL_GetTick>
 80020b0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020ba:	68e1      	ldr	r1, [r4, #12]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_RCC_OscConfig+0x4fc>)
 80020be:	400a      	ands	r2, r1
 80020c0:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80020c2:	4618      	mov	r0, r3
 80020c4:	e591      	b.n	8001bea <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff fa81 	bl	80015cc <HAL_GetTick>
 80020ca:	1b40      	subs	r0, r0, r5
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d9f0      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4d2>
 80020d0:	e626      	b.n	8001d20 <HAL_RCC_OscConfig+0x140>
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000
 80020d8:	f99d808c 	.word	0xf99d808c
 80020dc:	feeefffc 	.word	0xfeeefffc

080020e0 <HAL_RCC_ClockConfig>:
{
 80020e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020e6:	4604      	mov	r4, r0
 80020e8:	b910      	cbnz	r0, 80020f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
}
 80020ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_RCC_ClockConfig+0x140>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d32c      	bcc.n	8002156 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	6821      	ldr	r1, [r4, #0]
 80020fe:	0788      	lsls	r0, r1, #30
 8002100:	d434      	bmi.n	800216c <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	07c9      	lsls	r1, r1, #31
 8002104:	d43f      	bmi.n	8002186 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002106:	6821      	ldr	r1, [r4, #0]
 8002108:	078a      	lsls	r2, r1, #30
 800210a:	d468      	bmi.n	80021de <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_RCC_ClockConfig+0x140>)
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	42ab      	cmp	r3, r5
 8002116:	d86f      	bhi.n	80021f8 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	f011 0f04 	tst.w	r1, #4
 800211c:	4d41      	ldr	r5, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x144>)
 800211e:	d177      	bne.n	8002210 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	070b      	lsls	r3, r1, #28
 8002122:	d506      	bpl.n	8002132 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002124:	68ab      	ldr	r3, [r5, #8]
 8002126:	6922      	ldr	r2, [r4, #16]
 8002128:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800212c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002130:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002132:	f7ff fd07 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8002136:	68ab      	ldr	r3, [r5, #8]
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_ClockConfig+0x148>)
 800213a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800213e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	40d8      	lsrs	r0, r3
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_RCC_ClockConfig+0x14c>)
 800214c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_RCC_ClockConfig+0x150>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f7ff b9f3 	b.w	800153c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	430b      	orrs	r3, r1
 800215e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	428b      	cmp	r3, r1
 8002168:	d1bf      	bne.n	80020ea <HAL_RCC_ClockConfig+0xa>
 800216a:	e7c7      	b.n	80020fc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800216c:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x144>)
 800216e:	68a0      	ldr	r0, [r4, #8]
 8002170:	6893      	ldr	r3, [r2, #8]
 8002172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002176:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	bf81      	itttt	hi
 800217a:	6893      	ldrhi	r3, [r2, #8]
 800217c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002180:	4303      	orrhi	r3, r0
 8002182:	6093      	strhi	r3, [r2, #8]
 8002184:	e7bd      	b.n	8002102 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	6862      	ldr	r2, [r4, #4]
 8002188:	4e26      	ldr	r6, [pc, #152]	; (8002224 <HAL_RCC_ClockConfig+0x144>)
 800218a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	d11a      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002194:	d0a9      	beq.n	80020ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002196:	68b3      	ldr	r3, [r6, #8]
 8002198:	f023 0303 	bic.w	r3, r3, #3
 800219c:	4313      	orrs	r3, r2
 800219e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021a0:	f7ff fa14 	bl	80015cc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021a8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	68b3      	ldr	r3, [r6, #8]
 80021ac:	6862      	ldr	r2, [r4, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021b6:	d0a6      	beq.n	8002106 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa08 	bl	80015cc <HAL_GetTick>
 80021bc:	1bc0      	subs	r0, r0, r7
 80021be:	4540      	cmp	r0, r8
 80021c0:	d9f3      	bls.n	80021aa <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80021c2:	2003      	movs	r0, #3
 80021c4:	e792      	b.n	80020ec <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	2a02      	cmp	r2, #2
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021ce:	e7e1      	b.n	8002194 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d0:	b912      	cbnz	r2, 80021d8 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d2:	f013 0f02 	tst.w	r3, #2
 80021d6:	e7dd      	b.n	8002194 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021dc:	e7da      	b.n	8002194 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_RCC_ClockConfig+0x144>)
 80021e0:	68a0      	ldr	r0, [r4, #8]
 80021e2:	6893      	ldr	r3, [r2, #8]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ea:	bf3f      	itttt	cc
 80021ec:	6893      	ldrcc	r3, [r2, #8]
 80021ee:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80021f2:	4303      	orrcc	r3, r0
 80021f4:	6093      	strcc	r3, [r2, #8]
 80021f6:	e789      	b.n	800210c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	432b      	orrs	r3, r5
 8002200:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	42ab      	cmp	r3, r5
 800220a:	f47f af6e 	bne.w	80020ea <HAL_RCC_ClockConfig+0xa>
 800220e:	e783      	b.n	8002118 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	68ab      	ldr	r3, [r5, #8]
 8002212:	68e2      	ldr	r2, [r4, #12]
 8002214:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002218:	4313      	orrs	r3, r2
 800221a:	60ab      	str	r3, [r5, #8]
 800221c:	e780      	b.n	8002120 <HAL_RCC_ClockConfig+0x40>
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	08008470 	.word	0x08008470
 800222c:	20000000 	.word	0x20000000
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002236:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002242:	6810      	ldr	r0, [r2, #0]
 8002244:	f003 031f 	and.w	r3, r3, #31
}
 8002248:	40d8      	lsrs	r0, r3
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000
 8002250:	08008480 	.word	0x08008480
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x18>)
 800225a:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	f003 031f 	and.w	r3, r3, #31
}
 800226c:	40d8      	lsrs	r0, r3
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	08008480 	.word	0x08008480
 8002278:	20000000 	.word	0x20000000

0800227c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800227e:	4c42      	ldr	r4, [pc, #264]	; (8002388 <RCCEx_PLLSAI1_Config+0x10c>)
 8002280:	68e2      	ldr	r2, [r4, #12]
 8002282:	0793      	lsls	r3, r2, #30
{
 8002284:	4605      	mov	r5, r0
 8002286:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002288:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800228a:	d029      	beq.n	80022e0 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800228c:	68e2      	ldr	r2, [r4, #12]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	4282      	cmp	r2, r0
 8002294:	d13c      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8002296:	2a00      	cmp	r2, #0
 8002298:	d03a      	beq.n	8002310 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800229a:	68e3      	ldr	r3, [r4, #12]
       ||
 800229c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800229e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022a2:	3301      	adds	r3, #1
       ||
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d133      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7ff f98c 	bl	80015cc <HAL_GetTick>
 80022b4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	011a      	lsls	r2, r3, #4
 80022ba:	d432      	bmi.n	8002322 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022bc:	68aa      	ldr	r2, [r5, #8]
 80022be:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	d035      	beq.n	8002330 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022c4:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022c6:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80022c8:	d14d      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022ca:	6929      	ldr	r1, [r5, #16]
 80022cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022d0:	0849      	lsrs	r1, r1, #1
 80022d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022d6:	3901      	subs	r1, #1
 80022d8:	4313      	orrs	r3, r2
 80022da:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80022de:	e031      	b.n	8002344 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 80022e0:	2802      	cmp	r0, #2
 80022e2:	d011      	beq.n	8002308 <RCCEx_PLLSAI1_Config+0x8c>
 80022e4:	2803      	cmp	r0, #3
 80022e6:	d015      	beq.n	8002314 <RCCEx_PLLSAI1_Config+0x98>
 80022e8:	2801      	cmp	r0, #1
 80022ea:	d111      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	0797      	lsls	r7, r2, #30
 80022f0:	d51d      	bpl.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022f2:	68e2      	ldr	r2, [r4, #12]
 80022f4:	6869      	ldr	r1, [r5, #4]
 80022f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80022fa:	3901      	subs	r1, #1
 80022fc:	ea42 0300 	orr.w	r3, r2, r0
 8002300:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002304:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002306:	e7cf      	b.n	80022a8 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800230e:	d1f0      	bne.n	80022f2 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8002310:	2001      	movs	r0, #1
 8002312:	e00c      	b.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	0391      	lsls	r1, r2, #14
 8002318:	d4eb      	bmi.n	80022f2 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002320:	e7f5      	b.n	800230e <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002322:	f7ff f953 	bl	80015cc <HAL_GetTick>
 8002326:	1bc0      	subs	r0, r0, r7
 8002328:	2802      	cmp	r0, #2
 800232a:	d9c4      	bls.n	80022b6 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 800232c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	68e9      	ldr	r1, [r5, #12]
 8002334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	0909      	lsrs	r1, r1, #4
 800233e:	4313      	orrs	r3, r2
 8002340:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002344:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800234c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800234e:	f7ff f93d 	bl	80015cc <HAL_GetTick>
 8002352:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	d510      	bpl.n	800237c <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800235a:	6923      	ldr	r3, [r4, #16]
 800235c:	69aa      	ldr	r2, [r5, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	6123      	str	r3, [r4, #16]
 8002362:	2000      	movs	r0, #0
  return status;
 8002364:	e7e3      	b.n	800232e <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002366:	6969      	ldr	r1, [r5, #20]
 8002368:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800236c:	0849      	lsrs	r1, r1, #1
 800236e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002372:	3901      	subs	r1, #1
 8002374:	4313      	orrs	r3, r2
 8002376:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800237a:	e7e3      	b.n	8002344 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800237c:	f7ff f926 	bl	80015cc <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	2802      	cmp	r0, #2
 8002384:	d9e6      	bls.n	8002354 <RCCEx_PLLSAI1_Config+0xd8>
 8002386:	e7d1      	b.n	800232c <RCCEx_PLLSAI1_Config+0xb0>
 8002388:	40021000 	.word	0x40021000

0800238c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800238e:	4c3b      	ldr	r4, [pc, #236]	; (800247c <RCCEx_PLLSAI2_Config+0xf0>)
 8002390:	68e2      	ldr	r2, [r4, #12]
 8002392:	0793      	lsls	r3, r2, #30
{
 8002394:	4605      	mov	r5, r0
 8002396:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002398:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800239a:	d026      	beq.n	80023ea <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800239c:	68e2      	ldr	r2, [r4, #12]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	4282      	cmp	r2, r0
 80023a4:	d139      	bne.n	800241a <RCCEx_PLLSAI2_Config+0x8e>
       ||
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d037      	beq.n	800241a <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023aa:	68e3      	ldr	r3, [r4, #12]
       ||
 80023ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023b2:	3301      	adds	r3, #1
       ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d130      	bne.n	800241a <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7ff f904 	bl	80015cc <HAL_GetTick>
 80023c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	d42f      	bmi.n	800242c <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023cc:	68a9      	ldr	r1, [r5, #8]
 80023ce:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 80023d0:	b39e      	cbz	r6, 800243a <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023d2:	6963      	ldr	r3, [r4, #20]
 80023d4:	692a      	ldr	r2, [r5, #16]
 80023d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023da:	0852      	lsrs	r2, r2, #1
 80023dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023e0:	3a01      	subs	r2, #1
 80023e2:	430b      	orrs	r3, r1
 80023e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80023e8:	e031      	b.n	800244e <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80023ea:	2802      	cmp	r0, #2
 80023ec:	d011      	beq.n	8002412 <RCCEx_PLLSAI2_Config+0x86>
 80023ee:	2803      	cmp	r0, #3
 80023f0:	d015      	beq.n	800241e <RCCEx_PLLSAI2_Config+0x92>
 80023f2:	2801      	cmp	r0, #1
 80023f4:	d111      	bne.n	800241a <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	0797      	lsls	r7, r2, #30
 80023fa:	d51d      	bpl.n	8002438 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023fc:	68e2      	ldr	r2, [r4, #12]
 80023fe:	6869      	ldr	r1, [r5, #4]
 8002400:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002404:	3901      	subs	r1, #1
 8002406:	ea42 0300 	orr.w	r3, r2, r0
 800240a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800240e:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8002410:	e7d2      	b.n	80023b8 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002418:	d1f0      	bne.n	80023fc <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 800241a:	2001      	movs	r0, #1
 800241c:	e00c      	b.n	8002438 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	0391      	lsls	r1, r2, #14
 8002422:	d4eb      	bmi.n	80023fc <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800242a:	e7f5      	b.n	8002418 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800242c:	f7ff f8ce 	bl	80015cc <HAL_GetTick>
 8002430:	1bc0      	subs	r0, r0, r7
 8002432:	2802      	cmp	r0, #2
 8002434:	d9c7      	bls.n	80023c6 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 8002436:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800243a:	6963      	ldr	r3, [r4, #20]
 800243c:	68ea      	ldr	r2, [r5, #12]
 800243e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002446:	0912      	lsrs	r2, r2, #4
 8002448:	430b      	orrs	r3, r1
 800244a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800244e:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002458:	f7ff f8b8 	bl	80015cc <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	d505      	bpl.n	8002470 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002464:	6963      	ldr	r3, [r4, #20]
 8002466:	696a      	ldr	r2, [r5, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	6163      	str	r3, [r4, #20]
 800246c:	2000      	movs	r0, #0
  return status;
 800246e:	e7e3      	b.n	8002438 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002470:	f7ff f8ac 	bl	80015cc <HAL_GetTick>
 8002474:	1b80      	subs	r0, r0, r6
 8002476:	2802      	cmp	r0, #2
 8002478:	d9f1      	bls.n	800245e <RCCEx_PLLSAI2_Config+0xd2>
 800247a:	e7dc      	b.n	8002436 <RCCEx_PLLSAI2_Config+0xaa>
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002480:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002484:	6806      	ldr	r6, [r0, #0]
 8002486:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800248a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800248c:	d009      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800248e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002490:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002494:	d022      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002496:	d813      	bhi.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002498:	b331      	cbz	r1, 80024e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800249a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800249e:	d02a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024a0:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	04d8      	lsls	r0, r3, #19
 80024a6:	d509      	bpl.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80024a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80024aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80024ae:	d02c      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80024b0:	d826      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80024b2:	b381      	cbz	r1, 8002516 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80024b4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80024b8:	d072      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80024ba:	2601      	movs	r6, #1
 80024bc:	4635      	mov	r5, r6
 80024be:	e039      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80024c0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80024c4:	d1ec      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80024c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80024ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024d2:	430b      	orrs	r3, r1
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80024d8:	2600      	movs	r6, #0
 80024da:	e7e2      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024dc:	4a36      	ldr	r2, [pc, #216]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80024de:	68d3      	ldr	r3, [r2, #12]
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80024e6:	e7ee      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024e8:	3004      	adds	r0, #4
 80024ea:	f7ff fec7 	bl	800227c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d1d6      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80024f4:	e7e7      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024f6:	2100      	movs	r1, #0
 80024f8:	3020      	adds	r0, #32
 80024fa:	f7ff ff47 	bl	800238c <RCCEx_PLLSAI2_Config>
 80024fe:	e7f6      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002500:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002504:	d1d9      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002506:	4635      	mov	r5, r6
 8002508:	e009      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800250a:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800250c:	68d3      	ldr	r3, [r2, #12]
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	60d3      	str	r3, [r2, #12]
      break;
 8002514:	e7f7      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002516:	1d20      	adds	r0, r4, #4
 8002518:	f7ff feb0 	bl	800227c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800251c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800251e:	2d00      	cmp	r5, #0
 8002520:	d144      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002524:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002526:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800252a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800252e:	430b      	orrs	r3, r1
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	0399      	lsls	r1, r3, #14
 8002538:	f140 815d 	bpl.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800253c:	4f1e      	ldr	r7, [pc, #120]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800253e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002540:	00da      	lsls	r2, r3, #3
 8002542:	d435      	bmi.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	65bb      	str	r3, [r7, #88]	; 0x58
 800254c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002556:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80025bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800255e:	f8d9 3000 	ldr.w	r3, [r9]
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800256a:	f7ff f82f 	bl	80015cc <HAL_GetTick>
 800256e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002570:	f8d9 3000 	ldr.w	r3, [r9]
 8002574:	05db      	lsls	r3, r3, #23
 8002576:	d523      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002578:	bb4d      	cbnz	r5, 80025ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800257a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002582:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002586:	f040 810e 	bne.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800258e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800259c:	4635      	mov	r5, r6
 800259e:	e016      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a0:	2100      	movs	r1, #0
 80025a2:	f104 0020 	add.w	r0, r4, #32
 80025a6:	f7ff fef1 	bl	800238c <RCCEx_PLLSAI2_Config>
 80025aa:	e7b7      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80025ac:	462e      	mov	r6, r5
 80025ae:	e7c1      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80025b0:	f04f 0800 	mov.w	r8, #0
 80025b4:	e7d1      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7ff f804 	bl	80015cc <HAL_GetTick>
 80025c4:	eba0 000a 	sub.w	r0, r0, sl
 80025c8:	2802      	cmp	r0, #2
 80025ca:	d9d1      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80025cc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80025ce:	f1b8 0f00 	cmp.w	r8, #0
 80025d2:	d003      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025da:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	07da      	lsls	r2, r3, #31
 80025e0:	d508      	bpl.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e2:	499b      	ldr	r1, [pc, #620]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ea:	f022 0203 	bic.w	r2, r2, #3
 80025ee:	4302      	orrs	r2, r0
 80025f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f4:	079f      	lsls	r7, r3, #30
 80025f6:	d508      	bpl.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f8:	4995      	ldr	r1, [pc, #596]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80025fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80025fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002600:	f022 020c 	bic.w	r2, r2, #12
 8002604:	4302      	orrs	r2, r0
 8002606:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260a:	075e      	lsls	r6, r3, #29
 800260c:	d508      	bpl.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800260e:	4990      	ldr	r1, [pc, #576]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002610:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002612:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002616:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800261a:	4302      	orrs	r2, r0
 800261c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002620:	0718      	lsls	r0, r3, #28
 8002622:	d508      	bpl.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002624:	498a      	ldr	r1, [pc, #552]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002626:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002628:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800262c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002630:	4302      	orrs	r2, r0
 8002632:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002636:	06d9      	lsls	r1, r3, #27
 8002638:	d508      	bpl.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800263a:	4985      	ldr	r1, [pc, #532]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800263c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800263e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002642:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002646:	4302      	orrs	r2, r0
 8002648:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800264c:	069a      	lsls	r2, r3, #26
 800264e:	d508      	bpl.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	497f      	ldr	r1, [pc, #508]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002652:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002654:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002658:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800265c:	4302      	orrs	r2, r0
 800265e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002662:	059f      	lsls	r7, r3, #22
 8002664:	d508      	bpl.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002666:	497a      	ldr	r1, [pc, #488]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002668:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800266a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800266e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002672:	4302      	orrs	r2, r0
 8002674:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002678:	055e      	lsls	r6, r3, #21
 800267a:	d508      	bpl.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800267c:	4974      	ldr	r1, [pc, #464]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800267e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002680:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002684:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002688:	4302      	orrs	r2, r0
 800268a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268e:	0658      	lsls	r0, r3, #25
 8002690:	d508      	bpl.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002692:	496f      	ldr	r1, [pc, #444]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002694:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002696:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800269a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800269e:	4302      	orrs	r2, r0
 80026a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a4:	0619      	lsls	r1, r3, #24
 80026a6:	d508      	bpl.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4969      	ldr	r1, [pc, #420]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80026aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80026b4:	4302      	orrs	r2, r0
 80026b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ba:	05da      	lsls	r2, r3, #23
 80026bc:	d508      	bpl.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026be:	4964      	ldr	r1, [pc, #400]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80026c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80026ca:	4302      	orrs	r2, r0
 80026cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026d0:	049b      	lsls	r3, r3, #18
 80026d2:	d510      	bpl.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d4:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80026d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80026d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80026e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ea:	f040 8086 	bne.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ee:	68d3      	ldr	r3, [r2, #12]
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	031f      	lsls	r7, r3, #12
 80026fa:	d50f      	bpl.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026fc:	4a54      	ldr	r2, [pc, #336]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80026fe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002700:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002704:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002708:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800270a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002712:	d17e      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	68d3      	ldr	r3, [r2, #12]
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	035e      	lsls	r6, r3, #13
 8002720:	d50f      	bpl.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002722:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002724:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002726:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800272a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800272e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002730:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002738:	d176      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273a:	68d3      	ldr	r3, [r2, #12]
 800273c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002740:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	0458      	lsls	r0, r3, #17
 8002746:	d512      	bpl.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002748:	4941      	ldr	r1, [pc, #260]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800274a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800274c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002750:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002754:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002756:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800275e:	d16e      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002760:	2102      	movs	r1, #2
 8002762:	1d20      	adds	r0, r4, #4
 8002764:	f7ff fd8a 	bl	800227c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002768:	2800      	cmp	r0, #0
 800276a:	bf18      	it	ne
 800276c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	0411      	lsls	r1, r2, #16
 8002772:	d508      	bpl.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002774:	4936      	ldr	r1, [pc, #216]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002776:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002778:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800277c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002780:	4303      	orrs	r3, r0
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002786:	03d3      	lsls	r3, r2, #15
 8002788:	d509      	bpl.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800278a:	4a31      	ldr	r2, [pc, #196]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800278c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002798:	430b      	orrs	r3, r1
 800279a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800279e:	4628      	mov	r0, r5
 80027a0:	b002      	add	sp, #8
 80027a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	f43f aeef 	beq.w	800258a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c8:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80027ce:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d2:	f57f aeda 	bpl.w	800258a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 80027d6:	f7fe fef9 	bl	80015cc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80027de:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027e4:	0799      	lsls	r1, r3, #30
 80027e6:	f53f aed0 	bmi.w	800258a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe feef 	bl	80015cc <HAL_GetTick>
 80027ee:	1b40      	subs	r0, r0, r5
 80027f0:	4548      	cmp	r0, r9
 80027f2:	d9f5      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80027f4:	e6ea      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027f6:	4635      	mov	r5, r6
 80027f8:	e6f0      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027fa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027fe:	f47f af7a 	bne.w	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002802:	2101      	movs	r1, #1
 8002804:	1d20      	adds	r0, r4, #4
 8002806:	f7ff fd39 	bl	800227c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800280a:	2800      	cmp	r0, #0
 800280c:	bf18      	it	ne
 800280e:	4605      	movne	r5, r0
 8002810:	e771      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002812:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002816:	d181      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002818:	2101      	movs	r1, #1
 800281a:	1d20      	adds	r0, r4, #4
 800281c:	f7ff fd2e 	bl	800227c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002820:	2800      	cmp	r0, #0
 8002822:	bf18      	it	ne
 8002824:	4605      	movne	r5, r0
 8002826:	e779      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002828:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800282c:	d189      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	2101      	movs	r1, #1
 8002830:	1d20      	adds	r0, r4, #4
 8002832:	f7ff fd23 	bl	800227c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002836:	2800      	cmp	r0, #0
 8002838:	bf18      	it	ne
 800283a:	4605      	movne	r5, r0
 800283c:	e781      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800283e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002842:	d194      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002844:	2102      	movs	r1, #2
 8002846:	f104 0020 	add.w	r0, r4, #32
 800284a:	f7ff fd9f 	bl	800238c <RCCEx_PLLSAI2_Config>
 800284e:	e78b      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002850:	40021000 	.word	0x40021000

08002854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002858:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800285a:	6921      	ldr	r1, [r4, #16]
 800285c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800285e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002860:	69c0      	ldr	r0, [r0, #28]
 8002862:	430a      	orrs	r2, r1
 8002864:	6961      	ldr	r1, [r4, #20]
 8002866:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002868:	498f      	ldr	r1, [pc, #572]	; (8002aa8 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800286c:	4029      	ands	r1, r5
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68e1      	ldr	r1, [r4, #12]
 8002876:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800287e:	4a8b      	ldr	r2, [pc, #556]	; (8002aac <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002880:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002882:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002884:	bf1c      	itt	ne
 8002886:	6a22      	ldrne	r2, [r4, #32]
 8002888:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002894:	4a86      	ldr	r2, [pc, #536]	; (8002ab0 <UART_SetConfig+0x25c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d117      	bne.n	80028ca <UART_SetConfig+0x76>
 800289a:	4b86      	ldr	r3, [pc, #536]	; (8002ab4 <UART_SetConfig+0x260>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f200 80cf 	bhi.w	8002a4a <UART_SetConfig+0x1f6>
 80028ac:	4a82      	ldr	r2, [pc, #520]	; (8002ab8 <UART_SetConfig+0x264>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028b4:	f040 8099 	bne.w	80029ea <UART_SetConfig+0x196>
  {
    switch (clocksource)
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d822      	bhi.n	8002902 <UART_SetConfig+0xae>
 80028bc:	e8df f003 	tbb	[pc, r3]
 80028c0:	2193c8d9 	.word	0x2193c8d9
 80028c4:	212121ce 	.word	0x212121ce
 80028c8:	dd          	.byte	0xdd
 80028c9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ca:	4a7c      	ldr	r2, [pc, #496]	; (8002abc <UART_SetConfig+0x268>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d106      	bne.n	80028de <UART_SetConfig+0x8a>
 80028d0:	4b78      	ldr	r3, [pc, #480]	; (8002ab4 <UART_SetConfig+0x260>)
 80028d2:	4a7b      	ldr	r2, [pc, #492]	; (8002ac0 <UART_SetConfig+0x26c>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	e7e7      	b.n	80028ae <UART_SetConfig+0x5a>
 80028de:	4a79      	ldr	r2, [pc, #484]	; (8002ac4 <UART_SetConfig+0x270>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d119      	bne.n	8002918 <UART_SetConfig+0xc4>
 80028e4:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <UART_SetConfig+0x260>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	f000 80b7 	beq.w	8002a62 <UART_SetConfig+0x20e>
 80028f4:	d807      	bhi.n	8002906 <UART_SetConfig+0xb2>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80b8 	beq.w	8002a6c <UART_SetConfig+0x218>
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	f000 80aa 	beq.w	8002a56 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002902:	2001      	movs	r0, #1
 8002904:	e04e      	b.n	80029a4 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	2b30      	cmp	r3, #48	; 0x30
 8002908:	d1fb      	bne.n	8002902 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800290e:	f000 80b4 	beq.w	8002a7a <UART_SetConfig+0x226>
 8002912:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002916:	e083      	b.n	8002a20 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002918:	4a6b      	ldr	r2, [pc, #428]	; (8002ac8 <UART_SetConfig+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10f      	bne.n	800293e <UART_SetConfig+0xea>
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <UART_SetConfig+0x260>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	f000 809a 	beq.w	8002a62 <UART_SetConfig+0x20e>
 800292e:	d804      	bhi.n	800293a <UART_SetConfig+0xe6>
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 809b 	beq.w	8002a6c <UART_SetConfig+0x218>
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	e7e1      	b.n	80028fe <UART_SetConfig+0xaa>
 800293a:	2bc0      	cmp	r3, #192	; 0xc0
 800293c:	e7e4      	b.n	8002908 <UART_SetConfig+0xb4>
 800293e:	4a63      	ldr	r2, [pc, #396]	; (8002acc <UART_SetConfig+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d112      	bne.n	800296a <UART_SetConfig+0x116>
 8002944:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <UART_SetConfig+0x260>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002952:	f000 8086 	beq.w	8002a62 <UART_SetConfig+0x20e>
 8002956:	d805      	bhi.n	8002964 <UART_SetConfig+0x110>
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8087 	beq.w	8002a6c <UART_SetConfig+0x218>
 800295e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002962:	e7cc      	b.n	80028fe <UART_SetConfig+0xaa>
 8002964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002968:	e7ce      	b.n	8002908 <UART_SetConfig+0xb4>
 800296a:	4a50      	ldr	r2, [pc, #320]	; (8002aac <UART_SetConfig+0x258>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d1c8      	bne.n	8002902 <UART_SetConfig+0xae>
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <UART_SetConfig+0x260>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800297a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800297e:	d015      	beq.n	80029ac <UART_SetConfig+0x158>
 8002980:	d806      	bhi.n	8002990 <UART_SetConfig+0x13c>
 8002982:	b15b      	cbz	r3, 800299c <UART_SetConfig+0x148>
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d1bb      	bne.n	8002902 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 800298a:	f7ff f8db 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
        break;
 800298e:	e007      	b.n	80029a0 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002994:	d1b5      	bne.n	8002902 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002996:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800299a:	e008      	b.n	80029ae <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800299c:	f7ff fc4a 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80029a0:	b928      	cbnz	r0, 80029ae <UART_SetConfig+0x15a>
 80029a2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80029a6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80029ac:	4848      	ldr	r0, [pc, #288]	; (8002ad0 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80029b4:	4283      	cmp	r3, r0
 80029b6:	d8a4      	bhi.n	8002902 <UART_SetConfig+0xae>
 80029b8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80029bc:	d8a1      	bhi.n	8002902 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029be:	0851      	lsrs	r1, r2, #1
 80029c0:	2500      	movs	r5, #0
 80029c2:	468c      	mov	ip, r1
 80029c4:	f44f 7680 	mov.w	r6, #256	; 0x100
 80029c8:	4629      	mov	r1, r5
 80029ca:	fbe0 c106 	umlal	ip, r1, r0, r6
 80029ce:	462b      	mov	r3, r5
 80029d0:	4660      	mov	r0, ip
 80029d2:	f7fe f939 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <UART_SetConfig+0x280>)
 80029d8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80029dc:	429a      	cmp	r2, r3
 80029de:	d890      	bhi.n	8002902 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	60d8      	str	r0, [r3, #12]
 80029e4:	e7dd      	b.n	80029a2 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80029e6:	483a      	ldr	r0, [pc, #232]	; (8002ad0 <UART_SetConfig+0x27c>)
 80029e8:	e047      	b.n	8002a7a <UART_SetConfig+0x226>
    switch (clocksource)
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d889      	bhi.n	8002902 <UART_SetConfig+0xae>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <UART_SetConfig+0x1a0>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a19 	.word	0x08002a19
 80029f8:	08002a3f 	.word	0x08002a3f
 80029fc:	08002a69 	.word	0x08002a69
 8002a00:	08002903 	.word	0x08002903
 8002a04:	08002a45 	.word	0x08002a45
 8002a08:	08002903 	.word	0x08002903
 8002a0c:	08002903 	.word	0x08002903
 8002a10:	08002903 	.word	0x08002903
 8002a14:	08002913 	.word	0x08002913
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a18:	f7ff fc0c 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d0c0      	beq.n	80029a2 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a20:	6862      	ldr	r2, [r4, #4]
 8002a22:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002a26:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a2a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002a2e:	f1a3 0110 	sub.w	r1, r3, #16
 8002a32:	4291      	cmp	r1, r2
 8002a34:	f63f af65 	bhi.w	8002902 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	60d3      	str	r3, [r2, #12]
 8002a3c:	e7b1      	b.n	80029a2 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3e:	f7ff fc0b 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
        break;
 8002a42:	e7eb      	b.n	8002a1c <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a44:	f7ff f87e 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
        break;
 8002a48:	e7e8      	b.n	8002a1c <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a4e:	d1f6      	bne.n	8002a3e <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a50:	f7ff fc02 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
        break;
 8002a54:	e00f      	b.n	8002a76 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a5a:	d1f3      	bne.n	8002a44 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5c:	f7ff f872 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
        break;
 8002a60:	e009      	b.n	8002a76 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a66:	d0be      	beq.n	80029e6 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002a68:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <UART_SetConfig+0x27c>)
 8002a6a:	e7d9      	b.n	8002a20 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002a70:	d1d2      	bne.n	8002a18 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff fbdf 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d093      	beq.n	80029a2 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a7a:	6862      	ldr	r2, [r4, #4]
 8002a7c:	0853      	lsrs	r3, r2, #1
 8002a7e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002a82:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a86:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002a8a:	f1a3 0110 	sub.w	r1, r3, #16
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	f63f af37 	bhi.w	8002902 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a94:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002a98:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a9a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a9c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e77d      	b.n	80029a2 <UART_SetConfig+0x14e>
 8002aa6:	bf00      	nop
 8002aa8:	efff69f3 	.word	0xefff69f3
 8002aac:	40008000 	.word	0x40008000
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	080084b8 	.word	0x080084b8
 8002abc:	40004400 	.word	0x40004400
 8002ac0:	080084bb 	.word	0x080084bb
 8002ac4:	40004800 	.word	0x40004800
 8002ac8:	40004c00 	.word	0x40004c00
 8002acc:	40005000 	.word	0x40005000
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	000ffcff 	.word	0x000ffcff

08002ad8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ada:	07da      	lsls	r2, r3, #31
{
 8002adc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ade:	d506      	bpl.n	8002aee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ae0:	6801      	ldr	r1, [r0, #0]
 8002ae2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ae4:	684a      	ldr	r2, [r1, #4]
 8002ae6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002aea:	4322      	orrs	r2, r4
 8002aec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002aee:	079c      	lsls	r4, r3, #30
 8002af0:	d506      	bpl.n	8002b00 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af2:	6801      	ldr	r1, [r0, #0]
 8002af4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002af6:	684a      	ldr	r2, [r1, #4]
 8002af8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002afc:	4322      	orrs	r2, r4
 8002afe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b00:	0759      	lsls	r1, r3, #29
 8002b02:	d506      	bpl.n	8002b12 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b04:	6801      	ldr	r1, [r0, #0]
 8002b06:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b08:	684a      	ldr	r2, [r1, #4]
 8002b0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b0e:	4322      	orrs	r2, r4
 8002b10:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b12:	071a      	lsls	r2, r3, #28
 8002b14:	d506      	bpl.n	8002b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b16:	6801      	ldr	r1, [r0, #0]
 8002b18:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002b1a:	684a      	ldr	r2, [r1, #4]
 8002b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b20:	4322      	orrs	r2, r4
 8002b22:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b24:	06dc      	lsls	r4, r3, #27
 8002b26:	d506      	bpl.n	8002b36 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b2c:	688a      	ldr	r2, [r1, #8]
 8002b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b32:	4322      	orrs	r2, r4
 8002b34:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b36:	0699      	lsls	r1, r3, #26
 8002b38:	d506      	bpl.n	8002b48 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b3a:	6801      	ldr	r1, [r0, #0]
 8002b3c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b3e:	688a      	ldr	r2, [r1, #8]
 8002b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b44:	4322      	orrs	r2, r4
 8002b46:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b48:	065a      	lsls	r2, r3, #25
 8002b4a:	d50f      	bpl.n	8002b6c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b4c:	6801      	ldr	r1, [r0, #0]
 8002b4e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b50:	684a      	ldr	r2, [r1, #4]
 8002b52:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b56:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b5c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b5e:	d105      	bne.n	8002b6c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b60:	684a      	ldr	r2, [r1, #4]
 8002b62:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b64:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b68:	4322      	orrs	r2, r4
 8002b6a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	d506      	bpl.n	8002b7e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b70:	6802      	ldr	r2, [r0, #0]
 8002b72:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b74:	6853      	ldr	r3, [r2, #4]
 8002b76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6053      	str	r3, [r2, #4]
  }
}
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460e      	mov	r6, r1
 8002b8c:	4615      	mov	r5, r2
 8002b8e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	69d3      	ldr	r3, [r2, #28]
 8002b94:	ea36 0303 	bics.w	r3, r6, r3
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	42ab      	cmp	r3, r5
 8002ba0:	d001      	beq.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	e025      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002baa:	d0f2      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7fe fd0e 	bl	80015cc <HAL_GetTick>
 8002bb0:	1bc0      	subs	r0, r0, r7
 8002bb2:	4540      	cmp	r0, r8
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	d802      	bhi.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x3e>
 8002bb8:	f1b8 0f00 	cmp.w	r8, #0
 8002bbc:	d11b      	bne.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	e840 3200 	strex	r2, r3, [r0]
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d1f7      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	f100 0308 	add.w	r3, r0, #8
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	f100 0108 	add.w	r1, r0, #8
 8002bde:	e841 3200 	strex	r2, r3, [r1]
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d1f3      	bne.n	8002bce <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002be6:	2320      	movs	r3, #32
 8002be8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bea:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002bec:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002bf0:	2003      	movs	r0, #3
}
 8002bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bf6:	6803      	ldr	r3, [r0, #0]
 8002bf8:	075a      	lsls	r2, r3, #29
 8002bfa:	d5c9      	bpl.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bfc:	69c3      	ldr	r3, [r0, #28]
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	d5c6      	bpl.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c06:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	e840 3200 	strex	r2, r3, [r0]
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d1f7      	bne.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	f100 0308 	add.w	r3, r0, #8
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	f100 0108 	add.w	r1, r0, #8
 8002c28:	e841 3200 	strex	r2, r3, [r1]
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d1f3      	bne.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8002c30:	2320      	movs	r3, #32
 8002c32:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c34:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c36:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002c3a:	e7d7      	b.n	8002bec <UART_WaitOnFlagUntilTimeout+0x6c>

08002c3c <HAL_UART_Transmit>:
{
 8002c3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c40:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c42:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002c44:	2b20      	cmp	r3, #32
{
 8002c46:	4604      	mov	r4, r0
 8002c48:	460e      	mov	r6, r1
 8002c4a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4c:	d14e      	bne.n	8002cec <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	d04a      	beq.n	8002ce8 <HAL_UART_Transmit+0xac>
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d048      	beq.n	8002ce8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002c56:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d046      	beq.n	8002cec <HAL_UART_Transmit+0xb0>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c66:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fcad 	bl	80015cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c72:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002c74:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002c7c:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002c7e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c82:	d103      	bne.n	8002c8c <HAL_UART_Transmit+0x50>
 8002c84:	6922      	ldr	r2, [r4, #16]
 8002c86:	b90a      	cbnz	r2, 8002c8c <HAL_UART_Transmit+0x50>
 8002c88:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002c8a:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002c92:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	b93a      	cbnz	r2, 8002cae <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	2140      	movs	r1, #64	; 0x40
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff ff6d 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002ca6:	b950      	cbnz	r0, 8002cbe <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002cac:	e008      	b.n	8002cc0 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	9303      	str	r3, [sp, #12]
 8002cb6:	f7ff ff63 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002cba:	9b03      	ldr	r3, [sp, #12]
 8002cbc:	b118      	cbz	r0, 8002cc6 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002cbe:	2003      	movs	r0, #3
}
 8002cc0:	b004      	add	sp, #16
 8002cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc6:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002cc8:	b95e      	cbnz	r6, 8002ce2 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cca:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd2:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002cd4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002ce0:	e7d7      	b.n	8002c92 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce2:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002ce6:	e7f4      	b.n	8002cd2 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7e9      	b.n	8002cc0 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002cec:	2002      	movs	r0, #2
 8002cee:	e7e7      	b.n	8002cc0 <HAL_UART_Transmit+0x84>

08002cf0 <UART_CheckIdleState>:
{
 8002cf0:	b530      	push	{r4, r5, lr}
 8002cf2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	2500      	movs	r5, #0
{
 8002cf6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002cfc:	f7fe fc66 	bl	80015cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002d06:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d08:	d415      	bmi.n	8002d36 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	0752      	lsls	r2, r2, #29
 8002d10:	d509      	bpl.n	8002d26 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d12:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002d16:	9200      	str	r2, [sp, #0]
 8002d18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff ff2e 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002d24:	b9a0      	cbnz	r0, 8002d50 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002d2c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002d34:	e00d      	b.n	8002d52 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d36:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002d3a:	9200      	str	r2, [sp, #0]
 8002d3c:	9003      	str	r0, [sp, #12]
 8002d3e:	462a      	mov	r2, r5
 8002d40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff ff1b 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d0dc      	beq.n	8002d0a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002d50:	2003      	movs	r0, #3
}
 8002d52:	b005      	add	sp, #20
 8002d54:	bd30      	pop	{r4, r5, pc}

08002d56 <HAL_UART_Init>:
{
 8002d56:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d58:	4604      	mov	r4, r0
 8002d5a:	b340      	cbz	r0, 8002dae <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002d5e:	b91b      	cbnz	r3, 8002d68 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002d60:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002d64:	f7fe fb3e 	bl	80013e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d68:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d6a:	2324      	movs	r3, #36	; 0x24
 8002d6c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fd6c 	bl	8002854 <UART_SetConfig>
 8002d7c:	2801      	cmp	r0, #1
 8002d7e:	d016      	beq.n	8002dae <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d82:	b113      	cbz	r3, 8002d8a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7ff fea7 	bl	8002ad8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d9a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002da2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002daa:	f7ff bfa1 	b.w	8002cf0 <UART_CheckIdleState>
}
 8002dae:	2001      	movs	r0, #1
 8002db0:	bd10      	pop	{r4, pc}
	...

08002db4 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <ai_mnetwork_handle+0x18>)
 8002db6:	b120      	cbz	r0, 8002dc2 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8002db8:	4298      	cmp	r0, r3
 8002dba:	bf0c      	ite	eq
 8002dbc:	4618      	moveq	r0, r3
 8002dbe:	2000      	movne	r0, #0
 8002dc0:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8002dc2:	681a      	ldr	r2, [r3, #0]
            return inst;
 8002dc4:	2a00      	cmp	r2, #0
 8002dc6:	bf08      	it	eq
 8002dc8:	4618      	moveq	r0, r3
}
 8002dca:	4770      	bx	lr
 8002dcc:	20000958 	.word	0x20000958

08002dd0 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8002dd0:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	b160      	cbz	r0, 8002df0 <ai_mnetwork_is_valid.constprop.0+0x20>
 8002dd6:	f7fd fa4b 	bl	8000270 <strlen>
 8002dda:	2807      	cmp	r0, #7
 8002ddc:	4602      	mov	r2, r0
 8002dde:	d107      	bne.n	8002df0 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8002de0:	4804      	ldr	r0, [pc, #16]	; (8002df4 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8002de2:	4621      	mov	r1, r4
 8002de4:	f003 fb6c 	bl	80064c0 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002de8:	fab0 f080 	clz	r0, r0
 8002dec:	0940      	lsrs	r0, r0, #5
}
 8002dee:	bd10      	pop	{r4, pc}
    return false;
 8002df0:	2000      	movs	r0, #0
 8002df2:	e7fc      	b.n	8002dee <ai_mnetwork_is_valid.constprop.0+0x1e>
 8002df4:	080084c8 	.word	0x080084c8

08002df8 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8002dfc:	f7ff ffe8 	bl	8002dd0 <ai_mnetwork_is_valid.constprop.0>
 8002e00:	b920      	cbnz	r0, 8002e0c <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8002e02:	2c00      	cmp	r4, #0
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <ai_mnetwork_find+0x18>)
 8002e06:	bf18      	it	ne
 8002e08:	2000      	movne	r0, #0
}
 8002e0a:	bd10      	pop	{r4, pc}
            return entry->name;
 8002e0c:	4800      	ldr	r0, [pc, #0]	; (8002e10 <ai_mnetwork_find+0x18>)
 8002e0e:	e7fc      	b.n	8002e0a <ai_mnetwork_find+0x12>
 8002e10:	080084c8 	.word	0x080084c8

08002e14 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8002e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e16:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002e18:	2000      	movs	r0, #0
{
 8002e1a:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002e1c:	f7ff ffca 	bl	8002db4 <ai_mnetwork_handle>
{
 8002e20:	460d      	mov	r5, r1

    if (!inst) {
 8002e22:	4604      	mov	r4, r0
 8002e24:	b1e0      	cbz	r0, 8002e60 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8002e26:	4630      	mov	r0, r6
 8002e28:	f7ff ffd2 	bl	8002dd0 <ai_mnetwork_is_valid.constprop.0>
 8002e2c:	9901      	ldr	r1, [sp, #4]
 8002e2e:	b910      	cbnz	r0, 8002e36 <ai_mnetwork_create+0x22>
 8002e30:	2214      	movs	r2, #20
 8002e32:	2310      	movs	r3, #16
 8002e34:	e00d      	b.n	8002e52 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8002e36:	4628      	mov	r0, r5
 8002e38:	f000 f886 	bl	8002f48 <ai_network_create>
 8002e3c:	b2c2      	uxtb	r2, r0
 8002e3e:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8002e42:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8002e46:	d104      	bne.n	8002e52 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <ai_mnetwork_create+0x50>)
 8002e4a:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8002e4c:	6829      	ldr	r1, [r5, #0]
 8002e4e:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8002e50:	602c      	str	r4, [r5, #0]
        return err;
 8002e52:	2000      	movs	r0, #0
 8002e54:	f362 0007 	bfi	r0, r2, #0, #8
 8002e58:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	2231      	movs	r2, #49	; 0x31
 8002e62:	e7e6      	b.n	8002e32 <ai_mnetwork_create+0x1e>
 8002e64:	080084d0 	.word	0x080084d0

08002e68 <ai_mnetwork_init>:
        return err;
}

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8002e68:	b530      	push	{r4, r5, lr}
 8002e6a:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002e6c:	f7ff ffa2 	bl	8002db4 <ai_mnetwork_handle>
    if (inn) {
 8002e70:	4604      	mov	r4, r0
 8002e72:	b168      	cbz	r0, 8002e90 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	4668      	mov	r0, sp
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002e82:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002e84:	42aa      	cmp	r2, r5
 8002e86:	dc05      	bgt.n	8002e94 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	6860      	ldr	r0, [r4, #4]
 8002e8c:	4669      	mov	r1, sp
 8002e8e:	4798      	blx	r3
    }
    else
        return false;
}
 8002e90:	b00f      	add	sp, #60	; 0x3c
 8002e92:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	4629      	mov	r1, r5
 8002e98:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8002e9c:	a803      	add	r0, sp, #12
 8002e9e:	f000 f98b 	bl	80031b8 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7eb      	b.n	8002e7e <ai_mnetwork_init+0x16>
	...

08002ea8 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	b0a2      	sub	sp, #136	; 0x88
 8002eac:	4606      	mov	r6, r0
 8002eae:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8002eb0:	f000 fb7c 	bl	80035ac <ai_platform_context_acquire>
 8002eb4:	4604      	mov	r4, r0

  if (report && net_ctx)
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d035      	beq.n	8002f26 <ai_network_get_report+0x7e>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d030      	beq.n	8002f20 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8002ebe:	2278      	movs	r2, #120	; 0x78
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	a804      	add	r0, sp, #16
 8002ec4:	f003 faf4 	bl	80064b0 <memset>
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <ai_network_get_report+0x84>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <ai_network_get_report+0x88>)
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <ai_network_get_report+0x8c>)
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <ai_network_get_report+0x90>)
 8002ed6:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8002ed8:	f000 fa4c 	bl	8003374 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8002edc:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8002ede:	f000 fa81 	bl	80033e4 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <ai_network_get_report+0x94>)
 8002ee4:	9306      	str	r3, [sp, #24]
 8002ee6:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002eea:	f8ad 301c 	strh.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8002eee:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8002ef0:	f000 fac4 	bl	800347c <ai_platform_api_get_version>
 8002ef4:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8002ef6:	f000 fb0d 	bl	8003514 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8002efa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002efe:	2300      	movs	r3, #0
 8002f00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8002f04:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <ai_network_get_report+0x98>)
 8002f08:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8002f0a:	4669      	mov	r1, sp
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f000 fc01 	bl	8003714 <ai_platform_api_get_network_report>
 8002f12:	4604      	mov	r4, r0
 8002f14:	b120      	cbz	r0, 8002f20 <ai_network_get_report+0x78>

    *report = r;
 8002f16:	2288      	movs	r2, #136	; 0x88
 8002f18:	4669      	mov	r1, sp
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f003 fb68 	bl	80065f0 <memcpy>
    return true;
  }
  return false;
}
 8002f20:	4620      	mov	r0, r4
 8002f22:	b022      	add	sp, #136	; 0x88
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8002f26:	462c      	mov	r4, r5
 8002f28:	e7fa      	b.n	8002f20 <ai_network_get_report+0x78>
 8002f2a:	bf00      	nop
 8002f2c:	080084c8 	.word	0x080084c8
 8002f30:	080084fc 	.word	0x080084fc
 8002f34:	0800851d 	.word	0x0800851d
 8002f38:	08008536 	.word	0x08008536
 8002f3c:	08008452 	.word	0x08008452
 8002f40:	a1facade 	.word	0xa1facade

08002f44 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8002f44:	f000 bb72 	b.w	800362c <ai_platform_network_get_error>

08002f48 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002f48:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	e9cd 3200 	strd	r3, r2, [sp]
 8002f52:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <ai_network_create+0x18>)
 8002f54:	2301      	movs	r3, #1
 8002f56:	f000 fe9b 	bl	8003c90 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002f5a:	b003      	add	sp, #12
 8002f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f60:	20000488 	.word	0x20000488

08002f64 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8002f64:	f000 bf6a 	b.w	8003e3c <ai_platform_network_destroy>

08002f68 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002f70:	f000 ffd0 	bl	8003f14 <ai_platform_network_init>
  if (!net_ctx) return false;
 8002f74:	4604      	mov	r4, r0
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d050      	beq.n	800301c <ai_network_init+0xb4>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002f7a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800305c <ai_network_init+0xf4>
 8002f7e:	4632      	mov	r2, r6
 8002f80:	2101      	movs	r1, #1
 8002f82:	4640      	mov	r0, r8
 8002f84:	f000 f92c 	bl	80031e0 <ai_platform_get_weights_map>
 8002f88:	4605      	mov	r5, r0
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d048      	beq.n	8003020 <ai_network_init+0xb8>
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <ai_network_init+0xd0>)
 8002f90:	6813      	ldr	r3, [r2, #0]
 8002f92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f96:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002f98:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8002f9c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <ai_network_init+0xd4>)
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fa8:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3456);
 8002faa:	f503 6158 	add.w	r1, r3, #3456	; 0xd80
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3456);
 8002fae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <ai_network_init+0xd8>)
 8002fb4:	6811      	ldr	r1, [r2, #0]
 8002fb6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fba:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 3584);
 8002fbc:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3584);
 8002fc0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <ai_network_init+0xdc>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3968);
 8002fc6:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fca:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3968);
 8002fcc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002fd0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002fd4:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002fd6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003060 <ai_network_init+0xf8>
 8002fda:	4632      	mov	r2, r6
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4640      	mov	r0, r8
 8002fe0:	f000 f952 	bl	8003288 <ai_platform_get_activations_map>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	b308      	cbz	r0, 800302c <ai_network_init+0xc4>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <ai_network_init+0xe0>)
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002fee:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <ai_network_init+0xe4>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002ff4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <ai_network_init+0xe8>)
 8002ffa:	f103 010c 	add.w	r1, r3, #12
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 8002ffe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 8003002:	4a14      	ldr	r2, [pc, #80]	; (8003054 <ai_network_init+0xec>)
 8003004:	336c      	adds	r3, #108	; 0x6c
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 8003006:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 108);
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <ai_network_init+0xf0>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 108);
 800300c:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003010:	4638      	mov	r0, r7
 8003012:	f001 f86d 	bl	80040f0 <ai_platform_network_post_init>
 8003016:	4030      	ands	r0, r6
 8003018:	4005      	ands	r5, r0
 800301a:	b2e8      	uxtb	r0, r5

  return ok;
}
 800301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003020:	2212      	movs	r2, #18
 8003022:	2130      	movs	r1, #48	; 0x30
 8003024:	4620      	mov	r0, r4
 8003026:	f000 fb6f 	bl	8003708 <ai_platform_network_set_error>
  return false;
 800302a:	e7d4      	b.n	8002fd6 <ai_network_init+0x6e>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800302c:	2213      	movs	r2, #19
 800302e:	2130      	movs	r1, #48	; 0x30
 8003030:	4620      	mov	r0, r4
 8003032:	f000 fb69 	bl	8003708 <ai_platform_network_set_error>
  return false;
 8003036:	e7eb      	b.n	8003010 <ai_network_init+0xa8>
 8003038:	2000042c 	.word	0x2000042c
 800303c:	200003b8 	.word	0x200003b8
 8003040:	20000340 	.word	0x20000340
 8003044:	200002cc 	.word	0x200002cc
 8003048:	200004f0 	.word	0x200004f0
 800304c:	20000314 	.word	0x20000314
 8003050:	2000038c 	.word	0x2000038c
 8003054:	20000400 	.word	0x20000400
 8003058:	20000478 	.word	0x20000478
 800305c:	20000a1c 	.word	0x20000a1c
 8003060:	20000a18 	.word	0x20000a18

08003064 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003064:	f001 b8cc 	b.w	8004200 <ai_platform_network_process>

08003068 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8003068:	2200      	movs	r2, #0
 800306a:	f001 b8c9 	b.w	8004200 <ai_platform_network_process>
	...

08003070 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003070:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8003072:	4603      	mov	r3, r0
{
 8003074:	b085      	sub	sp, #20
  if (!params) return false;
 8003076:	b170      	cbz	r0, 8003096 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003078:	4c08      	ldr	r4, [pc, #32]	; (800309c <ai_network_data_params_get+0x2c>)
 800307a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307e:	466a      	mov	r2, sp
 8003080:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003084:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003088:	ad02      	add	r5, sp, #8
 800308a:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800308e:	4629      	mov	r1, r5
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f94d 	bl	8003330 <ai_platform_bind_network_params>
}
 8003096:	b005      	add	sp, #20
 8003098:	bd30      	pop	{r4, r5, pc}
 800309a:	bf00      	nop
 800309c:	080083c0 	.word	0x080083c0

080030a0 <arm_mat_init_f32>:
 80030a0:	8001      	strh	r1, [r0, #0]
 80030a2:	8042      	strh	r2, [r0, #2]
 80030a4:	6043      	str	r3, [r0, #4]
 80030a6:	4770      	bx	lr

080030a8 <arm_cos_f32>:
 80030a8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8003130 <arm_cos_f32+0x88>
 80030ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80030b0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80030b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80030b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80030bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80030c4:	d504      	bpl.n	80030d0 <arm_cos_f32+0x28>
 80030c6:	ee17 3a90 	vmov	r3, s15
 80030ca:	3b01      	subs	r3, #1
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003134 <arm_cos_f32+0x8c>
 80030d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80030dc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80030e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ee:	d21a      	bcs.n	8003126 <arm_cos_f32+0x7e>
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <arm_cos_f32+0x90>)
 8003100:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003108:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800310c:	ed93 7a00 	vldr	s14, [r3]
 8003110:	edd2 6a00 	vldr	s13, [r2]
 8003114:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003118:	ee20 0a26 	vmul.f32	s0, s0, s13
 800311c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003120:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003124:	4770      	bx	lr
 8003126:	ee30 0a47 	vsub.f32	s0, s0, s14
 800312a:	2101      	movs	r1, #1
 800312c:	2300      	movs	r3, #0
 800312e:	e7e6      	b.n	80030fe <arm_cos_f32+0x56>
 8003130:	3e22f983 	.word	0x3e22f983
 8003134:	44000000 	.word	0x44000000
 8003138:	08009510 	.word	0x08009510

0800313c <ai_buffer_get_size>:
 800313c:	b378      	cbz	r0, 800319e <ai_buffer_get_size+0x62>
 800313e:	b410      	push	{r4}
 8003140:	6803      	ldr	r3, [r0, #0]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <ai_buffer_get_size+0x64>)
 8003144:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003148:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800314c:	4293      	cmp	r3, r2
 800314e:	d01e      	beq.n	800318e <ai_buffer_get_size+0x52>
 8003150:	6984      	ldr	r4, [r0, #24]
 8003152:	6862      	ldr	r2, [r4, #4]
 8003154:	7d03      	ldrb	r3, [r0, #20]
 8003156:	6941      	ldr	r1, [r0, #20]
 8003158:	f1a3 0301 	sub.w	r3, r3, #1
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003166:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800316a:	da0b      	bge.n	8003184 <ai_buffer_get_size+0x48>
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <ai_buffer_get_size+0x3a>
 8003170:	2802      	cmp	r0, #2
 8003172:	d007      	beq.n	8003184 <ai_buffer_get_size+0x48>
 8003174:	2302      	movs	r3, #2
 8003176:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800317a:	3301      	adds	r3, #1
 800317c:	4298      	cmp	r0, r3
 800317e:	fb01 f202 	mul.w	r2, r1, r2
 8003182:	d1f3      	bne.n	800316c <ai_buffer_get_size+0x30>
 8003184:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	2900      	cmp	r1, #0
 8003190:	d0de      	beq.n	8003150 <ai_buffer_get_size+0x14>
 8003192:	6984      	ldr	r4, [r0, #24]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	331f      	adds	r3, #31
 8003198:	f023 021f 	bic.w	r2, r3, #31
 800319c:	e7da      	b.n	8003154 <ai_buffer_get_size+0x18>
 800319e:	4770      	bx	lr
 80031a0:	000400c0 	.word	0x000400c0

080031a4 <ai_buffer_array_sane>:
 80031a4:	b138      	cbz	r0, 80031b6 <ai_buffer_array_sane+0x12>
 80031a6:	6843      	ldr	r3, [r0, #4]
 80031a8:	b123      	cbz	r3, 80031b4 <ai_buffer_array_sane+0x10>
 80031aa:	8840      	ldrh	r0, [r0, #2]
 80031ac:	3800      	subs	r0, #0
 80031ae:	bf18      	it	ne
 80031b0:	2001      	movne	r0, #1
 80031b2:	4770      	bx	lr
 80031b4:	4618      	mov	r0, r3
 80031b6:	4770      	bx	lr

080031b8 <ai_buffer_array_item_set_address>:
 80031b8:	b150      	cbz	r0, 80031d0 <ai_buffer_array_item_set_address+0x18>
 80031ba:	6843      	ldr	r3, [r0, #4]
 80031bc:	b14b      	cbz	r3, 80031d2 <ai_buffer_array_item_set_address+0x1a>
 80031be:	8840      	ldrh	r0, [r0, #2]
 80031c0:	b900      	cbnz	r0, 80031c4 <ai_buffer_array_item_set_address+0xc>
 80031c2:	4770      	bx	lr
 80031c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80031c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80031cc:	2001      	movs	r0, #1
 80031ce:	604a      	str	r2, [r1, #4]
 80031d0:	4770      	bx	lr
 80031d2:	4618      	mov	r0, r3
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop

080031d8 <_ai_platform_acquire_crc>:
 80031d8:	2001      	movs	r0, #1
 80031da:	4770      	bx	lr

080031dc <_ai_platform_release_crc>:
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <ai_platform_get_weights_map>:
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d037      	beq.n	8003254 <ai_platform_get_weights_map+0x74>
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	4604      	mov	r4, r0
 80031e8:	b1a0      	cbz	r0, 8003214 <ai_platform_get_weights_map+0x34>
 80031ea:	460f      	mov	r7, r1
 80031ec:	b191      	cbz	r1, 8003214 <ai_platform_get_weights_map+0x34>
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <ai_platform_get_weights_map+0xa4>)
 80031f0:	6810      	ldr	r0, [r2, #0]
 80031f2:	4298      	cmp	r0, r3
 80031f4:	4615      	mov	r5, r2
 80031f6:	d00f      	beq.n	8003218 <ai_platform_get_weights_map+0x38>
 80031f8:	6855      	ldr	r5, [r2, #4]
 80031fa:	b15d      	cbz	r5, 8003214 <ai_platform_get_weights_map+0x34>
 80031fc:	682e      	ldr	r6, [r5, #0]
 80031fe:	429e      	cmp	r6, r3
 8003200:	d02a      	beq.n	8003258 <ai_platform_get_weights_map+0x78>
 8003202:	f1a1 0001 	sub.w	r0, r1, #1
 8003206:	6025      	str	r5, [r4, #0]
 8003208:	fab0 f080 	clz	r0, r0
 800320c:	0940      	lsrs	r0, r0, #5
 800320e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003210:	42a7      	cmp	r7, r4
 8003212:	d034      	beq.n	800327e <ai_platform_get_weights_map+0x9e>
 8003214:	2000      	movs	r0, #0
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	1d10      	adds	r0, r2, #4
 800321a:	f7ff ffc3 	bl	80031a4 <ai_buffer_array_sane>
 800321e:	2800      	cmp	r0, #0
 8003220:	d0f8      	beq.n	8003214 <ai_platform_get_weights_map+0x34>
 8003222:	88eb      	ldrh	r3, [r5, #6]
 8003224:	429f      	cmp	r7, r3
 8003226:	d1f5      	bne.n	8003214 <ai_platform_get_weights_map+0x34>
 8003228:	f04f 0e00 	mov.w	lr, #0
 800322c:	1f23      	subs	r3, r4, #4
 800322e:	4670      	mov	r0, lr
 8003230:	68aa      	ldr	r2, [r5, #8]
 8003232:	eb02 0c0e 	add.w	ip, r2, lr
 8003236:	f10e 0e1c 	add.w	lr, lr, #28
 800323a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800323e:	b124      	cbz	r4, 800324a <ai_platform_get_weights_map+0x6a>
 8003240:	3001      	adds	r0, #1
 8003242:	4287      	cmp	r7, r0
 8003244:	f843 4f04 	str.w	r4, [r3, #4]!
 8003248:	d1f2      	bne.n	8003230 <ai_platform_get_weights_map+0x50>
 800324a:	1a38      	subs	r0, r7, r0
 800324c:	fab0 f080 	clz	r0, r0
 8003250:	0940      	lsrs	r0, r0, #5
 8003252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003254:	2000      	movs	r0, #0
 8003256:	4770      	bx	lr
 8003258:	1f23      	subs	r3, r4, #4
 800325a:	4628      	mov	r0, r5
 800325c:	2400      	movs	r4, #0
 800325e:	e000      	b.n	8003262 <ai_platform_get_weights_map+0x82>
 8003260:	4614      	mov	r4, r2
 8003262:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003266:	42b2      	cmp	r2, r6
 8003268:	d0d2      	beq.n	8003210 <ai_platform_get_weights_map+0x30>
 800326a:	f843 2f04 	str.w	r2, [r3, #4]!
 800326e:	1c62      	adds	r2, r4, #1
 8003270:	4297      	cmp	r7, r2
 8003272:	d1f5      	bne.n	8003260 <ai_platform_get_weights_map+0x80>
 8003274:	3402      	adds	r4, #2
 8003276:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800327a:	42b3      	cmp	r3, r6
 800327c:	d1ca      	bne.n	8003214 <ai_platform_get_weights_map+0x34>
 800327e:	2001      	movs	r0, #1
 8003280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	a1facade 	.word	0xa1facade

08003288 <ai_platform_get_activations_map>:
 8003288:	2a00      	cmp	r2, #0
 800328a:	d038      	beq.n	80032fe <ai_platform_get_activations_map+0x76>
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	b1a0      	cbz	r0, 80032bc <ai_platform_get_activations_map+0x34>
 8003292:	460f      	mov	r7, r1
 8003294:	b191      	cbz	r1, 80032bc <ai_platform_get_activations_map+0x34>
 8003296:	4b25      	ldr	r3, [pc, #148]	; (800332c <ai_platform_get_activations_map+0xa4>)
 8003298:	6810      	ldr	r0, [r2, #0]
 800329a:	4298      	cmp	r0, r3
 800329c:	4615      	mov	r5, r2
 800329e:	d00f      	beq.n	80032c0 <ai_platform_get_activations_map+0x38>
 80032a0:	6a15      	ldr	r5, [r2, #32]
 80032a2:	b15d      	cbz	r5, 80032bc <ai_platform_get_activations_map+0x34>
 80032a4:	682e      	ldr	r6, [r5, #0]
 80032a6:	429e      	cmp	r6, r3
 80032a8:	d02b      	beq.n	8003302 <ai_platform_get_activations_map+0x7a>
 80032aa:	f1a1 0001 	sub.w	r0, r1, #1
 80032ae:	6025      	str	r5, [r4, #0]
 80032b0:	fab0 f080 	clz	r0, r0
 80032b4:	0940      	lsrs	r0, r0, #5
 80032b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b8:	42a7      	cmp	r7, r4
 80032ba:	d035      	beq.n	8003328 <ai_platform_get_activations_map+0xa0>
 80032bc:	2000      	movs	r0, #0
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c0:	f102 000c 	add.w	r0, r2, #12
 80032c4:	f7ff ff6e 	bl	80031a4 <ai_buffer_array_sane>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d0f7      	beq.n	80032bc <ai_platform_get_activations_map+0x34>
 80032cc:	89eb      	ldrh	r3, [r5, #14]
 80032ce:	429f      	cmp	r7, r3
 80032d0:	d1f4      	bne.n	80032bc <ai_platform_get_activations_map+0x34>
 80032d2:	f04f 0e00 	mov.w	lr, #0
 80032d6:	1f23      	subs	r3, r4, #4
 80032d8:	4670      	mov	r0, lr
 80032da:	692a      	ldr	r2, [r5, #16]
 80032dc:	eb02 0c0e 	add.w	ip, r2, lr
 80032e0:	f10e 0e1c 	add.w	lr, lr, #28
 80032e4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80032e8:	b124      	cbz	r4, 80032f4 <ai_platform_get_activations_map+0x6c>
 80032ea:	3001      	adds	r0, #1
 80032ec:	4287      	cmp	r7, r0
 80032ee:	f843 4f04 	str.w	r4, [r3, #4]!
 80032f2:	d1f2      	bne.n	80032da <ai_platform_get_activations_map+0x52>
 80032f4:	1a38      	subs	r0, r7, r0
 80032f6:	fab0 f080 	clz	r0, r0
 80032fa:	0940      	lsrs	r0, r0, #5
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fe:	2000      	movs	r0, #0
 8003300:	4770      	bx	lr
 8003302:	1f23      	subs	r3, r4, #4
 8003304:	4628      	mov	r0, r5
 8003306:	2400      	movs	r4, #0
 8003308:	e000      	b.n	800330c <ai_platform_get_activations_map+0x84>
 800330a:	4614      	mov	r4, r2
 800330c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003310:	42b2      	cmp	r2, r6
 8003312:	d0d1      	beq.n	80032b8 <ai_platform_get_activations_map+0x30>
 8003314:	f843 2f04 	str.w	r2, [r3, #4]!
 8003318:	1c62      	adds	r2, r4, #1
 800331a:	4297      	cmp	r7, r2
 800331c:	d1f5      	bne.n	800330a <ai_platform_get_activations_map+0x82>
 800331e:	3402      	adds	r4, #2
 8003320:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003324:	42b3      	cmp	r3, r6
 8003326:	d1c9      	bne.n	80032bc <ai_platform_get_activations_map+0x34>
 8003328:	2001      	movs	r0, #1
 800332a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800332c:	a1facade 	.word	0xa1facade

08003330 <ai_platform_bind_network_params>:
 8003330:	b1a0      	cbz	r0, 800335c <ai_platform_bind_network_params+0x2c>
 8003332:	b1b1      	cbz	r1, 8003362 <ai_platform_bind_network_params+0x32>
 8003334:	b1c2      	cbz	r2, 8003368 <ai_platform_bind_network_params+0x38>
 8003336:	b410      	push	{r4}
 8003338:	4603      	mov	r3, r0
 800333a:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <ai_platform_bind_network_params+0x40>)
 800333c:	f843 4b04 	str.w	r4, [r3], #4
 8003340:	f100 0c0c 	add.w	ip, r0, #12
 8003344:	c903      	ldmia	r1, {r0, r1}
 8003346:	e883 0003 	stmia.w	r3, {r0, r1}
 800334a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800334e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8003352:	2301      	movs	r3, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	4603      	mov	r3, r0
 800335e:	4618      	mov	r0, r3
 8003360:	4770      	bx	lr
 8003362:	460b      	mov	r3, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4770      	bx	lr
 8003368:	4613      	mov	r3, r2
 800336a:	4618      	mov	r0, r3
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	a1facade 	.word	0xa1facade

08003374 <ai_platform_runtime_get_revision>:
 8003374:	b508      	push	{r3, lr}
 8003376:	f7ff ff2f 	bl	80031d8 <_ai_platform_acquire_crc>
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <ai_platform_runtime_get_revision+0x58>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d010      	beq.n	80033aa <ai_platform_runtime_get_revision+0x36>
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <ai_platform_runtime_get_revision+0x5c>)
 800338a:	2301      	movs	r3, #1
 800338c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003390:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1fb      	bne.n	8003390 <ai_platform_runtime_get_revision+0x1c>
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <ai_platform_runtime_get_revision+0x60>)
 800339a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800339e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <ai_platform_runtime_get_revision+0x64>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d00c      	beq.n	80033c2 <ai_platform_runtime_get_revision+0x4e>
 80033a8:	e7fe      	b.n	80033a8 <ai_platform_runtime_get_revision+0x34>
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <ai_platform_runtime_get_revision+0x68>)
 80033ac:	2301      	movs	r3, #1
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	6893      	ldr	r3, [r2, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1fc      	bne.n	80033b0 <ai_platform_runtime_get_revision+0x3c>
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <ai_platform_runtime_get_revision+0x60>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <ai_platform_runtime_get_revision+0x64>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d103      	bne.n	80033ca <ai_platform_runtime_get_revision+0x56>
 80033c2:	f7ff ff0b 	bl	80031dc <_ai_platform_release_crc>
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <ai_platform_runtime_get_revision+0x6c>)
 80033c8:	bd08      	pop	{r3, pc}
 80033ca:	e7fe      	b.n	80033ca <ai_platform_runtime_get_revision+0x56>
 80033cc:	e0042000 	.word	0xe0042000
 80033d0:	58024000 	.word	0x58024000
 80033d4:	f407a5c2 	.word	0xf407a5c2
 80033d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80033dc:	40023000 	.word	0x40023000
 80033e0:	08009d14 	.word	0x08009d14

080033e4 <ai_platform_runtime_get_version>:
 80033e4:	b500      	push	{lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	f7ff fef6 	bl	80031d8 <_ai_platform_acquire_crc>
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <ai_platform_runtime_get_version+0x80>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d010      	beq.n	800341c <ai_platform_runtime_get_version+0x38>
 80033fa:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <ai_platform_runtime_get_version+0x84>)
 80033fc:	2301      	movs	r3, #1
 80033fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003402:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1fb      	bne.n	8003402 <ai_platform_runtime_get_version+0x1e>
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <ai_platform_runtime_get_version+0x88>)
 800340c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003410:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <ai_platform_runtime_get_version+0x8c>)
 8003416:	429a      	cmp	r2, r3
 8003418:	d00c      	beq.n	8003434 <ai_platform_runtime_get_version+0x50>
 800341a:	e7fe      	b.n	800341a <ai_platform_runtime_get_version+0x36>
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <ai_platform_runtime_get_version+0x90>)
 800341e:	2301      	movs	r3, #1
 8003420:	6093      	str	r3, [r2, #8]
 8003422:	6893      	ldr	r3, [r2, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1fc      	bne.n	8003422 <ai_platform_runtime_get_version+0x3e>
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <ai_platform_runtime_get_version+0x88>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <ai_platform_runtime_get_version+0x8c>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d115      	bne.n	8003460 <ai_platform_runtime_get_version+0x7c>
 8003434:	f7ff fed2 	bl	80031dc <_ai_platform_release_crc>
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <ai_platform_runtime_get_version+0x94>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2000      	movs	r0, #0
 800343e:	b2da      	uxtb	r2, r3
 8003440:	f362 0007 	bfi	r0, r2, #0, #8
 8003444:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003448:	f362 200f 	bfi	r0, r2, #8, #8
 800344c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003450:	f362 4017 	bfi	r0, r2, #16, #8
 8003454:	0e1b      	lsrs	r3, r3, #24
 8003456:	f363 601f 	bfi	r0, r3, #24, #8
 800345a:	b003      	add	sp, #12
 800345c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003460:	e7fe      	b.n	8003460 <ai_platform_runtime_get_version+0x7c>
 8003462:	bf00      	nop
 8003464:	e0042000 	.word	0xe0042000
 8003468:	58024000 	.word	0x58024000
 800346c:	f407a5c2 	.word	0xf407a5c2
 8003470:	b5e8b5cd 	.word	0xb5e8b5cd
 8003474:	40023000 	.word	0x40023000
 8003478:	08009d18 	.word	0x08009d18

0800347c <ai_platform_api_get_version>:
 800347c:	b500      	push	{lr}
 800347e:	b083      	sub	sp, #12
 8003480:	f7ff feaa 	bl	80031d8 <_ai_platform_acquire_crc>
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <ai_platform_api_get_version+0x80>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d010      	beq.n	80034b4 <ai_platform_api_get_version+0x38>
 8003492:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <ai_platform_api_get_version+0x84>)
 8003494:	2301      	movs	r3, #1
 8003496:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800349a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1fb      	bne.n	800349a <ai_platform_api_get_version+0x1e>
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <ai_platform_api_get_version+0x88>)
 80034a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80034a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <ai_platform_api_get_version+0x8c>)
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d00c      	beq.n	80034cc <ai_platform_api_get_version+0x50>
 80034b2:	e7fe      	b.n	80034b2 <ai_platform_api_get_version+0x36>
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <ai_platform_api_get_version+0x90>)
 80034b6:	2301      	movs	r3, #1
 80034b8:	6093      	str	r3, [r2, #8]
 80034ba:	6893      	ldr	r3, [r2, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1fc      	bne.n	80034ba <ai_platform_api_get_version+0x3e>
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <ai_platform_api_get_version+0x88>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <ai_platform_api_get_version+0x8c>)
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d115      	bne.n	80034f8 <ai_platform_api_get_version+0x7c>
 80034cc:	f7ff fe86 	bl	80031dc <_ai_platform_release_crc>
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <ai_platform_api_get_version+0x94>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2000      	movs	r0, #0
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	f362 0007 	bfi	r0, r2, #0, #8
 80034dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80034e0:	f362 200f 	bfi	r0, r2, #8, #8
 80034e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80034e8:	f362 4017 	bfi	r0, r2, #16, #8
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	f363 601f 	bfi	r0, r3, #24, #8
 80034f2:	b003      	add	sp, #12
 80034f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f8:	e7fe      	b.n	80034f8 <ai_platform_api_get_version+0x7c>
 80034fa:	bf00      	nop
 80034fc:	e0042000 	.word	0xe0042000
 8003500:	58024000 	.word	0x58024000
 8003504:	f407a5c2 	.word	0xf407a5c2
 8003508:	b5e8b5cd 	.word	0xb5e8b5cd
 800350c:	40023000 	.word	0x40023000
 8003510:	08009d1c 	.word	0x08009d1c

08003514 <ai_platform_interface_api_get_version>:
 8003514:	b500      	push	{lr}
 8003516:	b083      	sub	sp, #12
 8003518:	f7ff fe5e 	bl	80031d8 <_ai_platform_acquire_crc>
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <ai_platform_interface_api_get_version+0x80>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d010      	beq.n	800354c <ai_platform_interface_api_get_version+0x38>
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <ai_platform_interface_api_get_version+0x84>)
 800352c:	2301      	movs	r3, #1
 800352e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003532:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1fb      	bne.n	8003532 <ai_platform_interface_api_get_version+0x1e>
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <ai_platform_interface_api_get_version+0x88>)
 800353c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003540:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <ai_platform_interface_api_get_version+0x8c>)
 8003546:	429a      	cmp	r2, r3
 8003548:	d00c      	beq.n	8003564 <ai_platform_interface_api_get_version+0x50>
 800354a:	e7fe      	b.n	800354a <ai_platform_interface_api_get_version+0x36>
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <ai_platform_interface_api_get_version+0x90>)
 800354e:	2301      	movs	r3, #1
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	6893      	ldr	r3, [r2, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1fc      	bne.n	8003552 <ai_platform_interface_api_get_version+0x3e>
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <ai_platform_interface_api_get_version+0x88>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <ai_platform_interface_api_get_version+0x8c>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d115      	bne.n	8003590 <ai_platform_interface_api_get_version+0x7c>
 8003564:	f7ff fe3a 	bl	80031dc <_ai_platform_release_crc>
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <ai_platform_interface_api_get_version+0x94>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2000      	movs	r0, #0
 800356e:	b2da      	uxtb	r2, r3
 8003570:	f362 0007 	bfi	r0, r2, #0, #8
 8003574:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003578:	f362 200f 	bfi	r0, r2, #8, #8
 800357c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003580:	f362 4017 	bfi	r0, r2, #16, #8
 8003584:	0e1b      	lsrs	r3, r3, #24
 8003586:	f363 601f 	bfi	r0, r3, #24, #8
 800358a:	b003      	add	sp, #12
 800358c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003590:	e7fe      	b.n	8003590 <ai_platform_interface_api_get_version+0x7c>
 8003592:	bf00      	nop
 8003594:	e0042000 	.word	0xe0042000
 8003598:	58024000 	.word	0x58024000
 800359c:	f407a5c2 	.word	0xf407a5c2
 80035a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80035a4:	40023000 	.word	0x40023000
 80035a8:	08009d20 	.word	0x08009d20

080035ac <ai_platform_context_acquire>:
 80035ac:	b510      	push	{r4, lr}
 80035ae:	4604      	mov	r4, r0
 80035b0:	b120      	cbz	r0, 80035bc <ai_platform_context_acquire+0x10>
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <ai_platform_context_acquire+0x68>)
 80035b4:	6802      	ldr	r2, [r0, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf18      	it	ne
 80035ba:	2400      	movne	r4, #0
 80035bc:	f7ff fe0c 	bl	80031d8 <_ai_platform_acquire_crc>
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <ai_platform_context_acquire+0x6c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d010      	beq.n	80035f0 <ai_platform_context_acquire+0x44>
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <ai_platform_context_acquire+0x70>)
 80035d0:	2301      	movs	r3, #1
 80035d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1fb      	bne.n	80035d6 <ai_platform_context_acquire+0x2a>
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <ai_platform_context_acquire+0x74>)
 80035e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <ai_platform_context_acquire+0x78>)
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d00c      	beq.n	8003608 <ai_platform_context_acquire+0x5c>
 80035ee:	e7fe      	b.n	80035ee <ai_platform_context_acquire+0x42>
 80035f0:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <ai_platform_context_acquire+0x7c>)
 80035f2:	2301      	movs	r3, #1
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	6893      	ldr	r3, [r2, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1fc      	bne.n	80035f6 <ai_platform_context_acquire+0x4a>
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <ai_platform_context_acquire+0x74>)
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <ai_platform_context_acquire+0x78>)
 8003604:	429a      	cmp	r2, r3
 8003606:	d103      	bne.n	8003610 <ai_platform_context_acquire+0x64>
 8003608:	f7ff fde8 	bl	80031dc <_ai_platform_release_crc>
 800360c:	4620      	mov	r0, r4
 800360e:	bd10      	pop	{r4, pc}
 8003610:	e7fe      	b.n	8003610 <ai_platform_context_acquire+0x64>
 8003612:	bf00      	nop
 8003614:	a1c00100 	.word	0xa1c00100
 8003618:	e0042000 	.word	0xe0042000
 800361c:	58024000 	.word	0x58024000
 8003620:	f407a5c2 	.word	0xf407a5c2
 8003624:	b5e8b5cd 	.word	0xb5e8b5cd
 8003628:	40023000 	.word	0x40023000

0800362c <ai_platform_network_get_error>:
 800362c:	b510      	push	{r4, lr}
 800362e:	b1f0      	cbz	r0, 800366e <ai_platform_network_get_error+0x42>
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <ai_platform_network_get_error+0xc4>)
 8003632:	6802      	ldr	r2, [r0, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	4604      	mov	r4, r0
 8003638:	d119      	bne.n	800366e <ai_platform_network_get_error+0x42>
 800363a:	f7ff fdcd 	bl	80031d8 <_ai_platform_acquire_crc>
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <ai_platform_network_get_error+0xc8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d03c      	beq.n	80036c6 <ai_platform_network_get_error+0x9a>
 800364c:	4a2a      	ldr	r2, [pc, #168]	; (80036f8 <ai_platform_network_get_error+0xcc>)
 800364e:	2301      	movs	r3, #1
 8003650:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003654:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1fb      	bne.n	8003654 <ai_platform_network_get_error+0x28>
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <ai_platform_network_get_error+0xd0>)
 800365e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003662:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <ai_platform_network_get_error+0xd4>)
 8003668:	429a      	cmp	r2, r3
 800366a:	d038      	beq.n	80036de <ai_platform_network_get_error+0xb2>
 800366c:	e7fe      	b.n	800366c <ai_platform_network_get_error+0x40>
 800366e:	f7ff fdb3 	bl	80031d8 <_ai_platform_acquire_crc>
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <ai_platform_network_get_error+0xc8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d010      	beq.n	80036a2 <ai_platform_network_get_error+0x76>
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <ai_platform_network_get_error+0xcc>)
 8003682:	2301      	movs	r3, #1
 8003684:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003688:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1fb      	bne.n	8003688 <ai_platform_network_get_error+0x5c>
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <ai_platform_network_get_error+0xd0>)
 8003692:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003696:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <ai_platform_network_get_error+0xd4>)
 800369c:	429a      	cmp	r2, r3
 800369e:	d00d      	beq.n	80036bc <ai_platform_network_get_error+0x90>
 80036a0:	e7fe      	b.n	80036a0 <ai_platform_network_get_error+0x74>
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <ai_platform_network_get_error+0xd8>)
 80036a4:	2301      	movs	r3, #1
 80036a6:	6093      	str	r3, [r2, #8]
 80036a8:	6893      	ldr	r3, [r2, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1fc      	bne.n	80036a8 <ai_platform_network_get_error+0x7c>
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <ai_platform_network_get_error+0xd0>)
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <ai_platform_network_get_error+0xd4>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d000      	beq.n	80036bc <ai_platform_network_get_error+0x90>
 80036ba:	e7fe      	b.n	80036ba <ai_platform_network_get_error+0x8e>
 80036bc:	f7ff fd8e 	bl	80031dc <_ai_platform_release_crc>
 80036c0:	f241 0010 	movw	r0, #4112	; 0x1010
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <ai_platform_network_get_error+0xd8>)
 80036c8:	2301      	movs	r3, #1
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	6893      	ldr	r3, [r2, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1fc      	bne.n	80036cc <ai_platform_network_get_error+0xa0>
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <ai_platform_network_get_error+0xd0>)
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <ai_platform_network_get_error+0xd4>)
 80036da:	429a      	cmp	r2, r3
 80036dc:	d107      	bne.n	80036ee <ai_platform_network_get_error+0xc2>
 80036de:	f7ff fd7d 	bl	80031dc <_ai_platform_release_crc>
 80036e2:	f104 0010 	add.w	r0, r4, #16
 80036e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ea:	f001 b80f 	b.w	800470c <core_get_error>
 80036ee:	e7fe      	b.n	80036ee <ai_platform_network_get_error+0xc2>
 80036f0:	a1c00100 	.word	0xa1c00100
 80036f4:	e0042000 	.word	0xe0042000
 80036f8:	58024000 	.word	0x58024000
 80036fc:	f407a5c2 	.word	0xf407a5c2
 8003700:	b5e8b5cd 	.word	0xb5e8b5cd
 8003704:	40023000 	.word	0x40023000

08003708 <ai_platform_network_set_error>:
 8003708:	b110      	cbz	r0, 8003710 <ai_platform_network_set_error+0x8>
 800370a:	3010      	adds	r0, #16
 800370c:	f001 b804 	b.w	8004718 <core_set_error>
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop

08003714 <ai_platform_api_get_network_report>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	b087      	sub	sp, #28
 800371a:	b1f8      	cbz	r0, 800375c <ai_platform_api_get_network_report+0x48>
 800371c:	4b95      	ldr	r3, [pc, #596]	; (8003974 <ai_platform_api_get_network_report+0x260>)
 800371e:	6802      	ldr	r2, [r0, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	4607      	mov	r7, r0
 8003724:	d11a      	bne.n	800375c <ai_platform_api_get_network_report+0x48>
 8003726:	468b      	mov	fp, r1
 8003728:	f7ff fd56 	bl	80031d8 <_ai_platform_acquire_crc>
 800372c:	4b92      	ldr	r3, [pc, #584]	; (8003978 <ai_platform_api_get_network_report+0x264>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d03e      	beq.n	80037b8 <ai_platform_api_get_network_report+0xa4>
 800373a:	4a90      	ldr	r2, [pc, #576]	; (800397c <ai_platform_api_get_network_report+0x268>)
 800373c:	2301      	movs	r3, #1
 800373e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003742:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1fb      	bne.n	8003742 <ai_platform_api_get_network_report+0x2e>
 800374a:	4b8d      	ldr	r3, [pc, #564]	; (8003980 <ai_platform_api_get_network_report+0x26c>)
 800374c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003750:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003754:	4b8b      	ldr	r3, [pc, #556]	; (8003984 <ai_platform_api_get_network_report+0x270>)
 8003756:	429a      	cmp	r2, r3
 8003758:	d03a      	beq.n	80037d0 <ai_platform_api_get_network_report+0xbc>
 800375a:	e7fe      	b.n	800375a <ai_platform_api_get_network_report+0x46>
 800375c:	f7ff fd3c 	bl	80031d8 <_ai_platform_acquire_crc>
 8003760:	4b85      	ldr	r3, [pc, #532]	; (8003978 <ai_platform_api_get_network_report+0x264>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	d010      	beq.n	8003790 <ai_platform_api_get_network_report+0x7c>
 800376e:	4a83      	ldr	r2, [pc, #524]	; (800397c <ai_platform_api_get_network_report+0x268>)
 8003770:	2301      	movs	r3, #1
 8003772:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003776:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1fb      	bne.n	8003776 <ai_platform_api_get_network_report+0x62>
 800377e:	4b80      	ldr	r3, [pc, #512]	; (8003980 <ai_platform_api_get_network_report+0x26c>)
 8003780:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003784:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <ai_platform_api_get_network_report+0x270>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d00d      	beq.n	80037aa <ai_platform_api_get_network_report+0x96>
 800378e:	e7fe      	b.n	800378e <ai_platform_api_get_network_report+0x7a>
 8003790:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <ai_platform_api_get_network_report+0x274>)
 8003792:	2301      	movs	r3, #1
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	6893      	ldr	r3, [r2, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1fc      	bne.n	8003796 <ai_platform_api_get_network_report+0x82>
 800379c:	4b78      	ldr	r3, [pc, #480]	; (8003980 <ai_platform_api_get_network_report+0x26c>)
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4b78      	ldr	r3, [pc, #480]	; (8003984 <ai_platform_api_get_network_report+0x270>)
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d000      	beq.n	80037aa <ai_platform_api_get_network_report+0x96>
 80037a8:	e7fe      	b.n	80037a8 <ai_platform_api_get_network_report+0x94>
 80037aa:	f7ff fd17 	bl	80031dc <_ai_platform_release_crc>
 80037ae:	2400      	movs	r4, #0
 80037b0:	4620      	mov	r0, r4
 80037b2:	b007      	add	sp, #28
 80037b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b8:	4a73      	ldr	r2, [pc, #460]	; (8003988 <ai_platform_api_get_network_report+0x274>)
 80037ba:	2301      	movs	r3, #1
 80037bc:	6093      	str	r3, [r2, #8]
 80037be:	6893      	ldr	r3, [r2, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1fc      	bne.n	80037be <ai_platform_api_get_network_report+0xaa>
 80037c4:	4b6e      	ldr	r3, [pc, #440]	; (8003980 <ai_platform_api_get_network_report+0x26c>)
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	4b6e      	ldr	r3, [pc, #440]	; (8003984 <ai_platform_api_get_network_report+0x270>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d112      	bne.n	80037f6 <ai_platform_api_get_network_report+0xe2>
 80037d0:	f7ff fd04 	bl	80031dc <_ai_platform_release_crc>
 80037d4:	f1bb 0f00 	cmp.w	fp, #0
 80037d8:	d0e9      	beq.n	80037ae <ai_platform_api_get_network_report+0x9a>
 80037da:	2400      	movs	r4, #0
 80037dc:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	b14b      	cbz	r3, 80037f8 <ai_platform_api_get_network_report+0xe4>
 80037e4:	3401      	adds	r4, #1
 80037e6:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d003      	beq.n	80037f8 <ai_platform_api_get_network_report+0xe4>
 80037f0:	b112      	cbz	r2, 80037f8 <ai_platform_api_get_network_report+0xe4>
 80037f2:	4613      	mov	r3, r2
 80037f4:	e7f5      	b.n	80037e2 <ai_platform_api_get_network_report+0xce>
 80037f6:	e7fe      	b.n	80037f6 <ai_platform_api_get_network_report+0xe2>
 80037f8:	2c00      	cmp	r4, #0
 80037fa:	f000 819e 	beq.w	8003b3a <ai_platform_api_get_network_report+0x426>
 80037fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d04e      	beq.n	80038a2 <ai_platform_api_get_network_report+0x18e>
 8003804:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8003808:	f1b9 0f00 	cmp.w	r9, #0
 800380c:	d049      	beq.n	80038a2 <ai_platform_api_get_network_report+0x18e>
 800380e:	f04f 0a00 	mov.w	sl, #0
 8003812:	e9cd 7b00 	strd	r7, fp, [sp]
 8003816:	4655      	mov	r5, sl
 8003818:	e016      	b.n	8003848 <ai_platform_api_get_network_report+0x134>
 800381a:	2101      	movs	r1, #1
 800381c:	f847 100e 	str.w	r1, [r7, lr]
 8003820:	69b1      	ldr	r1, [r6, #24]
 8003822:	6849      	ldr	r1, [r1, #4]
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	f04f 0301 	mov.w	r3, #1
 800382a:	7523      	strb	r3, [r4, #20]
 800382c:	2300      	movs	r3, #0
 800382e:	60e3      	str	r3, [r4, #12]
 8003830:	6963      	ldr	r3, [r4, #20]
 8003832:	6121      	str	r1, [r4, #16]
 8003834:	e9c4 0200 	strd	r0, r2, [r4]
 8003838:	f368 231f 	bfi	r3, r8, #8, #24
 800383c:	f8c4 b018 	str.w	fp, [r4, #24]
 8003840:	3501      	adds	r5, #1
 8003842:	f10a 0a1c 	add.w	sl, sl, #28
 8003846:	6163      	str	r3, [r4, #20]
 8003848:	f8b9 3000 	ldrh.w	r3, [r9]
 800384c:	42ab      	cmp	r3, r5
 800384e:	b2aa      	uxth	r2, r5
 8003850:	d933      	bls.n	80038ba <ai_platform_api_get_network_report+0x1a6>
 8003852:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003856:	b383      	cbz	r3, 80038ba <ai_platform_api_get_network_report+0x1a6>
 8003858:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800385c:	b36e      	cbz	r6, 80038ba <ai_platform_api_get_network_report+0x1a6>
 800385e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003862:	69b2      	ldr	r2, [r6, #24]
 8003864:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8003868:	6810      	ldr	r0, [r2, #0]
 800386a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800386e:	68b3      	ldr	r3, [r6, #8]
 8003870:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8003874:	f001 fe18 	bl	80054a8 <ai_array_to_buffer_fmt>
 8003878:	69b1      	ldr	r1, [r6, #24]
 800387a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800387e:	688a      	ldr	r2, [r1, #8]
 8003880:	4454      	add	r4, sl
 8003882:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0cb      	beq.n	8003822 <ai_platform_api_get_network_report+0x10e>
 800388a:	2100      	movs	r1, #0
 800388c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003890:	6831      	ldr	r1, [r6, #0]
 8003892:	6059      	str	r1, [r3, #4]
 8003894:	b111      	cbz	r1, 800389c <ai_platform_api_get_network_report+0x188>
 8003896:	8849      	ldrh	r1, [r1, #2]
 8003898:	2900      	cmp	r1, #0
 800389a:	d1be      	bne.n	800381a <ai_platform_api_get_network_report+0x106>
 800389c:	69b1      	ldr	r1, [r6, #24]
 800389e:	2300      	movs	r3, #0
 80038a0:	e7bf      	b.n	8003822 <ai_platform_api_get_network_report+0x10e>
 80038a2:	2400      	movs	r4, #0
 80038a4:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
 80038a8:	f8ab 4038 	strh.w	r4, [fp, #56]	; 0x38
 80038ac:	2218      	movs	r2, #24
 80038ae:	2112      	movs	r1, #18
 80038b0:	f107 0010 	add.w	r0, r7, #16
 80038b4:	f000 ff30 	bl	8004718 <core_set_error>
 80038b8:	e77a      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 80038ba:	e9dd 7b00 	ldrd	r7, fp, [sp]
 80038be:	2a00      	cmp	r2, #0
 80038c0:	d0ef      	beq.n	80038a2 <ai_platform_api_get_network_report+0x18e>
 80038c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 80038cc:	f8ab 2038 	strh.w	r2, [fp, #56]	; 0x38
 80038d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f240 8125 	bls.w	8003b22 <ai_platform_api_get_network_report+0x40e>
 80038d8:	f04f 0a00 	mov.w	sl, #0
 80038dc:	e9cd 7b00 	strd	r7, fp, [sp]
 80038e0:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80038e4:	4655      	mov	r5, sl
 80038e6:	e016      	b.n	8003916 <ai_platform_api_get_network_report+0x202>
 80038e8:	2101      	movs	r1, #1
 80038ea:	f847 100e 	str.w	r1, [r7, lr]
 80038ee:	69b1      	ldr	r1, [r6, #24]
 80038f0:	6849      	ldr	r1, [r1, #4]
 80038f2:	60a3      	str	r3, [r4, #8]
 80038f4:	f04f 0301 	mov.w	r3, #1
 80038f8:	7523      	strb	r3, [r4, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	60e3      	str	r3, [r4, #12]
 80038fe:	6963      	ldr	r3, [r4, #20]
 8003900:	6121      	str	r1, [r4, #16]
 8003902:	e9c4 0200 	strd	r0, r2, [r4]
 8003906:	f368 231f 	bfi	r3, r8, #8, #24
 800390a:	f8c4 b018 	str.w	fp, [r4, #24]
 800390e:	3501      	adds	r5, #1
 8003910:	f10a 0a1c 	add.w	sl, sl, #28
 8003914:	6163      	str	r3, [r4, #20]
 8003916:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800391a:	42ab      	cmp	r3, r5
 800391c:	b2aa      	uxth	r2, r5
 800391e:	d935      	bls.n	800398c <ai_platform_api_get_network_report+0x278>
 8003920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d031      	beq.n	800398c <ai_platform_api_get_network_report+0x278>
 8003928:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800392c:	b376      	cbz	r6, 800398c <ai_platform_api_get_network_report+0x278>
 800392e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003932:	69b2      	ldr	r2, [r6, #24]
 8003934:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8003938:	6810      	ldr	r0, [r2, #0]
 800393a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800393e:	68b3      	ldr	r3, [r6, #8]
 8003940:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8003944:	f001 fdb0 	bl	80054a8 <ai_array_to_buffer_fmt>
 8003948:	69b1      	ldr	r1, [r6, #24]
 800394a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800394e:	688a      	ldr	r2, [r1, #8]
 8003950:	4454      	add	r4, sl
 8003952:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ca      	beq.n	80038f0 <ai_platform_api_get_network_report+0x1dc>
 800395a:	2100      	movs	r1, #0
 800395c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003960:	6831      	ldr	r1, [r6, #0]
 8003962:	6059      	str	r1, [r3, #4]
 8003964:	b111      	cbz	r1, 800396c <ai_platform_api_get_network_report+0x258>
 8003966:	8849      	ldrh	r1, [r1, #2]
 8003968:	2900      	cmp	r1, #0
 800396a:	d1bd      	bne.n	80038e8 <ai_platform_api_get_network_report+0x1d4>
 800396c:	69b1      	ldr	r1, [r6, #24]
 800396e:	2300      	movs	r3, #0
 8003970:	e7be      	b.n	80038f0 <ai_platform_api_get_network_report+0x1dc>
 8003972:	bf00      	nop
 8003974:	a1c00100 	.word	0xa1c00100
 8003978:	e0042000 	.word	0xe0042000
 800397c:	58024000 	.word	0x58024000
 8003980:	f407a5c2 	.word	0xf407a5c2
 8003984:	b5e8b5cd 	.word	0xb5e8b5cd
 8003988:	40023000 	.word	0x40023000
 800398c:	e9dd 7b00 	ldrd	r7, fp, [sp]
 8003990:	2a00      	cmp	r2, #0
 8003992:	f000 80c6 	beq.w	8003b22 <ai_platform_api_get_network_report+0x40e>
 8003996:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800399a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80039a4:	f8ab 203a 	strh.w	r2, [fp, #58]	; 0x3a
 80039a8:	4630      	mov	r0, r6
 80039aa:	f7ff fbfb 	bl	80031a4 <ai_buffer_array_sane>
 80039ae:	4604      	mov	r4, r0
 80039b0:	b938      	cbnz	r0, 80039c2 <ai_platform_api_get_network_report+0x2ae>
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff fbf6 	bl	80031a4 <ai_buffer_array_sane>
 80039b8:	b118      	cbz	r0, 80039c2 <ai_platform_api_get_network_report+0x2ae>
 80039ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 80c5 	bne.w	8003b4c <ai_platform_api_get_network_report+0x438>
 80039c2:	f107 081c 	add.w	r8, r7, #28
 80039c6:	4640      	mov	r0, r8
 80039c8:	f7ff fbec 	bl	80031a4 <ai_buffer_array_sane>
 80039cc:	4604      	mov	r4, r0
 80039ce:	b938      	cbnz	r0, 80039e0 <ai_platform_api_get_network_report+0x2cc>
 80039d0:	4640      	mov	r0, r8
 80039d2:	f7ff fbe7 	bl	80031a4 <ai_buffer_array_sane>
 80039d6:	b118      	cbz	r0, 80039e0 <ai_platform_api_get_network_report+0x2cc>
 80039d8:	8bfb      	ldrh	r3, [r7, #30]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 80bd 	bne.w	8003b5a <ai_platform_api_get_network_report+0x446>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8cb 3080 	str.w	r3, [fp, #128]	; 0x80
 80039e6:	f7ff fbf7 	bl	80031d8 <_ai_platform_acquire_crc>
 80039ea:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <ai_platform_api_get_network_report+0x558>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	d010      	beq.n	8003a1a <ai_platform_api_get_network_report+0x306>
 80039f8:	4a9d      	ldr	r2, [pc, #628]	; (8003c70 <ai_platform_api_get_network_report+0x55c>)
 80039fa:	2301      	movs	r3, #1
 80039fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1fb      	bne.n	8003a00 <ai_platform_api_get_network_report+0x2ec>
 8003a08:	4b9a      	ldr	r3, [pc, #616]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003a0a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a12:	4b99      	ldr	r3, [pc, #612]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d00d      	beq.n	8003a34 <ai_platform_api_get_network_report+0x320>
 8003a18:	e7fe      	b.n	8003a18 <ai_platform_api_get_network_report+0x304>
 8003a1a:	4a98      	ldr	r2, [pc, #608]	; (8003c7c <ai_platform_api_get_network_report+0x568>)
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	6093      	str	r3, [r2, #8]
 8003a20:	6893      	ldr	r3, [r2, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1fc      	bne.n	8003a20 <ai_platform_api_get_network_report+0x30c>
 8003a26:	4b93      	ldr	r3, [pc, #588]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4b92      	ldr	r3, [pc, #584]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	f040 808a 	bne.w	8003b48 <ai_platform_api_get_network_report+0x434>
 8003a34:	f7ff fbd2 	bl	80031dc <_ai_platform_release_crc>
 8003a38:	4b91      	ldr	r3, [pc, #580]	; (8003c80 <ai_platform_api_get_network_report+0x56c>)
 8003a3a:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a3e:	f7ff fbcb 	bl	80031d8 <_ai_platform_acquire_crc>
 8003a42:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <ai_platform_api_get_network_report+0x558>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d010      	beq.n	8003a72 <ai_platform_api_get_network_report+0x35e>
 8003a50:	4b87      	ldr	r3, [pc, #540]	; (8003c70 <ai_platform_api_get_network_report+0x55c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003a58:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	d1fb      	bne.n	8003a58 <ai_platform_api_get_network_report+0x344>
 8003a60:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003a62:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003a66:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003a6a:	4b83      	ldr	r3, [pc, #524]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d00c      	beq.n	8003a8a <ai_platform_api_get_network_report+0x376>
 8003a70:	e7fe      	b.n	8003a70 <ai_platform_api_get_network_report+0x35c>
 8003a72:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <ai_platform_api_get_network_report+0x568>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	d1fc      	bne.n	8003a78 <ai_platform_api_get_network_report+0x364>
 8003a7e:	4a7d      	ldr	r2, [pc, #500]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b7c      	ldr	r3, [pc, #496]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d15f      	bne.n	8003b4a <ai_platform_api_get_network_report+0x436>
 8003a8a:	f7ff fba7 	bl	80031dc <_ai_platform_release_crc>
 8003a8e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003a92:	f8cb 3014 	str.w	r3, [fp, #20]
 8003a96:	f7ff fb9f 	bl	80031d8 <_ai_platform_acquire_crc>
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <ai_platform_api_get_network_report+0x558>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d010      	beq.n	8003aca <ai_platform_api_get_network_report+0x3b6>
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <ai_platform_api_get_network_report+0x55c>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003ab0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d1fb      	bne.n	8003ab0 <ai_platform_api_get_network_report+0x39c>
 8003ab8:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003aba:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003abe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d00c      	beq.n	8003ae2 <ai_platform_api_get_network_report+0x3ce>
 8003ac8:	e7fe      	b.n	8003ac8 <ai_platform_api_get_network_report+0x3b4>
 8003aca:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <ai_platform_api_get_network_report+0x568>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	d1fc      	bne.n	8003ad0 <ai_platform_api_get_network_report+0x3bc>
 8003ad6:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b66      	ldr	r3, [pc, #408]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d142      	bne.n	8003b68 <ai_platform_api_get_network_report+0x454>
 8003ae2:	f7ff fb7b 	bl	80031dc <_ai_platform_release_crc>
 8003ae6:	f240 2301 	movw	r3, #513	; 0x201
 8003aea:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8003aee:	f7ff fb73 	bl	80031d8 <_ai_platform_acquire_crc>
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <ai_platform_api_get_network_report+0x558>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afe:	d034      	beq.n	8003b6a <ai_platform_api_get_network_report+0x456>
 8003b00:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <ai_platform_api_get_network_report+0x55c>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003b08:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d1fb      	bne.n	8003b08 <ai_platform_api_get_network_report+0x3f4>
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003b12:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003b16:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003b1a:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d030      	beq.n	8003b82 <ai_platform_api_get_network_report+0x46e>
 8003b20:	e7fe      	b.n	8003b20 <ai_platform_api_get_network_report+0x40c>
 8003b22:	2400      	movs	r4, #0
 8003b24:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40
 8003b28:	f8ab 403a 	strh.w	r4, [fp, #58]	; 0x3a
 8003b2c:	2218      	movs	r2, #24
 8003b2e:	2113      	movs	r1, #19
 8003b30:	f107 0010 	add.w	r0, r7, #16
 8003b34:	f000 fdf0 	bl	8004718 <core_set_error>
 8003b38:	e63a      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003b3a:	2218      	movs	r2, #24
 8003b3c:	2111      	movs	r1, #17
 8003b3e:	f107 0010 	add.w	r0, r7, #16
 8003b42:	f000 fde9 	bl	8004718 <core_set_error>
 8003b46:	e633      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003b48:	e7fe      	b.n	8003b48 <ai_platform_api_get_network_report+0x434>
 8003b4a:	e7fe      	b.n	8003b4a <ai_platform_api_get_network_report+0x436>
 8003b4c:	2213      	movs	r2, #19
 8003b4e:	2111      	movs	r1, #17
 8003b50:	f107 0010 	add.w	r0, r7, #16
 8003b54:	f000 fde0 	bl	8004718 <core_set_error>
 8003b58:	e62a      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003b5a:	2212      	movs	r2, #18
 8003b5c:	2111      	movs	r1, #17
 8003b5e:	f107 0010 	add.w	r0, r7, #16
 8003b62:	f000 fdd9 	bl	8004718 <core_set_error>
 8003b66:	e623      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003b68:	e7fe      	b.n	8003b68 <ai_platform_api_get_network_report+0x454>
 8003b6a:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <ai_platform_api_get_network_report+0x568>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d1fc      	bne.n	8003b70 <ai_platform_api_get_network_report+0x45c>
 8003b76:	4a3f      	ldr	r2, [pc, #252]	; (8003c74 <ai_platform_api_get_network_report+0x560>)
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <ai_platform_api_get_network_report+0x564>)
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d14a      	bne.n	8003c18 <ai_platform_api_get_network_report+0x504>
 8003b82:	f7ff fb2b 	bl	80031dc <_ai_platform_release_crc>
 8003b86:	f240 5301 	movw	r3, #1281	; 0x501
 8003b8a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8003b8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b90:	f001 fd36 	bl	8005600 <ai_platform_version_get>
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <ai_platform_api_get_network_report+0x570>)
 8003b96:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8003b9a:	f8cb 0020 	str.w	r0, [fp, #32]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10d      	bne.n	8003bbe <ai_platform_api_get_network_report+0x4aa>
 8003ba2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003ba6:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8003baa:	e882 0003 	stmia.w	r2, {r0, r1}
 8003bae:	e898 0003 	ldmia.w	r8, {r0, r1}
 8003bb2:	f10b 0348 	add.w	r3, fp, #72	; 0x48
 8003bb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bba:	2401      	movs	r4, #1
 8003bbc:	e5f8      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <ai_platform_api_get_network_report+0x574>)
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <ai_platform_api_get_network_report+0x578>)
 8003bc2:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f240 4201 	movw	r2, #1025	; 0x401
 8003bce:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8003bd2:	e9cb 0114 	strd	r0, r1, [fp, #80]	; 0x50
 8003bd6:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
 8003bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bdc:	f10d 0908 	add.w	r9, sp, #8
 8003be0:	f10b 0444 	add.w	r4, fp, #68	; 0x44
 8003be4:	f8cb 905c 	str.w	r9, [fp, #92]	; 0x5c
 8003be8:	46a6      	mov	lr, r4
 8003bea:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8003bee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003bf2:	f10b 0560 	add.w	r5, fp, #96	; 0x60
 8003bf6:	46ac      	mov	ip, r5
 8003bf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003bfc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003c00:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7ff facd 	bl	80031a4 <ai_buffer_array_sane>
 8003c0a:	b990      	cbnz	r0, 8003c32 <ai_platform_api_get_network_report+0x51e>
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	f7ff fac9 	bl	80031a4 <ai_buffer_array_sane>
 8003c12:	b910      	cbnz	r0, 8003c1a <ai_platform_api_get_network_report+0x506>
 8003c14:	2401      	movs	r4, #1
 8003c16:	e5cb      	b.n	80037b0 <ai_platform_api_get_network_report+0x9c>
 8003c18:	e7fe      	b.n	8003c18 <ai_platform_api_get_network_report+0x504>
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	f7ff fac2 	bl	80031a4 <ai_buffer_array_sane>
 8003c20:	b198      	cbz	r0, 8003c4a <ai_platform_api_get_network_report+0x536>
 8003c22:	6a3d      	ldr	r5, [r7, #32]
 8003c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c30:	e7f0      	b.n	8003c14 <ai_platform_api_get_network_report+0x500>
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7ff fab6 	bl	80031a4 <ai_buffer_array_sane>
 8003c38:	b178      	cbz	r0, 8003c5a <ai_platform_api_get_network_report+0x546>
 8003c3a:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8003c3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003c44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c48:	e7e0      	b.n	8003c0c <ai_platform_api_get_network_report+0x4f8>
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c58:	deff      	udf	#255	; 0xff
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c64:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c68:	deff      	udf	#255	; 0xff
 8003c6a:	bf00      	nop
 8003c6c:	e0042000 	.word	0xe0042000
 8003c70:	58024000 	.word	0x58024000
 8003c74:	f407a5c2 	.word	0xf407a5c2
 8003c78:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c7c:	40023000 	.word	0x40023000
 8003c80:	08009d14 	.word	0x08009d14
 8003c84:	a1facade 	.word	0xa1facade
 8003c88:	00040440 	.word	0x00040440
 8003c8c:	080083d0 	.word	0x080083d0

08003c90 <ai_platform_network_create>:
 8003c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c94:	b083      	sub	sp, #12
 8003c96:	4606      	mov	r6, r0
 8003c98:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003c9c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003ca0:	4615      	mov	r5, r2
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	f7ff fa98 	bl	80031d8 <_ai_platform_acquire_crc>
 8003ca8:	b188      	cbz	r0, 8003cce <ai_platform_network_create+0x3e>
 8003caa:	4a5d      	ldr	r2, [pc, #372]	; (8003e20 <ai_platform_network_create+0x190>)
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003cb2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	d00e      	beq.n	8003cd8 <ai_platform_network_create+0x48>
 8003cba:	4a5a      	ldr	r2, [pc, #360]	; (8003e24 <ai_platform_network_create+0x194>)
 8003cbc:	2118      	movs	r1, #24
 8003cbe:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003cc2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003cc6:	2918      	cmp	r1, #24
 8003cc8:	d018      	beq.n	8003cfc <ai_platform_network_create+0x6c>
 8003cca:	f7ff fa87 	bl	80031dc <_ai_platform_release_crc>
 8003cce:	f244 1033 	movw	r0, #16691	; 0x4133
 8003cd2:	b003      	add	sp, #12
 8003cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cd8:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <ai_platform_network_create+0x198>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	6091      	str	r1, [r2, #8]
 8003cde:	2114      	movs	r1, #20
 8003ce0:	e001      	b.n	8003ce6 <ai_platform_network_create+0x56>
 8003ce2:	3901      	subs	r1, #1
 8003ce4:	d002      	beq.n	8003cec <ai_platform_network_create+0x5c>
 8003ce6:	6894      	ldr	r4, [r2, #8]
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d1fa      	bne.n	8003ce2 <ai_platform_network_create+0x52>
 8003cec:	4a4e      	ldr	r2, [pc, #312]	; (8003e28 <ai_platform_network_create+0x198>)
 8003cee:	6891      	ldr	r1, [r2, #8]
 8003cf0:	b911      	cbnz	r1, 8003cf8 <ai_platform_network_create+0x68>
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	3201      	adds	r2, #1
 8003cf6:	d008      	beq.n	8003d0a <ai_platform_network_create+0x7a>
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	e7e6      	b.n	8003cca <ai_platform_network_create+0x3a>
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003d02:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d1fb      	bne.n	8003d02 <ai_platform_network_create+0x72>
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fa66 	bl	80031dc <_ai_platform_release_crc>
 8003d10:	f7ff fa62 	bl	80031d8 <_ai_platform_acquire_crc>
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <ai_platform_network_create+0x190>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d010      	beq.n	8003d44 <ai_platform_network_create+0xb4>
 8003d22:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <ai_platform_network_create+0x194>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003d2a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d1fb      	bne.n	8003d2a <ai_platform_network_create+0x9a>
 8003d32:	4a3e      	ldr	r2, [pc, #248]	; (8003e2c <ai_platform_network_create+0x19c>)
 8003d34:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003d38:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003d3c:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <ai_platform_network_create+0x1a0>)
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d00c      	beq.n	8003d5c <ai_platform_network_create+0xcc>
 8003d42:	e7fe      	b.n	8003d42 <ai_platform_network_create+0xb2>
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <ai_platform_network_create+0x198>)
 8003d46:	2301      	movs	r3, #1
 8003d48:	6093      	str	r3, [r2, #8]
 8003d4a:	6893      	ldr	r3, [r2, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1fc      	bne.n	8003d4a <ai_platform_network_create+0xba>
 8003d50:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <ai_platform_network_create+0x19c>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <ai_platform_network_create+0x1a0>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d122      	bne.n	8003da2 <ai_platform_network_create+0x112>
 8003d5c:	f7ff fa3e 	bl	80031dc <_ai_platform_release_crc>
 8003d60:	b38e      	cbz	r6, 8003dc6 <ai_platform_network_create+0x136>
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <ai_platform_network_create+0x1a4>)
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	6035      	str	r5, [r6, #0]
 8003d68:	f000 fcce 	bl	8004708 <core_init>
 8003d6c:	b1d0      	cbz	r0, 8003da4 <ai_platform_network_create+0x114>
 8003d6e:	f7ff fa33 	bl	80031d8 <_ai_platform_acquire_crc>
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <ai_platform_network_create+0x190>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d025      	beq.n	8003dcc <ai_platform_network_create+0x13c>
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <ai_platform_network_create+0x194>)
 8003d82:	2301      	movs	r3, #1
 8003d84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1fb      	bne.n	8003d88 <ai_platform_network_create+0xf8>
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <ai_platform_network_create+0x19c>)
 8003d92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003d96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003d9a:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <ai_platform_network_create+0x1a0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d022      	beq.n	8003de6 <ai_platform_network_create+0x156>
 8003da0:	e7fe      	b.n	8003da0 <ai_platform_network_create+0x110>
 8003da2:	e7fe      	b.n	8003da2 <ai_platform_network_create+0x112>
 8003da4:	2430      	movs	r4, #48	; 0x30
 8003da6:	2300      	movs	r3, #0
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	2610      	movs	r6, #16
 8003dac:	464a      	mov	r2, r9
 8003dae:	4641      	mov	r1, r8
 8003db0:	4638      	mov	r0, r7
 8003db2:	f001 fc1f 	bl	80055f4 <ai_version_get>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2000      	movs	r0, #0
 8003dba:	f364 0007 	bfi	r0, r4, #0, #8
 8003dbe:	64ab      	str	r3, [r5, #72]	; 0x48
 8003dc0:	f366 201f 	bfi	r0, r6, #8, #24
 8003dc4:	e785      	b.n	8003cd2 <ai_platform_network_create+0x42>
 8003dc6:	f241 0010 	movw	r0, #4112	; 0x1010
 8003dca:	e782      	b.n	8003cd2 <ai_platform_network_create+0x42>
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <ai_platform_network_create+0x198>)
 8003dce:	2301      	movs	r3, #1
 8003dd0:	6093      	str	r3, [r2, #8]
 8003dd2:	6893      	ldr	r3, [r2, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1fc      	bne.n	8003dd2 <ai_platform_network_create+0x142>
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <ai_platform_network_create+0x19c>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <ai_platform_network_create+0x1a0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d000      	beq.n	8003de6 <ai_platform_network_create+0x156>
 8003de4:	e7fe      	b.n	8003de4 <ai_platform_network_create+0x154>
 8003de6:	f7ff f9f9 	bl	80031dc <_ai_platform_release_crc>
 8003dea:	2200      	movs	r2, #0
 8003dec:	4641      	mov	r1, r8
 8003dee:	4638      	mov	r0, r7
 8003df0:	f001 fc00 	bl	80055f4 <ai_version_get>
 8003df4:	2200      	movs	r2, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	2105      	movs	r1, #5
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	f001 fbfa 	bl	80055f4 <ai_version_get>
 8003e00:	4284      	cmp	r4, r0
 8003e02:	d001      	beq.n	8003e08 <ai_platform_network_create+0x178>
 8003e04:	2401      	movs	r4, #1
 8003e06:	e7ce      	b.n	8003da6 <ai_platform_network_create+0x116>
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <ai_platform_network_create+0x1a8>)
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	a801      	add	r0, sp, #4
 8003e0e:	f000 fc8f 	bl	8004730 <ai_check_custom_types>
 8003e12:	b110      	cbz	r0, 8003e1a <ai_platform_network_create+0x18a>
 8003e14:	2600      	movs	r6, #0
 8003e16:	4634      	mov	r4, r6
 8003e18:	e7c8      	b.n	8003dac <ai_platform_network_create+0x11c>
 8003e1a:	2402      	movs	r4, #2
 8003e1c:	e7c3      	b.n	8003da6 <ai_platform_network_create+0x116>
 8003e1e:	bf00      	nop
 8003e20:	e0042000 	.word	0xe0042000
 8003e24:	58024000 	.word	0x58024000
 8003e28:	40023000 	.word	0x40023000
 8003e2c:	f407a5c2 	.word	0xf407a5c2
 8003e30:	b5e8b5cd 	.word	0xb5e8b5cd
 8003e34:	a1c00100 	.word	0xa1c00100
 8003e38:	84048403 	.word	0x84048403

08003e3c <ai_platform_network_destroy>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	4604      	mov	r4, r0
 8003e40:	b1e8      	cbz	r0, 8003e7e <ai_platform_network_destroy+0x42>
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <ai_platform_network_destroy+0xc0>)
 8003e44:	6802      	ldr	r2, [r0, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d119      	bne.n	8003e7e <ai_platform_network_destroy+0x42>
 8003e4a:	f7ff f9c5 	bl	80031d8 <_ai_platform_acquire_crc>
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <ai_platform_network_destroy+0xc4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d03b      	beq.n	8003ed4 <ai_platform_network_destroy+0x98>
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <ai_platform_network_destroy+0xc8>)
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003e64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1fb      	bne.n	8003e64 <ai_platform_network_destroy+0x28>
 8003e6c:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <ai_platform_network_destroy+0xcc>)
 8003e6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003e72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <ai_platform_network_destroy+0xd0>)
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d037      	beq.n	8003eec <ai_platform_network_destroy+0xb0>
 8003e7c:	e7fe      	b.n	8003e7c <ai_platform_network_destroy+0x40>
 8003e7e:	f7ff f9ab 	bl	80031d8 <_ai_platform_acquire_crc>
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <ai_platform_network_destroy+0xc4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d010      	beq.n	8003eb2 <ai_platform_network_destroy+0x76>
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <ai_platform_network_destroy+0xc8>)
 8003e92:	2301      	movs	r3, #1
 8003e94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003e98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1fb      	bne.n	8003e98 <ai_platform_network_destroy+0x5c>
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <ai_platform_network_destroy+0xcc>)
 8003ea2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003ea6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <ai_platform_network_destroy+0xd0>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d00d      	beq.n	8003ecc <ai_platform_network_destroy+0x90>
 8003eb0:	e7fe      	b.n	8003eb0 <ai_platform_network_destroy+0x74>
 8003eb2:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <ai_platform_network_destroy+0xd4>)
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	6093      	str	r3, [r2, #8]
 8003eb8:	6893      	ldr	r3, [r2, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1fc      	bne.n	8003eb8 <ai_platform_network_destroy+0x7c>
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <ai_platform_network_destroy+0xcc>)
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <ai_platform_network_destroy+0xd0>)
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d000      	beq.n	8003ecc <ai_platform_network_destroy+0x90>
 8003eca:	e7fe      	b.n	8003eca <ai_platform_network_destroy+0x8e>
 8003ecc:	f7ff f986 	bl	80031dc <_ai_platform_release_crc>
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd10      	pop	{r4, pc}
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <ai_platform_network_destroy+0xd4>)
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	6093      	str	r3, [r2, #8]
 8003eda:	6893      	ldr	r3, [r2, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1fc      	bne.n	8003eda <ai_platform_network_destroy+0x9e>
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <ai_platform_network_destroy+0xcc>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <ai_platform_network_destroy+0xd0>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <ai_platform_network_destroy+0xbe>
 8003eec:	f7ff f976 	bl	80031dc <_ai_platform_release_crc>
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fcb3 	bl	800485c <ai_layers_destroy_all>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	e7fe      	b.n	8003efa <ai_platform_network_destroy+0xbe>
 8003efc:	a1c00100 	.word	0xa1c00100
 8003f00:	e0042000 	.word	0xe0042000
 8003f04:	58024000 	.word	0x58024000
 8003f08:	f407a5c2 	.word	0xf407a5c2
 8003f0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f10:	40023000 	.word	0x40023000

08003f14 <ai_platform_network_init>:
 8003f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f18:	b1f8      	cbz	r0, 8003f5a <ai_platform_network_init+0x46>
 8003f1a:	4b6e      	ldr	r3, [pc, #440]	; (80040d4 <ai_platform_network_init+0x1c0>)
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	4604      	mov	r4, r0
 8003f22:	d11a      	bne.n	8003f5a <ai_platform_network_init+0x46>
 8003f24:	460e      	mov	r6, r1
 8003f26:	f7ff f957 	bl	80031d8 <_ai_platform_acquire_crc>
 8003f2a:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <ai_platform_network_init+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d03d      	beq.n	8003fb4 <ai_platform_network_init+0xa0>
 8003f38:	4a68      	ldr	r2, [pc, #416]	; (80040dc <ai_platform_network_init+0x1c8>)
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1fb      	bne.n	8003f40 <ai_platform_network_init+0x2c>
 8003f48:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <ai_platform_network_init+0x1cc>)
 8003f4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f52:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <ai_platform_network_init+0x1d0>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d039      	beq.n	8003fcc <ai_platform_network_init+0xb8>
 8003f58:	e7fe      	b.n	8003f58 <ai_platform_network_init+0x44>
 8003f5a:	f7ff f93d 	bl	80031d8 <_ai_platform_acquire_crc>
 8003f5e:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <ai_platform_network_init+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d010      	beq.n	8003f8e <ai_platform_network_init+0x7a>
 8003f6c:	4a5b      	ldr	r2, [pc, #364]	; (80040dc <ai_platform_network_init+0x1c8>)
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1fb      	bne.n	8003f74 <ai_platform_network_init+0x60>
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <ai_platform_network_init+0x1cc>)
 8003f7e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f82:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <ai_platform_network_init+0x1d0>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d00d      	beq.n	8003fa8 <ai_platform_network_init+0x94>
 8003f8c:	e7fe      	b.n	8003f8c <ai_platform_network_init+0x78>
 8003f8e:	4a56      	ldr	r2, [pc, #344]	; (80040e8 <ai_platform_network_init+0x1d4>)
 8003f90:	2301      	movs	r3, #1
 8003f92:	6093      	str	r3, [r2, #8]
 8003f94:	6893      	ldr	r3, [r2, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1fc      	bne.n	8003f94 <ai_platform_network_init+0x80>
 8003f9a:	4b51      	ldr	r3, [pc, #324]	; (80040e0 <ai_platform_network_init+0x1cc>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4b50      	ldr	r3, [pc, #320]	; (80040e4 <ai_platform_network_init+0x1d0>)
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d000      	beq.n	8003fa8 <ai_platform_network_init+0x94>
 8003fa6:	e7fe      	b.n	8003fa6 <ai_platform_network_init+0x92>
 8003fa8:	f7ff f918 	bl	80031dc <_ai_platform_release_crc>
 8003fac:	2600      	movs	r6, #0
 8003fae:	4630      	mov	r0, r6
 8003fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <ai_platform_network_init+0x1d4>)
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6093      	str	r3, [r2, #8]
 8003fba:	6893      	ldr	r3, [r2, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1fc      	bne.n	8003fba <ai_platform_network_init+0xa6>
 8003fc0:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <ai_platform_network_init+0x1cc>)
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <ai_platform_network_init+0x1d0>)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d11c      	bne.n	8004006 <ai_platform_network_init+0xf2>
 8003fcc:	f7ff f906 	bl	80031dc <_ai_platform_release_crc>
 8003fd0:	2e00      	cmp	r6, #0
 8003fd2:	d06f      	beq.n	80040b4 <ai_platform_network_init+0x1a0>
 8003fd4:	4b45      	ldr	r3, [pc, #276]	; (80040ec <ai_platform_network_init+0x1d8>)
 8003fd6:	6832      	ldr	r2, [r6, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d115      	bne.n	8004008 <ai_platform_network_init+0xf4>
 8003fdc:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003fe0:	6933      	ldr	r3, [r6, #16]
 8003fe2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003fe6:	89f7      	ldrh	r7, [r6, #14]
 8003fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fea:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003fee:	2303      	movs	r3, #3
 8003ff0:	84e7      	strh	r7, [r4, #38]	; 0x26
 8003ff2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003ff6:	60e3      	str	r3, [r4, #12]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4626      	mov	r6, r4
 8003ffc:	f000 fbc2 	bl	8004784 <ai_layers_init_all>
 8004000:	4630      	mov	r0, r6
 8004002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004006:	e7fe      	b.n	8004006 <ai_platform_network_init+0xf2>
 8004008:	2101      	movs	r1, #1
 800400a:	4630      	mov	r0, r6
 800400c:	4635      	mov	r5, r6
 800400e:	6876      	ldr	r6, [r6, #4]
 8004010:	f7ff f894 	bl	800313c <ai_buffer_get_size>
 8004014:	f105 081c 	add.w	r8, r5, #28
 8004018:	4681      	mov	r9, r0
 800401a:	2101      	movs	r1, #1
 800401c:	4640      	mov	r0, r8
 800401e:	6a2f      	ldr	r7, [r5, #32]
 8004020:	f7ff f88c 	bl	800313c <ai_buffer_get_size>
 8004024:	f1b9 0f00 	cmp.w	r9, #0
 8004028:	d025      	beq.n	8004076 <ai_platform_network_init+0x162>
 800402a:	2201      	movs	r2, #1
 800402c:	4696      	mov	lr, r2
 800402e:	bb30      	cbnz	r0, 800407e <ai_platform_network_init+0x16a>
 8004030:	4680      	mov	r8, r0
 8004032:	4607      	mov	r7, r0
 8004034:	b376      	cbz	r6, 8004094 <ai_platform_network_init+0x180>
 8004036:	8be3      	ldrh	r3, [r4, #30]
 8004038:	4573      	cmp	r3, lr
 800403a:	d323      	bcc.n	8004084 <ai_platform_network_init+0x170>
 800403c:	b142      	cbz	r2, 8004050 <ai_platform_network_init+0x13c>
 800403e:	46ac      	mov	ip, r5
 8004040:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004044:	6a25      	ldr	r5, [r4, #32]
 8004046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004048:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800404c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004050:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004052:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004056:	2600      	movs	r6, #0
 8004058:	42bb      	cmp	r3, r7
 800405a:	83a6      	strh	r6, [r4, #28]
 800405c:	d323      	bcc.n	80040a6 <ai_platform_network_init+0x192>
 800405e:	b37f      	cbz	r7, 80040c0 <ai_platform_network_init+0x1ac>
 8004060:	46c4      	mov	ip, r8
 8004062:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004066:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800406e:	46b6      	mov	lr, r6
 8004070:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004074:	e7bb      	b.n	8003fee <ai_platform_network_init+0xda>
 8004076:	464a      	mov	r2, r9
 8004078:	46ce      	mov	lr, r9
 800407a:	464d      	mov	r5, r9
 800407c:	e7d7      	b.n	800402e <ai_platform_network_init+0x11a>
 800407e:	b30f      	cbz	r7, 80040c4 <ai_platform_network_init+0x1b0>
 8004080:	2701      	movs	r7, #1
 8004082:	e7d7      	b.n	8004034 <ai_platform_network_init+0x120>
 8004084:	2212      	movs	r2, #18
 8004086:	2116      	movs	r1, #22
 8004088:	f104 0010 	add.w	r0, r4, #16
 800408c:	f000 fb44 	bl	8004718 <core_set_error>
 8004090:	2600      	movs	r6, #0
 8004092:	e78c      	b.n	8003fae <ai_platform_network_init+0x9a>
 8004094:	f1b9 0f00 	cmp.w	r9, #0
 8004098:	d0cd      	beq.n	8004036 <ai_platform_network_init+0x122>
 800409a:	2110      	movs	r1, #16
 800409c:	2212      	movs	r2, #18
 800409e:	1860      	adds	r0, r4, r1
 80040a0:	f000 fb3a 	bl	8004718 <core_set_error>
 80040a4:	e783      	b.n	8003fae <ai_platform_network_init+0x9a>
 80040a6:	2213      	movs	r2, #19
 80040a8:	2116      	movs	r1, #22
 80040aa:	f104 0010 	add.w	r0, r4, #16
 80040ae:	f000 fb33 	bl	8004718 <core_set_error>
 80040b2:	e77c      	b.n	8003fae <ai_platform_network_init+0x9a>
 80040b4:	2110      	movs	r1, #16
 80040b6:	2211      	movs	r2, #17
 80040b8:	1860      	adds	r0, r4, r1
 80040ba:	f000 fb2d 	bl	8004718 <core_set_error>
 80040be:	e776      	b.n	8003fae <ai_platform_network_init+0x9a>
 80040c0:	46be      	mov	lr, r7
 80040c2:	e794      	b.n	8003fee <ai_platform_network_init+0xda>
 80040c4:	2110      	movs	r1, #16
 80040c6:	2213      	movs	r2, #19
 80040c8:	1860      	adds	r0, r4, r1
 80040ca:	f000 fb25 	bl	8004718 <core_set_error>
 80040ce:	463e      	mov	r6, r7
 80040d0:	e76d      	b.n	8003fae <ai_platform_network_init+0x9a>
 80040d2:	bf00      	nop
 80040d4:	a1c00100 	.word	0xa1c00100
 80040d8:	e0042000 	.word	0xe0042000
 80040dc:	58024000 	.word	0x58024000
 80040e0:	f407a5c2 	.word	0xf407a5c2
 80040e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80040e8:	40023000 	.word	0x40023000
 80040ec:	a1facade 	.word	0xa1facade

080040f0 <ai_platform_network_post_init>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	b1f0      	cbz	r0, 8004132 <ai_platform_network_post_init+0x42>
 80040f4:	4b3c      	ldr	r3, [pc, #240]	; (80041e8 <ai_platform_network_post_init+0xf8>)
 80040f6:	6802      	ldr	r2, [r0, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	4604      	mov	r4, r0
 80040fc:	d119      	bne.n	8004132 <ai_platform_network_post_init+0x42>
 80040fe:	f7ff f86b 	bl	80031d8 <_ai_platform_acquire_crc>
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <ai_platform_network_post_init+0xfc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d03b      	beq.n	8004188 <ai_platform_network_post_init+0x98>
 8004110:	4a37      	ldr	r2, [pc, #220]	; (80041f0 <ai_platform_network_post_init+0x100>)
 8004112:	2301      	movs	r3, #1
 8004114:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004118:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1fb      	bne.n	8004118 <ai_platform_network_post_init+0x28>
 8004120:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <ai_platform_network_post_init+0x104>)
 8004122:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004126:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <ai_platform_network_post_init+0x108>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d037      	beq.n	80041a0 <ai_platform_network_post_init+0xb0>
 8004130:	e7fe      	b.n	8004130 <ai_platform_network_post_init+0x40>
 8004132:	f7ff f851 	bl	80031d8 <_ai_platform_acquire_crc>
 8004136:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <ai_platform_network_post_init+0xfc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d010      	beq.n	8004166 <ai_platform_network_post_init+0x76>
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <ai_platform_network_post_init+0x100>)
 8004146:	2301      	movs	r3, #1
 8004148:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800414c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1fb      	bne.n	800414c <ai_platform_network_post_init+0x5c>
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <ai_platform_network_post_init+0x104>)
 8004156:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800415a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <ai_platform_network_post_init+0x108>)
 8004160:	429a      	cmp	r2, r3
 8004162:	d00d      	beq.n	8004180 <ai_platform_network_post_init+0x90>
 8004164:	e7fe      	b.n	8004164 <ai_platform_network_post_init+0x74>
 8004166:	4a25      	ldr	r2, [pc, #148]	; (80041fc <ai_platform_network_post_init+0x10c>)
 8004168:	2301      	movs	r3, #1
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1fc      	bne.n	800416c <ai_platform_network_post_init+0x7c>
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <ai_platform_network_post_init+0x104>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <ai_platform_network_post_init+0x108>)
 800417a:	429a      	cmp	r2, r3
 800417c:	d000      	beq.n	8004180 <ai_platform_network_post_init+0x90>
 800417e:	e7fe      	b.n	800417e <ai_platform_network_post_init+0x8e>
 8004180:	f7ff f82c 	bl	80031dc <_ai_platform_release_crc>
 8004184:	2000      	movs	r0, #0
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <ai_platform_network_post_init+0x10c>)
 800418a:	2301      	movs	r3, #1
 800418c:	6093      	str	r3, [r2, #8]
 800418e:	6893      	ldr	r3, [r2, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1fc      	bne.n	800418e <ai_platform_network_post_init+0x9e>
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <ai_platform_network_post_init+0x104>)
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <ai_platform_network_post_init+0x108>)
 800419c:	429a      	cmp	r2, r3
 800419e:	d11a      	bne.n	80041d6 <ai_platform_network_post_init+0xe6>
 80041a0:	f7ff f81c 	bl	80031dc <_ai_platform_release_crc>
 80041a4:	68e3      	ldr	r3, [r4, #12]
 80041a6:	f013 0502 	ands.w	r5, r3, #2
 80041aa:	d015      	beq.n	80041d8 <ai_platform_network_post_init+0xe8>
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 faf7 	bl	80047a0 <ai_layers_post_init_all>
 80041b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041b4:	b16b      	cbz	r3, 80041d2 <ai_platform_network_post_init+0xe2>
 80041b6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80041b8:	e007      	b.n	80041ca <ai_platform_network_post_init+0xda>
 80041ba:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80041be:	4798      	blx	r3
 80041c0:	692b      	ldr	r3, [r5, #16]
 80041c2:	42ab      	cmp	r3, r5
 80041c4:	d005      	beq.n	80041d2 <ai_platform_network_post_init+0xe2>
 80041c6:	b123      	cbz	r3, 80041d2 <ai_platform_network_post_init+0xe2>
 80041c8:	461d      	mov	r5, r3
 80041ca:	4629      	mov	r1, r5
 80041cc:	2000      	movs	r0, #0
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	d1f3      	bne.n	80041ba <ai_platform_network_post_init+0xca>
 80041d2:	2001      	movs	r0, #1
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	e7fe      	b.n	80041d6 <ai_platform_network_post_init+0xe6>
 80041d8:	2210      	movs	r2, #16
 80041da:	2111      	movs	r1, #17
 80041dc:	18a0      	adds	r0, r4, r2
 80041de:	f000 fa9b 	bl	8004718 <core_set_error>
 80041e2:	4628      	mov	r0, r5
 80041e4:	bd38      	pop	{r3, r4, r5, pc}
 80041e6:	bf00      	nop
 80041e8:	a1c00100 	.word	0xa1c00100
 80041ec:	e0042000 	.word	0xe0042000
 80041f0:	58024000 	.word	0x58024000
 80041f4:	f407a5c2 	.word	0xf407a5c2
 80041f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80041fc:	40023000 	.word	0x40023000

08004200 <ai_platform_network_process>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	460e      	mov	r6, r1
 8004206:	b085      	sub	sp, #20
 8004208:	4693      	mov	fp, r2
 800420a:	4605      	mov	r5, r0
 800420c:	b120      	cbz	r0, 8004218 <ai_platform_network_process+0x18>
 800420e:	4bb8      	ldr	r3, [pc, #736]	; (80044f0 <ai_platform_network_process+0x2f0>)
 8004210:	6802      	ldr	r2, [r0, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf18      	it	ne
 8004216:	2500      	movne	r5, #0
 8004218:	f7fe ffde 	bl	80031d8 <_ai_platform_acquire_crc>
 800421c:	4bb5      	ldr	r3, [pc, #724]	; (80044f4 <ai_platform_network_process+0x2f4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d010      	beq.n	800424c <ai_platform_network_process+0x4c>
 800422a:	4ab3      	ldr	r2, [pc, #716]	; (80044f8 <ai_platform_network_process+0x2f8>)
 800422c:	2301      	movs	r3, #1
 800422e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004232:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1fb      	bne.n	8004232 <ai_platform_network_process+0x32>
 800423a:	4bb0      	ldr	r3, [pc, #704]	; (80044fc <ai_platform_network_process+0x2fc>)
 800423c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004240:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004244:	4bae      	ldr	r3, [pc, #696]	; (8004500 <ai_platform_network_process+0x300>)
 8004246:	429a      	cmp	r2, r3
 8004248:	d00d      	beq.n	8004266 <ai_platform_network_process+0x66>
 800424a:	e7fe      	b.n	800424a <ai_platform_network_process+0x4a>
 800424c:	4aad      	ldr	r2, [pc, #692]	; (8004504 <ai_platform_network_process+0x304>)
 800424e:	2301      	movs	r3, #1
 8004250:	6093      	str	r3, [r2, #8]
 8004252:	6893      	ldr	r3, [r2, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1fc      	bne.n	8004252 <ai_platform_network_process+0x52>
 8004258:	4ba8      	ldr	r3, [pc, #672]	; (80044fc <ai_platform_network_process+0x2fc>)
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	4ba8      	ldr	r3, [pc, #672]	; (8004500 <ai_platform_network_process+0x300>)
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 812c 	bne.w	80044be <ai_platform_network_process+0x2be>
 8004266:	f7fe ffb9 	bl	80031dc <_ai_platform_release_crc>
 800426a:	2d00      	cmp	r5, #0
 800426c:	f000 8154 	beq.w	8004518 <ai_platform_network_process+0x318>
 8004270:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8124 	beq.w	80044c0 <ai_platform_network_process+0x2c0>
 8004278:	68eb      	ldr	r3, [r5, #12]
 800427a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2700      	movs	r7, #0
 8004284:	2b03      	cmp	r3, #3
 8004286:	616f      	str	r7, [r5, #20]
 8004288:	f040 813e 	bne.w	8004508 <ai_platform_network_process+0x308>
 800428c:	2e00      	cmp	r6, #0
 800428e:	f000 811d 	beq.w	80044cc <ai_platform_network_process+0x2cc>
 8004292:	f1ba 0f00 	cmp.w	sl, #0
 8004296:	f000 8119 	beq.w	80044cc <ai_platform_network_process+0x2cc>
 800429a:	f8ba 3000 	ldrh.w	r3, [sl]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8114 	beq.w	80044cc <ai_platform_network_process+0x2cc>
 80042a4:	69b3      	ldr	r3, [r6, #24]
 80042a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80042b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d072      	beq.n	800439e <ai_platform_network_process+0x19e>
 80042b8:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80042bc:	2c00      	cmp	r4, #0
 80042be:	d06e      	beq.n	800439e <ai_platform_network_process+0x19e>
 80042c0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80042c4:	f8d3 9000 	ldr.w	r9, [r3]
 80042c8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80042cc:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80042d0:	f000 81de 	beq.w	8004690 <ai_platform_network_process+0x490>
 80042d4:	69a3      	ldr	r3, [r4, #24]
 80042d6:	2101      	movs	r1, #1
 80042d8:	4630      	mov	r0, r6
 80042da:	685d      	ldr	r5, [r3, #4]
 80042dc:	f7fe ff2e 	bl	800313c <ai_buffer_get_size>
 80042e0:	4285      	cmp	r5, r0
 80042e2:	f0c0 811b 	bcc.w	800451c <ai_platform_network_process+0x31c>
 80042e6:	68e0      	ldr	r0, [r4, #12]
 80042e8:	69b1      	ldr	r1, [r6, #24]
 80042ea:	68c2      	ldr	r2, [r0, #12]
 80042ec:	68cb      	ldr	r3, [r1, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f040 8114 	bne.w	800451c <ai_platform_network_process+0x31c>
 80042f4:	6882      	ldr	r2, [r0, #8]
 80042f6:	688b      	ldr	r3, [r1, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f040 810f 	bne.w	800451c <ai_platform_network_process+0x31c>
 80042fe:	6842      	ldr	r2, [r0, #4]
 8004300:	684b      	ldr	r3, [r1, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	f040 810a 	bne.w	800451c <ai_platform_network_process+0x31c>
 8004308:	69a3      	ldr	r3, [r4, #24]
 800430a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800430e:	f001 f95f 	bl	80055d0 <ai_array_get_data_byte_size>
 8004312:	4605      	mov	r5, r0
 8004314:	4620      	mov	r0, r4
 8004316:	f001 f985 	bl	8005624 <get_tensor_byte_size>
 800431a:	4285      	cmp	r5, r0
 800431c:	f0c0 80fe 	bcc.w	800451c <ai_platform_network_process+0x31c>
 8004320:	69a3      	ldr	r3, [r4, #24]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	f001 f8c0 	bl	80054a8 <ai_array_to_buffer_fmt>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	4058      	eors	r0, r3
 800432c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004330:	f040 81b9 	bne.w	80046a6 <ai_platform_network_process+0x4a6>
 8004334:	6873      	ldr	r3, [r6, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 81ac 	beq.w	8004694 <ai_platform_network_process+0x494>
 800433c:	69b3      	ldr	r3, [r6, #24]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 819c 	beq.w	800467e <ai_platform_network_process+0x47e>
 8004346:	9a01      	ldr	r2, [sp, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	bf38      	it	cc
 800434c:	461a      	movcc	r2, r3
 800434e:	4620      	mov	r0, r4
 8004350:	9201      	str	r2, [sp, #4]
 8004352:	f001 f967 	bl	8005624 <get_tensor_byte_size>
 8004356:	f8c8 0008 	str.w	r0, [r8, #8]
 800435a:	69b3      	ldr	r3, [r6, #24]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	f8c8 300c 	str.w	r3, [r8, #12]
 8004366:	6871      	ldr	r1, [r6, #4]
 8004368:	f8c8 1004 	str.w	r1, [r8, #4]
 800436c:	440b      	add	r3, r1
 800436e:	f849 300b 	str.w	r3, [r9, fp]
 8004372:	69a0      	ldr	r0, [r4, #24]
 8004374:	6803      	ldr	r3, [r0, #0]
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	f107 0701 	add.w	r7, r7, #1
 800437c:	f106 061c 	add.w	r6, r6, #28
 8004380:	f100 80af 	bmi.w	80044e2 <ai_platform_network_process+0x2e2>
 8004384:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	4419      	add	r1, r3
 800438c:	6081      	str	r1, [r0, #8]
 800438e:	69a3      	ldr	r3, [r4, #24]
 8004390:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	f8ba 3000 	ldrh.w	r3, [sl]
 800439a:	42bb      	cmp	r3, r7
 800439c:	d888      	bhi.n	80042b0 <ai_platform_network_process+0xb0>
 800439e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80043a2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80043a4:	f1bb 0f00 	cmp.w	fp, #0
 80043a8:	f000 8186 	beq.w	80046b8 <ai_platform_network_process+0x4b8>
 80043ac:	2a01      	cmp	r2, #1
 80043ae:	f240 815e 	bls.w	800466e <ai_platform_network_process+0x46e>
 80043b2:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80043b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8157 	beq.w	800466e <ai_platform_network_process+0x46e>
 80043c0:	465e      	mov	r6, fp
 80043c2:	2700      	movs	r7, #0
 80043c4:	462c      	mov	r4, r5
 80043c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80b4 	beq.w	8004538 <ai_platform_network_process+0x338>
 80043d0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	f000 80af 	beq.w	8004538 <ai_platform_network_process+0x338>
 80043da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80043de:	f8d3 8000 	ldr.w	r8, [r3]
 80043e2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80043e6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80043ea:	f000 8171 	beq.w	80046d0 <ai_platform_network_process+0x4d0>
 80043ee:	69ab      	ldr	r3, [r5, #24]
 80043f0:	2101      	movs	r1, #1
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	9302      	str	r3, [sp, #8]
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7fe fea0 	bl	800313c <ai_buffer_get_size>
 80043fc:	9b02      	ldr	r3, [sp, #8]
 80043fe:	4283      	cmp	r3, r0
 8004400:	f0c0 8134 	bcc.w	800466c <ai_platform_network_process+0x46c>
 8004404:	68e8      	ldr	r0, [r5, #12]
 8004406:	69b1      	ldr	r1, [r6, #24]
 8004408:	68c2      	ldr	r2, [r0, #12]
 800440a:	68cb      	ldr	r3, [r1, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	f040 812d 	bne.w	800466c <ai_platform_network_process+0x46c>
 8004412:	6882      	ldr	r2, [r0, #8]
 8004414:	688b      	ldr	r3, [r1, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	f040 8128 	bne.w	800466c <ai_platform_network_process+0x46c>
 800441c:	6842      	ldr	r2, [r0, #4]
 800441e:	684b      	ldr	r3, [r1, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	f040 8123 	bne.w	800466c <ai_platform_network_process+0x46c>
 8004426:	69ab      	ldr	r3, [r5, #24]
 8004428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800442c:	f001 f8d0 	bl	80055d0 <ai_array_get_data_byte_size>
 8004430:	9002      	str	r0, [sp, #8]
 8004432:	4628      	mov	r0, r5
 8004434:	f001 f8f6 	bl	8005624 <get_tensor_byte_size>
 8004438:	9b02      	ldr	r3, [sp, #8]
 800443a:	4283      	cmp	r3, r0
 800443c:	f0c0 8116 	bcc.w	800466c <ai_platform_network_process+0x46c>
 8004440:	69ab      	ldr	r3, [r5, #24]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	f001 f830 	bl	80054a8 <ai_array_to_buffer_fmt>
 8004448:	6833      	ldr	r3, [r6, #0]
 800444a:	4058      	eors	r0, r3
 800444c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004450:	f040 8136 	bne.w	80046c0 <ai_platform_network_process+0x4c0>
 8004454:	6873      	ldr	r3, [r6, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 814d 	beq.w	80046f6 <ai_platform_network_process+0x4f6>
 800445c:	69b3      	ldr	r3, [r6, #24]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 813f 	beq.w	80046e4 <ai_platform_network_process+0x4e4>
 8004466:	9a01      	ldr	r2, [sp, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf38      	it	cc
 800446c:	461a      	movcc	r2, r3
 800446e:	4628      	mov	r0, r5
 8004470:	9201      	str	r2, [sp, #4]
 8004472:	f001 f8d7 	bl	8005624 <get_tensor_byte_size>
 8004476:	f8ca 0008 	str.w	r0, [sl, #8]
 800447a:	69b3      	ldr	r3, [r6, #24]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	f8ca 300c 	str.w	r3, [sl, #12]
 8004486:	6871      	ldr	r1, [r6, #4]
 8004488:	f8ca 1004 	str.w	r1, [sl, #4]
 800448c:	440b      	add	r3, r1
 800448e:	f848 300b 	str.w	r3, [r8, fp]
 8004492:	69a8      	ldr	r0, [r5, #24]
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	f107 0701 	add.w	r7, r7, #1
 800449c:	f106 061c 	add.w	r6, r6, #28
 80044a0:	d445      	bmi.n	800452e <ai_platform_network_process+0x32e>
 80044a2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	4419      	add	r1, r3
 80044aa:	6081      	str	r1, [r0, #8]
 80044ac:	69ab      	ldr	r3, [r5, #24]
 80044ae:	f8da 2004 	ldr.w	r2, [sl, #4]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80044b8:	429f      	cmp	r7, r3
 80044ba:	d384      	bcc.n	80043c6 <ai_platform_network_process+0x1c6>
 80044bc:	e03c      	b.n	8004538 <ai_platform_network_process+0x338>
 80044be:	e7fe      	b.n	80044be <ai_platform_network_process+0x2be>
 80044c0:	68ea      	ldr	r2, [r5, #12]
 80044c2:	616b      	str	r3, [r5, #20]
 80044c4:	f002 0203 	and.w	r2, r2, #3
 80044c8:	2a03      	cmp	r2, #3
 80044ca:	d11d      	bne.n	8004508 <ai_platform_network_process+0x308>
 80044cc:	2217      	movs	r2, #23
 80044ce:	2112      	movs	r1, #18
 80044d0:	f105 0010 	add.w	r0, r5, #16
 80044d4:	f000 f920 	bl	8004718 <core_set_error>
 80044d8:	2400      	movs	r4, #0
 80044da:	4620      	mov	r0, r4
 80044dc:	b005      	add	sp, #20
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80044e6:	429f      	cmp	r7, r3
 80044e8:	f4ff aee2 	bcc.w	80042b0 <ai_platform_network_process+0xb0>
 80044ec:	e757      	b.n	800439e <ai_platform_network_process+0x19e>
 80044ee:	bf00      	nop
 80044f0:	a1c00100 	.word	0xa1c00100
 80044f4:	e0042000 	.word	0xe0042000
 80044f8:	58024000 	.word	0x58024000
 80044fc:	f407a5c2 	.word	0xf407a5c2
 8004500:	b5e8b5cd 	.word	0xb5e8b5cd
 8004504:	40023000 	.word	0x40023000
 8004508:	2230      	movs	r2, #48	; 0x30
 800450a:	2111      	movs	r1, #17
 800450c:	f105 0010 	add.w	r0, r5, #16
 8004510:	f000 f902 	bl	8004718 <core_set_error>
 8004514:	2400      	movs	r4, #0
 8004516:	e7e0      	b.n	80044da <ai_platform_network_process+0x2da>
 8004518:	462c      	mov	r4, r5
 800451a:	e7de      	b.n	80044da <ai_platform_network_process+0x2da>
 800451c:	9d02      	ldr	r5, [sp, #8]
 800451e:	2218      	movs	r2, #24
 8004520:	2112      	movs	r1, #18
 8004522:	f105 0010 	add.w	r0, r5, #16
 8004526:	f000 f8f7 	bl	8004718 <core_set_error>
 800452a:	2400      	movs	r4, #0
 800452c:	e7d5      	b.n	80044da <ai_platform_network_process+0x2da>
 800452e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004532:	429f      	cmp	r7, r3
 8004534:	f4ff af47 	bcc.w	80043c6 <ai_platform_network_process+0x1c6>
 8004538:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800453c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800453e:	82a3      	strh	r3, [r4, #20]
 8004540:	4625      	mov	r5, r4
 8004542:	2a00      	cmp	r2, #0
 8004544:	f040 808c 	bne.w	8004660 <ai_platform_network_process+0x460>
 8004548:	4616      	mov	r6, r2
 800454a:	4617      	mov	r7, r2
 800454c:	8aec      	ldrh	r4, [r5, #22]
 800454e:	429c      	cmp	r4, r3
 8004550:	bf38      	it	cc
 8004552:	46ab      	movcc	fp, r5
 8004554:	d2c1      	bcs.n	80044da <ai_platform_network_process+0x2da>
 8004556:	2e00      	cmp	r6, #0
 8004558:	d030      	beq.n	80045bc <ai_platform_network_process+0x3bc>
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	e014      	b.n	800458a <ai_platform_network_process+0x38a>
 8004560:	6882      	ldr	r2, [r0, #8]
 8004562:	68c5      	ldr	r5, [r0, #12]
 8004564:	6863      	ldr	r3, [r4, #4]
 8004566:	1b52      	subs	r2, r2, r5
 8004568:	4413      	add	r3, r2
 800456a:	6083      	str	r3, [r0, #8]
 800456c:	698b      	ldr	r3, [r1, #24]
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004576:	f859 200a 	ldr.w	r2, [r9, sl]
 800457a:	440b      	add	r3, r1
 800457c:	4293      	cmp	r3, r2
 800457e:	bf24      	itt	cs
 8004580:	68e3      	ldrcs	r3, [r4, #12]
 8004582:	1ad3      	subcs	r3, r2, r3
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	f108 0801 	add.w	r8, r8, #1
 800458a:	8833      	ldrh	r3, [r6, #0]
 800458c:	4543      	cmp	r3, r8
 800458e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004592:	d913      	bls.n	80045bc <ai_platform_network_process+0x3bc>
 8004594:	6873      	ldr	r3, [r6, #4]
 8004596:	b18b      	cbz	r3, 80045bc <ai_platform_network_process+0x3bc>
 8004598:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800459c:	b171      	cbz	r1, 80045bc <ai_platform_network_process+0x3bc>
 800459e:	6988      	ldr	r0, [r1, #24]
 80045a0:	68b2      	ldr	r2, [r6, #8]
 80045a2:	6803      	ldr	r3, [r0, #0]
 80045a4:	f8d2 9000 	ldr.w	r9, [r2]
 80045a8:	009d      	lsls	r5, r3, #2
 80045aa:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80045ae:	d5d7      	bpl.n	8004560 <ai_platform_network_process+0x360>
 80045b0:	6881      	ldr	r1, [r0, #8]
 80045b2:	68a2      	ldr	r2, [r4, #8]
 80045b4:	6860      	ldr	r0, [r4, #4]
 80045b6:	f000 fef1 	bl	800539c <st_int8_copy>
 80045ba:	e7da      	b.n	8004572 <ai_platform_network_process+0x372>
 80045bc:	4658      	mov	r0, fp
 80045be:	f000 f903 	bl	80047c8 <ai_layers_forward_all>
 80045c2:	2f00      	cmp	r7, #0
 80045c4:	d03d      	beq.n	8004642 <ai_platform_network_process+0x442>
 80045c6:	2400      	movs	r4, #0
 80045c8:	e016      	b.n	80045f8 <ai_platform_network_process+0x3f8>
 80045ca:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80045ce:	f859 100a 	ldr.w	r1, [r9, sl]
 80045d2:	4413      	add	r3, r2
 80045d4:	428b      	cmp	r3, r1
 80045d6:	bf24      	itt	cs
 80045d8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80045dc:	1acb      	subcs	r3, r1, r3
 80045de:	f8c8 3004 	str.w	r3, [r8, #4]
 80045e2:	6981      	ldr	r1, [r0, #24]
 80045e4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80045e8:	1b52      	subs	r2, r2, r5
 80045ea:	4413      	add	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
 80045ee:	6983      	ldr	r3, [r0, #24]
 80045f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	3401      	adds	r4, #1
 80045f8:	883b      	ldrh	r3, [r7, #0]
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	d921      	bls.n	8004642 <ai_platform_network_process+0x442>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	b1fb      	cbz	r3, 8004642 <ai_platform_network_process+0x442>
 8004602:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004606:	b1e0      	cbz	r0, 8004642 <ai_platform_network_process+0x442>
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	6983      	ldr	r3, [r0, #24]
 800460c:	f8d2 9000 	ldr.w	r9, [r2]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004618:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800461c:	d5d5      	bpl.n	80045ca <ai_platform_network_process+0x3ca>
 800461e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8004622:	6898      	ldr	r0, [r3, #8]
 8004624:	f000 feba 	bl	800539c <st_int8_copy>
 8004628:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800462c:	f859 200a 	ldr.w	r2, [r9, sl]
 8004630:	440b      	add	r3, r1
 8004632:	4293      	cmp	r3, r2
 8004634:	bf24      	itt	cs
 8004636:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800463a:	1ad3      	subcs	r3, r2, r3
 800463c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004640:	e7d9      	b.n	80045f6 <ai_platform_network_process+0x3f6>
 8004642:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8004646:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800464a:	3401      	adds	r4, #1
 800464c:	b2a4      	uxth	r4, r4
 800464e:	42a3      	cmp	r3, r4
 8004650:	f8ab 4016 	strh.w	r4, [fp, #22]
 8004654:	f63f af7f 	bhi.w	8004556 <ai_platform_network_process+0x356>
 8004658:	4620      	mov	r0, r4
 800465a:	b005      	add	sp, #20
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	2a01      	cmp	r2, #1
 8004662:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004664:	d03c      	beq.n	80046e0 <ai_platform_network_process+0x4e0>
 8004666:	f106 070c 	add.w	r7, r6, #12
 800466a:	e76f      	b.n	800454c <ai_platform_network_process+0x34c>
 800466c:	4625      	mov	r5, r4
 800466e:	2218      	movs	r2, #24
 8004670:	2113      	movs	r1, #19
 8004672:	f105 0010 	add.w	r0, r5, #16
 8004676:	f000 f84f 	bl	8004718 <core_set_error>
 800467a:	2400      	movs	r4, #0
 800467c:	e72d      	b.n	80044da <ai_platform_network_process+0x2da>
 800467e:	9d02      	ldr	r5, [sp, #8]
 8004680:	4604      	mov	r4, r0
 8004682:	2221      	movs	r2, #33	; 0x21
 8004684:	2112      	movs	r1, #18
 8004686:	f105 0010 	add.w	r0, r5, #16
 800468a:	f000 f845 	bl	8004718 <core_set_error>
 800468e:	e724      	b.n	80044da <ai_platform_network_process+0x2da>
 8004690:	9d02      	ldr	r5, [sp, #8]
 8004692:	e71b      	b.n	80044cc <ai_platform_network_process+0x2cc>
 8004694:	9d02      	ldr	r5, [sp, #8]
 8004696:	4604      	mov	r4, r0
 8004698:	2217      	movs	r2, #23
 800469a:	2112      	movs	r1, #18
 800469c:	f105 0010 	add.w	r0, r5, #16
 80046a0:	f000 f83a 	bl	8004718 <core_set_error>
 80046a4:	e719      	b.n	80044da <ai_platform_network_process+0x2da>
 80046a6:	9d02      	ldr	r5, [sp, #8]
 80046a8:	2219      	movs	r2, #25
 80046aa:	2112      	movs	r1, #18
 80046ac:	f105 0010 	add.w	r0, r5, #16
 80046b0:	f000 f832 	bl	8004718 <core_set_error>
 80046b4:	2400      	movs	r4, #0
 80046b6:	e710      	b.n	80044da <ai_platform_network_process+0x2da>
 80046b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80046bc:	82ab      	strh	r3, [r5, #20]
 80046be:	e740      	b.n	8004542 <ai_platform_network_process+0x342>
 80046c0:	f104 0010 	add.w	r0, r4, #16
 80046c4:	2219      	movs	r2, #25
 80046c6:	2113      	movs	r1, #19
 80046c8:	f000 f826 	bl	8004718 <core_set_error>
 80046cc:	2400      	movs	r4, #0
 80046ce:	e704      	b.n	80044da <ai_platform_network_process+0x2da>
 80046d0:	f104 0010 	add.w	r0, r4, #16
 80046d4:	2217      	movs	r2, #23
 80046d6:	2113      	movs	r1, #19
 80046d8:	f000 f81e 	bl	8004718 <core_set_error>
 80046dc:	4654      	mov	r4, sl
 80046de:	e6fc      	b.n	80044da <ai_platform_network_process+0x2da>
 80046e0:	2700      	movs	r7, #0
 80046e2:	e733      	b.n	800454c <ai_platform_network_process+0x34c>
 80046e4:	4625      	mov	r5, r4
 80046e6:	2221      	movs	r2, #33	; 0x21
 80046e8:	4604      	mov	r4, r0
 80046ea:	2113      	movs	r1, #19
 80046ec:	f105 0010 	add.w	r0, r5, #16
 80046f0:	f000 f812 	bl	8004718 <core_set_error>
 80046f4:	e6f1      	b.n	80044da <ai_platform_network_process+0x2da>
 80046f6:	4625      	mov	r5, r4
 80046f8:	2217      	movs	r2, #23
 80046fa:	4604      	mov	r4, r0
 80046fc:	2113      	movs	r1, #19
 80046fe:	f105 0010 	add.w	r0, r5, #16
 8004702:	f000 f809 	bl	8004718 <core_set_error>
 8004706:	e6e8      	b.n	80044da <ai_platform_network_process+0x2da>

08004708 <core_init>:
 8004708:	2001      	movs	r0, #1
 800470a:	4770      	bx	lr

0800470c <core_get_error>:
 800470c:	4603      	mov	r3, r0
 800470e:	2200      	movs	r2, #0
 8004710:	6800      	ldr	r0, [r0, #0]
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <core_set_error>:
 8004718:	4603      	mov	r3, r0
 800471a:	7800      	ldrb	r0, [r0, #0]
 800471c:	b108      	cbz	r0, 8004722 <core_set_error+0xa>
 800471e:	2000      	movs	r0, #0
 8004720:	4770      	bx	lr
 8004722:	7019      	strb	r1, [r3, #0]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	f362 211f 	bfi	r1, r2, #8, #24
 800472a:	2001      	movs	r0, #1
 800472c:	6019      	str	r1, [r3, #0]
 800472e:	4770      	bx	lr

08004730 <ai_check_custom_types>:
 8004730:	b082      	sub	sp, #8
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <ai_check_custom_types+0x50>)
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	b118      	cbz	r0, 8004740 <ai_check_custom_types+0x10>
 8004738:	7803      	ldrb	r3, [r0, #0]
 800473a:	2b03      	cmp	r3, #3
 800473c:	d002      	beq.n	8004744 <ai_check_custom_types+0x14>
 800473e:	2000      	movs	r0, #0
 8004740:	b002      	add	sp, #8
 8004742:	4770      	bx	lr
 8004744:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <ai_check_custom_types+0x26>
 800474c:	2001      	movs	r0, #1
 800474e:	f080 0001 	eor.w	r0, r0, #1
 8004752:	b002      	add	sp, #8
 8004754:	4770      	bx	lr
 8004756:	7842      	ldrb	r2, [r0, #1]
 8004758:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800475c:	429a      	cmp	r2, r3
 800475e:	f100 0001 	add.w	r0, r0, #1
 8004762:	d1f3      	bne.n	800474c <ai_check_custom_types+0x1c>
 8004764:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004768:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800476c:	429a      	cmp	r2, r3
 800476e:	d1ed      	bne.n	800474c <ai_check_custom_types+0x1c>
 8004770:	7842      	ldrb	r2, [r0, #1]
 8004772:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004776:	429a      	cmp	r2, r3
 8004778:	d1e8      	bne.n	800474c <ai_check_custom_types+0x1c>
 800477a:	2000      	movs	r0, #0
 800477c:	e7e7      	b.n	800474e <ai_check_custom_types+0x1e>
 800477e:	bf00      	nop
 8004780:	84048403 	.word	0x84048403

08004784 <ai_layers_init_all>:
 8004784:	4601      	mov	r1, r0
 8004786:	2000      	movs	r0, #0
 8004788:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800478a:	b143      	cbz	r3, 800479e <ai_layers_init_all+0x1a>
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	60d9      	str	r1, [r3, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	f100 0001 	add.w	r0, r0, #1
 8004796:	d002      	beq.n	800479e <ai_layers_init_all+0x1a>
 8004798:	b10a      	cbz	r2, 800479e <ai_layers_init_all+0x1a>
 800479a:	4613      	mov	r3, r2
 800479c:	e7f5      	b.n	800478a <ai_layers_init_all+0x6>
 800479e:	4770      	bx	lr

080047a0 <ai_layers_post_init_all>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80047a4:	2500      	movs	r5, #0
 80047a6:	b16c      	cbz	r4, 80047c4 <ai_layers_post_init_all+0x24>
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	07db      	lsls	r3, r3, #31
 80047ac:	d504      	bpl.n	80047b8 <ai_layers_post_init_all+0x18>
 80047ae:	6a23      	ldr	r3, [r4, #32]
 80047b0:	4620      	mov	r0, r4
 80047b2:	b10b      	cbz	r3, 80047b8 <ai_layers_post_init_all+0x18>
 80047b4:	4798      	blx	r3
 80047b6:	3501      	adds	r5, #1
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	d002      	beq.n	80047c4 <ai_layers_post_init_all+0x24>
 80047be:	b10b      	cbz	r3, 80047c4 <ai_layers_post_init_all+0x24>
 80047c0:	461c      	mov	r4, r3
 80047c2:	e7f0      	b.n	80047a6 <ai_layers_post_init_all+0x6>
 80047c4:	4628      	mov	r0, r5
 80047c6:	bd38      	pop	{r3, r4, r5, pc}

080047c8 <ai_layers_forward_all>:
 80047c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047cc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80047d0:	4604      	mov	r4, r0
 80047d2:	f1b8 0f00 	cmp.w	r8, #0
 80047d6:	d02b      	beq.n	8004830 <ai_layers_forward_all+0x68>
 80047d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80047da:	6381      	str	r1, [r0, #56]	; 0x38
 80047dc:	b321      	cbz	r1, 8004828 <ai_layers_forward_all+0x60>
 80047de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80047e0:	2001      	movs	r0, #1
 80047e2:	47c0      	blx	r8
 80047e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80047e6:	b1fe      	cbz	r6, 8004828 <ai_layers_forward_all+0x60>
 80047e8:	2700      	movs	r7, #0
 80047ea:	4631      	mov	r1, r6
 80047ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047ee:	2002      	movs	r0, #2
 80047f0:	47c0      	blx	r8
 80047f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80047f4:	4628      	mov	r0, r5
 80047f6:	696b      	ldr	r3, [r5, #20]
 80047f8:	4798      	blx	r3
 80047fa:	692e      	ldr	r6, [r5, #16]
 80047fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004800:	42b5      	cmp	r5, r6
 8004802:	f04f 0003 	mov.w	r0, #3
 8004806:	d007      	beq.n	8004818 <ai_layers_forward_all+0x50>
 8004808:	47c0      	blx	r8
 800480a:	3701      	adds	r7, #1
 800480c:	63a6      	str	r6, [r4, #56]	; 0x38
 800480e:	2e00      	cmp	r6, #0
 8004810:	d1eb      	bne.n	80047ea <ai_layers_forward_all+0x22>
 8004812:	4638      	mov	r0, r7
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	2003      	movs	r0, #3
 800481a:	47c0      	blx	r8
 800481c:	2300      	movs	r3, #0
 800481e:	3701      	adds	r7, #1
 8004820:	63a3      	str	r3, [r4, #56]	; 0x38
 8004822:	4638      	mov	r0, r7
 8004824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004828:	2700      	movs	r7, #0
 800482a:	4638      	mov	r0, r7
 800482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004830:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004832:	6385      	str	r5, [r0, #56]	; 0x38
 8004834:	2d00      	cmp	r5, #0
 8004836:	d0f7      	beq.n	8004828 <ai_layers_forward_all+0x60>
 8004838:	4647      	mov	r7, r8
 800483a:	696b      	ldr	r3, [r5, #20]
 800483c:	4628      	mov	r0, r5
 800483e:	4798      	blx	r3
 8004840:	462b      	mov	r3, r5
 8004842:	692d      	ldr	r5, [r5, #16]
 8004844:	429d      	cmp	r5, r3
 8004846:	d004      	beq.n	8004852 <ai_layers_forward_all+0x8a>
 8004848:	63a5      	str	r5, [r4, #56]	; 0x38
 800484a:	3701      	adds	r7, #1
 800484c:	2d00      	cmp	r5, #0
 800484e:	d1f4      	bne.n	800483a <ai_layers_forward_all+0x72>
 8004850:	e7df      	b.n	8004812 <ai_layers_forward_all+0x4a>
 8004852:	2300      	movs	r3, #0
 8004854:	63a3      	str	r3, [r4, #56]	; 0x38
 8004856:	3701      	adds	r7, #1
 8004858:	e7db      	b.n	8004812 <ai_layers_forward_all+0x4a>
 800485a:	bf00      	nop

0800485c <ai_layers_destroy_all>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004860:	2500      	movs	r5, #0
 8004862:	b16c      	cbz	r4, 8004880 <ai_layers_destroy_all+0x24>
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	075b      	lsls	r3, r3, #29
 8004868:	d504      	bpl.n	8004874 <ai_layers_destroy_all+0x18>
 800486a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800486c:	4620      	mov	r0, r4
 800486e:	b10b      	cbz	r3, 8004874 <ai_layers_destroy_all+0x18>
 8004870:	4798      	blx	r3
 8004872:	3501      	adds	r5, #1
 8004874:	6923      	ldr	r3, [r4, #16]
 8004876:	42a3      	cmp	r3, r4
 8004878:	d002      	beq.n	8004880 <ai_layers_destroy_all+0x24>
 800487a:	b10b      	cbz	r3, 8004880 <ai_layers_destroy_all+0x24>
 800487c:	461c      	mov	r4, r3
 800487e:	e7f0      	b.n	8004862 <ai_layers_destroy_all+0x6>
 8004880:	4628      	mov	r0, r5
 8004882:	bd38      	pop	{r3, r4, r5, pc}

08004884 <forward_dense>:
 8004884:	6983      	ldr	r3, [r0, #24]
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	2a00      	cmp	r2, #0
 800488a:	f000 8181 	beq.w	8004b90 <forward_dense+0x30c>
 800488e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004892:	ed2d 8b02 	vpush	{d8}
 8004896:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800489a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800489e:	b095      	sub	sp, #84	; 0x54
 80048a0:	b105      	cbz	r5, 80048a4 <forward_dense+0x20>
 80048a2:	682d      	ldr	r5, [r5, #0]
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	f000 828f 	beq.w	8004dc8 <forward_dense+0x544>
 80048aa:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80048ae:	b106      	cbz	r6, 80048b2 <forward_dense+0x2e>
 80048b0:	6836      	ldr	r6, [r6, #0]
 80048b2:	2a02      	cmp	r2, #2
 80048b4:	f000 816e 	beq.w	8004b94 <forward_dense+0x310>
 80048b8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80048bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8274 	beq.w	8004dac <forward_dense+0x528>
 80048c4:	4619      	mov	r1, r3
 80048c6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80048ca:	6809      	ldr	r1, [r1, #0]
 80048cc:	910d      	str	r1, [sp, #52]	; 0x34
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f240 826e 	bls.w	8004db0 <forward_dense+0x52c>
 80048d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048da:	460b      	mov	r3, r1
 80048dc:	68e8      	ldr	r0, [r5, #12]
 80048de:	68f7      	ldr	r7, [r6, #12]
 80048e0:	6840      	ldr	r0, [r0, #4]
 80048e2:	6999      	ldr	r1, [r3, #24]
 80048e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	680b      	ldr	r3, [r1, #0]
 80048ea:	9012      	str	r0, [sp, #72]	; 0x48
 80048ec:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80048f0:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80048f4:	fb00 f404 	mul.w	r4, r0, r4
 80048f8:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80048fc:	fa4e f000 	asr.w	r0, lr, r0
 8004900:	2a03      	cmp	r2, #3
 8004902:	9010      	str	r0, [sp, #64]	; 0x40
 8004904:	f000 825d 	beq.w	8004dc2 <forward_dense+0x53e>
 8004908:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800490c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004910:	2a00      	cmp	r2, #0
 8004912:	f000 8246 	beq.w	8004da2 <forward_dense+0x51e>
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	2a00      	cmp	r2, #0
 800491a:	f000 8242 	beq.w	8004da2 <forward_dense+0x51e>
 800491e:	2b04      	cmp	r3, #4
 8004920:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004924:	f000 822c 	beq.w	8004d80 <forward_dense+0x4fc>
 8004928:	2b08      	cmp	r3, #8
 800492a:	f000 8229 	beq.w	8004d80 <forward_dense+0x4fc>
 800492e:	f04f 0b00 	mov.w	fp, #0
 8004932:	69b2      	ldr	r2, [r6, #24]
 8004934:	69ab      	ldr	r3, [r5, #24]
 8004936:	6891      	ldr	r1, [r2, #8]
 8004938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	6952      	ldr	r2, [r2, #20]
 800493e:	9106      	str	r1, [sp, #24]
 8004940:	fb07 f404 	mul.w	r4, r7, r4
 8004944:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800494a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800494e:	4281      	cmp	r1, r0
 8004950:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8004954:	900e      	str	r0, [sp, #56]	; 0x38
 8004956:	940c      	str	r4, [sp, #48]	; 0x30
 8004958:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800495c:	f080 8113 	bcs.w	8004b86 <forward_dense+0x302>
 8004960:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004962:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8004bb0 <forward_dense+0x32c>
 8004966:	f021 0201 	bic.w	r2, r1, #1
 800496a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800496e:	9204      	str	r2, [sp, #16]
 8004970:	f001 0201 	and.w	r2, r1, #1
 8004974:	08c8      	lsrs	r0, r1, #3
 8004976:	9208      	str	r2, [sp, #32]
 8004978:	008a      	lsls	r2, r1, #2
 800497a:	f001 0a07 	and.w	sl, r1, #7
 800497e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004980:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004984:	3320      	adds	r3, #32
 8004986:	465c      	mov	r4, fp
 8004988:	9007      	str	r0, [sp, #28]
 800498a:	46cb      	mov	fp, r9
 800498c:	9205      	str	r2, [sp, #20]
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	46c1      	mov	r9, r8
 8004992:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	9b02      	ldr	r3, [sp, #8]
 800499e:	3b20      	subs	r3, #32
 80049a0:	930a      	str	r3, [sp, #40]	; 0x28
 80049a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a4:	b10b      	cbz	r3, 80049aa <forward_dense+0x126>
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2c00      	cmp	r4, #0
 80049ac:	f000 81da 	beq.w	8004d64 <forward_dense+0x4e0>
 80049b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80049b2:	2904      	cmp	r1, #4
 80049b4:	9906      	ldr	r1, [sp, #24]
 80049b6:	f000 80fd 	beq.w	8004bb4 <forward_dense+0x330>
 80049ba:	4549      	cmp	r1, r9
 80049bc:	f080 80d2 	bcs.w	8004b64 <forward_dense+0x2e0>
 80049c0:	460f      	mov	r7, r1
 80049c2:	9907      	ldr	r1, [sp, #28]
 80049c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80049c8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80049cc:	1c4e      	adds	r6, r1, #1
 80049ce:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80049d2:	4694      	mov	ip, r2
 80049d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80049d6:	468e      	mov	lr, r1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80de 	beq.w	8004b9a <forward_dense+0x316>
 80049de:	ecf3 2a01 	vldmia	r3!, {s5}
 80049e2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004bb0 <forward_dense+0x32c>
 80049e6:	f1be 0f00 	cmp.w	lr, #0
 80049ea:	f000 80de 	beq.w	8004baa <forward_dense+0x326>
 80049ee:	f10c 0108 	add.w	r1, ip, #8
 80049f2:	4640      	mov	r0, r8
 80049f4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80049f8:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80049fc:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004a00:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004a04:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004a08:	ed10 5a04 	vldr	s10, [r0, #-16]
 8004a0c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004a10:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004a14:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004a18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a1c:	edd5 7a00 	vldr	s15, [r5]
 8004a20:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004a24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004a2c:	ed95 3a00 	vldr	s6, [r5]
 8004a30:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8004a34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004a38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a3c:	3108      	adds	r1, #8
 8004a3e:	edd5 3a00 	vldr	s7, [r5]
 8004a42:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8004a46:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004a4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a4e:	3020      	adds	r0, #32
 8004a50:	ed95 4a00 	vldr	s8, [r5]
 8004a54:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8004a58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004a5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a60:	edd5 4a00 	vldr	s9, [r5]
 8004a64:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004a68:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004a6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a70:	ed95 5a00 	vldr	s10, [r5]
 8004a74:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8004a78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004a7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a80:	edd5 5a00 	vldr	s11, [r5]
 8004a84:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004a88:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004a8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a90:	428e      	cmp	r6, r1
 8004a92:	ed95 6a00 	vldr	s12, [r5]
 8004a96:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a9e:	d1a9      	bne.n	80049f4 <forward_dense+0x170>
 8004aa0:	f1a6 0108 	sub.w	r1, r6, #8
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d04a      	beq.n	8004b40 <forward_dense+0x2bc>
 8004aaa:	780d      	ldrb	r5, [r1, #0]
 8004aac:	edd0 6a00 	vldr	s13, [r0]
 8004ab0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ab4:	edd5 7a00 	vldr	s15, [r5]
 8004ab8:	2a01      	cmp	r2, #1
 8004aba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004abe:	d03f      	beq.n	8004b40 <forward_dense+0x2bc>
 8004ac0:	784d      	ldrb	r5, [r1, #1]
 8004ac2:	edd0 6a01 	vldr	s13, [r0, #4]
 8004ac6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004aca:	edd5 7a00 	vldr	s15, [r5]
 8004ace:	2a02      	cmp	r2, #2
 8004ad0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ad4:	d034      	beq.n	8004b40 <forward_dense+0x2bc>
 8004ad6:	788d      	ldrb	r5, [r1, #2]
 8004ad8:	edd0 6a02 	vldr	s13, [r0, #8]
 8004adc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ae0:	edd5 7a00 	vldr	s15, [r5]
 8004ae4:	2a03      	cmp	r2, #3
 8004ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004aea:	d029      	beq.n	8004b40 <forward_dense+0x2bc>
 8004aec:	78cd      	ldrb	r5, [r1, #3]
 8004aee:	edd0 6a03 	vldr	s13, [r0, #12]
 8004af2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004af6:	edd5 7a00 	vldr	s15, [r5]
 8004afa:	2a04      	cmp	r2, #4
 8004afc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b00:	d01e      	beq.n	8004b40 <forward_dense+0x2bc>
 8004b02:	790d      	ldrb	r5, [r1, #4]
 8004b04:	edd0 6a04 	vldr	s13, [r0, #16]
 8004b08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004b0c:	edd5 7a00 	vldr	s15, [r5]
 8004b10:	2a05      	cmp	r2, #5
 8004b12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b16:	d013      	beq.n	8004b40 <forward_dense+0x2bc>
 8004b18:	794d      	ldrb	r5, [r1, #5]
 8004b1a:	edd0 6a05 	vldr	s13, [r0, #20]
 8004b1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004b22:	edd5 7a00 	vldr	s15, [r5]
 8004b26:	2a06      	cmp	r2, #6
 8004b28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b2c:	d008      	beq.n	8004b40 <forward_dense+0x2bc>
 8004b2e:	7989      	ldrb	r1, [r1, #6]
 8004b30:	edd0 7a06 	vldr	s15, [r0, #24]
 8004b34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b38:	edd1 6a00 	vldr	s13, [r1]
 8004b3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b40:	44dc      	add	ip, fp
 8004b42:	445e      	add	r6, fp
 8004b44:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004b48:	eca7 7a01 	vstmia	r7!, {s14}
 8004b4c:	454f      	cmp	r7, r9
 8004b4e:	f4ff af43 	bcc.w	80049d8 <forward_dense+0x154>
 8004b52:	9a06      	ldr	r2, [sp, #24]
 8004b54:	eba9 0302 	sub.w	r3, r9, r2
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	3304      	adds	r3, #4
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	9306      	str	r3, [sp, #24]
 8004b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b66:	9a05      	ldr	r2, [sp, #20]
 8004b68:	4499      	add	r9, r3
 8004b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b6c:	441a      	add	r2, r3
 8004b6e:	9205      	str	r2, [sp, #20]
 8004b70:	9a02      	ldr	r2, [sp, #8]
 8004b72:	441a      	add	r2, r3
 8004b74:	9202      	str	r2, [sp, #8]
 8004b76:	9a04      	ldr	r2, [sp, #16]
 8004b78:	441a      	add	r2, r3
 8004b7a:	9204      	str	r2, [sp, #16]
 8004b7c:	9b06      	ldr	r3, [sp, #24]
 8004b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b80:	4293      	cmp	r3, r2
 8004b82:	f4ff af08 	bcc.w	8004996 <forward_dense+0x112>
 8004b86:	b015      	add	sp, #84	; 0x54
 8004b88:	ecbd 8b02 	vpop	{d8}
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b90:	6853      	ldr	r3, [r2, #4]
 8004b92:	deff      	udf	#255	; 0xff
 8004b94:	2300      	movs	r3, #0
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	deff      	udf	#255	; 0xff
 8004b9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004bb0 <forward_dense+0x32c>
 8004b9e:	eef0 2a48 	vmov.f32	s5, s16
 8004ba2:	f1be 0f00 	cmp.w	lr, #0
 8004ba6:	f47f af22 	bne.w	80049ee <forward_dense+0x16a>
 8004baa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004bac:	4661      	mov	r1, ip
 8004bae:	e77a      	b.n	8004aa6 <forward_dense+0x222>
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	4549      	cmp	r1, r9
 8004bb6:	d2d5      	bcs.n	8004b64 <forward_dense+0x2e0>
 8004bb8:	9807      	ldr	r0, [sp, #28]
 8004bba:	9103      	str	r1, [sp, #12]
 8004bbc:	9904      	ldr	r1, [sp, #16]
 8004bbe:	f100 0c01 	add.w	ip, r0, #1
 8004bc2:	3901      	subs	r1, #1
 8004bc4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80b2 	beq.w	8004d34 <forward_dense+0x4b0>
 8004bd0:	9907      	ldr	r1, [sp, #28]
 8004bd2:	ecf3 2a01 	vldmia	r3!, {s5}
 8004bd6:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8004bb0 <forward_dense+0x32c>
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	f000 80b2 	beq.w	8004d44 <forward_dense+0x4c0>
 8004be0:	9902      	ldr	r1, [sp, #8]
 8004be2:	1d10      	adds	r0, r2, #4
 8004be4:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004be8:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004bec:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004bf0:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004bf4:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004bf8:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004bfc:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004c00:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004c04:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004c08:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004c0c:	f006 070f 	and.w	r7, r6, #15
 8004c10:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004c14:	edd7 7a00 	vldr	s15, [r7]
 8004c18:	0936      	lsrs	r6, r6, #4
 8004c1a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004c1e:	ed96 3a00 	vldr	s6, [r6]
 8004c22:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004c26:	092e      	lsrs	r6, r5, #4
 8004c28:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004c2c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004c30:	f005 050f 	and.w	r5, r5, #15
 8004c34:	edd6 3a00 	vldr	s7, [r6]
 8004c38:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004c3c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004c40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004c44:	0937      	lsrs	r7, r6, #4
 8004c46:	ed95 4a00 	vldr	s8, [r5]
 8004c4a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8004c4e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004c52:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004c56:	f006 060f 	and.w	r6, r6, #15
 8004c5a:	edd7 4a00 	vldr	s9, [r7]
 8004c5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004c62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004c66:	3004      	adds	r0, #4
 8004c68:	ed96 5a00 	vldr	s10, [r6]
 8004c6c:	092e      	lsrs	r6, r5, #4
 8004c6e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004c72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004c76:	f005 050f 	and.w	r5, r5, #15
 8004c7a:	edd6 5a00 	vldr	s11, [r6]
 8004c7e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004c82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004c86:	4584      	cmp	ip, r0
 8004c88:	ed95 6a00 	vldr	s12, [r5]
 8004c8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c90:	f101 0120 	add.w	r1, r1, #32
 8004c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c98:	d1a4      	bne.n	8004be4 <forward_dense+0x360>
 8004c9a:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004c9e:	f1ac 0804 	sub.w	r8, ip, #4
 8004ca2:	9904      	ldr	r1, [sp, #16]
 8004ca4:	458e      	cmp	lr, r1
 8004ca6:	d22a      	bcs.n	8004cfe <forward_dense+0x47a>
 8004ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004caa:	eba1 070e 	sub.w	r7, r1, lr
 8004cae:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004cb2:	f10e 0008 	add.w	r0, lr, #8
 8004cb6:	f108 36ff 	add.w	r6, r8, #4294967295
 8004cba:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8004cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cc2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004cc6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004cca:	f001 050f 	and.w	r5, r1, #15
 8004cce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004cd2:	edd5 7a00 	vldr	s15, [r5]
 8004cd6:	0909      	lsrs	r1, r1, #4
 8004cd8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004cdc:	ed91 6a00 	vldr	s12, [r1]
 8004ce0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004ce4:	42b7      	cmp	r7, r6
 8004ce6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004cea:	f100 0008 	add.w	r0, r0, #8
 8004cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cf2:	d1e4      	bne.n	8004cbe <forward_dense+0x43a>
 8004cf4:	f10a 0a01 	add.w	sl, sl, #1
 8004cf8:	44d0      	add	r8, sl
 8004cfa:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004cfe:	9908      	ldr	r1, [sp, #32]
 8004d00:	b321      	cbz	r1, 8004d4c <forward_dense+0x4c8>
 8004d02:	f898 1000 	ldrb.w	r1, [r8]
 8004d06:	edde 7a00 	vldr	s15, [lr]
 8004d0a:	0909      	lsrs	r1, r1, #4
 8004d0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004d10:	edd1 6a00 	vldr	s13, [r1]
 8004d14:	9903      	ldr	r1, [sp, #12]
 8004d16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d1a:	445a      	add	r2, fp
 8004d1c:	44dc      	add	ip, fp
 8004d1e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004d22:	ece1 2a01 	vstmia	r1!, {s5}
 8004d26:	4589      	cmp	r9, r1
 8004d28:	9103      	str	r1, [sp, #12]
 8004d2a:	f67f af12 	bls.w	8004b52 <forward_dense+0x2ce>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f47f af4e 	bne.w	8004bd0 <forward_dense+0x34c>
 8004d34:	9907      	ldr	r1, [sp, #28]
 8004d36:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8004bb0 <forward_dense+0x32c>
 8004d3a:	eef0 2a48 	vmov.f32	s5, s16
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	f47f af4e 	bne.w	8004be0 <forward_dense+0x35c>
 8004d44:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004d48:	4690      	mov	r8, r2
 8004d4a:	e7aa      	b.n	8004ca2 <forward_dense+0x41e>
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004d52:	445a      	add	r2, fp
 8004d54:	eca1 7a01 	vstmia	r1!, {s14}
 8004d58:	4549      	cmp	r1, r9
 8004d5a:	9103      	str	r1, [sp, #12]
 8004d5c:	44dc      	add	ip, fp
 8004d5e:	f4ff af34 	bcc.w	8004bca <forward_dense+0x346>
 8004d62:	e6f6      	b.n	8004b52 <forward_dense+0x2ce>
 8004d64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d66:	9d06      	ldr	r5, [sp, #24]
 8004d68:	9101      	str	r1, [sp, #4]
 8004d6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004d6c:	9100      	str	r1, [sp, #0]
 8004d6e:	4628      	mov	r0, r5
 8004d70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d72:	f000 f9ef 	bl	8005154 <forward_lite_dense_if32of32wf32>
 8004d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d78:	462b      	mov	r3, r5
 8004d7a:	4413      	add	r3, r2
 8004d7c:	9306      	str	r3, [sp, #24]
 8004d7e:	e6f1      	b.n	8004b64 <forward_dense+0x2e0>
 8004d80:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004d84:	f1b9 0f00 	cmp.w	r9, #0
 8004d88:	d016      	beq.n	8004db8 <forward_dense+0x534>
 8004d8a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004d8e:	f000 fbf7 	bl	8005580 <ai_array_get_byte_size>
 8004d92:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004d96:	4602      	mov	r2, r0
 8004d98:	4659      	mov	r1, fp
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f000 fafe 	bl	800539c <st_int8_copy>
 8004da0:	e5c7      	b.n	8004932 <forward_dense+0xae>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d00a      	beq.n	8004dbc <forward_dense+0x538>
 8004da6:	f04f 0900 	mov.w	r9, #0
 8004daa:	e5bd      	b.n	8004928 <forward_dense+0xa4>
 8004dac:	930d      	str	r3, [sp, #52]	; 0x34
 8004dae:	e595      	b.n	80048dc <forward_dense+0x58>
 8004db0:	2300      	movs	r3, #0
 8004db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db4:	460b      	mov	r3, r1
 8004db6:	e591      	b.n	80048dc <forward_dense+0x58>
 8004db8:	46c3      	mov	fp, r8
 8004dba:	e5ba      	b.n	8004932 <forward_dense+0xae>
 8004dbc:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004dc0:	e5b7      	b.n	8004932 <forward_dense+0xae>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	deff      	udf	#255	; 0xff
 8004dc8:	2300      	movs	r3, #0
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	deff      	udf	#255	; 0xff
 8004dce:	bf00      	nop

08004dd0 <forward_relu>:
 8004dd0:	6982      	ldr	r2, [r0, #24]
 8004dd2:	8813      	ldrh	r3, [r2, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05b      	beq.n	8004e90 <forward_relu+0xc0>
 8004dd8:	6851      	ldr	r1, [r2, #4]
 8004dda:	684a      	ldr	r2, [r1, #4]
 8004ddc:	b102      	cbz	r2, 8004de0 <forward_relu+0x10>
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f000 8123 	beq.w	800502c <forward_relu+0x25c>
 8004de6:	b470      	push	{r4, r5, r6}
 8004de8:	6909      	ldr	r1, [r1, #16]
 8004dea:	b101      	cbz	r1, 8004dee <forward_relu+0x1e>
 8004dec:	6809      	ldr	r1, [r1, #0]
 8004dee:	69c6      	ldr	r6, [r0, #28]
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	f000 8097 	beq.w	8004f24 <forward_relu+0x154>
 8004df6:	6873      	ldr	r3, [r6, #4]
 8004df8:	6988      	ldr	r0, [r1, #24]
 8004dfa:	6991      	ldr	r1, [r2, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f000 80c1 	beq.w	8004f84 <forward_relu+0x1b4>
 8004e02:	6893      	ldr	r3, [r2, #8]
 8004e04:	6880      	ldr	r0, [r0, #8]
 8004e06:	688c      	ldr	r4, [r1, #8]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f000 80f2 	beq.w	8004ff2 <forward_relu+0x222>
 8004e0e:	68d5      	ldr	r5, [r2, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004e16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e1a:	42ab      	cmp	r3, r5
 8004e1c:	fb01 f202 	mul.w	r2, r1, r2
 8004e20:	d1f9      	bne.n	8004e16 <forward_relu+0x46>
 8004e22:	68b3      	ldr	r3, [r6, #8]
 8004e24:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e28:	edd3 6a00 	vldr	s13, [r3]
 8004e2c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004e30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004e38:	3a01      	subs	r2, #1
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e42:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004e46:	d425      	bmi.n	8004e94 <forward_relu+0xc4>
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d81f      	bhi.n	8004e8c <forward_relu+0xbc>
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	1d01      	adds	r1, r0, #4
 8004e50:	e00d      	b.n	8004e6e <forward_relu+0x9e>
 8004e52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	db03      	blt.n	8004e64 <forward_relu+0x94>
 8004e5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e64:	3b08      	subs	r3, #8
 8004e66:	429c      	cmp	r4, r3
 8004e68:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e6c:	d80e      	bhi.n	8004e8c <forward_relu+0xbc>
 8004e6e:	4613      	mov	r3, r2
 8004e70:	ed72 7a01 	vldmdb	r2!, {s15}
 8004e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	d9e9      	bls.n	8004e52 <forward_relu+0x82>
 8004e7e:	3b08      	subs	r3, #8
 8004e80:	eef0 7a47 	vmov.f32	s15, s14
 8004e84:	429c      	cmp	r4, r3
 8004e86:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e8a:	d9f0      	bls.n	8004e6e <forward_relu+0x9e>
 8004e8c:	bc70      	pop	{r4, r5, r6}
 8004e8e:	4770      	bx	lr
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	deff      	udf	#255	; 0xff
 8004e94:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9c:	d11f      	bne.n	8004ede <forward_relu+0x10e>
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	d8f4      	bhi.n	8004e8c <forward_relu+0xbc>
 8004ea2:	1b1c      	subs	r4, r3, r4
 8004ea4:	f024 0403 	bic.w	r4, r4, #3
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	2500      	movs	r5, #0
 8004eac:	1b1b      	subs	r3, r3, r4
 8004eae:	1d01      	adds	r1, r0, #4
 8004eb0:	ed72 7a01 	vldmdb	r2!, {s15}
 8004eb4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebc:	dc0a      	bgt.n	8004ed4 <forward_relu+0x104>
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004ec4:	d0e2      	beq.n	8004e8c <forward_relu+0xbc>
 8004ec6:	ed72 7a01 	vldmdb	r2!, {s15}
 8004eca:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	ddf4      	ble.n	8004ebe <forward_relu+0xee>
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	ed61 7a01 	vstmdb	r1!, {s15}
 8004eda:	d1e9      	bne.n	8004eb0 <forward_relu+0xe0>
 8004edc:	e7d6      	b.n	8004e8c <forward_relu+0xbc>
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d8d4      	bhi.n	8004e8c <forward_relu+0xbc>
 8004ee2:	1b1c      	subs	r4, r3, r4
 8004ee4:	f024 0403 	bic.w	r4, r4, #3
 8004ee8:	1d1a      	adds	r2, r3, #4
 8004eea:	1d01      	adds	r1, r0, #4
 8004eec:	1b1b      	subs	r3, r3, r4
 8004eee:	ed72 7a01 	vldmdb	r2!, {s15}
 8004ef2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	db0e      	blt.n	8004f1a <forward_relu+0x14a>
 8004efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f00:	4293      	cmp	r3, r2
 8004f02:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f06:	ed61 7a01 	vstmdb	r1!, {s15}
 8004f0a:	d0bf      	beq.n	8004e8c <forward_relu+0xbc>
 8004f0c:	ed72 7a01 	vldmdb	r2!, {s15}
 8004f10:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	daf0      	bge.n	8004efc <forward_relu+0x12c>
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	ed61 7a01 	vstmdb	r1!, {s15}
 8004f20:	d1e5      	bne.n	8004eee <forward_relu+0x11e>
 8004f22:	e7b3      	b.n	8004e8c <forward_relu+0xbc>
 8004f24:	6893      	ldr	r3, [r2, #8]
 8004f26:	6989      	ldr	r1, [r1, #24]
 8004f28:	6990      	ldr	r0, [r2, #24]
 8004f2a:	6889      	ldr	r1, [r1, #8]
 8004f2c:	6884      	ldr	r4, [r0, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	d075      	beq.n	800501e <forward_relu+0x24e>
 8004f32:	68d5      	ldr	r5, [r2, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004f3a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	fb00 f202 	mul.w	r2, r0, r2
 8004f44:	d1f9      	bne.n	8004f3a <forward_relu+0x16a>
 8004f46:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004f50:	4294      	cmp	r4, r2
 8004f52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004f56:	d899      	bhi.n	8004e8c <forward_relu+0xbc>
 8004f58:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005034 <forward_relu+0x264>
 8004f5c:	3204      	adds	r2, #4
 8004f5e:	3104      	adds	r1, #4
 8004f60:	4613      	mov	r3, r2
 8004f62:	ed72 7a01 	vldmdb	r2!, {s15}
 8004f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	f1a3 0308 	sub.w	r3, r3, #8
 8004f72:	bfb8      	it	lt
 8004f74:	eef0 7a47 	vmovlt.f32	s15, s14
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	ed61 7a01 	vstmdb	r1!, {s15}
 8004f7e:	d9ef      	bls.n	8004f60 <forward_relu+0x190>
 8004f80:	bc70      	pop	{r4, r5, r6}
 8004f82:	4770      	bx	lr
 8004f84:	688c      	ldr	r4, [r1, #8]
 8004f86:	6891      	ldr	r1, [r2, #8]
 8004f88:	6880      	ldr	r0, [r0, #8]
 8004f8a:	0a09      	lsrs	r1, r1, #8
 8004f8c:	d049      	beq.n	8005022 <forward_relu+0x252>
 8004f8e:	68d5      	ldr	r5, [r2, #12]
 8004f90:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004f94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004f98:	42aa      	cmp	r2, r5
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	d1f9      	bne.n	8004f94 <forward_relu+0x1c4>
 8004fa0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	68b1      	ldr	r1, [r6, #8]
 8004fa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004fac:	429c      	cmp	r4, r3
 8004fae:	ed91 7a00 	vldr	s14, [r1]
 8004fb2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004fb6:	f63f af69 	bhi.w	8004e8c <forward_relu+0xbc>
 8004fba:	2500      	movs	r5, #0
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	1d02      	adds	r2, r0, #4
 8004fc0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fcc:	f1a3 0104 	sub.w	r1, r3, #4
 8004fd0:	f1a3 0308 	sub.w	r3, r3, #8
 8004fd4:	d406      	bmi.n	8004fe4 <forward_relu+0x214>
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004fdc:	f63f af56 	bhi.w	8004e8c <forward_relu+0xbc>
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	e7ed      	b.n	8004fc0 <forward_relu+0x1f0>
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	ed62 7a01 	vstmdb	r2!, {s15}
 8004fea:	f63f af4f 	bhi.w	8004e8c <forward_relu+0xbc>
 8004fee:	460b      	mov	r3, r1
 8004ff0:	e7e6      	b.n	8004fc0 <forward_relu+0x1f0>
 8004ff2:	68b3      	ldr	r3, [r6, #8]
 8004ff4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ff8:	edd3 6a00 	vldr	s13, [r3]
 8004ffc:	ed93 6a01 	vldr	s12, [r3, #4]
 8005000:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	d401      	bmi.n	800500e <forward_relu+0x23e>
 800500a:	4623      	mov	r3, r4
 800500c:	e71e      	b.n	8004e4c <forward_relu+0x7c>
 800500e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	4623      	mov	r3, r4
 8005018:	f47f af63 	bne.w	8004ee2 <forward_relu+0x112>
 800501c:	e741      	b.n	8004ea2 <forward_relu+0xd2>
 800501e:	4622      	mov	r2, r4
 8005020:	e79a      	b.n	8004f58 <forward_relu+0x188>
 8005022:	68b2      	ldr	r2, [r6, #8]
 8005024:	4623      	mov	r3, r4
 8005026:	ed92 7a00 	vldr	s14, [r2]
 800502a:	e7c6      	b.n	8004fba <forward_relu+0x1ea>
 800502c:	2300      	movs	r3, #0
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	deff      	udf	#255	; 0xff
 8005032:	bf00      	nop
 8005034:	00000000 	.word	0x00000000

08005038 <forward_sm>:
 8005038:	6982      	ldr	r2, [r0, #24]
 800503a:	8813      	ldrh	r3, [r2, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d07c      	beq.n	800513a <forward_sm+0x102>
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	ed2d 8b04 	vpush	{d8-d9}
 8005048:	6852      	ldr	r2, [r2, #4]
 800504a:	6854      	ldr	r4, [r2, #4]
 800504c:	b085      	sub	sp, #20
 800504e:	b104      	cbz	r4, 8005052 <forward_sm+0x1a>
 8005050:	6824      	ldr	r4, [r4, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d076      	beq.n	8005144 <forward_sm+0x10c>
 8005056:	6913      	ldr	r3, [r2, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d076      	beq.n	800514a <forward_sm+0x112>
 800505c:	681e      	ldr	r6, [r3, #0]
 800505e:	68a3      	ldr	r3, [r4, #8]
 8005060:	68e0      	ldr	r0, [r4, #12]
 8005062:	68f2      	ldr	r2, [r6, #12]
 8005064:	6845      	ldr	r5, [r0, #4]
 8005066:	6857      	ldr	r7, [r2, #4]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	d068      	beq.n	800513e <forward_sm+0x106>
 800506c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005070:	2201      	movs	r2, #1
 8005072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005076:	4298      	cmp	r0, r3
 8005078:	fb01 f202 	mul.w	r2, r1, r2
 800507c:	d1f9      	bne.n	8005072 <forward_sm+0x3a>
 800507e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8005082:	69a2      	ldr	r2, [r4, #24]
 8005084:	69b3      	ldr	r3, [r6, #24]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800508c:	eb02 0309 	add.w	r3, r2, r9
 8005090:	429a      	cmp	r2, r3
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	d24c      	bcs.n	8005130 <forward_sm+0xf8>
 8005096:	00bb      	lsls	r3, r7, #2
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800509e:	00ab      	lsls	r3, r5, #2
 80050a0:	2d01      	cmp	r5, #1
 80050a2:	ed92 8a00 	vldr	s16, [r2]
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80050ac:	463e      	mov	r6, r7
 80050ae:	d93c      	bls.n	800512a <forward_sm+0xf2>
 80050b0:	1d13      	adds	r3, r2, #4
 80050b2:	ecf3 7a01 	vldmia	r3!, {s15}
 80050b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	bfb8      	it	lt
 80050c0:	eeb0 8a67 	vmovlt.f32	s16, s15
 80050c4:	429e      	cmp	r6, r3
 80050c6:	d1f4      	bne.n	80050b2 <forward_sm+0x7a>
 80050c8:	eddf 8a21 	vldr	s17, [pc, #132]	; 8005150 <forward_sm+0x118>
 80050cc:	4692      	mov	sl, r2
 80050ce:	46c3      	mov	fp, r8
 80050d0:	46c1      	mov	r9, r8
 80050d2:	2400      	movs	r4, #0
 80050d4:	ecba 0a01 	vldmia	sl!, {s0}
 80050d8:	ee30 0a48 	vsub.f32	s0, s0, s16
 80050dc:	f002 ffec 	bl	80080b8 <expf>
 80050e0:	3401      	adds	r4, #1
 80050e2:	42a5      	cmp	r5, r4
 80050e4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80050e8:	eca9 0a01 	vstmia	r9!, {s0}
 80050ec:	d8f2      	bhi.n	80050d4 <forward_sm+0x9c>
 80050ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80050f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f6:	d00b      	beq.n	8005110 <forward_sm+0xd8>
 80050f8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80050fc:	2300      	movs	r3, #0
 80050fe:	3301      	adds	r3, #1
 8005100:	429d      	cmp	r5, r3
 8005102:	eddb 7a00 	vldr	s15, [fp]
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	eceb 7a01 	vstmia	fp!, {s15}
 800510e:	d8f6      	bhi.n	80050fe <forward_sm+0xc6>
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	9901      	ldr	r1, [sp, #4]
 8005114:	4498      	add	r8, r3
 8005116:	9b02      	ldr	r3, [sp, #8]
 8005118:	42b9      	cmp	r1, r7
 800511a:	463a      	mov	r2, r7
 800511c:	441e      	add	r6, r3
 800511e:	d907      	bls.n	8005130 <forward_sm+0xf8>
 8005120:	2d01      	cmp	r5, #1
 8005122:	ed92 8a00 	vldr	s16, [r2]
 8005126:	441f      	add	r7, r3
 8005128:	d8c2      	bhi.n	80050b0 <forward_sm+0x78>
 800512a:	2d00      	cmp	r5, #0
 800512c:	d0f0      	beq.n	8005110 <forward_sm+0xd8>
 800512e:	e7cb      	b.n	80050c8 <forward_sm+0x90>
 8005130:	b005      	add	sp, #20
 8005132:	ecbd 8b04 	vpop	{d8-d9}
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	deff      	udf	#255	; 0xff
 800513e:	f04f 0904 	mov.w	r9, #4
 8005142:	e79e      	b.n	8005082 <forward_sm+0x4a>
 8005144:	2300      	movs	r3, #0
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	deff      	udf	#255	; 0xff
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	deff      	udf	#255	; 0xff
 800514e:	bf00      	nop
 8005150:	00000000 	.word	0x00000000

08005154 <forward_lite_dense_if32of32wf32>:
 8005154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800515c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8005160:	4287      	cmp	r7, r0
 8005162:	f240 8106 	bls.w	8005372 <forward_lite_dense_if32of32wf32+0x21e>
 8005166:	f1a6 0810 	sub.w	r8, r6, #16
 800516a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800516e:	f108 0801 	add.w	r8, r8, #1
 8005172:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8005176:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800517a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800517e:	4605      	mov	r5, r0
 8005180:	f006 0a0f 	and.w	sl, r6, #15
 8005184:	2e0f      	cmp	r6, #15
 8005186:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005398 <forward_lite_dense_if32of32wf32+0x244>
 800518a:	f240 8101 	bls.w	8005390 <forward_lite_dense_if32of32wf32+0x23c>
 800518e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8005192:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8005196:	46b6      	mov	lr, r6
 8005198:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800519c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80051a0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80051a4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80051a8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80051ac:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80051b0:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80051b4:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80051b8:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80051bc:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80051c0:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80051c4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80051c8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80051cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80051d0:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80051d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80051d8:	f1ae 0e10 	sub.w	lr, lr, #16
 80051dc:	f1be 0f0f 	cmp.w	lr, #15
 80051e0:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80051e4:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80051e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051ec:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80051f0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80051f4:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80051f8:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80051fc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005200:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8005204:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005208:	eee5 7a25 	vfma.f32	s15, s10, s11
 800520c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005210:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8005214:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005218:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800521c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005220:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005224:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005228:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800522c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005230:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005234:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005238:	eee5 7a25 	vfma.f32	s15, s10, s11
 800523c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005240:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005244:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005248:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800524c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005250:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005254:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005258:	eee3 7a23 	vfma.f32	s15, s6, s7
 800525c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005260:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005264:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800526c:	d894      	bhi.n	8005198 <forward_lite_dense_if32of32wf32+0x44>
 800526e:	eb02 0e0b 	add.w	lr, r2, fp
 8005272:	4654      	mov	r4, sl
 8005274:	46c4      	mov	ip, r8
 8005276:	2c00      	cmp	r4, #0
 8005278:	d075      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800527a:	eddc 6a00 	vldr	s13, [ip]
 800527e:	edde 7a00 	vldr	s15, [lr]
 8005282:	2c01      	cmp	r4, #1
 8005284:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005288:	d06d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800528a:	eddc 6a01 	vldr	s13, [ip, #4]
 800528e:	edde 7a01 	vldr	s15, [lr, #4]
 8005292:	2c02      	cmp	r4, #2
 8005294:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005298:	d065      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800529a:	eddc 6a02 	vldr	s13, [ip, #8]
 800529e:	edde 7a02 	vldr	s15, [lr, #8]
 80052a2:	2c03      	cmp	r4, #3
 80052a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052a8:	d05d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052aa:	eddc 6a03 	vldr	s13, [ip, #12]
 80052ae:	edde 7a03 	vldr	s15, [lr, #12]
 80052b2:	2c04      	cmp	r4, #4
 80052b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052b8:	d055      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052ba:	eddc 6a04 	vldr	s13, [ip, #16]
 80052be:	edde 7a04 	vldr	s15, [lr, #16]
 80052c2:	2c05      	cmp	r4, #5
 80052c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052c8:	d04d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052ca:	eddc 6a05 	vldr	s13, [ip, #20]
 80052ce:	edde 7a05 	vldr	s15, [lr, #20]
 80052d2:	2c06      	cmp	r4, #6
 80052d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052d8:	d045      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052da:	eddc 6a06 	vldr	s13, [ip, #24]
 80052de:	edde 7a06 	vldr	s15, [lr, #24]
 80052e2:	2c07      	cmp	r4, #7
 80052e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052e8:	d03d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052ea:	eddc 6a07 	vldr	s13, [ip, #28]
 80052ee:	edde 7a07 	vldr	s15, [lr, #28]
 80052f2:	2c08      	cmp	r4, #8
 80052f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80052f8:	d035      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 80052fa:	eddc 6a08 	vldr	s13, [ip, #32]
 80052fe:	edde 7a08 	vldr	s15, [lr, #32]
 8005302:	2c09      	cmp	r4, #9
 8005304:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005308:	d02d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800530a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800530e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005312:	2c0a      	cmp	r4, #10
 8005314:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005318:	d025      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800531a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800531e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8005322:	2c0b      	cmp	r4, #11
 8005324:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005328:	d01d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800532a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800532e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8005332:	2c0c      	cmp	r4, #12
 8005334:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005338:	d015      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800533a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800533e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8005342:	3c0d      	subs	r4, #13
 8005344:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005348:	d00d      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800534a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800534e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8005352:	2c01      	cmp	r4, #1
 8005354:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005358:	d005      	beq.n	8005366 <forward_lite_dense_if32of32wf32+0x212>
 800535a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800535e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8005362:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005366:	444a      	add	r2, r9
 8005368:	eca5 7a01 	vstmia	r5!, {s14}
 800536c:	42af      	cmp	r7, r5
 800536e:	f63f af09 	bhi.w	8005184 <forward_lite_dense_if32of32wf32+0x30>
 8005372:	b15b      	cbz	r3, 800538c <forward_lite_dense_if32of32wf32+0x238>
 8005374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005376:	b14a      	cbz	r2, 800538c <forward_lite_dense_if32of32wf32+0x238>
 8005378:	edd0 7a00 	vldr	s15, [r0]
 800537c:	ecb3 7a01 	vldmia	r3!, {s14}
 8005380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005384:	ece0 7a01 	vstmia	r0!, {s15}
 8005388:	4287      	cmp	r7, r0
 800538a:	d1f5      	bne.n	8005378 <forward_lite_dense_if32of32wf32+0x224>
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005390:	4634      	mov	r4, r6
 8005392:	4696      	mov	lr, r2
 8005394:	468c      	mov	ip, r1
 8005396:	e76e      	b.n	8005276 <forward_lite_dense_if32of32wf32+0x122>
 8005398:	00000000 	.word	0x00000000

0800539c <st_int8_copy>:
 800539c:	4288      	cmp	r0, r1
 800539e:	d057      	beq.n	8005450 <st_int8_copy+0xb4>
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	d055      	beq.n	8005450 <st_int8_copy+0xb4>
 80053a4:	4288      	cmp	r0, r1
 80053a6:	d354      	bcc.n	8005452 <st_int8_copy+0xb6>
 80053a8:	078b      	lsls	r3, r1, #30
 80053aa:	d102      	bne.n	80053b2 <st_int8_copy+0x16>
 80053ac:	e009      	b.n	80053c2 <st_int8_copy+0x26>
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d05c      	beq.n	800546c <st_int8_copy+0xd0>
 80053b2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80053b6:	f801 3b01 	strb.w	r3, [r1], #1
 80053ba:	078b      	lsls	r3, r1, #30
 80053bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80053c0:	d1f5      	bne.n	80053ae <st_int8_copy+0x12>
 80053c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80053ca:	d069      	beq.n	80054a0 <st_int8_copy+0x104>
 80053cc:	ea41 0300 	orr.w	r3, r1, r0
 80053d0:	075b      	lsls	r3, r3, #29
 80053d2:	d14c      	bne.n	800546e <st_int8_copy+0xd2>
 80053d4:	f10e 33ff 	add.w	r3, lr, #4294967295
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d948      	bls.n	800546e <st_int8_copy+0xd2>
 80053dc:	f100 0310 	add.w	r3, r0, #16
 80053e0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80053e4:	f101 0c10 	add.w	ip, r1, #16
 80053e8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80053ec:	ed13 6b04 	vldr	d6, [r3, #-16]
 80053f0:	ed13 7b02 	vldr	d7, [r3, #-8]
 80053f4:	3310      	adds	r3, #16
 80053f6:	4573      	cmp	r3, lr
 80053f8:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80053fc:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8005400:	f10c 0c10 	add.w	ip, ip, #16
 8005404:	d1f2      	bne.n	80053ec <st_int8_copy+0x50>
 8005406:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800540a:	4421      	add	r1, r4
 800540c:	4420      	add	r0, r4
 800540e:	f002 0203 	and.w	r2, r2, #3
 8005412:	b16b      	cbz	r3, 8005430 <st_int8_copy+0x94>
 8005414:	6804      	ldr	r4, [r0, #0]
 8005416:	600c      	str	r4, [r1, #0]
 8005418:	1e5c      	subs	r4, r3, #1
 800541a:	d005      	beq.n	8005428 <st_int8_copy+0x8c>
 800541c:	6845      	ldr	r5, [r0, #4]
 800541e:	604d      	str	r5, [r1, #4]
 8005420:	2c01      	cmp	r4, #1
 8005422:	bf1c      	itt	ne
 8005424:	6884      	ldrne	r4, [r0, #8]
 8005426:	608c      	strne	r4, [r1, #8]
 8005428:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800542c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005430:	b162      	cbz	r2, 800544c <st_int8_copy+0xb0>
 8005432:	f990 3000 	ldrsb.w	r3, [r0]
 8005436:	700b      	strb	r3, [r1, #0]
 8005438:	3a01      	subs	r2, #1
 800543a:	d007      	beq.n	800544c <st_int8_copy+0xb0>
 800543c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005440:	704b      	strb	r3, [r1, #1]
 8005442:	2a01      	cmp	r2, #1
 8005444:	bf1c      	itt	ne
 8005446:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800544a:	708b      	strbne	r3, [r1, #2]
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005450:	4770      	bx	lr
 8005452:	1883      	adds	r3, r0, r2
 8005454:	428b      	cmp	r3, r1
 8005456:	d9a7      	bls.n	80053a8 <st_int8_copy+0xc>
 8005458:	4283      	cmp	r3, r0
 800545a:	440a      	add	r2, r1
 800545c:	d9f8      	bls.n	8005450 <st_int8_copy+0xb4>
 800545e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005462:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005466:	4283      	cmp	r3, r0
 8005468:	d1f9      	bne.n	800545e <st_int8_copy+0xc2>
 800546a:	4770      	bx	lr
 800546c:	4770      	bx	lr
 800546e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005472:	460b      	mov	r3, r1
 8005474:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8005478:	4684      	mov	ip, r0
 800547a:	f8dc 7000 	ldr.w	r7, [ip]
 800547e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005482:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8005486:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800548a:	f8c3 800c 	str.w	r8, [r3, #12]
 800548e:	601f      	str	r7, [r3, #0]
 8005490:	605e      	str	r6, [r3, #4]
 8005492:	609d      	str	r5, [r3, #8]
 8005494:	3310      	adds	r3, #16
 8005496:	459e      	cmp	lr, r3
 8005498:	f10c 0c10 	add.w	ip, ip, #16
 800549c:	d1ed      	bne.n	800547a <st_int8_copy+0xde>
 800549e:	e7b2      	b.n	8005406 <st_int8_copy+0x6a>
 80054a0:	0893      	lsrs	r3, r2, #2
 80054a2:	f002 0203 	and.w	r2, r2, #3
 80054a6:	e7b4      	b.n	8005412 <st_int8_copy+0x76>

080054a8 <ai_array_to_buffer_fmt>:
 80054a8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d050      	beq.n	8005552 <ai_array_to_buffer_fmt+0xaa>
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <ai_array_to_buffer_fmt+0xb4>)
 80054b2:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d00b      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 80054ba:	dc1c      	bgt.n	80054f6 <ai_array_to_buffer_fmt+0x4e>
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <ai_array_to_buffer_fmt+0xb8>)
 80054be:	429a      	cmp	r2, r3
 80054c0:	d007      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 80054c2:	dd0b      	ble.n	80054dc <ai_array_to_buffer_fmt+0x34>
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <ai_array_to_buffer_fmt+0xbc>)
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d003      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 80054ca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d131      	bne.n	8005536 <ai_array_to_buffer_fmt+0x8e>
 80054d2:	4613      	mov	r3, r2
 80054d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80054d8:	4318      	orrs	r0, r3
 80054da:	4770      	bx	lr
 80054dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d0f6      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 80054e4:	dd2c      	ble.n	8005540 <ai_array_to_buffer_fmt+0x98>
 80054e6:	4b20      	ldr	r3, [pc, #128]	; (8005568 <ai_array_to_buffer_fmt+0xc0>)
 80054e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bf18      	it	ne
 80054f0:	2340      	movne	r3, #64	; 0x40
 80054f2:	4318      	orrs	r0, r3
 80054f4:	4770      	bx	lr
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <ai_array_to_buffer_fmt+0xc4>)
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d0ea      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 80054fc:	dd0e      	ble.n	800551c <ai_array_to_buffer_fmt+0x74>
 80054fe:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <ai_array_to_buffer_fmt+0xc8>)
 8005500:	429a      	cmp	r2, r3
 8005502:	d0e6      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 8005504:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005508:	429a      	cmp	r2, r3
 800550a:	d0e2      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <ai_array_to_buffer_fmt+0xcc>)
 800550e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005512:	429a      	cmp	r2, r3
 8005514:	bf18      	it	ne
 8005516:	2340      	movne	r3, #64	; 0x40
 8005518:	4318      	orrs	r0, r3
 800551a:	4770      	bx	lr
 800551c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005520:	429a      	cmp	r2, r3
 8005522:	d0d6      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 8005524:	3307      	adds	r3, #7
 8005526:	429a      	cmp	r2, r3
 8005528:	d0d3      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 800552a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800552e:	429a      	cmp	r2, r3
 8005530:	bf18      	it	ne
 8005532:	2340      	movne	r3, #64	; 0x40
 8005534:	e7ce      	b.n	80054d4 <ai_array_to_buffer_fmt+0x2c>
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <ai_array_to_buffer_fmt+0xd0>)
 8005538:	429a      	cmp	r2, r3
 800553a:	bf18      	it	ne
 800553c:	2340      	movne	r3, #64	; 0x40
 800553e:	e7c9      	b.n	80054d4 <ai_array_to_buffer_fmt+0x2c>
 8005540:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005544:	429a      	cmp	r2, r3
 8005546:	d0c4      	beq.n	80054d2 <ai_array_to_buffer_fmt+0x2a>
 8005548:	3380      	adds	r3, #128	; 0x80
 800554a:	429a      	cmp	r2, r3
 800554c:	bf18      	it	ne
 800554e:	2340      	movne	r3, #64	; 0x40
 8005550:	e7c0      	b.n	80054d4 <ai_array_to_buffer_fmt+0x2c>
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <ai_array_to_buffer_fmt+0xd4>)
 8005554:	4003      	ands	r3, r0
 8005556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800555a:	e7bb      	b.n	80054d4 <ai_array_to_buffer_fmt+0x2c>
 800555c:	00840040 	.word	0x00840040
 8005560:	00040840 	.word	0x00040840
 8005564:	00041040 	.word	0x00041040
 8005568:	00040447 	.word	0x00040447
 800556c:	00840840 	.word	0x00840840
 8005570:	00841040 	.word	0x00841040
 8005574:	0084084f 	.word	0x0084084f
 8005578:	0004084f 	.word	0x0004084f
 800557c:	00803fff 	.word	0x00803fff

08005580 <ai_array_get_byte_size>:
 8005580:	b319      	cbz	r1, 80055ca <ai_array_get_byte_size+0x4a>
 8005582:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005586:	fb03 f101 	mul.w	r1, r3, r1
 800558a:	3107      	adds	r1, #7
 800558c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8005590:	f021 0307 	bic.w	r3, r1, #7
 8005594:	2a04      	cmp	r2, #4
 8005596:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800559a:	fa23 f101 	lsr.w	r1, r3, r1
 800559e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80055a2:	d00b      	beq.n	80055bc <ai_array_get_byte_size+0x3c>
 80055a4:	2a08      	cmp	r2, #8
 80055a6:	d002      	beq.n	80055ae <ai_array_get_byte_size+0x2e>
 80055a8:	3107      	adds	r1, #7
 80055aa:	08c8      	lsrs	r0, r1, #3
 80055ac:	4770      	bx	lr
 80055ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80055b2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80055b6:	3107      	adds	r1, #7
 80055b8:	08c8      	lsrs	r0, r1, #3
 80055ba:	4770      	bx	lr
 80055bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80055c0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80055c4:	3107      	adds	r1, #7
 80055c6:	08c8      	lsrs	r0, r1, #3
 80055c8:	4770      	bx	lr
 80055ca:	4608      	mov	r0, r1
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <ai_array_get_data_byte_size>:
 80055d0:	b169      	cbz	r1, 80055ee <ai_array_get_data_byte_size+0x1e>
 80055d2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80055d6:	fb02 f101 	mul.w	r1, r2, r1
 80055da:	1dcb      	adds	r3, r1, #7
 80055dc:	f023 0307 	bic.w	r3, r3, #7
 80055e0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80055e4:	fa23 f000 	lsr.w	r0, r3, r0
 80055e8:	3007      	adds	r0, #7
 80055ea:	08c0      	lsrs	r0, r0, #3
 80055ec:	4770      	bx	lr
 80055ee:	4608      	mov	r0, r1
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop

080055f4 <ai_version_get>:
 80055f4:	0212      	lsls	r2, r2, #8
 80055f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055fa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80055fe:	4770      	bx	lr

08005600 <ai_platform_version_get>:
 8005600:	0e02      	lsrs	r2, r0, #24
 8005602:	2300      	movs	r3, #0
 8005604:	f362 0307 	bfi	r3, r2, #0, #8
 8005608:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800560c:	f362 230f 	bfi	r3, r2, #8, #8
 8005610:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005614:	f360 4317 	bfi	r3, r0, #16, #8
 8005618:	b082      	sub	sp, #8
 800561a:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800561e:	b002      	add	sp, #8
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop

08005624 <get_tensor_byte_size>:
 8005624:	b410      	push	{r4}
 8005626:	6983      	ldr	r3, [r0, #24]
 8005628:	68c4      	ldr	r4, [r0, #12]
 800562a:	6941      	ldr	r1, [r0, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68e0      	ldr	r0, [r4, #12]
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <get_tensor_byte_size+0x2c>)
 8005632:	68c9      	ldr	r1, [r1, #12]
 8005634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005638:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800563c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005640:	fb01 f000 	mul.w	r0, r1, r0
 8005644:	4293      	cmp	r3, r2
 8005646:	bf04      	itt	eq
 8005648:	3007      	addeq	r0, #7
 800564a:	08c0      	lsreq	r0, r0, #3
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	000400c0 	.word	0x000400c0

08005654 <calloc>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <calloc+0xc>)
 8005656:	460a      	mov	r2, r1
 8005658:	4601      	mov	r1, r0
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	f000 b802 	b.w	8005664 <_calloc_r>
 8005660:	200005b0 	.word	0x200005b0

08005664 <_calloc_r>:
 8005664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005666:	fba1 2402 	umull	r2, r4, r1, r2
 800566a:	b94c      	cbnz	r4, 8005680 <_calloc_r+0x1c>
 800566c:	4611      	mov	r1, r2
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	f000 f836 	bl	80056e0 <_malloc_r>
 8005674:	9a01      	ldr	r2, [sp, #4]
 8005676:	4605      	mov	r5, r0
 8005678:	b930      	cbnz	r0, 8005688 <_calloc_r+0x24>
 800567a:	4628      	mov	r0, r5
 800567c:	b003      	add	sp, #12
 800567e:	bd30      	pop	{r4, r5, pc}
 8005680:	220c      	movs	r2, #12
 8005682:	6002      	str	r2, [r0, #0]
 8005684:	2500      	movs	r5, #0
 8005686:	e7f8      	b.n	800567a <_calloc_r+0x16>
 8005688:	4621      	mov	r1, r4
 800568a:	f000 ff11 	bl	80064b0 <memset>
 800568e:	e7f4      	b.n	800567a <_calloc_r+0x16>

08005690 <malloc>:
 8005690:	4b02      	ldr	r3, [pc, #8]	; (800569c <malloc+0xc>)
 8005692:	4601      	mov	r1, r0
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f000 b823 	b.w	80056e0 <_malloc_r>
 800569a:	bf00      	nop
 800569c:	200005b0 	.word	0x200005b0

080056a0 <sbrk_aligned>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4e0e      	ldr	r6, [pc, #56]	; (80056dc <sbrk_aligned+0x3c>)
 80056a4:	460c      	mov	r4, r1
 80056a6:	6831      	ldr	r1, [r6, #0]
 80056a8:	4605      	mov	r5, r0
 80056aa:	b911      	cbnz	r1, 80056b2 <sbrk_aligned+0x12>
 80056ac:	f000 ff52 	bl	8006554 <_sbrk_r>
 80056b0:	6030      	str	r0, [r6, #0]
 80056b2:	4621      	mov	r1, r4
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 ff4d 	bl	8006554 <_sbrk_r>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	d00a      	beq.n	80056d4 <sbrk_aligned+0x34>
 80056be:	1cc4      	adds	r4, r0, #3
 80056c0:	f024 0403 	bic.w	r4, r4, #3
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d007      	beq.n	80056d8 <sbrk_aligned+0x38>
 80056c8:	1a21      	subs	r1, r4, r0
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 ff42 	bl	8006554 <_sbrk_r>
 80056d0:	3001      	adds	r0, #1
 80056d2:	d101      	bne.n	80056d8 <sbrk_aligned+0x38>
 80056d4:	f04f 34ff 	mov.w	r4, #4294967295
 80056d8:	4620      	mov	r0, r4
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	20000a24 	.word	0x20000a24

080056e0 <_malloc_r>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	1ccd      	adds	r5, r1, #3
 80056e6:	f025 0503 	bic.w	r5, r5, #3
 80056ea:	3508      	adds	r5, #8
 80056ec:	2d0c      	cmp	r5, #12
 80056ee:	bf38      	it	cc
 80056f0:	250c      	movcc	r5, #12
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	4607      	mov	r7, r0
 80056f6:	db01      	blt.n	80056fc <_malloc_r+0x1c>
 80056f8:	42a9      	cmp	r1, r5
 80056fa:	d905      	bls.n	8005708 <_malloc_r+0x28>
 80056fc:	230c      	movs	r3, #12
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	2600      	movs	r6, #0
 8005702:	4630      	mov	r0, r6
 8005704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005708:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057dc <_malloc_r+0xfc>
 800570c:	f000 f868 	bl	80057e0 <__malloc_lock>
 8005710:	f8d8 3000 	ldr.w	r3, [r8]
 8005714:	461c      	mov	r4, r3
 8005716:	bb5c      	cbnz	r4, 8005770 <_malloc_r+0x90>
 8005718:	4629      	mov	r1, r5
 800571a:	4638      	mov	r0, r7
 800571c:	f7ff ffc0 	bl	80056a0 <sbrk_aligned>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	4604      	mov	r4, r0
 8005724:	d155      	bne.n	80057d2 <_malloc_r+0xf2>
 8005726:	f8d8 4000 	ldr.w	r4, [r8]
 800572a:	4626      	mov	r6, r4
 800572c:	2e00      	cmp	r6, #0
 800572e:	d145      	bne.n	80057bc <_malloc_r+0xdc>
 8005730:	2c00      	cmp	r4, #0
 8005732:	d048      	beq.n	80057c6 <_malloc_r+0xe6>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	4631      	mov	r1, r6
 8005738:	4638      	mov	r0, r7
 800573a:	eb04 0903 	add.w	r9, r4, r3
 800573e:	f000 ff09 	bl	8006554 <_sbrk_r>
 8005742:	4581      	cmp	r9, r0
 8005744:	d13f      	bne.n	80057c6 <_malloc_r+0xe6>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	1a6d      	subs	r5, r5, r1
 800574a:	4629      	mov	r1, r5
 800574c:	4638      	mov	r0, r7
 800574e:	f7ff ffa7 	bl	80056a0 <sbrk_aligned>
 8005752:	3001      	adds	r0, #1
 8005754:	d037      	beq.n	80057c6 <_malloc_r+0xe6>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	442b      	add	r3, r5
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	f8d8 3000 	ldr.w	r3, [r8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d038      	beq.n	80057d6 <_malloc_r+0xf6>
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	42a2      	cmp	r2, r4
 8005768:	d12b      	bne.n	80057c2 <_malloc_r+0xe2>
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	e00f      	b.n	8005790 <_malloc_r+0xb0>
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	1b52      	subs	r2, r2, r5
 8005774:	d41f      	bmi.n	80057b6 <_malloc_r+0xd6>
 8005776:	2a0b      	cmp	r2, #11
 8005778:	d917      	bls.n	80057aa <_malloc_r+0xca>
 800577a:	1961      	adds	r1, r4, r5
 800577c:	42a3      	cmp	r3, r4
 800577e:	6025      	str	r5, [r4, #0]
 8005780:	bf18      	it	ne
 8005782:	6059      	strne	r1, [r3, #4]
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	bf08      	it	eq
 8005788:	f8c8 1000 	streq.w	r1, [r8]
 800578c:	5162      	str	r2, [r4, r5]
 800578e:	604b      	str	r3, [r1, #4]
 8005790:	4638      	mov	r0, r7
 8005792:	f104 060b 	add.w	r6, r4, #11
 8005796:	f000 f829 	bl	80057ec <__malloc_unlock>
 800579a:	f026 0607 	bic.w	r6, r6, #7
 800579e:	1d23      	adds	r3, r4, #4
 80057a0:	1af2      	subs	r2, r6, r3
 80057a2:	d0ae      	beq.n	8005702 <_malloc_r+0x22>
 80057a4:	1b9b      	subs	r3, r3, r6
 80057a6:	50a3      	str	r3, [r4, r2]
 80057a8:	e7ab      	b.n	8005702 <_malloc_r+0x22>
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6862      	ldr	r2, [r4, #4]
 80057ae:	d1dd      	bne.n	800576c <_malloc_r+0x8c>
 80057b0:	f8c8 2000 	str.w	r2, [r8]
 80057b4:	e7ec      	b.n	8005790 <_malloc_r+0xb0>
 80057b6:	4623      	mov	r3, r4
 80057b8:	6864      	ldr	r4, [r4, #4]
 80057ba:	e7ac      	b.n	8005716 <_malloc_r+0x36>
 80057bc:	4634      	mov	r4, r6
 80057be:	6876      	ldr	r6, [r6, #4]
 80057c0:	e7b4      	b.n	800572c <_malloc_r+0x4c>
 80057c2:	4613      	mov	r3, r2
 80057c4:	e7cc      	b.n	8005760 <_malloc_r+0x80>
 80057c6:	230c      	movs	r3, #12
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4638      	mov	r0, r7
 80057cc:	f000 f80e 	bl	80057ec <__malloc_unlock>
 80057d0:	e797      	b.n	8005702 <_malloc_r+0x22>
 80057d2:	6025      	str	r5, [r4, #0]
 80057d4:	e7dc      	b.n	8005790 <_malloc_r+0xb0>
 80057d6:	605b      	str	r3, [r3, #4]
 80057d8:	deff      	udf	#255	; 0xff
 80057da:	bf00      	nop
 80057dc:	20000a20 	.word	0x20000a20

080057e0 <__malloc_lock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__malloc_lock+0x8>)
 80057e2:	f000 bf03 	b.w	80065ec <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	20000b68 	.word	0x20000b68

080057ec <__malloc_unlock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__malloc_unlock+0x8>)
 80057ee:	f000 befe 	b.w	80065ee <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	20000b68 	.word	0x20000b68

080057f8 <__cvt>:
 80057f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	ec55 4b10 	vmov	r4, r5, d0
 8005800:	2d00      	cmp	r5, #0
 8005802:	460e      	mov	r6, r1
 8005804:	4619      	mov	r1, r3
 8005806:	462b      	mov	r3, r5
 8005808:	bfbb      	ittet	lt
 800580a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800580e:	461d      	movlt	r5, r3
 8005810:	2300      	movge	r3, #0
 8005812:	232d      	movlt	r3, #45	; 0x2d
 8005814:	700b      	strb	r3, [r1, #0]
 8005816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800581c:	4691      	mov	r9, r2
 800581e:	f023 0820 	bic.w	r8, r3, #32
 8005822:	bfbc      	itt	lt
 8005824:	4622      	movlt	r2, r4
 8005826:	4614      	movlt	r4, r2
 8005828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582c:	d005      	beq.n	800583a <__cvt+0x42>
 800582e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005832:	d100      	bne.n	8005836 <__cvt+0x3e>
 8005834:	3601      	adds	r6, #1
 8005836:	2102      	movs	r1, #2
 8005838:	e000      	b.n	800583c <__cvt+0x44>
 800583a:	2103      	movs	r1, #3
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	ab02      	add	r3, sp, #8
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	ec45 4b10 	vmov	d0, r4, r5
 8005848:	4653      	mov	r3, sl
 800584a:	4632      	mov	r2, r6
 800584c:	f000 ff68 	bl	8006720 <_dtoa_r>
 8005850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005854:	4607      	mov	r7, r0
 8005856:	d102      	bne.n	800585e <__cvt+0x66>
 8005858:	f019 0f01 	tst.w	r9, #1
 800585c:	d022      	beq.n	80058a4 <__cvt+0xac>
 800585e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005862:	eb07 0906 	add.w	r9, r7, r6
 8005866:	d110      	bne.n	800588a <__cvt+0x92>
 8005868:	783b      	ldrb	r3, [r7, #0]
 800586a:	2b30      	cmp	r3, #48	; 0x30
 800586c:	d10a      	bne.n	8005884 <__cvt+0x8c>
 800586e:	2200      	movs	r2, #0
 8005870:	2300      	movs	r3, #0
 8005872:	4620      	mov	r0, r4
 8005874:	4629      	mov	r1, r5
 8005876:	f7fb f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800587a:	b918      	cbnz	r0, 8005884 <__cvt+0x8c>
 800587c:	f1c6 0601 	rsb	r6, r6, #1
 8005880:	f8ca 6000 	str.w	r6, [sl]
 8005884:	f8da 3000 	ldr.w	r3, [sl]
 8005888:	4499      	add	r9, r3
 800588a:	2200      	movs	r2, #0
 800588c:	2300      	movs	r3, #0
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fb f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8005896:	b108      	cbz	r0, 800589c <__cvt+0xa4>
 8005898:	f8cd 900c 	str.w	r9, [sp, #12]
 800589c:	2230      	movs	r2, #48	; 0x30
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	454b      	cmp	r3, r9
 80058a2:	d307      	bcc.n	80058b4 <__cvt+0xbc>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a8:	1bdb      	subs	r3, r3, r7
 80058aa:	4638      	mov	r0, r7
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	b004      	add	sp, #16
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	9103      	str	r1, [sp, #12]
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e7f0      	b.n	800589e <__cvt+0xa6>

080058bc <__exponent>:
 80058bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058be:	4603      	mov	r3, r0
 80058c0:	2900      	cmp	r1, #0
 80058c2:	bfb8      	it	lt
 80058c4:	4249      	neglt	r1, r1
 80058c6:	f803 2b02 	strb.w	r2, [r3], #2
 80058ca:	bfb4      	ite	lt
 80058cc:	222d      	movlt	r2, #45	; 0x2d
 80058ce:	222b      	movge	r2, #43	; 0x2b
 80058d0:	2909      	cmp	r1, #9
 80058d2:	7042      	strb	r2, [r0, #1]
 80058d4:	dd2a      	ble.n	800592c <__exponent+0x70>
 80058d6:	f10d 0207 	add.w	r2, sp, #7
 80058da:	4617      	mov	r7, r2
 80058dc:	260a      	movs	r6, #10
 80058de:	4694      	mov	ip, r2
 80058e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80058e4:	fb06 1415 	mls	r4, r6, r5, r1
 80058e8:	3430      	adds	r4, #48	; 0x30
 80058ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80058ee:	460c      	mov	r4, r1
 80058f0:	2c63      	cmp	r4, #99	; 0x63
 80058f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80058f6:	4629      	mov	r1, r5
 80058f8:	dcf1      	bgt.n	80058de <__exponent+0x22>
 80058fa:	3130      	adds	r1, #48	; 0x30
 80058fc:	f1ac 0402 	sub.w	r4, ip, #2
 8005900:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005904:	1c41      	adds	r1, r0, #1
 8005906:	4622      	mov	r2, r4
 8005908:	42ba      	cmp	r2, r7
 800590a:	d30a      	bcc.n	8005922 <__exponent+0x66>
 800590c:	f10d 0209 	add.w	r2, sp, #9
 8005910:	eba2 020c 	sub.w	r2, r2, ip
 8005914:	42bc      	cmp	r4, r7
 8005916:	bf88      	it	hi
 8005918:	2200      	movhi	r2, #0
 800591a:	4413      	add	r3, r2
 800591c:	1a18      	subs	r0, r3, r0
 800591e:	b003      	add	sp, #12
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005922:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005926:	f801 5f01 	strb.w	r5, [r1, #1]!
 800592a:	e7ed      	b.n	8005908 <__exponent+0x4c>
 800592c:	2330      	movs	r3, #48	; 0x30
 800592e:	3130      	adds	r1, #48	; 0x30
 8005930:	7083      	strb	r3, [r0, #2]
 8005932:	70c1      	strb	r1, [r0, #3]
 8005934:	1d03      	adds	r3, r0, #4
 8005936:	e7f1      	b.n	800591c <__exponent+0x60>

08005938 <_printf_float>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	ed2d 8b02 	vpush	{d8}
 8005940:	b08d      	sub	sp, #52	; 0x34
 8005942:	460c      	mov	r4, r1
 8005944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005948:	4616      	mov	r6, r2
 800594a:	461f      	mov	r7, r3
 800594c:	4605      	mov	r5, r0
 800594e:	f000 fdc9 	bl	80064e4 <_localeconv_r>
 8005952:	f8d0 a000 	ldr.w	sl, [r0]
 8005956:	4650      	mov	r0, sl
 8005958:	f7fa fc8a 	bl	8000270 <strlen>
 800595c:	2300      	movs	r3, #0
 800595e:	930a      	str	r3, [sp, #40]	; 0x28
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f8d8 3000 	ldr.w	r3, [r8]
 8005968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800596c:	3307      	adds	r3, #7
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	f103 0208 	add.w	r2, r3, #8
 8005976:	f8c8 2000 	str.w	r2, [r8]
 800597a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800597e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	f8cd 8018 	str.w	r8, [sp, #24]
 8005988:	ee08 0a10 	vmov	s16, r0
 800598c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005994:	4b9e      	ldr	r3, [pc, #632]	; (8005c10 <_printf_float+0x2d8>)
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	f7fb f8c7 	bl	8000b2c <__aeabi_dcmpun>
 800599e:	bb88      	cbnz	r0, 8005a04 <_printf_float+0xcc>
 80059a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a4:	4b9a      	ldr	r3, [pc, #616]	; (8005c10 <_printf_float+0x2d8>)
 80059a6:	f04f 32ff 	mov.w	r2, #4294967295
 80059aa:	f7fb f8a1 	bl	8000af0 <__aeabi_dcmple>
 80059ae:	bb48      	cbnz	r0, 8005a04 <_printf_float+0xcc>
 80059b0:	2200      	movs	r2, #0
 80059b2:	2300      	movs	r3, #0
 80059b4:	4640      	mov	r0, r8
 80059b6:	4649      	mov	r1, r9
 80059b8:	f7fb f890 	bl	8000adc <__aeabi_dcmplt>
 80059bc:	b110      	cbz	r0, 80059c4 <_printf_float+0x8c>
 80059be:	232d      	movs	r3, #45	; 0x2d
 80059c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c4:	4a93      	ldr	r2, [pc, #588]	; (8005c14 <_printf_float+0x2dc>)
 80059c6:	4b94      	ldr	r3, [pc, #592]	; (8005c18 <_printf_float+0x2e0>)
 80059c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059cc:	bf94      	ite	ls
 80059ce:	4690      	movls	r8, r2
 80059d0:	4698      	movhi	r8, r3
 80059d2:	2303      	movs	r3, #3
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	9b05      	ldr	r3, [sp, #20]
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	f04f 0900 	mov.w	r9, #0
 80059e2:	9700      	str	r7, [sp, #0]
 80059e4:	4633      	mov	r3, r6
 80059e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f9da 	bl	8005da4 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f040 8090 	bne.w	8005b16 <_printf_float+0x1de>
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	b00d      	add	sp, #52	; 0x34
 80059fc:	ecbd 8b02 	vpop	{d8}
 8005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fb f88e 	bl	8000b2c <__aeabi_dcmpun>
 8005a10:	b140      	cbz	r0, 8005a24 <_printf_float+0xec>
 8005a12:	464b      	mov	r3, r9
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfbc      	itt	lt
 8005a18:	232d      	movlt	r3, #45	; 0x2d
 8005a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a1e:	4a7f      	ldr	r2, [pc, #508]	; (8005c1c <_printf_float+0x2e4>)
 8005a20:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <_printf_float+0x2e8>)
 8005a22:	e7d1      	b.n	80059c8 <_printf_float+0x90>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a2a:	9206      	str	r2, [sp, #24]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	d13f      	bne.n	8005ab0 <_printf_float+0x178>
 8005a30:	2306      	movs	r3, #6
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	9b05      	ldr	r3, [sp, #20]
 8005a36:	6861      	ldr	r1, [r4, #4]
 8005a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	ab0a      	add	r3, sp, #40	; 0x28
 8005a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a46:	ab09      	add	r3, sp, #36	; 0x24
 8005a48:	ec49 8b10 	vmov	d0, r8, r9
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fecf 	bl	80057f8 <__cvt>
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a5e:	2b47      	cmp	r3, #71	; 0x47
 8005a60:	4680      	mov	r8, r0
 8005a62:	d108      	bne.n	8005a76 <_printf_float+0x13e>
 8005a64:	1cc8      	adds	r0, r1, #3
 8005a66:	db02      	blt.n	8005a6e <_printf_float+0x136>
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	4299      	cmp	r1, r3
 8005a6c:	dd41      	ble.n	8005af2 <_printf_float+0x1ba>
 8005a6e:	f1ab 0302 	sub.w	r3, fp, #2
 8005a72:	fa5f fb83 	uxtb.w	fp, r3
 8005a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a7a:	d820      	bhi.n	8005abe <_printf_float+0x186>
 8005a7c:	3901      	subs	r1, #1
 8005a7e:	465a      	mov	r2, fp
 8005a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a84:	9109      	str	r1, [sp, #36]	; 0x24
 8005a86:	f7ff ff19 	bl	80058bc <__exponent>
 8005a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a8c:	1813      	adds	r3, r2, r0
 8005a8e:	2a01      	cmp	r2, #1
 8005a90:	4681      	mov	r9, r0
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	dc02      	bgt.n	8005a9c <_printf_float+0x164>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	07d2      	lsls	r2, r2, #31
 8005a9a:	d501      	bpl.n	8005aa0 <_printf_float+0x168>
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d09c      	beq.n	80059e2 <_printf_float+0xaa>
 8005aa8:	232d      	movs	r3, #45	; 0x2d
 8005aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aae:	e798      	b.n	80059e2 <_printf_float+0xaa>
 8005ab0:	9a06      	ldr	r2, [sp, #24]
 8005ab2:	2a47      	cmp	r2, #71	; 0x47
 8005ab4:	d1be      	bne.n	8005a34 <_printf_float+0xfc>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1bc      	bne.n	8005a34 <_printf_float+0xfc>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7b9      	b.n	8005a32 <_printf_float+0xfa>
 8005abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ac2:	d118      	bne.n	8005af6 <_printf_float+0x1be>
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	dd0b      	ble.n	8005ae2 <_printf_float+0x1aa>
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	b913      	cbnz	r3, 8005ad4 <_printf_float+0x19c>
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	07d0      	lsls	r0, r2, #31
 8005ad2:	d502      	bpl.n	8005ada <_printf_float+0x1a2>
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	440b      	add	r3, r1
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	e7de      	b.n	8005aa0 <_printf_float+0x168>
 8005ae2:	b913      	cbnz	r3, 8005aea <_printf_float+0x1b2>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	07d2      	lsls	r2, r2, #31
 8005ae8:	d501      	bpl.n	8005aee <_printf_float+0x1b6>
 8005aea:	3302      	adds	r3, #2
 8005aec:	e7f4      	b.n	8005ad8 <_printf_float+0x1a0>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7f2      	b.n	8005ad8 <_printf_float+0x1a0>
 8005af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	4299      	cmp	r1, r3
 8005afa:	db05      	blt.n	8005b08 <_printf_float+0x1d0>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	6121      	str	r1, [r4, #16]
 8005b00:	07d8      	lsls	r0, r3, #31
 8005b02:	d5ea      	bpl.n	8005ada <_printf_float+0x1a2>
 8005b04:	1c4b      	adds	r3, r1, #1
 8005b06:	e7e7      	b.n	8005ad8 <_printf_float+0x1a0>
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfd4      	ite	le
 8005b0c:	f1c1 0202 	rsble	r2, r1, #2
 8005b10:	2201      	movgt	r2, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	e7e0      	b.n	8005ad8 <_printf_float+0x1a0>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	055a      	lsls	r2, r3, #21
 8005b1a:	d407      	bmi.n	8005b2c <_printf_float+0x1f4>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	4642      	mov	r2, r8
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	d12c      	bne.n	8005b84 <_printf_float+0x24c>
 8005b2a:	e764      	b.n	80059f6 <_printf_float+0xbe>
 8005b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b30:	f240 80e0 	bls.w	8005cf4 <_printf_float+0x3bc>
 8005b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f7fa ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d034      	beq.n	8005bae <_printf_float+0x276>
 8005b44:	4a37      	ldr	r2, [pc, #220]	; (8005c24 <_printf_float+0x2ec>)
 8005b46:	2301      	movs	r3, #1
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f af51 	beq.w	80059f6 <_printf_float+0xbe>
 8005b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	db02      	blt.n	8005b62 <_printf_float+0x22a>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	07d8      	lsls	r0, r3, #31
 8005b60:	d510      	bpl.n	8005b84 <_printf_float+0x24c>
 8005b62:	ee18 3a10 	vmov	r3, s16
 8005b66:	4652      	mov	r2, sl
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af41 	beq.w	80059f6 <_printf_float+0xbe>
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	f104 091a 	add.w	r9, r4, #26
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4543      	cmp	r3, r8
 8005b82:	dc09      	bgt.n	8005b98 <_printf_float+0x260>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	079b      	lsls	r3, r3, #30
 8005b88:	f100 8107 	bmi.w	8005d9a <_printf_float+0x462>
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	4298      	cmp	r0, r3
 8005b92:	bfb8      	it	lt
 8005b94:	4618      	movlt	r0, r3
 8005b96:	e730      	b.n	80059fa <_printf_float+0xc2>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af27 	beq.w	80059f6 <_printf_float+0xbe>
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	e7e6      	b.n	8005b7c <_printf_float+0x244>
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc39      	bgt.n	8005c28 <_printf_float+0x2f0>
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <_printf_float+0x2ec>)
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af19 	beq.w	80059f6 <_printf_float+0xbe>
 8005bc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d102      	bne.n	8005bd2 <_printf_float+0x29a>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	d5d8      	bpl.n	8005b84 <_printf_float+0x24c>
 8005bd2:	ee18 3a10 	vmov	r3, s16
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f af09 	beq.w	80059f6 <_printf_float+0xbe>
 8005be4:	f04f 0900 	mov.w	r9, #0
 8005be8:	f104 0a1a 	add.w	sl, r4, #26
 8005bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bee:	425b      	negs	r3, r3
 8005bf0:	454b      	cmp	r3, r9
 8005bf2:	dc01      	bgt.n	8005bf8 <_printf_float+0x2c0>
 8005bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf6:	e792      	b.n	8005b1e <_printf_float+0x1e6>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f aef7 	beq.w	80059f6 <_printf_float+0xbe>
 8005c08:	f109 0901 	add.w	r9, r9, #1
 8005c0c:	e7ee      	b.n	8005bec <_printf_float+0x2b4>
 8005c0e:	bf00      	nop
 8005c10:	7fefffff 	.word	0x7fefffff
 8005c14:	08009d24 	.word	0x08009d24
 8005c18:	08009d28 	.word	0x08009d28
 8005c1c:	08009d2c 	.word	0x08009d2c
 8005c20:	08009d30 	.word	0x08009d30
 8005c24:	0800851b 	.word	0x0800851b
 8005c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	bfa8      	it	ge
 8005c30:	461a      	movge	r2, r3
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	4691      	mov	r9, r2
 8005c36:	dc37      	bgt.n	8005ca8 <_printf_float+0x370>
 8005c38:	f04f 0b00 	mov.w	fp, #0
 8005c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c40:	f104 021a 	add.w	r2, r4, #26
 8005c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c46:	9305      	str	r3, [sp, #20]
 8005c48:	eba3 0309 	sub.w	r3, r3, r9
 8005c4c:	455b      	cmp	r3, fp
 8005c4e:	dc33      	bgt.n	8005cb8 <_printf_float+0x380>
 8005c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c54:	429a      	cmp	r2, r3
 8005c56:	db3b      	blt.n	8005cd0 <_printf_float+0x398>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	07da      	lsls	r2, r3, #31
 8005c5c:	d438      	bmi.n	8005cd0 <_printf_float+0x398>
 8005c5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c62:	eba2 0903 	sub.w	r9, r2, r3
 8005c66:	9b05      	ldr	r3, [sp, #20]
 8005c68:	1ad2      	subs	r2, r2, r3
 8005c6a:	4591      	cmp	r9, r2
 8005c6c:	bfa8      	it	ge
 8005c6e:	4691      	movge	r9, r2
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	dc35      	bgt.n	8005ce2 <_printf_float+0x3aa>
 8005c76:	f04f 0800 	mov.w	r8, #0
 8005c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c7e:	f104 0a1a 	add.w	sl, r4, #26
 8005c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	eba3 0309 	sub.w	r3, r3, r9
 8005c8c:	4543      	cmp	r3, r8
 8005c8e:	f77f af79 	ble.w	8005b84 <_printf_float+0x24c>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f43f aeaa 	beq.w	80059f6 <_printf_float+0xbe>
 8005ca2:	f108 0801 	add.w	r8, r8, #1
 8005ca6:	e7ec      	b.n	8005c82 <_printf_float+0x34a>
 8005ca8:	4613      	mov	r3, r2
 8005caa:	4631      	mov	r1, r6
 8005cac:	4642      	mov	r2, r8
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d1c0      	bne.n	8005c38 <_printf_float+0x300>
 8005cb6:	e69e      	b.n	80059f6 <_printf_float+0xbe>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f ae97 	beq.w	80059f6 <_printf_float+0xbe>
 8005cc8:	9a05      	ldr	r2, [sp, #20]
 8005cca:	f10b 0b01 	add.w	fp, fp, #1
 8005cce:	e7b9      	b.n	8005c44 <_printf_float+0x30c>
 8005cd0:	ee18 3a10 	vmov	r3, s16
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d1be      	bne.n	8005c5e <_printf_float+0x326>
 8005ce0:	e689      	b.n	80059f6 <_printf_float+0xbe>
 8005ce2:	9a05      	ldr	r2, [sp, #20]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	4442      	add	r2, r8
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d1c1      	bne.n	8005c76 <_printf_float+0x33e>
 8005cf2:	e680      	b.n	80059f6 <_printf_float+0xbe>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	2a01      	cmp	r2, #1
 8005cf8:	dc01      	bgt.n	8005cfe <_printf_float+0x3c6>
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d53a      	bpl.n	8005d74 <_printf_float+0x43c>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4642      	mov	r2, r8
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae74 	beq.w	80059f6 <_printf_float+0xbe>
 8005d0e:	ee18 3a10 	vmov	r3, s16
 8005d12:	4652      	mov	r2, sl
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f ae6b 	beq.w	80059f6 <_printf_float+0xbe>
 8005d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d2c:	f7fa fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d30:	b9d8      	cbnz	r0, 8005d6a <_printf_float+0x432>
 8005d32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d36:	f108 0201 	add.w	r2, r8, #1
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	d10e      	bne.n	8005d62 <_printf_float+0x42a>
 8005d44:	e657      	b.n	80059f6 <_printf_float+0xbe>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f ae50 	beq.w	80059f6 <_printf_float+0xbe>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	4543      	cmp	r3, r8
 8005d60:	dcf1      	bgt.n	8005d46 <_printf_float+0x40e>
 8005d62:	464b      	mov	r3, r9
 8005d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d68:	e6da      	b.n	8005b20 <_printf_float+0x1e8>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	f104 0a1a 	add.w	sl, r4, #26
 8005d72:	e7f2      	b.n	8005d5a <_printf_float+0x422>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4642      	mov	r2, r8
 8005d78:	e7df      	b.n	8005d3a <_printf_float+0x402>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	464a      	mov	r2, r9
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae36 	beq.w	80059f6 <_printf_float+0xbe>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	4543      	cmp	r3, r8
 8005d96:	dcf0      	bgt.n	8005d7a <_printf_float+0x442>
 8005d98:	e6f8      	b.n	8005b8c <_printf_float+0x254>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	f104 0919 	add.w	r9, r4, #25
 8005da2:	e7f4      	b.n	8005d8e <_printf_float+0x456>

08005da4 <_printf_common>:
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	4616      	mov	r6, r2
 8005daa:	4699      	mov	r9, r3
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bfb8      	it	lt
 8005db8:	4613      	movlt	r3, r2
 8005dba:	6033      	str	r3, [r6, #0]
 8005dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b10a      	cbz	r2, 8005dca <_printf_common+0x26>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	0699      	lsls	r1, r3, #26
 8005dce:	bf42      	ittt	mi
 8005dd0:	6833      	ldrmi	r3, [r6, #0]
 8005dd2:	3302      	addmi	r3, #2
 8005dd4:	6033      	strmi	r3, [r6, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	f015 0506 	ands.w	r5, r5, #6
 8005ddc:	d106      	bne.n	8005dec <_printf_common+0x48>
 8005dde:	f104 0a19 	add.w	sl, r4, #25
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	6832      	ldr	r2, [r6, #0]
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc26      	bgt.n	8005e3a <_printf_common+0x96>
 8005dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005df0:	1e13      	subs	r3, r2, #0
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	bf18      	it	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	0692      	lsls	r2, r2, #26
 8005dfa:	d42b      	bmi.n	8005e54 <_printf_common+0xb0>
 8005dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e00:	4649      	mov	r1, r9
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d01e      	beq.n	8005e48 <_printf_common+0xa4>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	f003 0306 	and.w	r3, r3, #6
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf02      	ittt	eq
 8005e16:	68e5      	ldreq	r5, [r4, #12]
 8005e18:	6833      	ldreq	r3, [r6, #0]
 8005e1a:	1aed      	subeq	r5, r5, r3
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	bf0c      	ite	eq
 8005e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e24:	2500      	movne	r5, #0
 8005e26:	4293      	cmp	r3, r2
 8005e28:	bfc4      	itt	gt
 8005e2a:	1a9b      	subgt	r3, r3, r2
 8005e2c:	18ed      	addgt	r5, r5, r3
 8005e2e:	2600      	movs	r6, #0
 8005e30:	341a      	adds	r4, #26
 8005e32:	42b5      	cmp	r5, r6
 8005e34:	d11a      	bne.n	8005e6c <_printf_common+0xc8>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e008      	b.n	8005e4c <_printf_common+0xa8>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4649      	mov	r1, r9
 8005e40:	4638      	mov	r0, r7
 8005e42:	47c0      	blx	r8
 8005e44:	3001      	adds	r0, #1
 8005e46:	d103      	bne.n	8005e50 <_printf_common+0xac>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	3501      	adds	r5, #1
 8005e52:	e7c6      	b.n	8005de2 <_printf_common+0x3e>
 8005e54:	18e1      	adds	r1, r4, r3
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	2030      	movs	r0, #48	; 0x30
 8005e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e5e:	4422      	add	r2, r4
 8005e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e68:	3302      	adds	r3, #2
 8005e6a:	e7c7      	b.n	8005dfc <_printf_common+0x58>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4649      	mov	r1, r9
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c0      	blx	r8
 8005e76:	3001      	adds	r0, #1
 8005e78:	d0e6      	beq.n	8005e48 <_printf_common+0xa4>
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7d9      	b.n	8005e32 <_printf_common+0x8e>
	...

08005e80 <_printf_i>:
 8005e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	7e0f      	ldrb	r7, [r1, #24]
 8005e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e88:	2f78      	cmp	r7, #120	; 0x78
 8005e8a:	4691      	mov	r9, r2
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	469a      	mov	sl, r3
 8005e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e96:	d807      	bhi.n	8005ea8 <_printf_i+0x28>
 8005e98:	2f62      	cmp	r7, #98	; 0x62
 8005e9a:	d80a      	bhi.n	8005eb2 <_printf_i+0x32>
 8005e9c:	2f00      	cmp	r7, #0
 8005e9e:	f000 80d4 	beq.w	800604a <_printf_i+0x1ca>
 8005ea2:	2f58      	cmp	r7, #88	; 0x58
 8005ea4:	f000 80c0 	beq.w	8006028 <_printf_i+0x1a8>
 8005ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eb0:	e03a      	b.n	8005f28 <_printf_i+0xa8>
 8005eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eb6:	2b15      	cmp	r3, #21
 8005eb8:	d8f6      	bhi.n	8005ea8 <_printf_i+0x28>
 8005eba:	a101      	add	r1, pc, #4	; (adr r1, 8005ec0 <_printf_i+0x40>)
 8005ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec0:	08005f19 	.word	0x08005f19
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005ea9 	.word	0x08005ea9
 8005ecc:	08005ea9 	.word	0x08005ea9
 8005ed0:	08005ea9 	.word	0x08005ea9
 8005ed4:	08005ea9 	.word	0x08005ea9
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005ea9 	.word	0x08005ea9
 8005ee0:	08005ea9 	.word	0x08005ea9
 8005ee4:	08005ea9 	.word	0x08005ea9
 8005ee8:	08005ea9 	.word	0x08005ea9
 8005eec:	08006031 	.word	0x08006031
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005feb 	.word	0x08005feb
 8005ef8:	08005ea9 	.word	0x08005ea9
 8005efc:	08005ea9 	.word	0x08005ea9
 8005f00:	08006053 	.word	0x08006053
 8005f04:	08005ea9 	.word	0x08005ea9
 8005f08:	08005f59 	.word	0x08005f59
 8005f0c:	08005ea9 	.word	0x08005ea9
 8005f10:	08005ea9 	.word	0x08005ea9
 8005f14:	08005ff3 	.word	0x08005ff3
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e09f      	b.n	800606c <_printf_i+0x1ec>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	0607      	lsls	r7, r0, #24
 8005f32:	f103 0104 	add.w	r1, r3, #4
 8005f36:	6029      	str	r1, [r5, #0]
 8005f38:	d501      	bpl.n	8005f3e <_printf_i+0xbe>
 8005f3a:	681e      	ldr	r6, [r3, #0]
 8005f3c:	e003      	b.n	8005f46 <_printf_i+0xc6>
 8005f3e:	0646      	lsls	r6, r0, #25
 8005f40:	d5fb      	bpl.n	8005f3a <_printf_i+0xba>
 8005f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	da03      	bge.n	8005f52 <_printf_i+0xd2>
 8005f4a:	232d      	movs	r3, #45	; 0x2d
 8005f4c:	4276      	negs	r6, r6
 8005f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f52:	485a      	ldr	r0, [pc, #360]	; (80060bc <_printf_i+0x23c>)
 8005f54:	230a      	movs	r3, #10
 8005f56:	e012      	b.n	8005f7e <_printf_i+0xfe>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	6029      	str	r1, [r5, #0]
 8005f60:	0605      	lsls	r5, r0, #24
 8005f62:	d501      	bpl.n	8005f68 <_printf_i+0xe8>
 8005f64:	681e      	ldr	r6, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <_printf_i+0xee>
 8005f68:	0641      	lsls	r1, r0, #25
 8005f6a:	d5fb      	bpl.n	8005f64 <_printf_i+0xe4>
 8005f6c:	881e      	ldrh	r6, [r3, #0]
 8005f6e:	4853      	ldr	r0, [pc, #332]	; (80060bc <_printf_i+0x23c>)
 8005f70:	2f6f      	cmp	r7, #111	; 0x6f
 8005f72:	bf0c      	ite	eq
 8005f74:	2308      	moveq	r3, #8
 8005f76:	230a      	movne	r3, #10
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f7e:	6865      	ldr	r5, [r4, #4]
 8005f80:	60a5      	str	r5, [r4, #8]
 8005f82:	2d00      	cmp	r5, #0
 8005f84:	bfa2      	ittt	ge
 8005f86:	6821      	ldrge	r1, [r4, #0]
 8005f88:	f021 0104 	bicge.w	r1, r1, #4
 8005f8c:	6021      	strge	r1, [r4, #0]
 8005f8e:	b90e      	cbnz	r6, 8005f94 <_printf_i+0x114>
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	d04b      	beq.n	800602c <_printf_i+0x1ac>
 8005f94:	4615      	mov	r5, r2
 8005f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f9e:	5dc7      	ldrb	r7, [r0, r7]
 8005fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fa4:	4637      	mov	r7, r6
 8005fa6:	42bb      	cmp	r3, r7
 8005fa8:	460e      	mov	r6, r1
 8005faa:	d9f4      	bls.n	8005f96 <_printf_i+0x116>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d10b      	bne.n	8005fc8 <_printf_i+0x148>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	07de      	lsls	r6, r3, #31
 8005fb4:	d508      	bpl.n	8005fc8 <_printf_i+0x148>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6861      	ldr	r1, [r4, #4]
 8005fba:	4299      	cmp	r1, r3
 8005fbc:	bfde      	ittt	le
 8005fbe:	2330      	movle	r3, #48	; 0x30
 8005fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fc8:	1b52      	subs	r2, r2, r5
 8005fca:	6122      	str	r2, [r4, #16]
 8005fcc:	f8cd a000 	str.w	sl, [sp]
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	aa03      	add	r2, sp, #12
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f7ff fee4 	bl	8005da4 <_printf_common>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d14a      	bne.n	8006076 <_printf_i+0x1f6>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	b004      	add	sp, #16
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f043 0320 	orr.w	r3, r3, #32
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	4833      	ldr	r0, [pc, #204]	; (80060c0 <_printf_i+0x240>)
 8005ff4:	2778      	movs	r7, #120	; 0x78
 8005ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	6829      	ldr	r1, [r5, #0]
 8005ffe:	061f      	lsls	r7, r3, #24
 8006000:	f851 6b04 	ldr.w	r6, [r1], #4
 8006004:	d402      	bmi.n	800600c <_printf_i+0x18c>
 8006006:	065f      	lsls	r7, r3, #25
 8006008:	bf48      	it	mi
 800600a:	b2b6      	uxthmi	r6, r6
 800600c:	07df      	lsls	r7, r3, #31
 800600e:	bf48      	it	mi
 8006010:	f043 0320 	orrmi.w	r3, r3, #32
 8006014:	6029      	str	r1, [r5, #0]
 8006016:	bf48      	it	mi
 8006018:	6023      	strmi	r3, [r4, #0]
 800601a:	b91e      	cbnz	r6, 8006024 <_printf_i+0x1a4>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	f023 0320 	bic.w	r3, r3, #32
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	2310      	movs	r3, #16
 8006026:	e7a7      	b.n	8005f78 <_printf_i+0xf8>
 8006028:	4824      	ldr	r0, [pc, #144]	; (80060bc <_printf_i+0x23c>)
 800602a:	e7e4      	b.n	8005ff6 <_printf_i+0x176>
 800602c:	4615      	mov	r5, r2
 800602e:	e7bd      	b.n	8005fac <_printf_i+0x12c>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	6826      	ldr	r6, [r4, #0]
 8006034:	6961      	ldr	r1, [r4, #20]
 8006036:	1d18      	adds	r0, r3, #4
 8006038:	6028      	str	r0, [r5, #0]
 800603a:	0635      	lsls	r5, r6, #24
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	d501      	bpl.n	8006044 <_printf_i+0x1c4>
 8006040:	6019      	str	r1, [r3, #0]
 8006042:	e002      	b.n	800604a <_printf_i+0x1ca>
 8006044:	0670      	lsls	r0, r6, #25
 8006046:	d5fb      	bpl.n	8006040 <_printf_i+0x1c0>
 8006048:	8019      	strh	r1, [r3, #0]
 800604a:	2300      	movs	r3, #0
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	4615      	mov	r5, r2
 8006050:	e7bc      	b.n	8005fcc <_printf_i+0x14c>
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	1d1a      	adds	r2, r3, #4
 8006056:	602a      	str	r2, [r5, #0]
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	6862      	ldr	r2, [r4, #4]
 800605c:	2100      	movs	r1, #0
 800605e:	4628      	mov	r0, r5
 8006060:	f7fa f8b6 	bl	80001d0 <memchr>
 8006064:	b108      	cbz	r0, 800606a <_printf_i+0x1ea>
 8006066:	1b40      	subs	r0, r0, r5
 8006068:	6060      	str	r0, [r4, #4]
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	6123      	str	r3, [r4, #16]
 800606e:	2300      	movs	r3, #0
 8006070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006074:	e7aa      	b.n	8005fcc <_printf_i+0x14c>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	462a      	mov	r2, r5
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	47d0      	blx	sl
 8006080:	3001      	adds	r0, #1
 8006082:	d0ad      	beq.n	8005fe0 <_printf_i+0x160>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	079b      	lsls	r3, r3, #30
 8006088:	d413      	bmi.n	80060b2 <_printf_i+0x232>
 800608a:	68e0      	ldr	r0, [r4, #12]
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	4298      	cmp	r0, r3
 8006090:	bfb8      	it	lt
 8006092:	4618      	movlt	r0, r3
 8006094:	e7a6      	b.n	8005fe4 <_printf_i+0x164>
 8006096:	2301      	movs	r3, #1
 8006098:	4632      	mov	r2, r6
 800609a:	4649      	mov	r1, r9
 800609c:	4640      	mov	r0, r8
 800609e:	47d0      	blx	sl
 80060a0:	3001      	adds	r0, #1
 80060a2:	d09d      	beq.n	8005fe0 <_printf_i+0x160>
 80060a4:	3501      	adds	r5, #1
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	9903      	ldr	r1, [sp, #12]
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dcf2      	bgt.n	8006096 <_printf_i+0x216>
 80060b0:	e7eb      	b.n	800608a <_printf_i+0x20a>
 80060b2:	2500      	movs	r5, #0
 80060b4:	f104 0619 	add.w	r6, r4, #25
 80060b8:	e7f5      	b.n	80060a6 <_printf_i+0x226>
 80060ba:	bf00      	nop
 80060bc:	08009d34 	.word	0x08009d34
 80060c0:	08009d45 	.word	0x08009d45

080060c4 <std>:
 80060c4:	2300      	movs	r3, #0
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	e9c0 3300 	strd	r3, r3, [r0]
 80060ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060d2:	6083      	str	r3, [r0, #8]
 80060d4:	8181      	strh	r1, [r0, #12]
 80060d6:	6643      	str	r3, [r0, #100]	; 0x64
 80060d8:	81c2      	strh	r2, [r0, #14]
 80060da:	6183      	str	r3, [r0, #24]
 80060dc:	4619      	mov	r1, r3
 80060de:	2208      	movs	r2, #8
 80060e0:	305c      	adds	r0, #92	; 0x5c
 80060e2:	f000 f9e5 	bl	80064b0 <memset>
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <std+0x38>)
 80060e8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <std+0x3c>)
 80060ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <std+0x40>)
 80060f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <std+0x44>)
 80060f4:	6224      	str	r4, [r4, #32]
 80060f6:	6323      	str	r3, [r4, #48]	; 0x30
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop
 80060fc:	08006301 	.word	0x08006301
 8006100:	08006323 	.word	0x08006323
 8006104:	0800635b 	.word	0x0800635b
 8006108:	0800637f 	.word	0x0800637f

0800610c <stdio_exit_handler>:
 800610c:	4a02      	ldr	r2, [pc, #8]	; (8006118 <stdio_exit_handler+0xc>)
 800610e:	4903      	ldr	r1, [pc, #12]	; (800611c <stdio_exit_handler+0x10>)
 8006110:	4803      	ldr	r0, [pc, #12]	; (8006120 <stdio_exit_handler+0x14>)
 8006112:	f000 b869 	b.w	80061e8 <_fwalk_sglue>
 8006116:	bf00      	nop
 8006118:	20000558 	.word	0x20000558
 800611c:	08007e29 	.word	0x08007e29
 8006120:	20000564 	.word	0x20000564

08006124 <cleanup_stdio>:
 8006124:	6841      	ldr	r1, [r0, #4]
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <cleanup_stdio+0x34>)
 8006128:	4299      	cmp	r1, r3
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	d001      	beq.n	8006134 <cleanup_stdio+0x10>
 8006130:	f001 fe7a 	bl	8007e28 <_fflush_r>
 8006134:	68a1      	ldr	r1, [r4, #8]
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <cleanup_stdio+0x38>)
 8006138:	4299      	cmp	r1, r3
 800613a:	d002      	beq.n	8006142 <cleanup_stdio+0x1e>
 800613c:	4620      	mov	r0, r4
 800613e:	f001 fe73 	bl	8007e28 <_fflush_r>
 8006142:	68e1      	ldr	r1, [r4, #12]
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <cleanup_stdio+0x3c>)
 8006146:	4299      	cmp	r1, r3
 8006148:	d004      	beq.n	8006154 <cleanup_stdio+0x30>
 800614a:	4620      	mov	r0, r4
 800614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006150:	f001 be6a 	b.w	8007e28 <_fflush_r>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	bf00      	nop
 8006158:	20000a28 	.word	0x20000a28
 800615c:	20000a90 	.word	0x20000a90
 8006160:	20000af8 	.word	0x20000af8

08006164 <global_stdio_init.part.0>:
 8006164:	b510      	push	{r4, lr}
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <global_stdio_init.part.0+0x30>)
 8006168:	4c0b      	ldr	r4, [pc, #44]	; (8006198 <global_stdio_init.part.0+0x34>)
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <global_stdio_init.part.0+0x38>)
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	4620      	mov	r0, r4
 8006170:	2200      	movs	r2, #0
 8006172:	2104      	movs	r1, #4
 8006174:	f7ff ffa6 	bl	80060c4 <std>
 8006178:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800617c:	2201      	movs	r2, #1
 800617e:	2109      	movs	r1, #9
 8006180:	f7ff ffa0 	bl	80060c4 <std>
 8006184:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006188:	2202      	movs	r2, #2
 800618a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618e:	2112      	movs	r1, #18
 8006190:	f7ff bf98 	b.w	80060c4 <std>
 8006194:	20000b60 	.word	0x20000b60
 8006198:	20000a28 	.word	0x20000a28
 800619c:	0800610d 	.word	0x0800610d

080061a0 <__sfp_lock_acquire>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__sfp_lock_acquire+0x8>)
 80061a2:	f000 ba23 	b.w	80065ec <__retarget_lock_acquire_recursive>
 80061a6:	bf00      	nop
 80061a8:	20000b69 	.word	0x20000b69

080061ac <__sfp_lock_release>:
 80061ac:	4801      	ldr	r0, [pc, #4]	; (80061b4 <__sfp_lock_release+0x8>)
 80061ae:	f000 ba1e 	b.w	80065ee <__retarget_lock_release_recursive>
 80061b2:	bf00      	nop
 80061b4:	20000b69 	.word	0x20000b69

080061b8 <__sinit>:
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4604      	mov	r4, r0
 80061bc:	f7ff fff0 	bl	80061a0 <__sfp_lock_acquire>
 80061c0:	6a23      	ldr	r3, [r4, #32]
 80061c2:	b11b      	cbz	r3, 80061cc <__sinit+0x14>
 80061c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c8:	f7ff bff0 	b.w	80061ac <__sfp_lock_release>
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <__sinit+0x28>)
 80061ce:	6223      	str	r3, [r4, #32]
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__sinit+0x2c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f5      	bne.n	80061c4 <__sinit+0xc>
 80061d8:	f7ff ffc4 	bl	8006164 <global_stdio_init.part.0>
 80061dc:	e7f2      	b.n	80061c4 <__sinit+0xc>
 80061de:	bf00      	nop
 80061e0:	08006125 	.word	0x08006125
 80061e4:	20000b60 	.word	0x20000b60

080061e8 <_fwalk_sglue>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4607      	mov	r7, r0
 80061ee:	4688      	mov	r8, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	2600      	movs	r6, #0
 80061f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061f8:	f1b9 0901 	subs.w	r9, r9, #1
 80061fc:	d505      	bpl.n	800620a <_fwalk_sglue+0x22>
 80061fe:	6824      	ldr	r4, [r4, #0]
 8006200:	2c00      	cmp	r4, #0
 8006202:	d1f7      	bne.n	80061f4 <_fwalk_sglue+0xc>
 8006204:	4630      	mov	r0, r6
 8006206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d907      	bls.n	8006220 <_fwalk_sglue+0x38>
 8006210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006214:	3301      	adds	r3, #1
 8006216:	d003      	beq.n	8006220 <_fwalk_sglue+0x38>
 8006218:	4629      	mov	r1, r5
 800621a:	4638      	mov	r0, r7
 800621c:	47c0      	blx	r8
 800621e:	4306      	orrs	r6, r0
 8006220:	3568      	adds	r5, #104	; 0x68
 8006222:	e7e9      	b.n	80061f8 <_fwalk_sglue+0x10>

08006224 <iprintf>:
 8006224:	b40f      	push	{r0, r1, r2, r3}
 8006226:	b507      	push	{r0, r1, r2, lr}
 8006228:	4906      	ldr	r1, [pc, #24]	; (8006244 <iprintf+0x20>)
 800622a:	ab04      	add	r3, sp, #16
 800622c:	6808      	ldr	r0, [r1, #0]
 800622e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006232:	6881      	ldr	r1, [r0, #8]
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	f001 fc57 	bl	8007ae8 <_vfiprintf_r>
 800623a:	b003      	add	sp, #12
 800623c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006240:	b004      	add	sp, #16
 8006242:	4770      	bx	lr
 8006244:	200005b0 	.word	0x200005b0

08006248 <_puts_r>:
 8006248:	6a03      	ldr	r3, [r0, #32]
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	6884      	ldr	r4, [r0, #8]
 800624e:	4605      	mov	r5, r0
 8006250:	460e      	mov	r6, r1
 8006252:	b90b      	cbnz	r3, 8006258 <_puts_r+0x10>
 8006254:	f7ff ffb0 	bl	80061b8 <__sinit>
 8006258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800625a:	07db      	lsls	r3, r3, #31
 800625c:	d405      	bmi.n	800626a <_puts_r+0x22>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	0598      	lsls	r0, r3, #22
 8006262:	d402      	bmi.n	800626a <_puts_r+0x22>
 8006264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006266:	f000 f9c1 	bl	80065ec <__retarget_lock_acquire_recursive>
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	0719      	lsls	r1, r3, #28
 800626e:	d513      	bpl.n	8006298 <_puts_r+0x50>
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	b18b      	cbz	r3, 8006298 <_puts_r+0x50>
 8006274:	3e01      	subs	r6, #1
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800627c:	3b01      	subs	r3, #1
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	b9e9      	cbnz	r1, 80062be <_puts_r+0x76>
 8006282:	2b00      	cmp	r3, #0
 8006284:	da2e      	bge.n	80062e4 <_puts_r+0x9c>
 8006286:	4622      	mov	r2, r4
 8006288:	210a      	movs	r1, #10
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f87b 	bl	8006386 <__swbuf_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d007      	beq.n	80062a4 <_puts_r+0x5c>
 8006294:	250a      	movs	r5, #10
 8006296:	e007      	b.n	80062a8 <_puts_r+0x60>
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f8b0 	bl	8006400 <__swsetup_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0e7      	beq.n	8006274 <_puts_r+0x2c>
 80062a4:	f04f 35ff 	mov.w	r5, #4294967295
 80062a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_puts_r+0x72>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_puts_r+0x72>
 80062b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b6:	f000 f99a 	bl	80065ee <__retarget_lock_release_recursive>
 80062ba:	4628      	mov	r0, r5
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	2b00      	cmp	r3, #0
 80062c0:	da04      	bge.n	80062cc <_puts_r+0x84>
 80062c2:	69a2      	ldr	r2, [r4, #24]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	dc06      	bgt.n	80062d6 <_puts_r+0x8e>
 80062c8:	290a      	cmp	r1, #10
 80062ca:	d004      	beq.n	80062d6 <_puts_r+0x8e>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	7019      	strb	r1, [r3, #0]
 80062d4:	e7cf      	b.n	8006276 <_puts_r+0x2e>
 80062d6:	4622      	mov	r2, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 f854 	bl	8006386 <__swbuf_r>
 80062de:	3001      	adds	r0, #1
 80062e0:	d1c9      	bne.n	8006276 <_puts_r+0x2e>
 80062e2:	e7df      	b.n	80062a4 <_puts_r+0x5c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	250a      	movs	r5, #10
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	701d      	strb	r5, [r3, #0]
 80062ee:	e7db      	b.n	80062a8 <_puts_r+0x60>

080062f0 <puts>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	; (80062fc <puts+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f7ff bfa7 	b.w	8006248 <_puts_r>
 80062fa:	bf00      	nop
 80062fc:	200005b0 	.word	0x200005b0

08006300 <__sread>:
 8006300:	b510      	push	{r4, lr}
 8006302:	460c      	mov	r4, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	f000 f912 	bl	8006530 <_read_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	bfab      	itete	ge
 8006310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006312:	89a3      	ldrhlt	r3, [r4, #12]
 8006314:	181b      	addge	r3, r3, r0
 8006316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800631a:	bfac      	ite	ge
 800631c:	6563      	strge	r3, [r4, #84]	; 0x54
 800631e:	81a3      	strhlt	r3, [r4, #12]
 8006320:	bd10      	pop	{r4, pc}

08006322 <__swrite>:
 8006322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	461f      	mov	r7, r3
 8006328:	898b      	ldrh	r3, [r1, #12]
 800632a:	05db      	lsls	r3, r3, #23
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4616      	mov	r6, r2
 8006332:	d505      	bpl.n	8006340 <__swrite+0x1e>
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	2302      	movs	r3, #2
 800633a:	2200      	movs	r2, #0
 800633c:	f000 f8e6 	bl	800650c <_lseek_r>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	4632      	mov	r2, r6
 800634e:	463b      	mov	r3, r7
 8006350:	4628      	mov	r0, r5
 8006352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006356:	f000 b90d 	b.w	8006574 <_write_r>

0800635a <__sseek>:
 800635a:	b510      	push	{r4, lr}
 800635c:	460c      	mov	r4, r1
 800635e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006362:	f000 f8d3 	bl	800650c <_lseek_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	bf15      	itete	ne
 800636c:	6560      	strne	r0, [r4, #84]	; 0x54
 800636e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006376:	81a3      	strheq	r3, [r4, #12]
 8006378:	bf18      	it	ne
 800637a:	81a3      	strhne	r3, [r4, #12]
 800637c:	bd10      	pop	{r4, pc}

0800637e <__sclose>:
 800637e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006382:	f000 b8b3 	b.w	80064ec <_close_r>

08006386 <__swbuf_r>:
 8006386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006388:	460e      	mov	r6, r1
 800638a:	4614      	mov	r4, r2
 800638c:	4605      	mov	r5, r0
 800638e:	b118      	cbz	r0, 8006398 <__swbuf_r+0x12>
 8006390:	6a03      	ldr	r3, [r0, #32]
 8006392:	b90b      	cbnz	r3, 8006398 <__swbuf_r+0x12>
 8006394:	f7ff ff10 	bl	80061b8 <__sinit>
 8006398:	69a3      	ldr	r3, [r4, #24]
 800639a:	60a3      	str	r3, [r4, #8]
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	071a      	lsls	r2, r3, #28
 80063a0:	d525      	bpl.n	80063ee <__swbuf_r+0x68>
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	b31b      	cbz	r3, 80063ee <__swbuf_r+0x68>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6922      	ldr	r2, [r4, #16]
 80063aa:	1a98      	subs	r0, r3, r2
 80063ac:	6963      	ldr	r3, [r4, #20]
 80063ae:	b2f6      	uxtb	r6, r6
 80063b0:	4283      	cmp	r3, r0
 80063b2:	4637      	mov	r7, r6
 80063b4:	dc04      	bgt.n	80063c0 <__swbuf_r+0x3a>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f001 fd35 	bl	8007e28 <_fflush_r>
 80063be:	b9e0      	cbnz	r0, 80063fa <__swbuf_r+0x74>
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	701e      	strb	r6, [r3, #0]
 80063ce:	6962      	ldr	r2, [r4, #20]
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d004      	beq.n	80063e0 <__swbuf_r+0x5a>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	07db      	lsls	r3, r3, #31
 80063da:	d506      	bpl.n	80063ea <__swbuf_r+0x64>
 80063dc:	2e0a      	cmp	r6, #10
 80063de:	d104      	bne.n	80063ea <__swbuf_r+0x64>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f001 fd20 	bl	8007e28 <_fflush_r>
 80063e8:	b938      	cbnz	r0, 80063fa <__swbuf_r+0x74>
 80063ea:	4638      	mov	r0, r7
 80063ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f805 	bl	8006400 <__swsetup_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d0d5      	beq.n	80063a6 <__swbuf_r+0x20>
 80063fa:	f04f 37ff 	mov.w	r7, #4294967295
 80063fe:	e7f4      	b.n	80063ea <__swbuf_r+0x64>

08006400 <__swsetup_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <__swsetup_r+0xac>)
 8006404:	4605      	mov	r5, r0
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	460c      	mov	r4, r1
 800640a:	b118      	cbz	r0, 8006414 <__swsetup_r+0x14>
 800640c:	6a03      	ldr	r3, [r0, #32]
 800640e:	b90b      	cbnz	r3, 8006414 <__swsetup_r+0x14>
 8006410:	f7ff fed2 	bl	80061b8 <__sinit>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800641a:	0718      	lsls	r0, r3, #28
 800641c:	d422      	bmi.n	8006464 <__swsetup_r+0x64>
 800641e:	06d9      	lsls	r1, r3, #27
 8006420:	d407      	bmi.n	8006432 <__swsetup_r+0x32>
 8006422:	2309      	movs	r3, #9
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	e034      	b.n	800649c <__swsetup_r+0x9c>
 8006432:	0758      	lsls	r0, r3, #29
 8006434:	d512      	bpl.n	800645c <__swsetup_r+0x5c>
 8006436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006438:	b141      	cbz	r1, 800644c <__swsetup_r+0x4c>
 800643a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643e:	4299      	cmp	r1, r3
 8006440:	d002      	beq.n	8006448 <__swsetup_r+0x48>
 8006442:	4628      	mov	r0, r5
 8006444:	f000 ff5e 	bl	8007304 <_free_r>
 8006448:	2300      	movs	r3, #0
 800644a:	6363      	str	r3, [r4, #52]	; 0x34
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	2300      	movs	r3, #0
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	b94b      	cbnz	r3, 800647c <__swsetup_r+0x7c>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800646e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006472:	d003      	beq.n	800647c <__swsetup_r+0x7c>
 8006474:	4621      	mov	r1, r4
 8006476:	4628      	mov	r0, r5
 8006478:	f001 fd24 	bl	8007ec4 <__smakebuf_r>
 800647c:	89a0      	ldrh	r0, [r4, #12]
 800647e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006482:	f010 0301 	ands.w	r3, r0, #1
 8006486:	d00a      	beq.n	800649e <__swsetup_r+0x9e>
 8006488:	2300      	movs	r3, #0
 800648a:	60a3      	str	r3, [r4, #8]
 800648c:	6963      	ldr	r3, [r4, #20]
 800648e:	425b      	negs	r3, r3
 8006490:	61a3      	str	r3, [r4, #24]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	b943      	cbnz	r3, 80064a8 <__swsetup_r+0xa8>
 8006496:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800649a:	d1c4      	bne.n	8006426 <__swsetup_r+0x26>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	0781      	lsls	r1, r0, #30
 80064a0:	bf58      	it	pl
 80064a2:	6963      	ldrpl	r3, [r4, #20]
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	e7f4      	b.n	8006492 <__swsetup_r+0x92>
 80064a8:	2000      	movs	r0, #0
 80064aa:	e7f7      	b.n	800649c <__swsetup_r+0x9c>
 80064ac:	200005b0 	.word	0x200005b0

080064b0 <memset>:
 80064b0:	4402      	add	r2, r0
 80064b2:	4603      	mov	r3, r0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d100      	bne.n	80064ba <memset+0xa>
 80064b8:	4770      	bx	lr
 80064ba:	f803 1b01 	strb.w	r1, [r3], #1
 80064be:	e7f9      	b.n	80064b4 <memset+0x4>

080064c0 <strncmp>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	b16a      	cbz	r2, 80064e0 <strncmp+0x20>
 80064c4:	3901      	subs	r1, #1
 80064c6:	1884      	adds	r4, r0, r2
 80064c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d103      	bne.n	80064dc <strncmp+0x1c>
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d001      	beq.n	80064dc <strncmp+0x1c>
 80064d8:	2a00      	cmp	r2, #0
 80064da:	d1f5      	bne.n	80064c8 <strncmp+0x8>
 80064dc:	1ad0      	subs	r0, r2, r3
 80064de:	bd10      	pop	{r4, pc}
 80064e0:	4610      	mov	r0, r2
 80064e2:	e7fc      	b.n	80064de <strncmp+0x1e>

080064e4 <_localeconv_r>:
 80064e4:	4800      	ldr	r0, [pc, #0]	; (80064e8 <_localeconv_r+0x4>)
 80064e6:	4770      	bx	lr
 80064e8:	200006a4 	.word	0x200006a4

080064ec <_close_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d06      	ldr	r5, [pc, #24]	; (8006508 <_close_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f001 ff12 	bl	8008320 <_close>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_close_r+0x1a>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	b103      	cbz	r3, 8006506 <_close_r+0x1a>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20000b64 	.word	0x20000b64

0800650c <_lseek_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_lseek_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f001 ff28 	bl	8008370 <_lseek>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_lseek_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_lseek_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000b64 	.word	0x20000b64

08006530 <_read_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d07      	ldr	r5, [pc, #28]	; (8006550 <_read_r+0x20>)
 8006534:	4604      	mov	r4, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	602a      	str	r2, [r5, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f001 ff1e 	bl	8008380 <_read>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_read_r+0x1e>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_read_r+0x1e>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20000b64 	.word	0x20000b64

08006554 <_sbrk_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	; (8006570 <_sbrk_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fa ff98 	bl	8001494 <_sbrk>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_sbrk_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_sbrk_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000b64 	.word	0x20000b64

08006574 <_write_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	; (8006594 <_write_r+0x20>)
 8006578:	4604      	mov	r4, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fa feb0 	bl	80012e8 <_write>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_write_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_write_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000b64 	.word	0x20000b64

08006598 <__errno>:
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <__errno+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	200005b0 	.word	0x200005b0

080065a4 <__libc_init_array>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	4d0d      	ldr	r5, [pc, #52]	; (80065dc <__libc_init_array+0x38>)
 80065a8:	4c0d      	ldr	r4, [pc, #52]	; (80065e0 <__libc_init_array+0x3c>)
 80065aa:	1b64      	subs	r4, r4, r5
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	2600      	movs	r6, #0
 80065b0:	42a6      	cmp	r6, r4
 80065b2:	d109      	bne.n	80065c8 <__libc_init_array+0x24>
 80065b4:	4d0b      	ldr	r5, [pc, #44]	; (80065e4 <__libc_init_array+0x40>)
 80065b6:	4c0c      	ldr	r4, [pc, #48]	; (80065e8 <__libc_init_array+0x44>)
 80065b8:	f001 feec 	bl	8008394 <_init>
 80065bc:	1b64      	subs	r4, r4, r5
 80065be:	10a4      	asrs	r4, r4, #2
 80065c0:	2600      	movs	r6, #0
 80065c2:	42a6      	cmp	r6, r4
 80065c4:	d105      	bne.n	80065d2 <__libc_init_array+0x2e>
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065cc:	4798      	blx	r3
 80065ce:	3601      	adds	r6, #1
 80065d0:	e7ee      	b.n	80065b0 <__libc_init_array+0xc>
 80065d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d6:	4798      	blx	r3
 80065d8:	3601      	adds	r6, #1
 80065da:	e7f2      	b.n	80065c2 <__libc_init_array+0x1e>
 80065dc:	0800a0b4 	.word	0x0800a0b4
 80065e0:	0800a0b4 	.word	0x0800a0b4
 80065e4:	0800a0b4 	.word	0x0800a0b4
 80065e8:	0800a0b8 	.word	0x0800a0b8

080065ec <__retarget_lock_acquire_recursive>:
 80065ec:	4770      	bx	lr

080065ee <__retarget_lock_release_recursive>:
 80065ee:	4770      	bx	lr

080065f0 <memcpy>:
 80065f0:	440a      	add	r2, r1
 80065f2:	4291      	cmp	r1, r2
 80065f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f8:	d100      	bne.n	80065fc <memcpy+0xc>
 80065fa:	4770      	bx	lr
 80065fc:	b510      	push	{r4, lr}
 80065fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006606:	4291      	cmp	r1, r2
 8006608:	d1f9      	bne.n	80065fe <memcpy+0xe>
 800660a:	bd10      	pop	{r4, pc}

0800660c <quorem>:
 800660c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	6903      	ldr	r3, [r0, #16]
 8006612:	690c      	ldr	r4, [r1, #16]
 8006614:	42a3      	cmp	r3, r4
 8006616:	4607      	mov	r7, r0
 8006618:	db7e      	blt.n	8006718 <quorem+0x10c>
 800661a:	3c01      	subs	r4, #1
 800661c:	f101 0814 	add.w	r8, r1, #20
 8006620:	f100 0514 	add.w	r5, r0, #20
 8006624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800662e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006632:	3301      	adds	r3, #1
 8006634:	429a      	cmp	r2, r3
 8006636:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800663a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800663e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006642:	d331      	bcc.n	80066a8 <quorem+0x9c>
 8006644:	f04f 0e00 	mov.w	lr, #0
 8006648:	4640      	mov	r0, r8
 800664a:	46ac      	mov	ip, r5
 800664c:	46f2      	mov	sl, lr
 800664e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006652:	b293      	uxth	r3, r2
 8006654:	fb06 e303 	mla	r3, r6, r3, lr
 8006658:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800665c:	0c1a      	lsrs	r2, r3, #16
 800665e:	b29b      	uxth	r3, r3
 8006660:	ebaa 0303 	sub.w	r3, sl, r3
 8006664:	f8dc a000 	ldr.w	sl, [ip]
 8006668:	fa13 f38a 	uxtah	r3, r3, sl
 800666c:	fb06 220e 	mla	r2, r6, lr, r2
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	9b00      	ldr	r3, [sp, #0]
 8006674:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006678:	b292      	uxth	r2, r2
 800667a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800667e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006682:	f8bd 3000 	ldrh.w	r3, [sp]
 8006686:	4581      	cmp	r9, r0
 8006688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800668c:	f84c 3b04 	str.w	r3, [ip], #4
 8006690:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006694:	d2db      	bcs.n	800664e <quorem+0x42>
 8006696:	f855 300b 	ldr.w	r3, [r5, fp]
 800669a:	b92b      	cbnz	r3, 80066a8 <quorem+0x9c>
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	3b04      	subs	r3, #4
 80066a0:	429d      	cmp	r5, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	d32c      	bcc.n	8006700 <quorem+0xf4>
 80066a6:	613c      	str	r4, [r7, #16]
 80066a8:	4638      	mov	r0, r7
 80066aa:	f001 f8f3 	bl	8007894 <__mcmp>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	db22      	blt.n	80066f8 <quorem+0xec>
 80066b2:	3601      	adds	r6, #1
 80066b4:	4629      	mov	r1, r5
 80066b6:	2000      	movs	r0, #0
 80066b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80066bc:	f8d1 c000 	ldr.w	ip, [r1]
 80066c0:	b293      	uxth	r3, r2
 80066c2:	1ac3      	subs	r3, r0, r3
 80066c4:	0c12      	lsrs	r2, r2, #16
 80066c6:	fa13 f38c 	uxtah	r3, r3, ip
 80066ca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066d8:	45c1      	cmp	r9, r8
 80066da:	f841 3b04 	str.w	r3, [r1], #4
 80066de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066e2:	d2e9      	bcs.n	80066b8 <quorem+0xac>
 80066e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ec:	b922      	cbnz	r2, 80066f8 <quorem+0xec>
 80066ee:	3b04      	subs	r3, #4
 80066f0:	429d      	cmp	r5, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	d30a      	bcc.n	800670c <quorem+0x100>
 80066f6:	613c      	str	r4, [r7, #16]
 80066f8:	4630      	mov	r0, r6
 80066fa:	b003      	add	sp, #12
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	3b04      	subs	r3, #4
 8006704:	2a00      	cmp	r2, #0
 8006706:	d1ce      	bne.n	80066a6 <quorem+0x9a>
 8006708:	3c01      	subs	r4, #1
 800670a:	e7c9      	b.n	80066a0 <quorem+0x94>
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	3b04      	subs	r3, #4
 8006710:	2a00      	cmp	r2, #0
 8006712:	d1f0      	bne.n	80066f6 <quorem+0xea>
 8006714:	3c01      	subs	r4, #1
 8006716:	e7eb      	b.n	80066f0 <quorem+0xe4>
 8006718:	2000      	movs	r0, #0
 800671a:	e7ee      	b.n	80066fa <quorem+0xee>
 800671c:	0000      	movs	r0, r0
	...

08006720 <_dtoa_r>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	ed2d 8b04 	vpush	{d8-d9}
 8006728:	69c5      	ldr	r5, [r0, #28]
 800672a:	b093      	sub	sp, #76	; 0x4c
 800672c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006730:	ec57 6b10 	vmov	r6, r7, d0
 8006734:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006738:	9107      	str	r1, [sp, #28]
 800673a:	4604      	mov	r4, r0
 800673c:	920a      	str	r2, [sp, #40]	; 0x28
 800673e:	930d      	str	r3, [sp, #52]	; 0x34
 8006740:	b975      	cbnz	r5, 8006760 <_dtoa_r+0x40>
 8006742:	2010      	movs	r0, #16
 8006744:	f7fe ffa4 	bl	8005690 <malloc>
 8006748:	4602      	mov	r2, r0
 800674a:	61e0      	str	r0, [r4, #28]
 800674c:	b920      	cbnz	r0, 8006758 <_dtoa_r+0x38>
 800674e:	4bae      	ldr	r3, [pc, #696]	; (8006a08 <_dtoa_r+0x2e8>)
 8006750:	21ef      	movs	r1, #239	; 0xef
 8006752:	48ae      	ldr	r0, [pc, #696]	; (8006a0c <_dtoa_r+0x2ec>)
 8006754:	f001 fc14 	bl	8007f80 <__assert_func>
 8006758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800675c:	6005      	str	r5, [r0, #0]
 800675e:	60c5      	str	r5, [r0, #12]
 8006760:	69e3      	ldr	r3, [r4, #28]
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	b151      	cbz	r1, 800677c <_dtoa_r+0x5c>
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	604a      	str	r2, [r1, #4]
 800676a:	2301      	movs	r3, #1
 800676c:	4093      	lsls	r3, r2
 800676e:	608b      	str	r3, [r1, #8]
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fe53 	bl	800741c <_Bfree>
 8006776:	69e3      	ldr	r3, [r4, #28]
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	1e3b      	subs	r3, r7, #0
 800677e:	bfbb      	ittet	lt
 8006780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006784:	9303      	strlt	r3, [sp, #12]
 8006786:	2300      	movge	r3, #0
 8006788:	2201      	movlt	r2, #1
 800678a:	bfac      	ite	ge
 800678c:	f8c8 3000 	strge.w	r3, [r8]
 8006790:	f8c8 2000 	strlt.w	r2, [r8]
 8006794:	4b9e      	ldr	r3, [pc, #632]	; (8006a10 <_dtoa_r+0x2f0>)
 8006796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800679a:	ea33 0308 	bics.w	r3, r3, r8
 800679e:	d11b      	bne.n	80067d8 <_dtoa_r+0xb8>
 80067a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067ac:	4333      	orrs	r3, r6
 80067ae:	f000 8593 	beq.w	80072d8 <_dtoa_r+0xbb8>
 80067b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067b4:	b963      	cbnz	r3, 80067d0 <_dtoa_r+0xb0>
 80067b6:	4b97      	ldr	r3, [pc, #604]	; (8006a14 <_dtoa_r+0x2f4>)
 80067b8:	e027      	b.n	800680a <_dtoa_r+0xea>
 80067ba:	4b97      	ldr	r3, [pc, #604]	; (8006a18 <_dtoa_r+0x2f8>)
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	9800      	ldr	r0, [sp, #0]
 80067c6:	b013      	add	sp, #76	; 0x4c
 80067c8:	ecbd 8b04 	vpop	{d8-d9}
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <_dtoa_r+0x2f4>)
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	3303      	adds	r3, #3
 80067d6:	e7f3      	b.n	80067c0 <_dtoa_r+0xa0>
 80067d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	ec51 0b17 	vmov	r0, r1, d7
 80067e2:	eeb0 8a47 	vmov.f32	s16, s14
 80067e6:	eef0 8a67 	vmov.f32	s17, s15
 80067ea:	2300      	movs	r3, #0
 80067ec:	f7fa f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f0:	4681      	mov	r9, r0
 80067f2:	b160      	cbz	r0, 800680e <_dtoa_r+0xee>
 80067f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067f6:	2301      	movs	r3, #1
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8568 	beq.w	80072d2 <_dtoa_r+0xbb2>
 8006802:	4b86      	ldr	r3, [pc, #536]	; (8006a1c <_dtoa_r+0x2fc>)
 8006804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	3b01      	subs	r3, #1
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	e7da      	b.n	80067c4 <_dtoa_r+0xa4>
 800680e:	aa10      	add	r2, sp, #64	; 0x40
 8006810:	a911      	add	r1, sp, #68	; 0x44
 8006812:	4620      	mov	r0, r4
 8006814:	eeb0 0a48 	vmov.f32	s0, s16
 8006818:	eef0 0a68 	vmov.f32	s1, s17
 800681c:	f001 f8e0 	bl	80079e0 <__d2b>
 8006820:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006824:	4682      	mov	sl, r0
 8006826:	2d00      	cmp	r5, #0
 8006828:	d07f      	beq.n	800692a <_dtoa_r+0x20a>
 800682a:	ee18 3a90 	vmov	r3, s17
 800682e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006832:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006836:	ec51 0b18 	vmov	r0, r1, d8
 800683a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800683e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006842:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006846:	4619      	mov	r1, r3
 8006848:	2200      	movs	r2, #0
 800684a:	4b75      	ldr	r3, [pc, #468]	; (8006a20 <_dtoa_r+0x300>)
 800684c:	f7f9 fd1c 	bl	8000288 <__aeabi_dsub>
 8006850:	a367      	add	r3, pc, #412	; (adr r3, 80069f0 <_dtoa_r+0x2d0>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f7f9 fecf 	bl	80005f8 <__aeabi_dmul>
 800685a:	a367      	add	r3, pc, #412	; (adr r3, 80069f8 <_dtoa_r+0x2d8>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fd14 	bl	800028c <__adddf3>
 8006864:	4606      	mov	r6, r0
 8006866:	4628      	mov	r0, r5
 8006868:	460f      	mov	r7, r1
 800686a:	f7f9 fe5b 	bl	8000524 <__aeabi_i2d>
 800686e:	a364      	add	r3, pc, #400	; (adr r3, 8006a00 <_dtoa_r+0x2e0>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7f9 fec0 	bl	80005f8 <__aeabi_dmul>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fd04 	bl	800028c <__adddf3>
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	f7fa f966 	bl	8000b58 <__aeabi_d2iz>
 800688c:	2200      	movs	r2, #0
 800688e:	4683      	mov	fp, r0
 8006890:	2300      	movs	r3, #0
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7fa f921 	bl	8000adc <__aeabi_dcmplt>
 800689a:	b148      	cbz	r0, 80068b0 <_dtoa_r+0x190>
 800689c:	4658      	mov	r0, fp
 800689e:	f7f9 fe41 	bl	8000524 <__aeabi_i2d>
 80068a2:	4632      	mov	r2, r6
 80068a4:	463b      	mov	r3, r7
 80068a6:	f7fa f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80068aa:	b908      	cbnz	r0, 80068b0 <_dtoa_r+0x190>
 80068ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068b0:	f1bb 0f16 	cmp.w	fp, #22
 80068b4:	d857      	bhi.n	8006966 <_dtoa_r+0x246>
 80068b6:	4b5b      	ldr	r3, [pc, #364]	; (8006a24 <_dtoa_r+0x304>)
 80068b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	ec51 0b18 	vmov	r0, r1, d8
 80068c4:	f7fa f90a 	bl	8000adc <__aeabi_dcmplt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d04e      	beq.n	800696a <_dtoa_r+0x24a>
 80068cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068d0:	2300      	movs	r3, #0
 80068d2:	930c      	str	r3, [sp, #48]	; 0x30
 80068d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068d6:	1b5b      	subs	r3, r3, r5
 80068d8:	1e5a      	subs	r2, r3, #1
 80068da:	bf45      	ittet	mi
 80068dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80068e0:	9305      	strmi	r3, [sp, #20]
 80068e2:	2300      	movpl	r3, #0
 80068e4:	2300      	movmi	r3, #0
 80068e6:	9206      	str	r2, [sp, #24]
 80068e8:	bf54      	ite	pl
 80068ea:	9305      	strpl	r3, [sp, #20]
 80068ec:	9306      	strmi	r3, [sp, #24]
 80068ee:	f1bb 0f00 	cmp.w	fp, #0
 80068f2:	db3c      	blt.n	800696e <_dtoa_r+0x24e>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80068fa:	445b      	add	r3, fp
 80068fc:	9306      	str	r3, [sp, #24]
 80068fe:	2300      	movs	r3, #0
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	9b07      	ldr	r3, [sp, #28]
 8006904:	2b09      	cmp	r3, #9
 8006906:	d868      	bhi.n	80069da <_dtoa_r+0x2ba>
 8006908:	2b05      	cmp	r3, #5
 800690a:	bfc4      	itt	gt
 800690c:	3b04      	subgt	r3, #4
 800690e:	9307      	strgt	r3, [sp, #28]
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	f1a3 0302 	sub.w	r3, r3, #2
 8006916:	bfcc      	ite	gt
 8006918:	2500      	movgt	r5, #0
 800691a:	2501      	movle	r5, #1
 800691c:	2b03      	cmp	r3, #3
 800691e:	f200 8085 	bhi.w	8006a2c <_dtoa_r+0x30c>
 8006922:	e8df f003 	tbb	[pc, r3]
 8006926:	3b2e      	.short	0x3b2e
 8006928:	5839      	.short	0x5839
 800692a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800692e:	441d      	add	r5, r3
 8006930:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006934:	2b20      	cmp	r3, #32
 8006936:	bfc1      	itttt	gt
 8006938:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800693c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006940:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006944:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006948:	bfd6      	itet	le
 800694a:	f1c3 0320 	rsble	r3, r3, #32
 800694e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006952:	fa06 f003 	lslle.w	r0, r6, r3
 8006956:	f7f9 fdd5 	bl	8000504 <__aeabi_ui2d>
 800695a:	2201      	movs	r2, #1
 800695c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006960:	3d01      	subs	r5, #1
 8006962:	920e      	str	r2, [sp, #56]	; 0x38
 8006964:	e76f      	b.n	8006846 <_dtoa_r+0x126>
 8006966:	2301      	movs	r3, #1
 8006968:	e7b3      	b.n	80068d2 <_dtoa_r+0x1b2>
 800696a:	900c      	str	r0, [sp, #48]	; 0x30
 800696c:	e7b2      	b.n	80068d4 <_dtoa_r+0x1b4>
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	eba3 030b 	sub.w	r3, r3, fp
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	f1cb 0300 	rsb	r3, fp, #0
 800697a:	9308      	str	r3, [sp, #32]
 800697c:	2300      	movs	r3, #0
 800697e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006980:	e7bf      	b.n	8006902 <_dtoa_r+0x1e2>
 8006982:	2300      	movs	r3, #0
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc52      	bgt.n	8006a32 <_dtoa_r+0x312>
 800698c:	2301      	movs	r3, #1
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	461a      	mov	r2, r3
 8006994:	920a      	str	r2, [sp, #40]	; 0x28
 8006996:	e00b      	b.n	80069b0 <_dtoa_r+0x290>
 8006998:	2301      	movs	r3, #1
 800699a:	e7f3      	b.n	8006984 <_dtoa_r+0x264>
 800699c:	2300      	movs	r3, #0
 800699e:	9309      	str	r3, [sp, #36]	; 0x24
 80069a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a2:	445b      	add	r3, fp
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	3301      	adds	r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	bfb8      	it	lt
 80069ae:	2301      	movlt	r3, #1
 80069b0:	69e0      	ldr	r0, [r4, #28]
 80069b2:	2100      	movs	r1, #0
 80069b4:	2204      	movs	r2, #4
 80069b6:	f102 0614 	add.w	r6, r2, #20
 80069ba:	429e      	cmp	r6, r3
 80069bc:	d93d      	bls.n	8006a3a <_dtoa_r+0x31a>
 80069be:	6041      	str	r1, [r0, #4]
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fceb 	bl	800739c <_Balloc>
 80069c6:	9000      	str	r0, [sp, #0]
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d139      	bne.n	8006a40 <_dtoa_r+0x320>
 80069cc:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <_dtoa_r+0x308>)
 80069ce:	4602      	mov	r2, r0
 80069d0:	f240 11af 	movw	r1, #431	; 0x1af
 80069d4:	e6bd      	b.n	8006752 <_dtoa_r+0x32>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7e1      	b.n	800699e <_dtoa_r+0x27e>
 80069da:	2501      	movs	r5, #1
 80069dc:	2300      	movs	r3, #0
 80069de:	9307      	str	r3, [sp, #28]
 80069e0:	9509      	str	r5, [sp, #36]	; 0x24
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	9304      	str	r3, [sp, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	2312      	movs	r3, #18
 80069ee:	e7d1      	b.n	8006994 <_dtoa_r+0x274>
 80069f0:	636f4361 	.word	0x636f4361
 80069f4:	3fd287a7 	.word	0x3fd287a7
 80069f8:	8b60c8b3 	.word	0x8b60c8b3
 80069fc:	3fc68a28 	.word	0x3fc68a28
 8006a00:	509f79fb 	.word	0x509f79fb
 8006a04:	3fd34413 	.word	0x3fd34413
 8006a08:	08009d63 	.word	0x08009d63
 8006a0c:	08009d7a 	.word	0x08009d7a
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	08009d5f 	.word	0x08009d5f
 8006a18:	08009d56 	.word	0x08009d56
 8006a1c:	0800851c 	.word	0x0800851c
 8006a20:	3ff80000 	.word	0x3ff80000
 8006a24:	08009e68 	.word	0x08009e68
 8006a28:	08009dd2 	.word	0x08009dd2
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a30:	e7d7      	b.n	80069e2 <_dtoa_r+0x2c2>
 8006a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	9304      	str	r3, [sp, #16]
 8006a38:	e7ba      	b.n	80069b0 <_dtoa_r+0x290>
 8006a3a:	3101      	adds	r1, #1
 8006a3c:	0052      	lsls	r2, r2, #1
 8006a3e:	e7ba      	b.n	80069b6 <_dtoa_r+0x296>
 8006a40:	69e3      	ldr	r3, [r4, #28]
 8006a42:	9a00      	ldr	r2, [sp, #0]
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	2b0e      	cmp	r3, #14
 8006a4a:	f200 80a8 	bhi.w	8006b9e <_dtoa_r+0x47e>
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	f000 80a5 	beq.w	8006b9e <_dtoa_r+0x47e>
 8006a54:	f1bb 0f00 	cmp.w	fp, #0
 8006a58:	dd38      	ble.n	8006acc <_dtoa_r+0x3ac>
 8006a5a:	4bc0      	ldr	r3, [pc, #768]	; (8006d5c <_dtoa_r+0x63c>)
 8006a5c:	f00b 020f 	and.w	r2, fp, #15
 8006a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a70:	d019      	beq.n	8006aa6 <_dtoa_r+0x386>
 8006a72:	4bbb      	ldr	r3, [pc, #748]	; (8006d60 <_dtoa_r+0x640>)
 8006a74:	ec51 0b18 	vmov	r0, r1, d8
 8006a78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a7c:	f7f9 fee6 	bl	800084c <__aeabi_ddiv>
 8006a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a84:	f008 080f 	and.w	r8, r8, #15
 8006a88:	2503      	movs	r5, #3
 8006a8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d60 <_dtoa_r+0x640>
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	d10a      	bne.n	8006aaa <_dtoa_r+0x38a>
 8006a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a98:	4632      	mov	r2, r6
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	f7f9 fed6 	bl	800084c <__aeabi_ddiv>
 8006aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa4:	e02b      	b.n	8006afe <_dtoa_r+0x3de>
 8006aa6:	2502      	movs	r5, #2
 8006aa8:	e7ef      	b.n	8006a8a <_dtoa_r+0x36a>
 8006aaa:	f018 0f01 	tst.w	r8, #1
 8006aae:	d008      	beq.n	8006ac2 <_dtoa_r+0x3a2>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	3501      	adds	r5, #1
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460f      	mov	r7, r1
 8006ac2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ac6:	f109 0908 	add.w	r9, r9, #8
 8006aca:	e7e0      	b.n	8006a8e <_dtoa_r+0x36e>
 8006acc:	f000 809f 	beq.w	8006c0e <_dtoa_r+0x4ee>
 8006ad0:	f1cb 0600 	rsb	r6, fp, #0
 8006ad4:	4ba1      	ldr	r3, [pc, #644]	; (8006d5c <_dtoa_r+0x63c>)
 8006ad6:	4fa2      	ldr	r7, [pc, #648]	; (8006d60 <_dtoa_r+0x640>)
 8006ad8:	f006 020f 	and.w	r2, r6, #15
 8006adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	ec51 0b18 	vmov	r0, r1, d8
 8006ae8:	f7f9 fd86 	bl	80005f8 <__aeabi_dmul>
 8006aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af0:	1136      	asrs	r6, r6, #4
 8006af2:	2300      	movs	r3, #0
 8006af4:	2502      	movs	r5, #2
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d17e      	bne.n	8006bf8 <_dtoa_r+0x4d8>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d0      	bne.n	8006aa0 <_dtoa_r+0x380>
 8006afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8084 	beq.w	8006c12 <_dtoa_r+0x4f2>
 8006b0a:	4b96      	ldr	r3, [pc, #600]	; (8006d64 <_dtoa_r+0x644>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4649      	mov	r1, r9
 8006b12:	f7f9 ffe3 	bl	8000adc <__aeabi_dcmplt>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d07b      	beq.n	8006c12 <_dtoa_r+0x4f2>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d078      	beq.n	8006c12 <_dtoa_r+0x4f2>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd39      	ble.n	8006b9a <_dtoa_r+0x47a>
 8006b26:	4b90      	ldr	r3, [pc, #576]	; (8006d68 <_dtoa_r+0x648>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fd63 	bl	80005f8 <__aeabi_dmul>
 8006b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b36:	9e01      	ldr	r6, [sp, #4]
 8006b38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b42:	4628      	mov	r0, r5
 8006b44:	f7f9 fcee 	bl	8000524 <__aeabi_i2d>
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	4b86      	ldr	r3, [pc, #536]	; (8006d6c <_dtoa_r+0x64c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	f7f9 fb9a 	bl	800028c <__adddf3>
 8006b58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b60:	9303      	str	r3, [sp, #12]
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d158      	bne.n	8006c18 <_dtoa_r+0x4f8>
 8006b66:	4b82      	ldr	r3, [pc, #520]	; (8006d70 <_dtoa_r+0x650>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b76:	4680      	mov	r8, r0
 8006b78:	4689      	mov	r9, r1
 8006b7a:	f7f9 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f040 8296 	bne.w	80070b0 <_dtoa_r+0x990>
 8006b84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b88:	4640      	mov	r0, r8
 8006b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b8e:	4649      	mov	r1, r9
 8006b90:	f7f9 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f040 8289 	bne.w	80070ac <_dtoa_r+0x98c>
 8006b9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f2c0 814e 	blt.w	8006e42 <_dtoa_r+0x722>
 8006ba6:	f1bb 0f0e 	cmp.w	fp, #14
 8006baa:	f300 814a 	bgt.w	8006e42 <_dtoa_r+0x722>
 8006bae:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <_dtoa_r+0x63c>)
 8006bb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f280 80dc 	bge.w	8006d78 <_dtoa_r+0x658>
 8006bc0:	9b04      	ldr	r3, [sp, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f300 80d8 	bgt.w	8006d78 <_dtoa_r+0x658>
 8006bc8:	f040 826f 	bne.w	80070aa <_dtoa_r+0x98a>
 8006bcc:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <_dtoa_r+0x650>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	f7f9 fd10 	bl	80005f8 <__aeabi_dmul>
 8006bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bdc:	f7f9 ff92 	bl	8000b04 <__aeabi_dcmpge>
 8006be0:	9e04      	ldr	r6, [sp, #16]
 8006be2:	4637      	mov	r7, r6
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f040 8245 	bne.w	8007074 <_dtoa_r+0x954>
 8006bea:	9d00      	ldr	r5, [sp, #0]
 8006bec:	2331      	movs	r3, #49	; 0x31
 8006bee:	f805 3b01 	strb.w	r3, [r5], #1
 8006bf2:	f10b 0b01 	add.w	fp, fp, #1
 8006bf6:	e241      	b.n	800707c <_dtoa_r+0x95c>
 8006bf8:	07f2      	lsls	r2, r6, #31
 8006bfa:	d505      	bpl.n	8006c08 <_dtoa_r+0x4e8>
 8006bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	3501      	adds	r5, #1
 8006c06:	2301      	movs	r3, #1
 8006c08:	1076      	asrs	r6, r6, #1
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	e773      	b.n	8006af6 <_dtoa_r+0x3d6>
 8006c0e:	2502      	movs	r5, #2
 8006c10:	e775      	b.n	8006afe <_dtoa_r+0x3de>
 8006c12:	9e04      	ldr	r6, [sp, #16]
 8006c14:	465f      	mov	r7, fp
 8006c16:	e792      	b.n	8006b3e <_dtoa_r+0x41e>
 8006c18:	9900      	ldr	r1, [sp, #0]
 8006c1a:	4b50      	ldr	r3, [pc, #320]	; (8006d5c <_dtoa_r+0x63c>)
 8006c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c20:	4431      	add	r1, r6
 8006c22:	9102      	str	r1, [sp, #8]
 8006c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c26:	eeb0 9a47 	vmov.f32	s18, s14
 8006c2a:	eef0 9a67 	vmov.f32	s19, s15
 8006c2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c36:	2900      	cmp	r1, #0
 8006c38:	d044      	beq.n	8006cc4 <_dtoa_r+0x5a4>
 8006c3a:	494e      	ldr	r1, [pc, #312]	; (8006d74 <_dtoa_r+0x654>)
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	f7f9 fe05 	bl	800084c <__aeabi_ddiv>
 8006c42:	ec53 2b19 	vmov	r2, r3, d9
 8006c46:	f7f9 fb1f 	bl	8000288 <__aeabi_dsub>
 8006c4a:	9d00      	ldr	r5, [sp, #0]
 8006c4c:	ec41 0b19 	vmov	d9, r0, r1
 8006c50:	4649      	mov	r1, r9
 8006c52:	4640      	mov	r0, r8
 8006c54:	f7f9 ff80 	bl	8000b58 <__aeabi_d2iz>
 8006c58:	4606      	mov	r6, r0
 8006c5a:	f7f9 fc63 	bl	8000524 <__aeabi_i2d>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4640      	mov	r0, r8
 8006c64:	4649      	mov	r1, r9
 8006c66:	f7f9 fb0f 	bl	8000288 <__aeabi_dsub>
 8006c6a:	3630      	adds	r6, #48	; 0x30
 8006c6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c70:	ec53 2b19 	vmov	r2, r3, d9
 8006c74:	4680      	mov	r8, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	f7f9 ff30 	bl	8000adc <__aeabi_dcmplt>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d164      	bne.n	8006d4a <_dtoa_r+0x62a>
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	4937      	ldr	r1, [pc, #220]	; (8006d64 <_dtoa_r+0x644>)
 8006c86:	2000      	movs	r0, #0
 8006c88:	f7f9 fafe 	bl	8000288 <__aeabi_dsub>
 8006c8c:	ec53 2b19 	vmov	r2, r3, d9
 8006c90:	f7f9 ff24 	bl	8000adc <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f040 80b6 	bne.w	8006e06 <_dtoa_r+0x6e6>
 8006c9a:	9b02      	ldr	r3, [sp, #8]
 8006c9c:	429d      	cmp	r5, r3
 8006c9e:	f43f af7c 	beq.w	8006b9a <_dtoa_r+0x47a>
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <_dtoa_r+0x648>)
 8006ca4:	ec51 0b19 	vmov	r0, r1, d9
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f7f9 fca5 	bl	80005f8 <__aeabi_dmul>
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <_dtoa_r+0x648>)
 8006cb0:	ec41 0b19 	vmov	d9, r0, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	f7f9 fc9d 	bl	80005f8 <__aeabi_dmul>
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4689      	mov	r9, r1
 8006cc2:	e7c5      	b.n	8006c50 <_dtoa_r+0x530>
 8006cc4:	ec51 0b17 	vmov	r0, r1, d7
 8006cc8:	f7f9 fc96 	bl	80005f8 <__aeabi_dmul>
 8006ccc:	9b02      	ldr	r3, [sp, #8]
 8006cce:	9d00      	ldr	r5, [sp, #0]
 8006cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cd2:	ec41 0b19 	vmov	d9, r0, r1
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4640      	mov	r0, r8
 8006cda:	f7f9 ff3d 	bl	8000b58 <__aeabi_d2iz>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	f7f9 fc20 	bl	8000524 <__aeabi_i2d>
 8006ce4:	3630      	adds	r6, #48	; 0x30
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 facb 	bl	8000288 <__aeabi_dsub>
 8006cf2:	f805 6b01 	strb.w	r6, [r5], #1
 8006cf6:	9b02      	ldr	r3, [sp, #8]
 8006cf8:	429d      	cmp	r5, r3
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	4689      	mov	r9, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	d124      	bne.n	8006d4e <_dtoa_r+0x62e>
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <_dtoa_r+0x654>)
 8006d06:	ec51 0b19 	vmov	r0, r1, d9
 8006d0a:	f7f9 fabf 	bl	800028c <__adddf3>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 feff 	bl	8000b18 <__aeabi_dcmpgt>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d173      	bne.n	8006e06 <_dtoa_r+0x6e6>
 8006d1e:	ec53 2b19 	vmov	r2, r3, d9
 8006d22:	4914      	ldr	r1, [pc, #80]	; (8006d74 <_dtoa_r+0x654>)
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7f9 faaf 	bl	8000288 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4649      	mov	r1, r9
 8006d32:	f7f9 fed3 	bl	8000adc <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f43f af2f 	beq.w	8006b9a <_dtoa_r+0x47a>
 8006d3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d3e:	1e6b      	subs	r3, r5, #1
 8006d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	d0f8      	beq.n	8006d3c <_dtoa_r+0x61c>
 8006d4a:	46bb      	mov	fp, r7
 8006d4c:	e04a      	b.n	8006de4 <_dtoa_r+0x6c4>
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <_dtoa_r+0x648>)
 8006d50:	f7f9 fc52 	bl	80005f8 <__aeabi_dmul>
 8006d54:	4680      	mov	r8, r0
 8006d56:	4689      	mov	r9, r1
 8006d58:	e7bd      	b.n	8006cd6 <_dtoa_r+0x5b6>
 8006d5a:	bf00      	nop
 8006d5c:	08009e68 	.word	0x08009e68
 8006d60:	08009e40 	.word	0x08009e40
 8006d64:	3ff00000 	.word	0x3ff00000
 8006d68:	40240000 	.word	0x40240000
 8006d6c:	401c0000 	.word	0x401c0000
 8006d70:	40140000 	.word	0x40140000
 8006d74:	3fe00000 	.word	0x3fe00000
 8006d78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d7c:	9d00      	ldr	r5, [sp, #0]
 8006d7e:	4642      	mov	r2, r8
 8006d80:	464b      	mov	r3, r9
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fd61 	bl	800084c <__aeabi_ddiv>
 8006d8a:	f7f9 fee5 	bl	8000b58 <__aeabi_d2iz>
 8006d8e:	9001      	str	r0, [sp, #4]
 8006d90:	f7f9 fbc8 	bl	8000524 <__aeabi_i2d>
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4630      	mov	r0, r6
 8006da2:	4639      	mov	r1, r7
 8006da4:	f7f9 fa70 	bl	8000288 <__aeabi_dsub>
 8006da8:	9e01      	ldr	r6, [sp, #4]
 8006daa:	9f04      	ldr	r7, [sp, #16]
 8006dac:	3630      	adds	r6, #48	; 0x30
 8006dae:	f805 6b01 	strb.w	r6, [r5], #1
 8006db2:	9e00      	ldr	r6, [sp, #0]
 8006db4:	1bae      	subs	r6, r5, r6
 8006db6:	42b7      	cmp	r7, r6
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	d134      	bne.n	8006e28 <_dtoa_r+0x708>
 8006dbe:	f7f9 fa65 	bl	800028c <__adddf3>
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	f7f9 fea5 	bl	8000b18 <__aeabi_dcmpgt>
 8006dce:	b9c8      	cbnz	r0, 8006e04 <_dtoa_r+0x6e4>
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ddc:	b110      	cbz	r0, 8006de4 <_dtoa_r+0x6c4>
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	07db      	lsls	r3, r3, #31
 8006de2:	d40f      	bmi.n	8006e04 <_dtoa_r+0x6e4>
 8006de4:	4651      	mov	r1, sl
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fb18 	bl	800741c <_Bfree>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006df0:	702b      	strb	r3, [r5, #0]
 8006df2:	f10b 0301 	add.w	r3, fp, #1
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f43f ace2 	beq.w	80067c4 <_dtoa_r+0xa4>
 8006e00:	601d      	str	r5, [r3, #0]
 8006e02:	e4df      	b.n	80067c4 <_dtoa_r+0xa4>
 8006e04:	465f      	mov	r7, fp
 8006e06:	462b      	mov	r3, r5
 8006e08:	461d      	mov	r5, r3
 8006e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e0e:	2a39      	cmp	r2, #57	; 0x39
 8006e10:	d106      	bne.n	8006e20 <_dtoa_r+0x700>
 8006e12:	9a00      	ldr	r2, [sp, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1f7      	bne.n	8006e08 <_dtoa_r+0x6e8>
 8006e18:	9900      	ldr	r1, [sp, #0]
 8006e1a:	2230      	movs	r2, #48	; 0x30
 8006e1c:	3701      	adds	r7, #1
 8006e1e:	700a      	strb	r2, [r1, #0]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	3201      	adds	r2, #1
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e790      	b.n	8006d4a <_dtoa_r+0x62a>
 8006e28:	4ba3      	ldr	r3, [pc, #652]	; (80070b8 <_dtoa_r+0x998>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fbe4 	bl	80005f8 <__aeabi_dmul>
 8006e30:	2200      	movs	r2, #0
 8006e32:	2300      	movs	r3, #0
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	f7f9 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d09e      	beq.n	8006d7e <_dtoa_r+0x65e>
 8006e40:	e7d0      	b.n	8006de4 <_dtoa_r+0x6c4>
 8006e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	f000 80ca 	beq.w	8006fde <_dtoa_r+0x8be>
 8006e4a:	9a07      	ldr	r2, [sp, #28]
 8006e4c:	2a01      	cmp	r2, #1
 8006e4e:	f300 80ad 	bgt.w	8006fac <_dtoa_r+0x88c>
 8006e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	f000 80a5 	beq.w	8006fa4 <_dtoa_r+0x884>
 8006e5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e5e:	9e08      	ldr	r6, [sp, #32]
 8006e60:	9d05      	ldr	r5, [sp, #20]
 8006e62:	9a05      	ldr	r2, [sp, #20]
 8006e64:	441a      	add	r2, r3
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	9a06      	ldr	r2, [sp, #24]
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	4620      	mov	r0, r4
 8006e70:	9206      	str	r2, [sp, #24]
 8006e72:	f000 fb89 	bl	8007588 <__i2b>
 8006e76:	4607      	mov	r7, r0
 8006e78:	b165      	cbz	r5, 8006e94 <_dtoa_r+0x774>
 8006e7a:	9b06      	ldr	r3, [sp, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dd09      	ble.n	8006e94 <_dtoa_r+0x774>
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	bfa8      	it	ge
 8006e86:	462b      	movge	r3, r5
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	9205      	str	r2, [sp, #20]
 8006e8c:	9a06      	ldr	r2, [sp, #24]
 8006e8e:	1aed      	subs	r5, r5, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	b1f3      	cbz	r3, 8006ed6 <_dtoa_r+0x7b6>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 80a3 	beq.w	8006fe6 <_dtoa_r+0x8c6>
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	dd10      	ble.n	8006ec6 <_dtoa_r+0x7a6>
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 fc2d 	bl	8007708 <__pow5mult>
 8006eae:	4652      	mov	r2, sl
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fb7d 	bl	80075b4 <__multiply>
 8006eba:	4651      	mov	r1, sl
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 faac 	bl	800741c <_Bfree>
 8006ec4:	46c2      	mov	sl, r8
 8006ec6:	9b08      	ldr	r3, [sp, #32]
 8006ec8:	1b9a      	subs	r2, r3, r6
 8006eca:	d004      	beq.n	8006ed6 <_dtoa_r+0x7b6>
 8006ecc:	4651      	mov	r1, sl
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fc1a 	bl	8007708 <__pow5mult>
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 fb55 	bl	8007588 <__i2b>
 8006ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	f340 8081 	ble.w	8006fea <_dtoa_r+0x8ca>
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4601      	mov	r1, r0
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fc0b 	bl	8007708 <__pow5mult>
 8006ef2:	9b07      	ldr	r3, [sp, #28]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	dd7a      	ble.n	8006ff0 <_dtoa_r+0x8d0>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	6933      	ldr	r3, [r6, #16]
 8006f00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f04:	6918      	ldr	r0, [r3, #16]
 8006f06:	f000 faf1 	bl	80074ec <__hi0bits>
 8006f0a:	f1c0 0020 	rsb	r0, r0, #32
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	4418      	add	r0, r3
 8006f12:	f010 001f 	ands.w	r0, r0, #31
 8006f16:	f000 8094 	beq.w	8007042 <_dtoa_r+0x922>
 8006f1a:	f1c0 0320 	rsb	r3, r0, #32
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	f340 8085 	ble.w	800702e <_dtoa_r+0x90e>
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	f1c0 001c 	rsb	r0, r0, #28
 8006f2a:	4403      	add	r3, r0
 8006f2c:	9305      	str	r3, [sp, #20]
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	4403      	add	r3, r0
 8006f32:	4405      	add	r5, r0
 8006f34:	9306      	str	r3, [sp, #24]
 8006f36:	9b05      	ldr	r3, [sp, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	dd05      	ble.n	8006f48 <_dtoa_r+0x828>
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fc3b 	bl	80077bc <__lshift>
 8006f46:	4682      	mov	sl, r0
 8006f48:	9b06      	ldr	r3, [sp, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dd05      	ble.n	8006f5a <_dtoa_r+0x83a>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	461a      	mov	r2, r3
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 fc32 	bl	80077bc <__lshift>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d072      	beq.n	8007046 <_dtoa_r+0x926>
 8006f60:	4631      	mov	r1, r6
 8006f62:	4650      	mov	r0, sl
 8006f64:	f000 fc96 	bl	8007894 <__mcmp>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	da6c      	bge.n	8007046 <_dtoa_r+0x926>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4651      	mov	r1, sl
 8006f70:	220a      	movs	r2, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fa74 	bl	8007460 <__multadd>
 8006f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f7e:	4682      	mov	sl, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 81b0 	beq.w	80072e6 <_dtoa_r+0xbc6>
 8006f86:	2300      	movs	r3, #0
 8006f88:	4639      	mov	r1, r7
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 fa67 	bl	8007460 <__multadd>
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	4607      	mov	r7, r0
 8006f98:	f300 8096 	bgt.w	80070c8 <_dtoa_r+0x9a8>
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	dc59      	bgt.n	8007056 <_dtoa_r+0x936>
 8006fa2:	e091      	b.n	80070c8 <_dtoa_r+0x9a8>
 8006fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006faa:	e758      	b.n	8006e5e <_dtoa_r+0x73e>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	1e5e      	subs	r6, r3, #1
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	42b3      	cmp	r3, r6
 8006fb4:	bfbf      	itttt	lt
 8006fb6:	9b08      	ldrlt	r3, [sp, #32]
 8006fb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006fba:	9608      	strlt	r6, [sp, #32]
 8006fbc:	1af3      	sublt	r3, r6, r3
 8006fbe:	bfb4      	ite	lt
 8006fc0:	18d2      	addlt	r2, r2, r3
 8006fc2:	1b9e      	subge	r6, r3, r6
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	bfbc      	itt	lt
 8006fc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006fca:	2600      	movlt	r6, #0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfb7      	itett	lt
 8006fd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006fd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006fd8:	1a9d      	sublt	r5, r3, r2
 8006fda:	2300      	movlt	r3, #0
 8006fdc:	e741      	b.n	8006e62 <_dtoa_r+0x742>
 8006fde:	9e08      	ldr	r6, [sp, #32]
 8006fe0:	9d05      	ldr	r5, [sp, #20]
 8006fe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fe4:	e748      	b.n	8006e78 <_dtoa_r+0x758>
 8006fe6:	9a08      	ldr	r2, [sp, #32]
 8006fe8:	e770      	b.n	8006ecc <_dtoa_r+0x7ac>
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	dc19      	bgt.n	8007024 <_dtoa_r+0x904>
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	b9bb      	cbnz	r3, 8007024 <_dtoa_r+0x904>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ffa:	b99b      	cbnz	r3, 8007024 <_dtoa_r+0x904>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007002:	0d1b      	lsrs	r3, r3, #20
 8007004:	051b      	lsls	r3, r3, #20
 8007006:	b183      	cbz	r3, 800702a <_dtoa_r+0x90a>
 8007008:	9b05      	ldr	r3, [sp, #20]
 800700a:	3301      	adds	r3, #1
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	3301      	adds	r3, #1
 8007012:	9306      	str	r3, [sp, #24]
 8007014:	f04f 0801 	mov.w	r8, #1
 8007018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	f47f af6f 	bne.w	8006efe <_dtoa_r+0x7de>
 8007020:	2001      	movs	r0, #1
 8007022:	e774      	b.n	8006f0e <_dtoa_r+0x7ee>
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	e7f6      	b.n	8007018 <_dtoa_r+0x8f8>
 800702a:	4698      	mov	r8, r3
 800702c:	e7f4      	b.n	8007018 <_dtoa_r+0x8f8>
 800702e:	d082      	beq.n	8006f36 <_dtoa_r+0x816>
 8007030:	9a05      	ldr	r2, [sp, #20]
 8007032:	331c      	adds	r3, #28
 8007034:	441a      	add	r2, r3
 8007036:	9205      	str	r2, [sp, #20]
 8007038:	9a06      	ldr	r2, [sp, #24]
 800703a:	441a      	add	r2, r3
 800703c:	441d      	add	r5, r3
 800703e:	9206      	str	r2, [sp, #24]
 8007040:	e779      	b.n	8006f36 <_dtoa_r+0x816>
 8007042:	4603      	mov	r3, r0
 8007044:	e7f4      	b.n	8007030 <_dtoa_r+0x910>
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc37      	bgt.n	80070bc <_dtoa_r+0x99c>
 800704c:	9b07      	ldr	r3, [sp, #28]
 800704e:	2b02      	cmp	r3, #2
 8007050:	dd34      	ble.n	80070bc <_dtoa_r+0x99c>
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	b963      	cbnz	r3, 8007074 <_dtoa_r+0x954>
 800705a:	4631      	mov	r1, r6
 800705c:	2205      	movs	r2, #5
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f9fe 	bl	8007460 <__multadd>
 8007064:	4601      	mov	r1, r0
 8007066:	4606      	mov	r6, r0
 8007068:	4650      	mov	r0, sl
 800706a:	f000 fc13 	bl	8007894 <__mcmp>
 800706e:	2800      	cmp	r0, #0
 8007070:	f73f adbb 	bgt.w	8006bea <_dtoa_r+0x4ca>
 8007074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007076:	9d00      	ldr	r5, [sp, #0]
 8007078:	ea6f 0b03 	mvn.w	fp, r3
 800707c:	f04f 0800 	mov.w	r8, #0
 8007080:	4631      	mov	r1, r6
 8007082:	4620      	mov	r0, r4
 8007084:	f000 f9ca 	bl	800741c <_Bfree>
 8007088:	2f00      	cmp	r7, #0
 800708a:	f43f aeab 	beq.w	8006de4 <_dtoa_r+0x6c4>
 800708e:	f1b8 0f00 	cmp.w	r8, #0
 8007092:	d005      	beq.n	80070a0 <_dtoa_r+0x980>
 8007094:	45b8      	cmp	r8, r7
 8007096:	d003      	beq.n	80070a0 <_dtoa_r+0x980>
 8007098:	4641      	mov	r1, r8
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f9be 	bl	800741c <_Bfree>
 80070a0:	4639      	mov	r1, r7
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f9ba 	bl	800741c <_Bfree>
 80070a8:	e69c      	b.n	8006de4 <_dtoa_r+0x6c4>
 80070aa:	2600      	movs	r6, #0
 80070ac:	4637      	mov	r7, r6
 80070ae:	e7e1      	b.n	8007074 <_dtoa_r+0x954>
 80070b0:	46bb      	mov	fp, r7
 80070b2:	4637      	mov	r7, r6
 80070b4:	e599      	b.n	8006bea <_dtoa_r+0x4ca>
 80070b6:	bf00      	nop
 80070b8:	40240000 	.word	0x40240000
 80070bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80c8 	beq.w	8007254 <_dtoa_r+0xb34>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	dd05      	ble.n	80070d8 <_dtoa_r+0x9b8>
 80070cc:	4639      	mov	r1, r7
 80070ce:	462a      	mov	r2, r5
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fb73 	bl	80077bc <__lshift>
 80070d6:	4607      	mov	r7, r0
 80070d8:	f1b8 0f00 	cmp.w	r8, #0
 80070dc:	d05b      	beq.n	8007196 <_dtoa_r+0xa76>
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 f95b 	bl	800739c <_Balloc>
 80070e6:	4605      	mov	r5, r0
 80070e8:	b928      	cbnz	r0, 80070f6 <_dtoa_r+0x9d6>
 80070ea:	4b83      	ldr	r3, [pc, #524]	; (80072f8 <_dtoa_r+0xbd8>)
 80070ec:	4602      	mov	r2, r0
 80070ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070f2:	f7ff bb2e 	b.w	8006752 <_dtoa_r+0x32>
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	3202      	adds	r2, #2
 80070fa:	0092      	lsls	r2, r2, #2
 80070fc:	f107 010c 	add.w	r1, r7, #12
 8007100:	300c      	adds	r0, #12
 8007102:	f7ff fa75 	bl	80065f0 <memcpy>
 8007106:	2201      	movs	r2, #1
 8007108:	4629      	mov	r1, r5
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fb56 	bl	80077bc <__lshift>
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711a:	4413      	add	r3, r2
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	46b8      	mov	r8, r7
 8007126:	9306      	str	r3, [sp, #24]
 8007128:	4607      	mov	r7, r0
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	4631      	mov	r1, r6
 800712e:	3b01      	subs	r3, #1
 8007130:	4650      	mov	r0, sl
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	f7ff fa6a 	bl	800660c <quorem>
 8007138:	4641      	mov	r1, r8
 800713a:	9002      	str	r0, [sp, #8]
 800713c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007140:	4650      	mov	r0, sl
 8007142:	f000 fba7 	bl	8007894 <__mcmp>
 8007146:	463a      	mov	r2, r7
 8007148:	9005      	str	r0, [sp, #20]
 800714a:	4631      	mov	r1, r6
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fbbd 	bl	80078cc <__mdiff>
 8007152:	68c2      	ldr	r2, [r0, #12]
 8007154:	4605      	mov	r5, r0
 8007156:	bb02      	cbnz	r2, 800719a <_dtoa_r+0xa7a>
 8007158:	4601      	mov	r1, r0
 800715a:	4650      	mov	r0, sl
 800715c:	f000 fb9a 	bl	8007894 <__mcmp>
 8007160:	4602      	mov	r2, r0
 8007162:	4629      	mov	r1, r5
 8007164:	4620      	mov	r0, r4
 8007166:	9209      	str	r2, [sp, #36]	; 0x24
 8007168:	f000 f958 	bl	800741c <_Bfree>
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007170:	9d04      	ldr	r5, [sp, #16]
 8007172:	ea43 0102 	orr.w	r1, r3, r2
 8007176:	9b06      	ldr	r3, [sp, #24]
 8007178:	4319      	orrs	r1, r3
 800717a:	d110      	bne.n	800719e <_dtoa_r+0xa7e>
 800717c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007180:	d029      	beq.n	80071d6 <_dtoa_r+0xab6>
 8007182:	9b05      	ldr	r3, [sp, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd02      	ble.n	800718e <_dtoa_r+0xa6e>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	f883 9000 	strb.w	r9, [r3]
 8007194:	e774      	b.n	8007080 <_dtoa_r+0x960>
 8007196:	4638      	mov	r0, r7
 8007198:	e7ba      	b.n	8007110 <_dtoa_r+0x9f0>
 800719a:	2201      	movs	r2, #1
 800719c:	e7e1      	b.n	8007162 <_dtoa_r+0xa42>
 800719e:	9b05      	ldr	r3, [sp, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	db04      	blt.n	80071ae <_dtoa_r+0xa8e>
 80071a4:	9907      	ldr	r1, [sp, #28]
 80071a6:	430b      	orrs	r3, r1
 80071a8:	9906      	ldr	r1, [sp, #24]
 80071aa:	430b      	orrs	r3, r1
 80071ac:	d120      	bne.n	80071f0 <_dtoa_r+0xad0>
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	dded      	ble.n	800718e <_dtoa_r+0xa6e>
 80071b2:	4651      	mov	r1, sl
 80071b4:	2201      	movs	r2, #1
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fb00 	bl	80077bc <__lshift>
 80071bc:	4631      	mov	r1, r6
 80071be:	4682      	mov	sl, r0
 80071c0:	f000 fb68 	bl	8007894 <__mcmp>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	dc03      	bgt.n	80071d0 <_dtoa_r+0xab0>
 80071c8:	d1e1      	bne.n	800718e <_dtoa_r+0xa6e>
 80071ca:	f019 0f01 	tst.w	r9, #1
 80071ce:	d0de      	beq.n	800718e <_dtoa_r+0xa6e>
 80071d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071d4:	d1d8      	bne.n	8007188 <_dtoa_r+0xa68>
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	2339      	movs	r3, #57	; 0x39
 80071da:	7013      	strb	r3, [r2, #0]
 80071dc:	462b      	mov	r3, r5
 80071de:	461d      	mov	r5, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071e6:	2a39      	cmp	r2, #57	; 0x39
 80071e8:	d06c      	beq.n	80072c4 <_dtoa_r+0xba4>
 80071ea:	3201      	adds	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e747      	b.n	8007080 <_dtoa_r+0x960>
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	dd07      	ble.n	8007204 <_dtoa_r+0xae4>
 80071f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071f8:	d0ed      	beq.n	80071d6 <_dtoa_r+0xab6>
 80071fa:	9a01      	ldr	r2, [sp, #4]
 80071fc:	f109 0301 	add.w	r3, r9, #1
 8007200:	7013      	strb	r3, [r2, #0]
 8007202:	e73d      	b.n	8007080 <_dtoa_r+0x960>
 8007204:	9b04      	ldr	r3, [sp, #16]
 8007206:	9a08      	ldr	r2, [sp, #32]
 8007208:	f803 9c01 	strb.w	r9, [r3, #-1]
 800720c:	4293      	cmp	r3, r2
 800720e:	d043      	beq.n	8007298 <_dtoa_r+0xb78>
 8007210:	4651      	mov	r1, sl
 8007212:	2300      	movs	r3, #0
 8007214:	220a      	movs	r2, #10
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f922 	bl	8007460 <__multadd>
 800721c:	45b8      	cmp	r8, r7
 800721e:	4682      	mov	sl, r0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	f04f 020a 	mov.w	r2, #10
 8007228:	4641      	mov	r1, r8
 800722a:	4620      	mov	r0, r4
 800722c:	d107      	bne.n	800723e <_dtoa_r+0xb1e>
 800722e:	f000 f917 	bl	8007460 <__multadd>
 8007232:	4680      	mov	r8, r0
 8007234:	4607      	mov	r7, r0
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	3301      	adds	r3, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	e775      	b.n	800712a <_dtoa_r+0xa0a>
 800723e:	f000 f90f 	bl	8007460 <__multadd>
 8007242:	4639      	mov	r1, r7
 8007244:	4680      	mov	r8, r0
 8007246:	2300      	movs	r3, #0
 8007248:	220a      	movs	r2, #10
 800724a:	4620      	mov	r0, r4
 800724c:	f000 f908 	bl	8007460 <__multadd>
 8007250:	4607      	mov	r7, r0
 8007252:	e7f0      	b.n	8007236 <_dtoa_r+0xb16>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	9d00      	ldr	r5, [sp, #0]
 800725a:	4631      	mov	r1, r6
 800725c:	4650      	mov	r0, sl
 800725e:	f7ff f9d5 	bl	800660c <quorem>
 8007262:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007266:	9b00      	ldr	r3, [sp, #0]
 8007268:	f805 9b01 	strb.w	r9, [r5], #1
 800726c:	1aea      	subs	r2, r5, r3
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	4293      	cmp	r3, r2
 8007272:	dd07      	ble.n	8007284 <_dtoa_r+0xb64>
 8007274:	4651      	mov	r1, sl
 8007276:	2300      	movs	r3, #0
 8007278:	220a      	movs	r2, #10
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f8f0 	bl	8007460 <__multadd>
 8007280:	4682      	mov	sl, r0
 8007282:	e7ea      	b.n	800725a <_dtoa_r+0xb3a>
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfc8      	it	gt
 800728a:	461d      	movgt	r5, r3
 800728c:	9b00      	ldr	r3, [sp, #0]
 800728e:	bfd8      	it	le
 8007290:	2501      	movle	r5, #1
 8007292:	441d      	add	r5, r3
 8007294:	f04f 0800 	mov.w	r8, #0
 8007298:	4651      	mov	r1, sl
 800729a:	2201      	movs	r2, #1
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fa8d 	bl	80077bc <__lshift>
 80072a2:	4631      	mov	r1, r6
 80072a4:	4682      	mov	sl, r0
 80072a6:	f000 faf5 	bl	8007894 <__mcmp>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	dc96      	bgt.n	80071dc <_dtoa_r+0xabc>
 80072ae:	d102      	bne.n	80072b6 <_dtoa_r+0xb96>
 80072b0:	f019 0f01 	tst.w	r9, #1
 80072b4:	d192      	bne.n	80071dc <_dtoa_r+0xabc>
 80072b6:	462b      	mov	r3, r5
 80072b8:	461d      	mov	r5, r3
 80072ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072be:	2a30      	cmp	r2, #48	; 0x30
 80072c0:	d0fa      	beq.n	80072b8 <_dtoa_r+0xb98>
 80072c2:	e6dd      	b.n	8007080 <_dtoa_r+0x960>
 80072c4:	9a00      	ldr	r2, [sp, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d189      	bne.n	80071de <_dtoa_r+0xabe>
 80072ca:	f10b 0b01 	add.w	fp, fp, #1
 80072ce:	2331      	movs	r3, #49	; 0x31
 80072d0:	e796      	b.n	8007200 <_dtoa_r+0xae0>
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <_dtoa_r+0xbdc>)
 80072d4:	f7ff ba99 	b.w	800680a <_dtoa_r+0xea>
 80072d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f47f aa6d 	bne.w	80067ba <_dtoa_r+0x9a>
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <_dtoa_r+0xbe0>)
 80072e2:	f7ff ba92 	b.w	800680a <_dtoa_r+0xea>
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dcb5      	bgt.n	8007258 <_dtoa_r+0xb38>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	f73f aeb1 	bgt.w	8007056 <_dtoa_r+0x936>
 80072f4:	e7b0      	b.n	8007258 <_dtoa_r+0xb38>
 80072f6:	bf00      	nop
 80072f8:	08009dd2 	.word	0x08009dd2
 80072fc:	0800851b 	.word	0x0800851b
 8007300:	08009d56 	.word	0x08009d56

08007304 <_free_r>:
 8007304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007306:	2900      	cmp	r1, #0
 8007308:	d044      	beq.n	8007394 <_free_r+0x90>
 800730a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730e:	9001      	str	r0, [sp, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f1a1 0404 	sub.w	r4, r1, #4
 8007316:	bfb8      	it	lt
 8007318:	18e4      	addlt	r4, r4, r3
 800731a:	f7fe fa61 	bl	80057e0 <__malloc_lock>
 800731e:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <_free_r+0x94>)
 8007320:	9801      	ldr	r0, [sp, #4]
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	b933      	cbnz	r3, 8007334 <_free_r+0x30>
 8007326:	6063      	str	r3, [r4, #4]
 8007328:	6014      	str	r4, [r2, #0]
 800732a:	b003      	add	sp, #12
 800732c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007330:	f7fe ba5c 	b.w	80057ec <__malloc_unlock>
 8007334:	42a3      	cmp	r3, r4
 8007336:	d908      	bls.n	800734a <_free_r+0x46>
 8007338:	6825      	ldr	r5, [r4, #0]
 800733a:	1961      	adds	r1, r4, r5
 800733c:	428b      	cmp	r3, r1
 800733e:	bf01      	itttt	eq
 8007340:	6819      	ldreq	r1, [r3, #0]
 8007342:	685b      	ldreq	r3, [r3, #4]
 8007344:	1949      	addeq	r1, r1, r5
 8007346:	6021      	streq	r1, [r4, #0]
 8007348:	e7ed      	b.n	8007326 <_free_r+0x22>
 800734a:	461a      	mov	r2, r3
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	b10b      	cbz	r3, 8007354 <_free_r+0x50>
 8007350:	42a3      	cmp	r3, r4
 8007352:	d9fa      	bls.n	800734a <_free_r+0x46>
 8007354:	6811      	ldr	r1, [r2, #0]
 8007356:	1855      	adds	r5, r2, r1
 8007358:	42a5      	cmp	r5, r4
 800735a:	d10b      	bne.n	8007374 <_free_r+0x70>
 800735c:	6824      	ldr	r4, [r4, #0]
 800735e:	4421      	add	r1, r4
 8007360:	1854      	adds	r4, r2, r1
 8007362:	42a3      	cmp	r3, r4
 8007364:	6011      	str	r1, [r2, #0]
 8007366:	d1e0      	bne.n	800732a <_free_r+0x26>
 8007368:	681c      	ldr	r4, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	6053      	str	r3, [r2, #4]
 800736e:	440c      	add	r4, r1
 8007370:	6014      	str	r4, [r2, #0]
 8007372:	e7da      	b.n	800732a <_free_r+0x26>
 8007374:	d902      	bls.n	800737c <_free_r+0x78>
 8007376:	230c      	movs	r3, #12
 8007378:	6003      	str	r3, [r0, #0]
 800737a:	e7d6      	b.n	800732a <_free_r+0x26>
 800737c:	6825      	ldr	r5, [r4, #0]
 800737e:	1961      	adds	r1, r4, r5
 8007380:	428b      	cmp	r3, r1
 8007382:	bf04      	itt	eq
 8007384:	6819      	ldreq	r1, [r3, #0]
 8007386:	685b      	ldreq	r3, [r3, #4]
 8007388:	6063      	str	r3, [r4, #4]
 800738a:	bf04      	itt	eq
 800738c:	1949      	addeq	r1, r1, r5
 800738e:	6021      	streq	r1, [r4, #0]
 8007390:	6054      	str	r4, [r2, #4]
 8007392:	e7ca      	b.n	800732a <_free_r+0x26>
 8007394:	b003      	add	sp, #12
 8007396:	bd30      	pop	{r4, r5, pc}
 8007398:	20000a20 	.word	0x20000a20

0800739c <_Balloc>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	69c6      	ldr	r6, [r0, #28]
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	b976      	cbnz	r6, 80073c4 <_Balloc+0x28>
 80073a6:	2010      	movs	r0, #16
 80073a8:	f7fe f972 	bl	8005690 <malloc>
 80073ac:	4602      	mov	r2, r0
 80073ae:	61e0      	str	r0, [r4, #28]
 80073b0:	b920      	cbnz	r0, 80073bc <_Balloc+0x20>
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <_Balloc+0x78>)
 80073b4:	4818      	ldr	r0, [pc, #96]	; (8007418 <_Balloc+0x7c>)
 80073b6:	216b      	movs	r1, #107	; 0x6b
 80073b8:	f000 fde2 	bl	8007f80 <__assert_func>
 80073bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073c0:	6006      	str	r6, [r0, #0]
 80073c2:	60c6      	str	r6, [r0, #12]
 80073c4:	69e6      	ldr	r6, [r4, #28]
 80073c6:	68f3      	ldr	r3, [r6, #12]
 80073c8:	b183      	cbz	r3, 80073ec <_Balloc+0x50>
 80073ca:	69e3      	ldr	r3, [r4, #28]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073d2:	b9b8      	cbnz	r0, 8007404 <_Balloc+0x68>
 80073d4:	2101      	movs	r1, #1
 80073d6:	fa01 f605 	lsl.w	r6, r1, r5
 80073da:	1d72      	adds	r2, r6, #5
 80073dc:	0092      	lsls	r2, r2, #2
 80073de:	4620      	mov	r0, r4
 80073e0:	f7fe f940 	bl	8005664 <_calloc_r>
 80073e4:	b160      	cbz	r0, 8007400 <_Balloc+0x64>
 80073e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ea:	e00e      	b.n	800740a <_Balloc+0x6e>
 80073ec:	2221      	movs	r2, #33	; 0x21
 80073ee:	2104      	movs	r1, #4
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7fe f937 	bl	8005664 <_calloc_r>
 80073f6:	69e3      	ldr	r3, [r4, #28]
 80073f8:	60f0      	str	r0, [r6, #12]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e4      	bne.n	80073ca <_Balloc+0x2e>
 8007400:	2000      	movs	r0, #0
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	6802      	ldr	r2, [r0, #0]
 8007406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800740a:	2300      	movs	r3, #0
 800740c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007410:	e7f7      	b.n	8007402 <_Balloc+0x66>
 8007412:	bf00      	nop
 8007414:	08009d63 	.word	0x08009d63
 8007418:	08009de3 	.word	0x08009de3

0800741c <_Bfree>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	69c6      	ldr	r6, [r0, #28]
 8007420:	4605      	mov	r5, r0
 8007422:	460c      	mov	r4, r1
 8007424:	b976      	cbnz	r6, 8007444 <_Bfree+0x28>
 8007426:	2010      	movs	r0, #16
 8007428:	f7fe f932 	bl	8005690 <malloc>
 800742c:	4602      	mov	r2, r0
 800742e:	61e8      	str	r0, [r5, #28]
 8007430:	b920      	cbnz	r0, 800743c <_Bfree+0x20>
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <_Bfree+0x3c>)
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <_Bfree+0x40>)
 8007436:	218f      	movs	r1, #143	; 0x8f
 8007438:	f000 fda2 	bl	8007f80 <__assert_func>
 800743c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007440:	6006      	str	r6, [r0, #0]
 8007442:	60c6      	str	r6, [r0, #12]
 8007444:	b13c      	cbz	r4, 8007456 <_Bfree+0x3a>
 8007446:	69eb      	ldr	r3, [r5, #28]
 8007448:	6862      	ldr	r2, [r4, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007450:	6021      	str	r1, [r4, #0]
 8007452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	08009d63 	.word	0x08009d63
 800745c:	08009de3 	.word	0x08009de3

08007460 <__multadd>:
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	690d      	ldr	r5, [r1, #16]
 8007466:	4607      	mov	r7, r0
 8007468:	460c      	mov	r4, r1
 800746a:	461e      	mov	r6, r3
 800746c:	f101 0c14 	add.w	ip, r1, #20
 8007470:	2000      	movs	r0, #0
 8007472:	f8dc 3000 	ldr.w	r3, [ip]
 8007476:	b299      	uxth	r1, r3
 8007478:	fb02 6101 	mla	r1, r2, r1, r6
 800747c:	0c1e      	lsrs	r6, r3, #16
 800747e:	0c0b      	lsrs	r3, r1, #16
 8007480:	fb02 3306 	mla	r3, r2, r6, r3
 8007484:	b289      	uxth	r1, r1
 8007486:	3001      	adds	r0, #1
 8007488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800748c:	4285      	cmp	r5, r0
 800748e:	f84c 1b04 	str.w	r1, [ip], #4
 8007492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007496:	dcec      	bgt.n	8007472 <__multadd+0x12>
 8007498:	b30e      	cbz	r6, 80074de <__multadd+0x7e>
 800749a:	68a3      	ldr	r3, [r4, #8]
 800749c:	42ab      	cmp	r3, r5
 800749e:	dc19      	bgt.n	80074d4 <__multadd+0x74>
 80074a0:	6861      	ldr	r1, [r4, #4]
 80074a2:	4638      	mov	r0, r7
 80074a4:	3101      	adds	r1, #1
 80074a6:	f7ff ff79 	bl	800739c <_Balloc>
 80074aa:	4680      	mov	r8, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__multadd+0x5a>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <__multadd+0x84>)
 80074b2:	480d      	ldr	r0, [pc, #52]	; (80074e8 <__multadd+0x88>)
 80074b4:	21ba      	movs	r1, #186	; 0xba
 80074b6:	f000 fd63 	bl	8007f80 <__assert_func>
 80074ba:	6922      	ldr	r2, [r4, #16]
 80074bc:	3202      	adds	r2, #2
 80074be:	f104 010c 	add.w	r1, r4, #12
 80074c2:	0092      	lsls	r2, r2, #2
 80074c4:	300c      	adds	r0, #12
 80074c6:	f7ff f893 	bl	80065f0 <memcpy>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ffa5 	bl	800741c <_Bfree>
 80074d2:	4644      	mov	r4, r8
 80074d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074d8:	3501      	adds	r5, #1
 80074da:	615e      	str	r6, [r3, #20]
 80074dc:	6125      	str	r5, [r4, #16]
 80074de:	4620      	mov	r0, r4
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	08009dd2 	.word	0x08009dd2
 80074e8:	08009de3 	.word	0x08009de3

080074ec <__hi0bits>:
 80074ec:	0c03      	lsrs	r3, r0, #16
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	b9d3      	cbnz	r3, 8007528 <__hi0bits+0x3c>
 80074f2:	0400      	lsls	r0, r0, #16
 80074f4:	2310      	movs	r3, #16
 80074f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074fa:	bf04      	itt	eq
 80074fc:	0200      	lsleq	r0, r0, #8
 80074fe:	3308      	addeq	r3, #8
 8007500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007504:	bf04      	itt	eq
 8007506:	0100      	lsleq	r0, r0, #4
 8007508:	3304      	addeq	r3, #4
 800750a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800750e:	bf04      	itt	eq
 8007510:	0080      	lsleq	r0, r0, #2
 8007512:	3302      	addeq	r3, #2
 8007514:	2800      	cmp	r0, #0
 8007516:	db05      	blt.n	8007524 <__hi0bits+0x38>
 8007518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800751c:	f103 0301 	add.w	r3, r3, #1
 8007520:	bf08      	it	eq
 8007522:	2320      	moveq	r3, #32
 8007524:	4618      	mov	r0, r3
 8007526:	4770      	bx	lr
 8007528:	2300      	movs	r3, #0
 800752a:	e7e4      	b.n	80074f6 <__hi0bits+0xa>

0800752c <__lo0bits>:
 800752c:	6803      	ldr	r3, [r0, #0]
 800752e:	f013 0207 	ands.w	r2, r3, #7
 8007532:	d00c      	beq.n	800754e <__lo0bits+0x22>
 8007534:	07d9      	lsls	r1, r3, #31
 8007536:	d422      	bmi.n	800757e <__lo0bits+0x52>
 8007538:	079a      	lsls	r2, r3, #30
 800753a:	bf49      	itett	mi
 800753c:	085b      	lsrmi	r3, r3, #1
 800753e:	089b      	lsrpl	r3, r3, #2
 8007540:	6003      	strmi	r3, [r0, #0]
 8007542:	2201      	movmi	r2, #1
 8007544:	bf5c      	itt	pl
 8007546:	6003      	strpl	r3, [r0, #0]
 8007548:	2202      	movpl	r2, #2
 800754a:	4610      	mov	r0, r2
 800754c:	4770      	bx	lr
 800754e:	b299      	uxth	r1, r3
 8007550:	b909      	cbnz	r1, 8007556 <__lo0bits+0x2a>
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	2210      	movs	r2, #16
 8007556:	b2d9      	uxtb	r1, r3
 8007558:	b909      	cbnz	r1, 800755e <__lo0bits+0x32>
 800755a:	3208      	adds	r2, #8
 800755c:	0a1b      	lsrs	r3, r3, #8
 800755e:	0719      	lsls	r1, r3, #28
 8007560:	bf04      	itt	eq
 8007562:	091b      	lsreq	r3, r3, #4
 8007564:	3204      	addeq	r2, #4
 8007566:	0799      	lsls	r1, r3, #30
 8007568:	bf04      	itt	eq
 800756a:	089b      	lsreq	r3, r3, #2
 800756c:	3202      	addeq	r2, #2
 800756e:	07d9      	lsls	r1, r3, #31
 8007570:	d403      	bmi.n	800757a <__lo0bits+0x4e>
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	f102 0201 	add.w	r2, r2, #1
 8007578:	d003      	beq.n	8007582 <__lo0bits+0x56>
 800757a:	6003      	str	r3, [r0, #0]
 800757c:	e7e5      	b.n	800754a <__lo0bits+0x1e>
 800757e:	2200      	movs	r2, #0
 8007580:	e7e3      	b.n	800754a <__lo0bits+0x1e>
 8007582:	2220      	movs	r2, #32
 8007584:	e7e1      	b.n	800754a <__lo0bits+0x1e>
	...

08007588 <__i2b>:
 8007588:	b510      	push	{r4, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	2101      	movs	r1, #1
 800758e:	f7ff ff05 	bl	800739c <_Balloc>
 8007592:	4602      	mov	r2, r0
 8007594:	b928      	cbnz	r0, 80075a2 <__i2b+0x1a>
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <__i2b+0x24>)
 8007598:	4805      	ldr	r0, [pc, #20]	; (80075b0 <__i2b+0x28>)
 800759a:	f240 1145 	movw	r1, #325	; 0x145
 800759e:	f000 fcef 	bl	8007f80 <__assert_func>
 80075a2:	2301      	movs	r3, #1
 80075a4:	6144      	str	r4, [r0, #20]
 80075a6:	6103      	str	r3, [r0, #16]
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	bf00      	nop
 80075ac:	08009dd2 	.word	0x08009dd2
 80075b0:	08009de3 	.word	0x08009de3

080075b4 <__multiply>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	4691      	mov	r9, r2
 80075ba:	690a      	ldr	r2, [r1, #16]
 80075bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	bfb8      	it	lt
 80075c4:	460b      	movlt	r3, r1
 80075c6:	460c      	mov	r4, r1
 80075c8:	bfbc      	itt	lt
 80075ca:	464c      	movlt	r4, r9
 80075cc:	4699      	movlt	r9, r3
 80075ce:	6927      	ldr	r7, [r4, #16]
 80075d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	6861      	ldr	r1, [r4, #4]
 80075d8:	eb07 060a 	add.w	r6, r7, sl
 80075dc:	42b3      	cmp	r3, r6
 80075de:	b085      	sub	sp, #20
 80075e0:	bfb8      	it	lt
 80075e2:	3101      	addlt	r1, #1
 80075e4:	f7ff feda 	bl	800739c <_Balloc>
 80075e8:	b930      	cbnz	r0, 80075f8 <__multiply+0x44>
 80075ea:	4602      	mov	r2, r0
 80075ec:	4b44      	ldr	r3, [pc, #272]	; (8007700 <__multiply+0x14c>)
 80075ee:	4845      	ldr	r0, [pc, #276]	; (8007704 <__multiply+0x150>)
 80075f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075f4:	f000 fcc4 	bl	8007f80 <__assert_func>
 80075f8:	f100 0514 	add.w	r5, r0, #20
 80075fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007600:	462b      	mov	r3, r5
 8007602:	2200      	movs	r2, #0
 8007604:	4543      	cmp	r3, r8
 8007606:	d321      	bcc.n	800764c <__multiply+0x98>
 8007608:	f104 0314 	add.w	r3, r4, #20
 800760c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007610:	f109 0314 	add.w	r3, r9, #20
 8007614:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007618:	9202      	str	r2, [sp, #8]
 800761a:	1b3a      	subs	r2, r7, r4
 800761c:	3a15      	subs	r2, #21
 800761e:	f022 0203 	bic.w	r2, r2, #3
 8007622:	3204      	adds	r2, #4
 8007624:	f104 0115 	add.w	r1, r4, #21
 8007628:	428f      	cmp	r7, r1
 800762a:	bf38      	it	cc
 800762c:	2204      	movcc	r2, #4
 800762e:	9201      	str	r2, [sp, #4]
 8007630:	9a02      	ldr	r2, [sp, #8]
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d80c      	bhi.n	8007652 <__multiply+0x9e>
 8007638:	2e00      	cmp	r6, #0
 800763a:	dd03      	ble.n	8007644 <__multiply+0x90>
 800763c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007640:	2b00      	cmp	r3, #0
 8007642:	d05b      	beq.n	80076fc <__multiply+0x148>
 8007644:	6106      	str	r6, [r0, #16]
 8007646:	b005      	add	sp, #20
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	f843 2b04 	str.w	r2, [r3], #4
 8007650:	e7d8      	b.n	8007604 <__multiply+0x50>
 8007652:	f8b3 a000 	ldrh.w	sl, [r3]
 8007656:	f1ba 0f00 	cmp.w	sl, #0
 800765a:	d024      	beq.n	80076a6 <__multiply+0xf2>
 800765c:	f104 0e14 	add.w	lr, r4, #20
 8007660:	46a9      	mov	r9, r5
 8007662:	f04f 0c00 	mov.w	ip, #0
 8007666:	f85e 2b04 	ldr.w	r2, [lr], #4
 800766a:	f8d9 1000 	ldr.w	r1, [r9]
 800766e:	fa1f fb82 	uxth.w	fp, r2
 8007672:	b289      	uxth	r1, r1
 8007674:	fb0a 110b 	mla	r1, sl, fp, r1
 8007678:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800767c:	f8d9 2000 	ldr.w	r2, [r9]
 8007680:	4461      	add	r1, ip
 8007682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007686:	fb0a c20b 	mla	r2, sl, fp, ip
 800768a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800768e:	b289      	uxth	r1, r1
 8007690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007694:	4577      	cmp	r7, lr
 8007696:	f849 1b04 	str.w	r1, [r9], #4
 800769a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800769e:	d8e2      	bhi.n	8007666 <__multiply+0xb2>
 80076a0:	9a01      	ldr	r2, [sp, #4]
 80076a2:	f845 c002 	str.w	ip, [r5, r2]
 80076a6:	9a03      	ldr	r2, [sp, #12]
 80076a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076ac:	3304      	adds	r3, #4
 80076ae:	f1b9 0f00 	cmp.w	r9, #0
 80076b2:	d021      	beq.n	80076f8 <__multiply+0x144>
 80076b4:	6829      	ldr	r1, [r5, #0]
 80076b6:	f104 0c14 	add.w	ip, r4, #20
 80076ba:	46ae      	mov	lr, r5
 80076bc:	f04f 0a00 	mov.w	sl, #0
 80076c0:	f8bc b000 	ldrh.w	fp, [ip]
 80076c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80076c8:	fb09 220b 	mla	r2, r9, fp, r2
 80076cc:	4452      	add	r2, sl
 80076ce:	b289      	uxth	r1, r1
 80076d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076d4:	f84e 1b04 	str.w	r1, [lr], #4
 80076d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076e0:	f8be 1000 	ldrh.w	r1, [lr]
 80076e4:	fb09 110a 	mla	r1, r9, sl, r1
 80076e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076ec:	4567      	cmp	r7, ip
 80076ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076f2:	d8e5      	bhi.n	80076c0 <__multiply+0x10c>
 80076f4:	9a01      	ldr	r2, [sp, #4]
 80076f6:	50a9      	str	r1, [r5, r2]
 80076f8:	3504      	adds	r5, #4
 80076fa:	e799      	b.n	8007630 <__multiply+0x7c>
 80076fc:	3e01      	subs	r6, #1
 80076fe:	e79b      	b.n	8007638 <__multiply+0x84>
 8007700:	08009dd2 	.word	0x08009dd2
 8007704:	08009de3 	.word	0x08009de3

08007708 <__pow5mult>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	4615      	mov	r5, r2
 800770e:	f012 0203 	ands.w	r2, r2, #3
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	d007      	beq.n	8007728 <__pow5mult+0x20>
 8007718:	4c25      	ldr	r4, [pc, #148]	; (80077b0 <__pow5mult+0xa8>)
 800771a:	3a01      	subs	r2, #1
 800771c:	2300      	movs	r3, #0
 800771e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007722:	f7ff fe9d 	bl	8007460 <__multadd>
 8007726:	4607      	mov	r7, r0
 8007728:	10ad      	asrs	r5, r5, #2
 800772a:	d03d      	beq.n	80077a8 <__pow5mult+0xa0>
 800772c:	69f4      	ldr	r4, [r6, #28]
 800772e:	b97c      	cbnz	r4, 8007750 <__pow5mult+0x48>
 8007730:	2010      	movs	r0, #16
 8007732:	f7fd ffad 	bl	8005690 <malloc>
 8007736:	4602      	mov	r2, r0
 8007738:	61f0      	str	r0, [r6, #28]
 800773a:	b928      	cbnz	r0, 8007748 <__pow5mult+0x40>
 800773c:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <__pow5mult+0xac>)
 800773e:	481e      	ldr	r0, [pc, #120]	; (80077b8 <__pow5mult+0xb0>)
 8007740:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007744:	f000 fc1c 	bl	8007f80 <__assert_func>
 8007748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800774c:	6004      	str	r4, [r0, #0]
 800774e:	60c4      	str	r4, [r0, #12]
 8007750:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007758:	b94c      	cbnz	r4, 800776e <__pow5mult+0x66>
 800775a:	f240 2171 	movw	r1, #625	; 0x271
 800775e:	4630      	mov	r0, r6
 8007760:	f7ff ff12 	bl	8007588 <__i2b>
 8007764:	2300      	movs	r3, #0
 8007766:	f8c8 0008 	str.w	r0, [r8, #8]
 800776a:	4604      	mov	r4, r0
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	07eb      	lsls	r3, r5, #31
 8007774:	d50a      	bpl.n	800778c <__pow5mult+0x84>
 8007776:	4639      	mov	r1, r7
 8007778:	4622      	mov	r2, r4
 800777a:	4630      	mov	r0, r6
 800777c:	f7ff ff1a 	bl	80075b4 <__multiply>
 8007780:	4639      	mov	r1, r7
 8007782:	4680      	mov	r8, r0
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff fe49 	bl	800741c <_Bfree>
 800778a:	4647      	mov	r7, r8
 800778c:	106d      	asrs	r5, r5, #1
 800778e:	d00b      	beq.n	80077a8 <__pow5mult+0xa0>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	b938      	cbnz	r0, 80077a4 <__pow5mult+0x9c>
 8007794:	4622      	mov	r2, r4
 8007796:	4621      	mov	r1, r4
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff ff0b 	bl	80075b4 <__multiply>
 800779e:	6020      	str	r0, [r4, #0]
 80077a0:	f8c0 9000 	str.w	r9, [r0]
 80077a4:	4604      	mov	r4, r0
 80077a6:	e7e4      	b.n	8007772 <__pow5mult+0x6a>
 80077a8:	4638      	mov	r0, r7
 80077aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ae:	bf00      	nop
 80077b0:	08009f30 	.word	0x08009f30
 80077b4:	08009d63 	.word	0x08009d63
 80077b8:	08009de3 	.word	0x08009de3

080077bc <__lshift>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	460c      	mov	r4, r1
 80077c2:	6849      	ldr	r1, [r1, #4]
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	4607      	mov	r7, r0
 80077ce:	4691      	mov	r9, r2
 80077d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077d4:	f108 0601 	add.w	r6, r8, #1
 80077d8:	42b3      	cmp	r3, r6
 80077da:	db0b      	blt.n	80077f4 <__lshift+0x38>
 80077dc:	4638      	mov	r0, r7
 80077de:	f7ff fddd 	bl	800739c <_Balloc>
 80077e2:	4605      	mov	r5, r0
 80077e4:	b948      	cbnz	r0, 80077fa <__lshift+0x3e>
 80077e6:	4602      	mov	r2, r0
 80077e8:	4b28      	ldr	r3, [pc, #160]	; (800788c <__lshift+0xd0>)
 80077ea:	4829      	ldr	r0, [pc, #164]	; (8007890 <__lshift+0xd4>)
 80077ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077f0:	f000 fbc6 	bl	8007f80 <__assert_func>
 80077f4:	3101      	adds	r1, #1
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	e7ee      	b.n	80077d8 <__lshift+0x1c>
 80077fa:	2300      	movs	r3, #0
 80077fc:	f100 0114 	add.w	r1, r0, #20
 8007800:	f100 0210 	add.w	r2, r0, #16
 8007804:	4618      	mov	r0, r3
 8007806:	4553      	cmp	r3, sl
 8007808:	db33      	blt.n	8007872 <__lshift+0xb6>
 800780a:	6920      	ldr	r0, [r4, #16]
 800780c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007810:	f104 0314 	add.w	r3, r4, #20
 8007814:	f019 091f 	ands.w	r9, r9, #31
 8007818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800781c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007820:	d02b      	beq.n	800787a <__lshift+0xbe>
 8007822:	f1c9 0e20 	rsb	lr, r9, #32
 8007826:	468a      	mov	sl, r1
 8007828:	2200      	movs	r2, #0
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	fa00 f009 	lsl.w	r0, r0, r9
 8007830:	4310      	orrs	r0, r2
 8007832:	f84a 0b04 	str.w	r0, [sl], #4
 8007836:	f853 2b04 	ldr.w	r2, [r3], #4
 800783a:	459c      	cmp	ip, r3
 800783c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007840:	d8f3      	bhi.n	800782a <__lshift+0x6e>
 8007842:	ebac 0304 	sub.w	r3, ip, r4
 8007846:	3b15      	subs	r3, #21
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	3304      	adds	r3, #4
 800784e:	f104 0015 	add.w	r0, r4, #21
 8007852:	4584      	cmp	ip, r0
 8007854:	bf38      	it	cc
 8007856:	2304      	movcc	r3, #4
 8007858:	50ca      	str	r2, [r1, r3]
 800785a:	b10a      	cbz	r2, 8007860 <__lshift+0xa4>
 800785c:	f108 0602 	add.w	r6, r8, #2
 8007860:	3e01      	subs	r6, #1
 8007862:	4638      	mov	r0, r7
 8007864:	612e      	str	r6, [r5, #16]
 8007866:	4621      	mov	r1, r4
 8007868:	f7ff fdd8 	bl	800741c <_Bfree>
 800786c:	4628      	mov	r0, r5
 800786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007872:	f842 0f04 	str.w	r0, [r2, #4]!
 8007876:	3301      	adds	r3, #1
 8007878:	e7c5      	b.n	8007806 <__lshift+0x4a>
 800787a:	3904      	subs	r1, #4
 800787c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007880:	f841 2f04 	str.w	r2, [r1, #4]!
 8007884:	459c      	cmp	ip, r3
 8007886:	d8f9      	bhi.n	800787c <__lshift+0xc0>
 8007888:	e7ea      	b.n	8007860 <__lshift+0xa4>
 800788a:	bf00      	nop
 800788c:	08009dd2 	.word	0x08009dd2
 8007890:	08009de3 	.word	0x08009de3

08007894 <__mcmp>:
 8007894:	b530      	push	{r4, r5, lr}
 8007896:	6902      	ldr	r2, [r0, #16]
 8007898:	690c      	ldr	r4, [r1, #16]
 800789a:	1b12      	subs	r2, r2, r4
 800789c:	d10e      	bne.n	80078bc <__mcmp+0x28>
 800789e:	f100 0314 	add.w	r3, r0, #20
 80078a2:	3114      	adds	r1, #20
 80078a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d003      	beq.n	80078c0 <__mcmp+0x2c>
 80078b8:	d305      	bcc.n	80078c6 <__mcmp+0x32>
 80078ba:	2201      	movs	r2, #1
 80078bc:	4610      	mov	r0, r2
 80078be:	bd30      	pop	{r4, r5, pc}
 80078c0:	4283      	cmp	r3, r0
 80078c2:	d3f3      	bcc.n	80078ac <__mcmp+0x18>
 80078c4:	e7fa      	b.n	80078bc <__mcmp+0x28>
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	e7f7      	b.n	80078bc <__mcmp+0x28>

080078cc <__mdiff>:
 80078cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	460c      	mov	r4, r1
 80078d2:	4606      	mov	r6, r0
 80078d4:	4611      	mov	r1, r2
 80078d6:	4620      	mov	r0, r4
 80078d8:	4690      	mov	r8, r2
 80078da:	f7ff ffdb 	bl	8007894 <__mcmp>
 80078de:	1e05      	subs	r5, r0, #0
 80078e0:	d110      	bne.n	8007904 <__mdiff+0x38>
 80078e2:	4629      	mov	r1, r5
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff fd59 	bl	800739c <_Balloc>
 80078ea:	b930      	cbnz	r0, 80078fa <__mdiff+0x2e>
 80078ec:	4b3a      	ldr	r3, [pc, #232]	; (80079d8 <__mdiff+0x10c>)
 80078ee:	4602      	mov	r2, r0
 80078f0:	f240 2137 	movw	r1, #567	; 0x237
 80078f4:	4839      	ldr	r0, [pc, #228]	; (80079dc <__mdiff+0x110>)
 80078f6:	f000 fb43 	bl	8007f80 <__assert_func>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	bfa4      	itt	ge
 8007906:	4643      	movge	r3, r8
 8007908:	46a0      	movge	r8, r4
 800790a:	4630      	mov	r0, r6
 800790c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007910:	bfa6      	itte	ge
 8007912:	461c      	movge	r4, r3
 8007914:	2500      	movge	r5, #0
 8007916:	2501      	movlt	r5, #1
 8007918:	f7ff fd40 	bl	800739c <_Balloc>
 800791c:	b920      	cbnz	r0, 8007928 <__mdiff+0x5c>
 800791e:	4b2e      	ldr	r3, [pc, #184]	; (80079d8 <__mdiff+0x10c>)
 8007920:	4602      	mov	r2, r0
 8007922:	f240 2145 	movw	r1, #581	; 0x245
 8007926:	e7e5      	b.n	80078f4 <__mdiff+0x28>
 8007928:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800792c:	6926      	ldr	r6, [r4, #16]
 800792e:	60c5      	str	r5, [r0, #12]
 8007930:	f104 0914 	add.w	r9, r4, #20
 8007934:	f108 0514 	add.w	r5, r8, #20
 8007938:	f100 0e14 	add.w	lr, r0, #20
 800793c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007944:	f108 0210 	add.w	r2, r8, #16
 8007948:	46f2      	mov	sl, lr
 800794a:	2100      	movs	r1, #0
 800794c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007954:	fa11 f88b 	uxtah	r8, r1, fp
 8007958:	b299      	uxth	r1, r3
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	eba8 0801 	sub.w	r8, r8, r1
 8007960:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007964:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007968:	fa1f f888 	uxth.w	r8, r8
 800796c:	1419      	asrs	r1, r3, #16
 800796e:	454e      	cmp	r6, r9
 8007970:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007974:	f84a 3b04 	str.w	r3, [sl], #4
 8007978:	d8e8      	bhi.n	800794c <__mdiff+0x80>
 800797a:	1b33      	subs	r3, r6, r4
 800797c:	3b15      	subs	r3, #21
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	3304      	adds	r3, #4
 8007984:	3415      	adds	r4, #21
 8007986:	42a6      	cmp	r6, r4
 8007988:	bf38      	it	cc
 800798a:	2304      	movcc	r3, #4
 800798c:	441d      	add	r5, r3
 800798e:	4473      	add	r3, lr
 8007990:	469e      	mov	lr, r3
 8007992:	462e      	mov	r6, r5
 8007994:	4566      	cmp	r6, ip
 8007996:	d30e      	bcc.n	80079b6 <__mdiff+0xea>
 8007998:	f10c 0203 	add.w	r2, ip, #3
 800799c:	1b52      	subs	r2, r2, r5
 800799e:	f022 0203 	bic.w	r2, r2, #3
 80079a2:	3d03      	subs	r5, #3
 80079a4:	45ac      	cmp	ip, r5
 80079a6:	bf38      	it	cc
 80079a8:	2200      	movcc	r2, #0
 80079aa:	4413      	add	r3, r2
 80079ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80079b0:	b17a      	cbz	r2, 80079d2 <__mdiff+0x106>
 80079b2:	6107      	str	r7, [r0, #16]
 80079b4:	e7a4      	b.n	8007900 <__mdiff+0x34>
 80079b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80079ba:	fa11 f288 	uxtah	r2, r1, r8
 80079be:	1414      	asrs	r4, r2, #16
 80079c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079c4:	b292      	uxth	r2, r2
 80079c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079ca:	f84e 2b04 	str.w	r2, [lr], #4
 80079ce:	1421      	asrs	r1, r4, #16
 80079d0:	e7e0      	b.n	8007994 <__mdiff+0xc8>
 80079d2:	3f01      	subs	r7, #1
 80079d4:	e7ea      	b.n	80079ac <__mdiff+0xe0>
 80079d6:	bf00      	nop
 80079d8:	08009dd2 	.word	0x08009dd2
 80079dc:	08009de3 	.word	0x08009de3

080079e0 <__d2b>:
 80079e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079e4:	460f      	mov	r7, r1
 80079e6:	2101      	movs	r1, #1
 80079e8:	ec59 8b10 	vmov	r8, r9, d0
 80079ec:	4616      	mov	r6, r2
 80079ee:	f7ff fcd5 	bl	800739c <_Balloc>
 80079f2:	4604      	mov	r4, r0
 80079f4:	b930      	cbnz	r0, 8007a04 <__d2b+0x24>
 80079f6:	4602      	mov	r2, r0
 80079f8:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <__d2b+0xac>)
 80079fa:	4825      	ldr	r0, [pc, #148]	; (8007a90 <__d2b+0xb0>)
 80079fc:	f240 310f 	movw	r1, #783	; 0x30f
 8007a00:	f000 fabe 	bl	8007f80 <__assert_func>
 8007a04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a0c:	bb2d      	cbnz	r5, 8007a5a <__d2b+0x7a>
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f1b8 0300 	subs.w	r3, r8, #0
 8007a14:	d026      	beq.n	8007a64 <__d2b+0x84>
 8007a16:	4668      	mov	r0, sp
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	f7ff fd87 	bl	800752c <__lo0bits>
 8007a1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a22:	b1e8      	cbz	r0, 8007a60 <__d2b+0x80>
 8007a24:	f1c0 0320 	rsb	r3, r0, #32
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	40c2      	lsrs	r2, r0
 8007a30:	6163      	str	r3, [r4, #20]
 8007a32:	9201      	str	r2, [sp, #4]
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	61a3      	str	r3, [r4, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf14      	ite	ne
 8007a3c:	2202      	movne	r2, #2
 8007a3e:	2201      	moveq	r2, #1
 8007a40:	6122      	str	r2, [r4, #16]
 8007a42:	b1bd      	cbz	r5, 8007a74 <__d2b+0x94>
 8007a44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a48:	4405      	add	r5, r0
 8007a4a:	603d      	str	r5, [r7, #0]
 8007a4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a50:	6030      	str	r0, [r6, #0]
 8007a52:	4620      	mov	r0, r4
 8007a54:	b003      	add	sp, #12
 8007a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a5e:	e7d6      	b.n	8007a0e <__d2b+0x2e>
 8007a60:	6161      	str	r1, [r4, #20]
 8007a62:	e7e7      	b.n	8007a34 <__d2b+0x54>
 8007a64:	a801      	add	r0, sp, #4
 8007a66:	f7ff fd61 	bl	800752c <__lo0bits>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	6163      	str	r3, [r4, #20]
 8007a6e:	3020      	adds	r0, #32
 8007a70:	2201      	movs	r2, #1
 8007a72:	e7e5      	b.n	8007a40 <__d2b+0x60>
 8007a74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a7c:	6038      	str	r0, [r7, #0]
 8007a7e:	6918      	ldr	r0, [r3, #16]
 8007a80:	f7ff fd34 	bl	80074ec <__hi0bits>
 8007a84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a88:	e7e2      	b.n	8007a50 <__d2b+0x70>
 8007a8a:	bf00      	nop
 8007a8c:	08009dd2 	.word	0x08009dd2
 8007a90:	08009de3 	.word	0x08009de3

08007a94 <__sfputc_r>:
 8007a94:	6893      	ldr	r3, [r2, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	b410      	push	{r4}
 8007a9c:	6093      	str	r3, [r2, #8]
 8007a9e:	da08      	bge.n	8007ab2 <__sfputc_r+0x1e>
 8007aa0:	6994      	ldr	r4, [r2, #24]
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	db01      	blt.n	8007aaa <__sfputc_r+0x16>
 8007aa6:	290a      	cmp	r1, #10
 8007aa8:	d103      	bne.n	8007ab2 <__sfputc_r+0x1e>
 8007aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aae:	f7fe bc6a 	b.w	8006386 <__swbuf_r>
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	1c58      	adds	r0, r3, #1
 8007ab6:	6010      	str	r0, [r2, #0]
 8007ab8:	7019      	strb	r1, [r3, #0]
 8007aba:	4608      	mov	r0, r1
 8007abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <__sfputs_r>:
 8007ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	18d5      	adds	r5, r2, r3
 8007acc:	42ac      	cmp	r4, r5
 8007ace:	d101      	bne.n	8007ad4 <__sfputs_r+0x12>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e007      	b.n	8007ae4 <__sfputs_r+0x22>
 8007ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad8:	463a      	mov	r2, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffda 	bl	8007a94 <__sfputc_r>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d1f3      	bne.n	8007acc <__sfputs_r+0xa>
 8007ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ae8 <_vfiprintf_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	460d      	mov	r5, r1
 8007aee:	b09d      	sub	sp, #116	; 0x74
 8007af0:	4614      	mov	r4, r2
 8007af2:	4698      	mov	r8, r3
 8007af4:	4606      	mov	r6, r0
 8007af6:	b118      	cbz	r0, 8007b00 <_vfiprintf_r+0x18>
 8007af8:	6a03      	ldr	r3, [r0, #32]
 8007afa:	b90b      	cbnz	r3, 8007b00 <_vfiprintf_r+0x18>
 8007afc:	f7fe fb5c 	bl	80061b8 <__sinit>
 8007b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_vfiprintf_r+0x2a>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_vfiprintf_r+0x2a>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0e:	f7fe fd6d 	bl	80065ec <__retarget_lock_acquire_recursive>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	071b      	lsls	r3, r3, #28
 8007b16:	d501      	bpl.n	8007b1c <_vfiprintf_r+0x34>
 8007b18:	692b      	ldr	r3, [r5, #16]
 8007b1a:	b99b      	cbnz	r3, 8007b44 <_vfiprintf_r+0x5c>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7fe fc6e 	bl	8006400 <__swsetup_r>
 8007b24:	b170      	cbz	r0, 8007b44 <_vfiprintf_r+0x5c>
 8007b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b28:	07dc      	lsls	r4, r3, #31
 8007b2a:	d504      	bpl.n	8007b36 <_vfiprintf_r+0x4e>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	b01d      	add	sp, #116	; 0x74
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	0598      	lsls	r0, r3, #22
 8007b3a:	d4f7      	bmi.n	8007b2c <_vfiprintf_r+0x44>
 8007b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b3e:	f7fe fd56 	bl	80065ee <__retarget_lock_release_recursive>
 8007b42:	e7f3      	b.n	8007b2c <_vfiprintf_r+0x44>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b52:	2330      	movs	r3, #48	; 0x30
 8007b54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d08 <_vfiprintf_r+0x220>
 8007b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5c:	f04f 0901 	mov.w	r9, #1
 8007b60:	4623      	mov	r3, r4
 8007b62:	469a      	mov	sl, r3
 8007b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b68:	b10a      	cbz	r2, 8007b6e <_vfiprintf_r+0x86>
 8007b6a:	2a25      	cmp	r2, #37	; 0x25
 8007b6c:	d1f9      	bne.n	8007b62 <_vfiprintf_r+0x7a>
 8007b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b72:	d00b      	beq.n	8007b8c <_vfiprintf_r+0xa4>
 8007b74:	465b      	mov	r3, fp
 8007b76:	4622      	mov	r2, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ffa1 	bl	8007ac2 <__sfputs_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	f000 80a9 	beq.w	8007cd8 <_vfiprintf_r+0x1f0>
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	445a      	add	r2, fp
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80a1 	beq.w	8007cd8 <_vfiprintf_r+0x1f0>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba0:	f10a 0a01 	add.w	sl, sl, #1
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bac:	931a      	str	r3, [sp, #104]	; 0x68
 8007bae:	4654      	mov	r4, sl
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4854      	ldr	r0, [pc, #336]	; (8007d08 <_vfiprintf_r+0x220>)
 8007bb8:	f7f8 fb0a 	bl	80001d0 <memchr>
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	b9d8      	cbnz	r0, 8007bf8 <_vfiprintf_r+0x110>
 8007bc0:	06d1      	lsls	r1, r2, #27
 8007bc2:	bf44      	itt	mi
 8007bc4:	2320      	movmi	r3, #32
 8007bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bca:	0713      	lsls	r3, r2, #28
 8007bcc:	bf44      	itt	mi
 8007bce:	232b      	movmi	r3, #43	; 0x2b
 8007bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bda:	d015      	beq.n	8007c08 <_vfiprintf_r+0x120>
 8007bdc:	9a07      	ldr	r2, [sp, #28]
 8007bde:	4654      	mov	r4, sl
 8007be0:	2000      	movs	r0, #0
 8007be2:	f04f 0c0a 	mov.w	ip, #10
 8007be6:	4621      	mov	r1, r4
 8007be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bec:	3b30      	subs	r3, #48	; 0x30
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d94d      	bls.n	8007c8e <_vfiprintf_r+0x1a6>
 8007bf2:	b1b0      	cbz	r0, 8007c22 <_vfiprintf_r+0x13a>
 8007bf4:	9207      	str	r2, [sp, #28]
 8007bf6:	e014      	b.n	8007c22 <_vfiprintf_r+0x13a>
 8007bf8:	eba0 0308 	sub.w	r3, r0, r8
 8007bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	46a2      	mov	sl, r4
 8007c06:	e7d2      	b.n	8007bae <_vfiprintf_r+0xc6>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	1d19      	adds	r1, r3, #4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	9103      	str	r1, [sp, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bfbb      	ittet	lt
 8007c14:	425b      	neglt	r3, r3
 8007c16:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1a:	9307      	strge	r3, [sp, #28]
 8007c1c:	9307      	strlt	r3, [sp, #28]
 8007c1e:	bfb8      	it	lt
 8007c20:	9204      	strlt	r2, [sp, #16]
 8007c22:	7823      	ldrb	r3, [r4, #0]
 8007c24:	2b2e      	cmp	r3, #46	; 0x2e
 8007c26:	d10c      	bne.n	8007c42 <_vfiprintf_r+0x15a>
 8007c28:	7863      	ldrb	r3, [r4, #1]
 8007c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2c:	d134      	bne.n	8007c98 <_vfiprintf_r+0x1b0>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfb8      	it	lt
 8007c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3e:	3402      	adds	r4, #2
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d18 <_vfiprintf_r+0x230>
 8007c46:	7821      	ldrb	r1, [r4, #0]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7f8 fac0 	bl	80001d0 <memchr>
 8007c50:	b138      	cbz	r0, 8007c62 <_vfiprintf_r+0x17a>
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	eba0 000a 	sub.w	r0, r0, sl
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	4082      	lsls	r2, r0
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c66:	4829      	ldr	r0, [pc, #164]	; (8007d0c <_vfiprintf_r+0x224>)
 8007c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6c:	2206      	movs	r2, #6
 8007c6e:	f7f8 faaf 	bl	80001d0 <memchr>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d03f      	beq.n	8007cf6 <_vfiprintf_r+0x20e>
 8007c76:	4b26      	ldr	r3, [pc, #152]	; (8007d10 <_vfiprintf_r+0x228>)
 8007c78:	bb1b      	cbnz	r3, 8007cc2 <_vfiprintf_r+0x1da>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	f023 0307 	bic.w	r3, r3, #7
 8007c82:	3308      	adds	r3, #8
 8007c84:	9303      	str	r3, [sp, #12]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	443b      	add	r3, r7
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	e768      	b.n	8007b60 <_vfiprintf_r+0x78>
 8007c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c92:	460c      	mov	r4, r1
 8007c94:	2001      	movs	r0, #1
 8007c96:	e7a6      	b.n	8007be6 <_vfiprintf_r+0xfe>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	3401      	adds	r4, #1
 8007c9c:	9305      	str	r3, [sp, #20]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f04f 0c0a 	mov.w	ip, #10
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007caa:	3a30      	subs	r2, #48	; 0x30
 8007cac:	2a09      	cmp	r2, #9
 8007cae:	d903      	bls.n	8007cb8 <_vfiprintf_r+0x1d0>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0c6      	beq.n	8007c42 <_vfiprintf_r+0x15a>
 8007cb4:	9105      	str	r1, [sp, #20]
 8007cb6:	e7c4      	b.n	8007c42 <_vfiprintf_r+0x15a>
 8007cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7f0      	b.n	8007ca4 <_vfiprintf_r+0x1bc>
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <_vfiprintf_r+0x22c>)
 8007cca:	a904      	add	r1, sp, #16
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7fd fe33 	bl	8005938 <_printf_float>
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	1c78      	adds	r0, r7, #1
 8007cd6:	d1d6      	bne.n	8007c86 <_vfiprintf_r+0x19e>
 8007cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cda:	07d9      	lsls	r1, r3, #31
 8007cdc:	d405      	bmi.n	8007cea <_vfiprintf_r+0x202>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	059a      	lsls	r2, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_vfiprintf_r+0x202>
 8007ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ce6:	f7fe fc82 	bl	80065ee <__retarget_lock_release_recursive>
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	065b      	lsls	r3, r3, #25
 8007cee:	f53f af1d 	bmi.w	8007b2c <_vfiprintf_r+0x44>
 8007cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf4:	e71c      	b.n	8007b30 <_vfiprintf_r+0x48>
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_vfiprintf_r+0x22c>)
 8007cfe:	a904      	add	r1, sp, #16
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7fe f8bd 	bl	8005e80 <_printf_i>
 8007d06:	e7e4      	b.n	8007cd2 <_vfiprintf_r+0x1ea>
 8007d08:	08009f3c 	.word	0x08009f3c
 8007d0c:	08009f46 	.word	0x08009f46
 8007d10:	08005939 	.word	0x08005939
 8007d14:	08007ac3 	.word	0x08007ac3
 8007d18:	08009f42 	.word	0x08009f42

08007d1c <__sflush_r>:
 8007d1c:	898a      	ldrh	r2, [r1, #12]
 8007d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	0710      	lsls	r0, r2, #28
 8007d26:	460c      	mov	r4, r1
 8007d28:	d458      	bmi.n	8007ddc <__sflush_r+0xc0>
 8007d2a:	684b      	ldr	r3, [r1, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc05      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dc02      	bgt.n	8007d3c <__sflush_r+0x20>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d0f9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d48:	682f      	ldr	r7, [r5, #0]
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	d032      	beq.n	8007db6 <__sflush_r+0x9a>
 8007d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	075a      	lsls	r2, r3, #29
 8007d56:	d505      	bpl.n	8007d64 <__sflush_r+0x48>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	1ac0      	subs	r0, r0, r3
 8007d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d5e:	b10b      	cbz	r3, 8007d64 <__sflush_r+0x48>
 8007d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d62:	1ac0      	subs	r0, r0, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	4602      	mov	r2, r0
 8007d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	d106      	bne.n	8007d84 <__sflush_r+0x68>
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	291d      	cmp	r1, #29
 8007d7a:	d82b      	bhi.n	8007dd4 <__sflush_r+0xb8>
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <__sflush_r+0x108>)
 8007d7e:	410a      	asrs	r2, r1
 8007d80:	07d6      	lsls	r6, r2, #31
 8007d82:	d427      	bmi.n	8007dd4 <__sflush_r+0xb8>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	04d9      	lsls	r1, r3, #19
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	d504      	bpl.n	8007d9a <__sflush_r+0x7e>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0x7c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b903      	cbnz	r3, 8007d9a <__sflush_r+0x7e>
 8007d98:	6560      	str	r0, [r4, #84]	; 0x54
 8007d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9c:	602f      	str	r7, [r5, #0]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d0c9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d002      	beq.n	8007db0 <__sflush_r+0x94>
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff faaa 	bl	8007304 <_free_r>
 8007db0:	2000      	movs	r0, #0
 8007db2:	6360      	str	r0, [r4, #52]	; 0x34
 8007db4:	e7c0      	b.n	8007d38 <__sflush_r+0x1c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b0      	blx	r6
 8007dbc:	1c41      	adds	r1, r0, #1
 8007dbe:	d1c8      	bne.n	8007d52 <__sflush_r+0x36>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0c5      	beq.n	8007d52 <__sflush_r+0x36>
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0xb2>
 8007dca:	2b16      	cmp	r3, #22
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0xb6>
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	e7b1      	b.n	8007d36 <__sflush_r+0x1a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	e7ad      	b.n	8007d38 <__sflush_r+0x1c>
 8007ddc:	690f      	ldr	r7, [r1, #16]
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	d0a9      	beq.n	8007d36 <__sflush_r+0x1a>
 8007de2:	0793      	lsls	r3, r2, #30
 8007de4:	680e      	ldr	r6, [r1, #0]
 8007de6:	bf08      	it	eq
 8007de8:	694b      	ldreq	r3, [r1, #20]
 8007dea:	600f      	str	r7, [r1, #0]
 8007dec:	bf18      	it	ne
 8007dee:	2300      	movne	r3, #0
 8007df0:	eba6 0807 	sub.w	r8, r6, r7
 8007df4:	608b      	str	r3, [r1, #8]
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dd9c      	ble.n	8007d36 <__sflush_r+0x1a>
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e00:	4643      	mov	r3, r8
 8007e02:	463a      	mov	r2, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b0      	blx	r6
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	dc06      	bgt.n	8007e1a <__sflush_r+0xfe>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	e78e      	b.n	8007d38 <__sflush_r+0x1c>
 8007e1a:	4407      	add	r7, r0
 8007e1c:	eba8 0800 	sub.w	r8, r8, r0
 8007e20:	e7e9      	b.n	8007df6 <__sflush_r+0xda>
 8007e22:	bf00      	nop
 8007e24:	dfbffffe 	.word	0xdfbffffe

08007e28 <_fflush_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b913      	cbnz	r3, 8007e38 <_fflush_r+0x10>
 8007e32:	2500      	movs	r5, #0
 8007e34:	4628      	mov	r0, r5
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	b118      	cbz	r0, 8007e42 <_fflush_r+0x1a>
 8007e3a:	6a03      	ldr	r3, [r0, #32]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <_fflush_r+0x1a>
 8007e3e:	f7fe f9bb 	bl	80061b8 <__sinit>
 8007e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f3      	beq.n	8007e32 <_fflush_r+0xa>
 8007e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e4c:	07d0      	lsls	r0, r2, #31
 8007e4e:	d404      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e50:	0599      	lsls	r1, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_fflush_r+0x32>
 8007e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e56:	f7fe fbc9 	bl	80065ec <__retarget_lock_acquire_recursive>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f7ff ff5d 	bl	8007d1c <__sflush_r>
 8007e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	4605      	mov	r5, r0
 8007e68:	d4e4      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	059b      	lsls	r3, r3, #22
 8007e6e:	d4e1      	bmi.n	8007e34 <_fflush_r+0xc>
 8007e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e72:	f7fe fbbc 	bl	80065ee <__retarget_lock_release_recursive>
 8007e76:	e7dd      	b.n	8007e34 <_fflush_r+0xc>

08007e78 <__swhatbuf_r>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	2900      	cmp	r1, #0
 8007e82:	b096      	sub	sp, #88	; 0x58
 8007e84:	4615      	mov	r5, r2
 8007e86:	461e      	mov	r6, r3
 8007e88:	da0d      	bge.n	8007ea6 <__swhatbuf_r+0x2e>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e90:	f04f 0100 	mov.w	r1, #0
 8007e94:	bf0c      	ite	eq
 8007e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e9a:	2340      	movne	r3, #64	; 0x40
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	6031      	str	r1, [r6, #0]
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	b016      	add	sp, #88	; 0x58
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f000 f848 	bl	8007f3c <_fstat_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	dbec      	blt.n	8007e8a <__swhatbuf_r+0x12>
 8007eb0:	9901      	ldr	r1, [sp, #4]
 8007eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007eba:	4259      	negs	r1, r3
 8007ebc:	4159      	adcs	r1, r3
 8007ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec2:	e7eb      	b.n	8007e9c <__swhatbuf_r+0x24>

08007ec4 <__smakebuf_r>:
 8007ec4:	898b      	ldrh	r3, [r1, #12]
 8007ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec8:	079d      	lsls	r5, r3, #30
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	d507      	bpl.n	8007ee0 <__smakebuf_r+0x1c>
 8007ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	6163      	str	r3, [r4, #20]
 8007edc:	b002      	add	sp, #8
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	ab01      	add	r3, sp, #4
 8007ee2:	466a      	mov	r2, sp
 8007ee4:	f7ff ffc8 	bl	8007e78 <__swhatbuf_r>
 8007ee8:	9900      	ldr	r1, [sp, #0]
 8007eea:	4605      	mov	r5, r0
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7fd fbf7 	bl	80056e0 <_malloc_r>
 8007ef2:	b948      	cbnz	r0, 8007f08 <__smakebuf_r+0x44>
 8007ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef8:	059a      	lsls	r2, r3, #22
 8007efa:	d4ef      	bmi.n	8007edc <__smakebuf_r+0x18>
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	f043 0302 	orr.w	r3, r3, #2
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	e7e3      	b.n	8007ed0 <__smakebuf_r+0xc>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	6020      	str	r0, [r4, #0]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	6163      	str	r3, [r4, #20]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	6120      	str	r0, [r4, #16]
 8007f1a:	b15b      	cbz	r3, 8007f34 <__smakebuf_r+0x70>
 8007f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f81d 	bl	8007f60 <_isatty_r>
 8007f26:	b128      	cbz	r0, 8007f34 <__smakebuf_r+0x70>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	431d      	orrs	r5, r3
 8007f38:	81a5      	strh	r5, [r4, #12]
 8007f3a:	e7cf      	b.n	8007edc <__smakebuf_r+0x18>

08007f3c <_fstat_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	; (8007f5c <_fstat_r+0x20>)
 8007f40:	2300      	movs	r3, #0
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	4611      	mov	r1, r2
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	f000 f9f1 	bl	8008330 <_fstat>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d102      	bne.n	8007f58 <_fstat_r+0x1c>
 8007f52:	682b      	ldr	r3, [r5, #0]
 8007f54:	b103      	cbz	r3, 8007f58 <_fstat_r+0x1c>
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	bd38      	pop	{r3, r4, r5, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000b64 	.word	0x20000b64

08007f60 <_isatty_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_isatty_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f000 f9f0 	bl	8008350 <_isatty>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_isatty_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_isatty_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000b64 	.word	0x20000b64

08007f80 <__assert_func>:
 8007f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f82:	4614      	mov	r4, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <__assert_func+0x2c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	68d8      	ldr	r0, [r3, #12]
 8007f8e:	b14c      	cbz	r4, 8007fa4 <__assert_func+0x24>
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <__assert_func+0x30>)
 8007f92:	9100      	str	r1, [sp, #0]
 8007f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f98:	4906      	ldr	r1, [pc, #24]	; (8007fb4 <__assert_func+0x34>)
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f000 f82e 	bl	8007ffc <fiprintf>
 8007fa0:	f000 f83e 	bl	8008020 <abort>
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <__assert_func+0x38>)
 8007fa6:	461c      	mov	r4, r3
 8007fa8:	e7f3      	b.n	8007f92 <__assert_func+0x12>
 8007faa:	bf00      	nop
 8007fac:	200005b0 	.word	0x200005b0
 8007fb0:	08009f57 	.word	0x08009f57
 8007fb4:	08009f64 	.word	0x08009f64
 8007fb8:	08008452 	.word	0x08008452

08007fbc <__ascii_mbtowc>:
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	b901      	cbnz	r1, 8007fc2 <__ascii_mbtowc+0x6>
 8007fc0:	a901      	add	r1, sp, #4
 8007fc2:	b142      	cbz	r2, 8007fd6 <__ascii_mbtowc+0x1a>
 8007fc4:	b14b      	cbz	r3, 8007fda <__ascii_mbtowc+0x1e>
 8007fc6:	7813      	ldrb	r3, [r2, #0]
 8007fc8:	600b      	str	r3, [r1, #0]
 8007fca:	7812      	ldrb	r2, [r2, #0]
 8007fcc:	1e10      	subs	r0, r2, #0
 8007fce:	bf18      	it	ne
 8007fd0:	2001      	movne	r0, #1
 8007fd2:	b002      	add	sp, #8
 8007fd4:	4770      	bx	lr
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	e7fb      	b.n	8007fd2 <__ascii_mbtowc+0x16>
 8007fda:	f06f 0001 	mvn.w	r0, #1
 8007fde:	e7f8      	b.n	8007fd2 <__ascii_mbtowc+0x16>

08007fe0 <__ascii_wctomb>:
 8007fe0:	b149      	cbz	r1, 8007ff6 <__ascii_wctomb+0x16>
 8007fe2:	2aff      	cmp	r2, #255	; 0xff
 8007fe4:	bf85      	ittet	hi
 8007fe6:	238a      	movhi	r3, #138	; 0x8a
 8007fe8:	6003      	strhi	r3, [r0, #0]
 8007fea:	700a      	strbls	r2, [r1, #0]
 8007fec:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ff0:	bf98      	it	ls
 8007ff2:	2001      	movls	r0, #1
 8007ff4:	4770      	bx	lr
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4770      	bx	lr
	...

08007ffc <fiprintf>:
 8007ffc:	b40e      	push	{r1, r2, r3}
 8007ffe:	b503      	push	{r0, r1, lr}
 8008000:	4601      	mov	r1, r0
 8008002:	ab03      	add	r3, sp, #12
 8008004:	4805      	ldr	r0, [pc, #20]	; (800801c <fiprintf+0x20>)
 8008006:	f853 2b04 	ldr.w	r2, [r3], #4
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	f7ff fd6b 	bl	8007ae8 <_vfiprintf_r>
 8008012:	b002      	add	sp, #8
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	200005b0 	.word	0x200005b0

08008020 <abort>:
 8008020:	b508      	push	{r3, lr}
 8008022:	2006      	movs	r0, #6
 8008024:	f000 f82c 	bl	8008080 <raise>
 8008028:	2001      	movs	r0, #1
 800802a:	f000 f9b1 	bl	8008390 <_exit>

0800802e <_raise_r>:
 800802e:	291f      	cmp	r1, #31
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	d904      	bls.n	8008042 <_raise_r+0x14>
 8008038:	2316      	movs	r3, #22
 800803a:	6003      	str	r3, [r0, #0]
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008044:	b112      	cbz	r2, 800804c <_raise_r+0x1e>
 8008046:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800804a:	b94b      	cbnz	r3, 8008060 <_raise_r+0x32>
 800804c:	4620      	mov	r0, r4
 800804e:	f000 f831 	bl	80080b4 <_getpid_r>
 8008052:	462a      	mov	r2, r5
 8008054:	4601      	mov	r1, r0
 8008056:	4620      	mov	r0, r4
 8008058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805c:	f000 b818 	b.w	8008090 <_kill_r>
 8008060:	2b01      	cmp	r3, #1
 8008062:	d00a      	beq.n	800807a <_raise_r+0x4c>
 8008064:	1c59      	adds	r1, r3, #1
 8008066:	d103      	bne.n	8008070 <_raise_r+0x42>
 8008068:	2316      	movs	r3, #22
 800806a:	6003      	str	r3, [r0, #0]
 800806c:	2001      	movs	r0, #1
 800806e:	e7e7      	b.n	8008040 <_raise_r+0x12>
 8008070:	2400      	movs	r4, #0
 8008072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008076:	4628      	mov	r0, r5
 8008078:	4798      	blx	r3
 800807a:	2000      	movs	r0, #0
 800807c:	e7e0      	b.n	8008040 <_raise_r+0x12>
	...

08008080 <raise>:
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <raise+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f7ff bfd2 	b.w	800802e <_raise_r>
 800808a:	bf00      	nop
 800808c:	200005b0 	.word	0x200005b0

08008090 <_kill_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	; (80080b0 <_kill_r+0x20>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	4611      	mov	r1, r2
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	f000 f95f 	bl	8008360 <_kill>
 80080a2:	1c43      	adds	r3, r0, #1
 80080a4:	d102      	bne.n	80080ac <_kill_r+0x1c>
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	b103      	cbz	r3, 80080ac <_kill_r+0x1c>
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	bd38      	pop	{r3, r4, r5, pc}
 80080ae:	bf00      	nop
 80080b0:	20000b64 	.word	0x20000b64

080080b4 <_getpid_r>:
 80080b4:	f000 b944 	b.w	8008340 <_getpid>

080080b8 <expf>:
 80080b8:	b508      	push	{r3, lr}
 80080ba:	ed2d 8b02 	vpush	{d8}
 80080be:	eef0 8a40 	vmov.f32	s17, s0
 80080c2:	f000 f85f 	bl	8008184 <__ieee754_expf>
 80080c6:	eeb0 8a40 	vmov.f32	s16, s0
 80080ca:	eeb0 0a68 	vmov.f32	s0, s17
 80080ce:	f000 f829 	bl	8008124 <finitef>
 80080d2:	b160      	cbz	r0, 80080ee <expf+0x36>
 80080d4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008114 <expf+0x5c>
 80080d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	dd0a      	ble.n	80080f8 <expf+0x40>
 80080e2:	f7fe fa59 	bl	8006598 <__errno>
 80080e6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008118 <expf+0x60>
 80080ea:	2322      	movs	r3, #34	; 0x22
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	eeb0 0a48 	vmov.f32	s0, s16
 80080f2:	ecbd 8b02 	vpop	{d8}
 80080f6:	bd08      	pop	{r3, pc}
 80080f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800811c <expf+0x64>
 80080fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	d5f3      	bpl.n	80080ee <expf+0x36>
 8008106:	f7fe fa47 	bl	8006598 <__errno>
 800810a:	2322      	movs	r3, #34	; 0x22
 800810c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008120 <expf+0x68>
 8008110:	6003      	str	r3, [r0, #0]
 8008112:	e7ec      	b.n	80080ee <expf+0x36>
 8008114:	42b17217 	.word	0x42b17217
 8008118:	7f800000 	.word	0x7f800000
 800811c:	c2cff1b5 	.word	0xc2cff1b5
 8008120:	00000000 	.word	0x00000000

08008124 <finitef>:
 8008124:	b082      	sub	sp, #8
 8008126:	ed8d 0a01 	vstr	s0, [sp, #4]
 800812a:	9801      	ldr	r0, [sp, #4]
 800812c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008130:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008134:	bfac      	ite	ge
 8008136:	2000      	movge	r0, #0
 8008138:	2001      	movlt	r0, #1
 800813a:	b002      	add	sp, #8
 800813c:	4770      	bx	lr

0800813e <with_errnof>:
 800813e:	b513      	push	{r0, r1, r4, lr}
 8008140:	4604      	mov	r4, r0
 8008142:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008146:	f7fe fa27 	bl	8006598 <__errno>
 800814a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800814e:	6004      	str	r4, [r0, #0]
 8008150:	b002      	add	sp, #8
 8008152:	bd10      	pop	{r4, pc}

08008154 <xflowf>:
 8008154:	b130      	cbz	r0, 8008164 <xflowf+0x10>
 8008156:	eef1 7a40 	vneg.f32	s15, s0
 800815a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800815e:	2022      	movs	r0, #34	; 0x22
 8008160:	f7ff bfed 	b.w	800813e <with_errnof>
 8008164:	eef0 7a40 	vmov.f32	s15, s0
 8008168:	e7f7      	b.n	800815a <xflowf+0x6>
	...

0800816c <__math_uflowf>:
 800816c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008174 <__math_uflowf+0x8>
 8008170:	f7ff bff0 	b.w	8008154 <xflowf>
 8008174:	10000000 	.word	0x10000000

08008178 <__math_oflowf>:
 8008178:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008180 <__math_oflowf+0x8>
 800817c:	f7ff bfea 	b.w	8008154 <xflowf>
 8008180:	70000000 	.word	0x70000000

08008184 <__ieee754_expf>:
 8008184:	ee10 2a10 	vmov	r2, s0
 8008188:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800818c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008190:	d902      	bls.n	8008198 <__ieee754_expf+0x14>
 8008192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008196:	4770      	bx	lr
 8008198:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800819c:	d106      	bne.n	80081ac <__ieee754_expf+0x28>
 800819e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80082d8 <__ieee754_expf+0x154>
 80081a2:	2900      	cmp	r1, #0
 80081a4:	bf18      	it	ne
 80081a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80081aa:	4770      	bx	lr
 80081ac:	484b      	ldr	r0, [pc, #300]	; (80082dc <__ieee754_expf+0x158>)
 80081ae:	4282      	cmp	r2, r0
 80081b0:	dd02      	ble.n	80081b8 <__ieee754_expf+0x34>
 80081b2:	2000      	movs	r0, #0
 80081b4:	f7ff bfe0 	b.w	8008178 <__math_oflowf>
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	da05      	bge.n	80081c8 <__ieee754_expf+0x44>
 80081bc:	4a48      	ldr	r2, [pc, #288]	; (80082e0 <__ieee754_expf+0x15c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d902      	bls.n	80081c8 <__ieee754_expf+0x44>
 80081c2:	2000      	movs	r0, #0
 80081c4:	f7ff bfd2 	b.w	800816c <__math_uflowf>
 80081c8:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <__ieee754_expf+0x160>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80081d0:	d952      	bls.n	8008278 <__ieee754_expf+0xf4>
 80081d2:	4a45      	ldr	r2, [pc, #276]	; (80082e8 <__ieee754_expf+0x164>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80081da:	d834      	bhi.n	8008246 <__ieee754_expf+0xc2>
 80081dc:	4b43      	ldr	r3, [pc, #268]	; (80082ec <__ieee754_expf+0x168>)
 80081de:	4413      	add	r3, r2
 80081e0:	ed93 7a00 	vldr	s14, [r3]
 80081e4:	4b42      	ldr	r3, [pc, #264]	; (80082f0 <__ieee754_expf+0x16c>)
 80081e6:	4413      	add	r3, r2
 80081e8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80081ec:	f1c1 0201 	rsb	r2, r1, #1
 80081f0:	edd3 7a00 	vldr	s15, [r3]
 80081f4:	1a52      	subs	r2, r2, r1
 80081f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80081fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80081fe:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80082f4 <__ieee754_expf+0x170>
 8008202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082f8 <__ieee754_expf+0x174>
 8008206:	eee6 6a05 	vfma.f32	s13, s12, s10
 800820a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80082fc <__ieee754_expf+0x178>
 800820e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008212:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008300 <__ieee754_expf+0x17c>
 8008216:	eee5 6a06 	vfma.f32	s13, s10, s12
 800821a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8008304 <__ieee754_expf+0x180>
 800821e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8008222:	eef0 6a40 	vmov.f32	s13, s0
 8008226:	eee5 6a46 	vfms.f32	s13, s10, s12
 800822a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800822e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8008232:	bb92      	cbnz	r2, 800829a <__ieee754_expf+0x116>
 8008234:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008238:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800823c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008240:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8008244:	4770      	bx	lr
 8008246:	4b30      	ldr	r3, [pc, #192]	; (8008308 <__ieee754_expf+0x184>)
 8008248:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800830c <__ieee754_expf+0x188>
 800824c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008310 <__ieee754_expf+0x18c>
 8008250:	4413      	add	r3, r2
 8008252:	edd3 7a00 	vldr	s15, [r3]
 8008256:	eee0 7a07 	vfma.f32	s15, s0, s14
 800825a:	eeb0 7a40 	vmov.f32	s14, s0
 800825e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008262:	ee17 2a90 	vmov	r2, s15
 8008266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800826a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800826e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008314 <__ieee754_expf+0x190>
 8008272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008276:	e7be      	b.n	80081f6 <__ieee754_expf+0x72>
 8008278:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800827c:	d20b      	bcs.n	8008296 <__ieee754_expf+0x112>
 800827e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008318 <__ieee754_expf+0x194>
 8008282:	ee70 6a26 	vadd.f32	s13, s0, s13
 8008286:	eef4 6ae5 	vcmpe.f32	s13, s11
 800828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828e:	dd02      	ble.n	8008296 <__ieee754_expf+0x112>
 8008290:	ee30 0a25 	vadd.f32	s0, s0, s11
 8008294:	4770      	bx	lr
 8008296:	2200      	movs	r2, #0
 8008298:	e7af      	b.n	80081fa <__ieee754_expf+0x76>
 800829a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800829e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80082a2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80082a6:	bfb8      	it	lt
 80082a8:	3264      	addlt	r2, #100	; 0x64
 80082aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082b2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80082b6:	ee17 3a90 	vmov	r3, s15
 80082ba:	bfab      	itete	ge
 80082bc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80082c0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80082c4:	ee00 3a10 	vmovge	s0, r3
 80082c8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800831c <__ieee754_expf+0x198>
 80082cc:	bfbc      	itt	lt
 80082ce:	ee00 3a10 	vmovlt	s0, r3
 80082d2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80082d6:	4770      	bx	lr
 80082d8:	00000000 	.word	0x00000000
 80082dc:	42b17217 	.word	0x42b17217
 80082e0:	42cff1b5 	.word	0x42cff1b5
 80082e4:	3eb17218 	.word	0x3eb17218
 80082e8:	3f851591 	.word	0x3f851591
 80082ec:	0800a09c 	.word	0x0800a09c
 80082f0:	0800a0a4 	.word	0x0800a0a4
 80082f4:	3331bb4c 	.word	0x3331bb4c
 80082f8:	b5ddea0e 	.word	0xb5ddea0e
 80082fc:	388ab355 	.word	0x388ab355
 8008300:	bb360b61 	.word	0xbb360b61
 8008304:	3e2aaaab 	.word	0x3e2aaaab
 8008308:	0800a094 	.word	0x0800a094
 800830c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008310:	3f317180 	.word	0x3f317180
 8008314:	3717f7d1 	.word	0x3717f7d1
 8008318:	7149f2ca 	.word	0x7149f2ca
 800831c:	0d800000 	.word	0x0d800000

08008320 <_close>:
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <_close+0xc>)
 8008322:	2258      	movs	r2, #88	; 0x58
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	4770      	bx	lr
 800832c:	20000b64 	.word	0x20000b64

08008330 <_fstat>:
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <_fstat+0xc>)
 8008332:	2258      	movs	r2, #88	; 0x58
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	4770      	bx	lr
 800833c:	20000b64 	.word	0x20000b64

08008340 <_getpid>:
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <_getpid+0xc>)
 8008342:	2258      	movs	r2, #88	; 0x58
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f04f 30ff 	mov.w	r0, #4294967295
 800834a:	4770      	bx	lr
 800834c:	20000b64 	.word	0x20000b64

08008350 <_isatty>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <_isatty+0xc>)
 8008352:	2258      	movs	r2, #88	; 0x58
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	2000      	movs	r0, #0
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000b64 	.word	0x20000b64

08008360 <_kill>:
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <_kill+0xc>)
 8008362:	2258      	movs	r2, #88	; 0x58
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	4770      	bx	lr
 800836c:	20000b64 	.word	0x20000b64

08008370 <_lseek>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <_lseek+0xc>)
 8008372:	2258      	movs	r2, #88	; 0x58
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	4770      	bx	lr
 800837c:	20000b64 	.word	0x20000b64

08008380 <_read>:
 8008380:	4b02      	ldr	r3, [pc, #8]	; (800838c <_read+0xc>)
 8008382:	2258      	movs	r2, #88	; 0x58
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	4770      	bx	lr
 800838c:	20000b64 	.word	0x20000b64

08008390 <_exit>:
 8008390:	e7fe      	b.n	8008390 <_exit>
	...

08008394 <_init>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr

080083a0 <_fini>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr
