
MEMSMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080077b8  080077b8  000177b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b74  08007b74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b74  08007b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b7c  08007b7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001d4  08007d58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007d58  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2b1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228c  00000000  00000000  0002f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e5  00000000  00000000  00032478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273bf  00000000  00000000  00032e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0ef  00000000  00000000  0005a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed69a  00000000  00000000  0006930b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044d4  00000000  00000000  001569a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077a0 	.word	0x080077a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080077a0 	.word	0x080077a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fc56 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f809 	bl	8000ec2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f90c 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb4:	f000 f8ec 	bl	8001090 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eb8:	f000 f8ba 	bl	8001030 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8000ebc:	f000 f852 	bl	8000f64 <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x1c>

08000ec2 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b096      	sub	sp, #88	; 0x58
 8000ec6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2244      	movs	r2, #68	; 0x44
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fd16 	bl	8005902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000ee4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ee8:	f001 fba6 	bl	8002638 <HAL_PWREx_ControlVoltageScaling>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x34>
    Error_Handler();
 8000ef2:	f000 f967 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f10:	230a      	movs	r3, #10
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f14:	2307      	movs	r3, #7
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fbdd 	bl	80026e4 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x72>
    Error_Handler();
 8000f30:	f000 f948 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	603b      	str	r3, [r7, #0]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 ffa5 	bl	8002e9c <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x9a>
    Error_Handler();
 8000f58:	f000 f934 	bl	80011c4 <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3758      	adds	r7, #88	; 0x58
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <MX_DFSDM1_Init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f82:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000f86:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK) {
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8000f96:	f000 fe2d 	bl	8001bf4 <HAL_DFSDM_FilterInit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DFSDM1_Init+0x40>
    Error_Handler();
 8000fa0:	f000 f910 	bl	80011c4 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <MX_DFSDM1_Init+0xc4>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection =
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
      DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel3.Init.OutputClock.Divider = 32;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fb8:	2220      	movs	r2, #32
 8000fba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock =
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	621a      	str	r2, [r3, #32]
      DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x06;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000fee:	2206      	movs	r2, #6
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK) {
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_DFSDM1_Init+0xc0>)
 8000ff4:	f000 fd3e 	bl	8001a74 <HAL_DFSDM_ChannelInit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_DFSDM1_Init+0x9e>
    Error_Handler();
 8000ffe:	f000 f8e1 	bl	80011c4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_3,
 8001002:	2201      	movs	r2, #1
 8001004:	4909      	ldr	r1, [pc, #36]	; (800102c <MX_DFSDM1_Init+0xc8>)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_DFSDM1_Init+0xb8>)
 8001008:	f000 fece 	bl	8001da8 <HAL_DFSDM_FilterConfigRegChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_DFSDM1_Init+0xb2>
      DFSDM_CONTINUOUS_CONV_ON) != HAL_OK) {
    Error_Handler();
 8001012:	f000 f8d7 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f0 	.word	0x200001f0
 8001020:	40016100 	.word	0x40016100
 8001024:	20000244 	.word	0x20000244
 8001028:	40016060 	.word	0x40016060
 800102c:	00030008 	.word	0x00030008

08001030 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART2_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001074:	f002 fdf2 	bl	8003c5c <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x52>
    Error_Handler();
 800107e:	f000 f8a1 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002c4 	.word	0x200002c4
 800108c:	40004400 	.word	0x40004400

08001090 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_DMA_Init+0x38>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <MX_DMA_Init+0x38>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	; 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_DMA_Init+0x38>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200e      	movs	r0, #14
 80010b4:	f000 fca7 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010b8:	200e      	movs	r0, #14
 80010ba:	f000 fcc0 	bl	8001a3e <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_GPIO_Init+0xc4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_GPIO_Init+0xc4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_GPIO_Init+0xc4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f001 fa4f 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0xc8>)
 8001166:	f001 f897 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116a:	2320      	movs	r3, #32
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 f888 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *pbuf, int len) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) pbuf, len, 1000);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <_write+0x28>)
 80011b0:	f002 fda2 	bl	8003cf8 <HAL_UART_Transmit>
  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002c4 	.word	0x200002c4

080011c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	; 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ac      	sub	sp, #176	; 0xb0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2288      	movs	r2, #136	; 0x88
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fb62 	bl	8005902 <memset>
  if(DFSDM1_Init == 0)
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_DFSDM_FilterMspInit+0x138>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d14a      	bne.n	80012dc <HAL_DFSDM_FilterMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f002 f844 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff ffaf 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <HAL_DFSDM_FilterMspInit+0x13c>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001270:	4b38      	ldr	r3, [pc, #224]	; (8001354 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001278:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127c:	4a36      	ldr	r2, [pc, #216]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 800127e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001282:	6613      	str	r3, [r2, #96]	; 0x60
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_DFSDM_FilterMspInit+0x140>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80012a8:	2384      	movs	r3, #132	; 0x84
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012c0:	2306      	movs	r3, #6
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <HAL_DFSDM_FilterMspInit+0x144>)
 80012ce:	f000 ffe3 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_DFSDM_FilterMspInit+0x138>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_DFSDM_FilterMspInit+0x138>)
 80012da:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_DFSDM_FilterMspInit+0x148>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d130      	bne.n	8001348 <HAL_DFSDM_FilterMspInit+0x130>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_DFSDM_FilterMspInit+0x150>)
 80012ea:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 800130e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001312:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001316:	2220      	movs	r2, #32
 8001318:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001322:	f000 fdd3 	bl	8001ecc <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_DFSDM_FilterMspInit+0x118>
    {
      Error_Handler();
 800132c:	f7ff ff4a 	bl	80011c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001348:	bf00      	nop
 800134a:	37b0      	adds	r7, #176	; 0xb0
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000350 	.word	0x20000350
 8001354:	2000034c 	.word	0x2000034c
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800
 8001360:	40016100 	.word	0x40016100
 8001364:	2000027c 	.word	0x2000027c
 8001368:	40020044 	.word	0x40020044

0800136c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ac      	sub	sp, #176	; 0xb0
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2288      	movs	r2, #136	; 0x88
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fab8 	bl	8005902 <memset>
  if(DFSDM1_Init == 0)
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d14a      	bne.n	8001430 <HAL_DFSDM_ChannelMspInit+0xc4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 ff9a 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80013b6:	f7ff ff05 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80013c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10b      	bne.n	80013e4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6613      	str	r3, [r2, #96]	; 0x60
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80013fc:	2384      	movs	r3, #132	; 0x84
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001414:	2306      	movs	r3, #6
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001422:	f000 ff39 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a02      	ldr	r2, [pc, #8]	; (8001438 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800142e:	6013      	str	r3, [r2, #0]
  }

}
 8001430:	bf00      	nop
 8001432:	37b0      	adds	r7, #176	; 0xb0
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000350 	.word	0x20000350
 800143c:	2000034c 	.word	0x2000034c
 8001440:	40021000 	.word	0x40021000
 8001444:	48000800 	.word	0x48000800

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ac      	sub	sp, #176	; 0xb0
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2288      	movs	r2, #136	; 0x88
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fa4a 	bl	8005902 <memset>
  if(huart->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_UART_MspInit+0xc0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d143      	bne.n	8001500 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4618      	mov	r0, r3
 8001486:	f001 ff2d 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001490:	f7ff fe98 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_UART_MspInit+0xc4>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_UART_MspInit+0xc4>)
 800149a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_UART_MspInit+0xc4>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0xc4>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_UART_MspInit+0xc4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0xc4>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014c4:	230c      	movs	r3, #12
 80014c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014dc:	2307      	movs	r3, #7
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f000 fed4 	bl	8002298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2026      	movs	r0, #38	; 0x26
 80014f6:	f000 fa86 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014fa:	2026      	movs	r0, #38	; 0x26
 80014fc:	f000 fa9f 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	37b0      	adds	r7, #176	; 0xb0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40004400 	.word	0x40004400
 800150c:	40021000 	.word	0x40021000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f958 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA1_Channel4_IRQHandler+0x10>)
 800156a:	f000 fde6 	bl	800213a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000027c 	.word	0x2000027c

08001578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART2_IRQHandler+0x10>)
 800157e:	f002 fc45 	bl	8003e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002c4 	.word	0x200002c4

0800158c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_kill>:

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015a6:	f004 f9ff 	bl	80059a8 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2216      	movs	r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
  return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
  }

  return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:
  }
  return len;
}

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f004 f980 	bl	80059a8 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20018000 	.word	0x20018000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	20000354 	.word	0x20000354
 80016dc:	200004d0 	.word	0x200004d0

080016e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001708:	f7ff ffea 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <LoopForever+0x6>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	; (8001744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <LoopForever+0xe>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	; (8001750 <LoopForever+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f004 f93f 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001736:	f7ff fbb5 	bl	8000ea4 <main>

0800173a <LoopForever>:

LoopForever:
    b LoopForever
 800173a:	e7fe      	b.n	800173a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800173c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001748:	08007b84 	.word	0x08007b84
  ldr r2, =_sbss
 800174c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001750:	200004cc 	.word	0x200004cc

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>
	...

08001758 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_Init+0x3c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_Init+0x3c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f000 f93e 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f80f 	bl	8001798 <HAL_InitTick>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	e001      	b.n	800178a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001786:	f7ff fd23 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178a:	79fb      	ldrb	r3, [r7, #7]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_InitTick+0x6c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_InitTick+0x70>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f949 	bl	8001a5a <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d809      	bhi.n	80017e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f913 	bl	8001a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_InitTick+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e001      	b.n	80017f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	20000358 	.word	0x20000358

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000358 	.word	0x20000358

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0ac      	b.n	8001be0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f9d2 	bl	8001e34 <DFSDM_GetChannelFromInstance>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_DFSDM_ChannelInit+0x174>)
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e09f      	b.n	8001be0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fc63 	bl	800136c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <HAL_DFSDM_ChannelInit+0x178>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a4f      	ldr	r2, [pc, #316]	; (8001bec <HAL_DFSDM_ChannelInit+0x178>)
 8001aae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_DFSDM_ChannelInit+0x178>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d125      	bne.n	8001b04 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ab8:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001abe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ac2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4948      	ldr	r1, [pc, #288]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001adc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001ae6:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	493f      	ldr	r1, [pc, #252]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b02:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b12:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b22:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b28:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020f 	bic.w	r2, r2, #15
 8001b40:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b68:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f002 0207 	and.w	r2, r2, #7
 8001b94:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f930 	bl	8001e34 <DFSDM_GetChannelFromInstance>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4904      	ldr	r1, [pc, #16]	; (8001be8 <HAL_DFSDM_ChannelInit+0x174>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000360 	.word	0x20000360
 8001bec:	2000035c 	.word	0x2000035c
 8001bf0:	40016000 	.word	0x40016000

08001bf4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0ca      	b.n	8001d9c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a66      	ldr	r2, [pc, #408]	; (8001da4 <HAL_DFSDM_FilterInit+0x1b0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d003      	beq.n	8001c20 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0bb      	b.n	8001d9c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff faeb 	bl	8001218 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001c50:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7a5b      	ldrb	r3, [r3, #9]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d108      	bne.n	8001c96 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e007      	b.n	8001ca6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001cb4:	f023 0308 	bic.w	r3, r3, #8
 8001cb8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7c1b      	ldrb	r3, [r3, #16]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0210 	orr.w	r2, r2, #16
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0210 	bic.w	r2, r2, #16
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7c5b      	ldrb	r3, [r3, #17]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0220 	bic.w	r2, r2, #32
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001d36:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001d3a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6959      	ldr	r1, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d4e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d56:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7c1a      	ldrb	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40016100 	.word	0x40016100

08001da8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d02e      	beq.n	8001e20 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001dc8:	2bff      	cmp	r3, #255	; 0xff
 8001dca:	d029      	beq.n	8001e20 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10d      	bne.n	8001e02 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e00a      	b.n	8001e18 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1e:	e001      	b.n	8001e24 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e02b      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <DFSDM_GetChannelFromInstance+0x80>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d102      	bne.n	8001e58 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e024      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <DFSDM_GetChannelFromInstance+0x84>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d102      	bne.n	8001e66 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e01d      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <DFSDM_GetChannelFromInstance+0x88>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d102      	bne.n	8001e74 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e016      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d102      	bne.n	8001e82 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e00f      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <DFSDM_GetChannelFromInstance+0x90>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d102      	bne.n	8001e90 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e008      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <DFSDM_GetChannelFromInstance+0x94>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d102      	bne.n	8001e9e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e001      	b.n	8001ea2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40016000 	.word	0x40016000
 8001eb4:	40016020 	.word	0x40016020
 8001eb8:	40016040 	.word	0x40016040
 8001ebc:	40016080 	.word	0x40016080
 8001ec0:	400160a0 	.word	0x400160a0
 8001ec4:	400160c0 	.word	0x400160c0
 8001ec8:	400160e0 	.word	0x400160e0

08001ecc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e098      	b.n	8002010 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_DMA_Init+0x150>)
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d80f      	bhi.n	8001f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_DMA_Init+0x154>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <HAL_DMA_Init+0x158>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_DMA_Init+0x15c>)
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
 8001f08:	e00e      	b.n	8001f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_DMA_Init+0x160>)
 8001f12:	4413      	add	r3, r2
 8001f14:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_DMA_Init+0x158>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	009a      	lsls	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_DMA_Init+0x164>)
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f82:	d039      	beq.n	8001ff8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_DMA_Init+0x15c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_DMA_Init+0x168>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 031c 	and.w	r3, r3, #28
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4924      	ldr	r1, [pc, #144]	; (8002034 <HAL_DMA_Init+0x168>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_DMA_Init+0x168>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f003 031c 	and.w	r3, r3, #28
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	491d      	ldr	r1, [pc, #116]	; (8002034 <HAL_DMA_Init+0x168>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
 8001fc2:	e019      	b.n	8001ff8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_DMA_Init+0x16c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 031c 	and.w	r3, r3, #28
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4917      	ldr	r1, [pc, #92]	; (8002038 <HAL_DMA_Init+0x16c>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_DMA_Init+0x16c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 031c 	and.w	r3, r3, #28
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	4911      	ldr	r1, [pc, #68]	; (8002038 <HAL_DMA_Init+0x16c>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40020407 	.word	0x40020407
 8002020:	bffdfff8 	.word	0xbffdfff8
 8002024:	cccccccd 	.word	0xcccccccd
 8002028:	40020000 	.word	0x40020000
 800202c:	bffdfbf8 	.word	0xbffdfbf8
 8002030:	40020400 	.word	0x40020400
 8002034:	400200a8 	.word	0x400200a8
 8002038:	400204a8 	.word	0x400204a8

0800203c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e022      	b.n	80020ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020e 	bic.w	r2, r2, #14
 8002074:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 021c 	and.w	r2, r3, #28
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d005      	beq.n	80020dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e029      	b.n	8002130 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020e 	bic.w	r2, r2, #14
 80020ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 021c 	and.w	r2, r3, #28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
    }
  }
  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 031c 	and.w	r3, r3, #28
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d026      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x7a>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d021      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0204 	bic.w	r2, r2, #4
 800218c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f003 021c 	and.w	r2, r3, #28
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2104      	movs	r1, #4
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d071      	beq.n	800228e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021b2:	e06c      	b.n	800228e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f003 031c 	and.w	r3, r3, #28
 80021bc:	2202      	movs	r2, #2
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02e      	beq.n	8002226 <HAL_DMA_IRQHandler+0xec>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d029      	beq.n	8002226 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 020a 	bic.w	r2, r2, #10
 80021ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f003 021c 	and.w	r2, r3, #28
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2102      	movs	r1, #2
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d038      	beq.n	800228e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002224:	e033      	b.n	800228e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f003 031c 	and.w	r3, r3, #28
 800222e:	2208      	movs	r2, #8
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d02a      	beq.n	8002290 <HAL_DMA_IRQHandler+0x156>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d025      	beq.n	8002290 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020e 	bic.w	r2, r2, #14
 8002252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f003 021c 	and.w	r2, r3, #28
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800228e:	bf00      	nop
 8002290:	bf00      	nop
}
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e17f      	b.n	80025a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8171 	beq.w	80025a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d005      	beq.n	80022d8 <HAL_GPIO_Init+0x40>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d130      	bne.n	800233a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230e:	2201      	movs	r2, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0201 	and.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b03      	cmp	r3, #3
 8002344:	d118      	bne.n	8002378 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800234c:	2201      	movs	r2, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f003 0201 	and.w	r2, r3, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d017      	beq.n	80023b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d123      	bne.n	8002408 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	6939      	ldr	r1, [r7, #16]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ac 	beq.w	80025a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_GPIO_Init+0x330>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_GPIO_Init+0x330>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6613      	str	r3, [r2, #96]	; 0x60
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <HAL_GPIO_Init+0x330>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002462:	4a5a      	ldr	r2, [pc, #360]	; (80025cc <HAL_GPIO_Init+0x334>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x242>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x338>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x23e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x33c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x23a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x340>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x236>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <HAL_GPIO_Init+0x344>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x232>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_GPIO_Init+0x348>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x22e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_GPIO_Init+0x34c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x22a>
 80024be:	2306      	movs	r3, #6
 80024c0:	e00c      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00a      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024c6:	2305      	movs	r3, #5
 80024c8:	e008      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e004      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x244>
 80024da:	2300      	movs	r3, #0
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	f002 0203 	and.w	r2, r2, #3
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	4093      	lsls	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ec:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x334>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3302      	adds	r3, #2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_GPIO_Init+0x350>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800251e:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_GPIO_Init+0x350>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_GPIO_Init+0x350>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_GPIO_Init+0x350>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x350>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002572:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x350>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_GPIO_Init+0x350>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_GPIO_Init+0x350>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae78 	bne.w	80022a8 <HAL_GPIO_Init+0x10>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48000800 	.word	0x48000800
 80025d8:	48000c00 	.word	0x48000c00
 80025dc:	48001000 	.word	0x48001000
 80025e0:	48001400 	.word	0x48001400
 80025e4:	48001800 	.word	0x48001800
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002608:	e002      	b.n	8002610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <HAL_PWREx_GetVoltageRange+0x18>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40007000 	.word	0x40007000

08002638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002646:	d130      	bne.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d038      	beq.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2232      	movs	r2, #50	; 0x32
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267c:	e002      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3b01      	subs	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002690:	d102      	bne.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f2      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d110      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e00f      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b6:	d007      	beq.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000
 80026dc:	20000000 	.word	0x20000000
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e3ca      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f6:	4b97      	ldr	r3, [pc, #604]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002700:	4b94      	ldr	r3, [pc, #592]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80e4 	beq.w	80028e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_RCC_OscConfig+0x4a>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f040 808b 	bne.w	800283c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 8087 	bne.w	800283c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272e:	4b89      	ldr	r3, [pc, #548]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x62>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e3a2      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <HAL_RCC_OscConfig+0x7c>
 8002756:	4b7f      	ldr	r3, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275e:	e005      	b.n	800276c <HAL_RCC_OscConfig+0x88>
 8002760:	4b7c      	ldr	r3, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	4293      	cmp	r3, r2
 800276e:	d223      	bcs.n	80027b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fd55 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e383      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002784:	4b73      	ldr	r3, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a72      	ldr	r2, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	496d      	ldr	r1, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a2:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	4968      	ldr	r1, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
 80027b6:	e025      	b.n	8002804 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b8:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4960      	ldr	r1, [pc, #384]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	495b      	ldr	r1, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fd15 	bl	8003224 <RCC_SetFlashLatencyFromMSIRange>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e343      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002804:	f000 fc4a 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b52      	ldr	r3, [pc, #328]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	4950      	ldr	r1, [pc, #320]	; (8002958 <HAL_RCC_OscConfig+0x274>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	4a4e      	ldr	r2, [pc, #312]	; (800295c <HAL_RCC_OscConfig+0x278>)
 8002822:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002824:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <HAL_RCC_OscConfig+0x27c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe ffb5 	bl	8001798 <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d052      	beq.n	80028de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	e327      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d032      	beq.n	80028aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002844:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002850:	f7fe fff2 	bl	8001838 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002858:	f7fe ffee 	bl	8001838 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e310      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a36      	ldr	r2, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b34      	ldr	r3, [pc, #208]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4931      	ldr	r1, [pc, #196]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002894:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	492c      	ldr	r1, [pc, #176]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e01a      	b.n	80028e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a29      	ldr	r2, [pc, #164]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b6:	f7fe ffbf 	bl	8001838 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028be:	f7fe ffbb 	bl	8001838 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e2dd      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x1da>
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d074      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d005      	beq.n	80028fe <HAL_RCC_OscConfig+0x21a>
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d10e      	bne.n	8002916 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d10b      	bne.n	8002916 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d064      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d160      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e2ba      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x24a>
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e026      	b.n	800297c <HAL_RCC_OscConfig+0x298>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002936:	d115      	bne.n	8002964 <HAL_RCC_OscConfig+0x280>
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a05      	ldr	r2, [pc, #20]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800293e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a02      	ldr	r2, [pc, #8]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x298>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	080077b8 	.word	0x080077b8
 800295c:	20000000 	.word	0x20000000
 8002960:	20000004 	.word	0x20000004
 8002964:	4ba0      	ldr	r3, [pc, #640]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a9f      	ldr	r2, [pc, #636]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b9d      	ldr	r3, [pc, #628]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a9c      	ldr	r2, [pc, #624]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe ff58 	bl	8001838 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe ff54 	bl	8001838 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e276      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299e:	4b92      	ldr	r3, [pc, #584]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x2a8>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe ff44 	bl	8001838 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe ff40 	bl	8001838 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e262      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029c6:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2d0>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d060      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x310>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d116      	bne.n	8002a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x328>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e23f      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	4973      	ldr	r1, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a20:	e040      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d023      	beq.n	8002a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2a:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe feff 	bl	8001838 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fefb 	bl	8001838 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e21d      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a50:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b62      	ldr	r3, [pc, #392]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	495f      	ldr	r1, [pc, #380]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e018      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5c      	ldr	r2, [pc, #368]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fedb 	bl	8001838 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fed7 	bl	8001838 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1f9      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a98:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d03c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abe:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe feb6 	bl	8001838 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7fe feb2 	bl	8001838 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1d4      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ef      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x3ec>
 8002af0:	e01b      	b.n	8002b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af2:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af8:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fe99 	bl	8001838 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fe95 	bl	8001838 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1b7      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ef      	bne.n	8002b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a6 	beq.w	8002c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_OscConfig+0x508>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d118      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_OscConfig+0x508>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <HAL_RCC_OscConfig+0x508>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fe5c 	bl	8001838 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fe58 	bl	8001838 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e17a      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_RCC_OscConfig+0x508>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4d8>
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bba:	e029      	b.n	8002c10 <HAL_RCC_OscConfig+0x52c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d115      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x50c>
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be4:	e014      	b.n	8002c10 <HAL_RCC_OscConfig+0x52c>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	4b9c      	ldr	r3, [pc, #624]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf6:	4a9b      	ldr	r2, [pc, #620]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c00:	4b98      	ldr	r3, [pc, #608]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	4a97      	ldr	r2, [pc, #604]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe fe0e 	bl	8001838 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe fe0a 	bl	8001838 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e12a      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ed      	beq.n	8002c20 <HAL_RCC_OscConfig+0x53c>
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fdf7 	bl	8001838 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fdf3 	bl	8001838 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e113      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	4b7f      	ldr	r3, [pc, #508]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ed      	bne.n	8002c4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c72:	7ffb      	ldrb	r3, [r7, #31]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	4a79      	ldr	r2, [pc, #484]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80fe 	beq.w	8002e8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	f040 80d0 	bne.w	8002e38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c98:	4b72      	ldr	r3, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d130      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d127      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11f      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cd8:	2a07      	cmp	r2, #7
 8002cda:	bf14      	ite	ne
 8002cdc:	2201      	movne	r2, #1
 8002cde:	2200      	moveq	r2, #0
 8002ce0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d113      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d06e      	beq.n	8002dec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d069      	beq.n	8002de8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0ad      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d3c:	f7fe fd7c 	bl	8001838 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe fd78 	bl	8001838 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e09a      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d56:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x784>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d7c:	0212      	lsls	r2, r2, #8
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0652      	lsls	r2, r2, #25
 8002d96:	4311      	orrs	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	0912      	lsrs	r2, r2, #4
 8002d9e:	0452      	lsls	r2, r2, #17
 8002da0:	430a      	orrs	r2, r1
 8002da2:	4930      	ldr	r1, [pc, #192]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002da8:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc0:	f7fe fd3a 	bl	8001838 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fd36 	bl	8001838 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e058      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de6:	e050      	b.n	8002e8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04f      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d148      	bne.n	8002e8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a16      	ldr	r2, [pc, #88]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e10:	f7fe fd12 	bl	8001838 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fd0e 	bl	8001838 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e030      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x734>
 8002e36:	e028      	b.n	8002e8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d023      	beq.n	8002e86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_RCC_OscConfig+0x780>)
 8002e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fcf5 	bl	8001838 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e50:	e00c      	b.n	8002e6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e52:	f7fe fcf1 	bl	8001838 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d905      	bls.n	8002e6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e013      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_OscConfig+0x7b0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ec      	bne.n	8002e52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_OscConfig+0x7b0>)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4905      	ldr	r1, [pc, #20]	; (8002e94 <HAL_RCC_OscConfig+0x7b0>)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_OscConfig+0x7b4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
 8002e84:	e001      	b.n	8002e8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	feeefffc 	.word	0xfeeefffc

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0e7      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4970      	ldr	r1, [pc, #448]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cf      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b66      	ldr	r3, [pc, #408]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d908      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4960      	ldr	r1, [pc, #384]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04c      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0a6      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d115      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e09a      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f52:	4b4e      	ldr	r3, [pc, #312]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08e      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e086      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4943      	ldr	r1, [pc, #268]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fe fc58 	bl	8001838 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe fc54 	bl	8001838 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e06e      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	492b      	ldr	r1, [pc, #172]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d210      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 0207 	bic.w	r2, r3, #7
 8002ff8:	4923      	ldr	r1, [pc, #140]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e036      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4918      	ldr	r1, [pc, #96]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4910      	ldr	r1, [pc, #64]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003050:	f000 f824 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	490b      	ldr	r1, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1f4>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1f8>)
 800306e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1fc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fb8f 	bl	8001798 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	72fb      	strb	r3, [r7, #11]

  return status;
 800307e:	7afb      	ldrb	r3, [r7, #11]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	080077b8 	.word	0x080077b8
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d121      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d11e      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030dc:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e005      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d102      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e004      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d101      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003122:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d134      	bne.n	8003194 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0xa6>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d003      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0xac>
 8003140:	e005      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003144:	617b      	str	r3, [r7, #20]
      break;
 8003146:	e005      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800314a:	617b      	str	r3, [r7, #20]
      break;
 800314c:	e002      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	fb03 f202 	mul.w	r2, r3, r2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0e5b      	lsrs	r3, r3, #25
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	3301      	adds	r3, #1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003194:	69bb      	ldr	r3, [r7, #24]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	080077d0 	.word	0x080077d0
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4904      	ldr	r1, [pc, #16]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	080077c8 	.word	0x080077c8

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031fc:	f7ff ffda 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	080077c8 	.word	0x080077c8

08003224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800323c:	f7ff f9ee 	bl	800261c <HAL_PWREx_GetVoltageRange>
 8003240:	6178      	str	r0, [r7, #20]
 8003242:	e014      	b.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800325c:	f7ff f9de 	bl	800261c <HAL_PWREx_GetVoltageRange>
 8003260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003274:	d10b      	bne.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d919      	bls.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2ba0      	cmp	r3, #160	; 0xa0
 8003280:	d902      	bls.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003282:	2302      	movs	r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e013      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e010      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d902      	bls.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003294:	2303      	movs	r3, #3
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e00a      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d102      	bne.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e004      	b.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d101      	bne.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ac:	2301      	movs	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0207 	bic.w	r2, r3, #7
 80032b8:	4909      	ldr	r1, [pc, #36]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40022000 	.word	0x40022000

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032ec:	2300      	movs	r3, #0
 80032ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f0:	2300      	movs	r3, #0
 80032f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d041      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003308:	d02a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800330a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800330e:	d824      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800331a:	d81e      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003326:	e018      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003328:	4b86      	ldr	r3, [pc, #536]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a85      	ldr	r2, [pc, #532]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003334:	e015      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fabb 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003346:	e00c      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3320      	adds	r3, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fba6 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	74fb      	strb	r3, [r7, #19]
      break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003368:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	4973      	ldr	r1, [pc, #460]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d041      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003398:	d02a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800339a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800339e:	d824      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033aa:	d81e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b4:	d010      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033b6:	e018      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b8:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a61      	ldr	r2, [pc, #388]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c4:	e015      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa73 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d6:	e00c      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3320      	adds	r3, #32
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fb5e 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	74fb      	strb	r3, [r7, #19]
      break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f8:	4b52      	ldr	r3, [pc, #328]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003406:	494f      	ldr	r1, [pc, #316]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800340e:	e001      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a0 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a40      	ldr	r2, [pc, #256]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003464:	f7fe f9e8 	bl	8001838 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe f9e4 	bl	8001838 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d902      	bls.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	74fb      	strb	r3, [r7, #19]
        break;
 800347e:	e005      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ef      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d15c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d019      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b0:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	4a20      	ldr	r2, [pc, #128]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe f9a3 	bl	8001838 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	e00b      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe f99f 	bl	8001838 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d902      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	74fb      	strb	r3, [r7, #19]
            break;
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ec      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800353a:	e009      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003550:	7c7b      	ldrb	r3, [r7, #17]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b9e      	ldr	r3, [pc, #632]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a9d      	ldr	r2, [pc, #628]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356e:	4b98      	ldr	r3, [pc, #608]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 0203 	bic.w	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	4994      	ldr	r1, [pc, #592]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003590:	4b8f      	ldr	r3, [pc, #572]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 020c 	bic.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	498c      	ldr	r1, [pc, #560]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b2:	4b87      	ldr	r3, [pc, #540]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4983      	ldr	r1, [pc, #524]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d4:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	497b      	ldr	r1, [pc, #492]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	4972      	ldr	r1, [pc, #456]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003618:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	496a      	ldr	r1, [pc, #424]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	4961      	ldr	r1, [pc, #388]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800365c:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	4959      	ldr	r1, [pc, #356]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367e:	4b54      	ldr	r3, [pc, #336]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	4950      	ldr	r1, [pc, #320]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a0:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	4948      	ldr	r1, [pc, #288]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c2:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	493f      	ldr	r1, [pc, #252]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d028      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e4:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f2:	4937      	ldr	r1, [pc, #220]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003702:	d106      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a31      	ldr	r2, [pc, #196]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	e011      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800371a:	d10c      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f8c8 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d028      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	491f      	ldr	r1, [pc, #124]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003760:	d106      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376c:	60d3      	str	r3, [r2, #12]
 800376e:	e011      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f899 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02b      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037be:	d109      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a02      	ldr	r2, [pc, #8]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	e014      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f867 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02f      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003812:	4928      	ldr	r1, [pc, #160]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003822:	d10d      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f844 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	74bb      	strb	r3, [r7, #18]
 800383e:	e011      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003848:	d10c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3320      	adds	r3, #32
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 f925 	bl	8003aa0 <RCCEx_PLLSAI2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387e:	490d      	ldr	r1, [pc, #52]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038c6:	4b75      	ldr	r3, [pc, #468]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10d      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
       ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ea:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
       ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d047      	beq.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e044      	b.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d018      	beq.n	800393e <RCCEx_PLLSAI1_Config+0x86>
 800390c:	2b03      	cmp	r3, #3
 800390e:	d825      	bhi.n	800395c <RCCEx_PLLSAI1_Config+0xa4>
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <RCCEx_PLLSAI1_Config+0x62>
 8003914:	2b02      	cmp	r3, #2
 8003916:	d009      	beq.n	800392c <RCCEx_PLLSAI1_Config+0x74>
 8003918:	e020      	b.n	800395c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800391a:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11d      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392a:	e01a      	b.n	8003962 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800392c:	4b5b      	ldr	r3, [pc, #364]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d116      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393c:	e013      	b.n	8003966 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800393e:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800394a:	4b54      	ldr	r3, [pc, #336]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800395a:	e006      	b.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e004      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396a:	bf00      	nop
    }

    if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	430b      	orrs	r3, r1
 8003988:	4944      	ldr	r1, [pc, #272]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d17d      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a40      	ldr	r2, [pc, #256]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd ff4a 	bl	8001838 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a8:	f7fd ff46 	bl	8001838 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
        break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ef      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d160      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	0211      	lsls	r1, r2, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	0912      	lsrs	r2, r2, #4
 80039ec:	0452      	lsls	r2, r2, #17
 80039ee:	430a      	orrs	r2, r1
 80039f0:	492a      	ldr	r1, [pc, #168]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
 80039f6:	e027      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d112      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039fe:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6892      	ldr	r2, [r2, #8]
 8003a0e:	0211      	lsls	r1, r2, #8
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6912      	ldr	r2, [r2, #16]
 8003a14:	0852      	lsrs	r2, r2, #1
 8003a16:	3a01      	subs	r2, #1
 8003a18:	0552      	lsls	r2, r2, #21
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	491f      	ldr	r1, [pc, #124]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
 8003a22:	e011      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6952      	ldr	r2, [r2, #20]
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0652      	lsls	r2, r2, #25
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4916      	ldr	r1, [pc, #88]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd fef0 	bl	8001838 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5a:	e009      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a5c:	f7fd feec 	bl	8001838 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6e:	e005      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0203 	and.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ad2:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d047      	beq.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e044      	b.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d018      	beq.n	8003b26 <RCCEx_PLLSAI2_Config+0x86>
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d825      	bhi.n	8003b44 <RCCEx_PLLSAI2_Config+0xa4>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <RCCEx_PLLSAI2_Config+0x62>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d009      	beq.n	8003b14 <RCCEx_PLLSAI2_Config+0x74>
 8003b00:	e020      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b02:	4b55      	ldr	r3, [pc, #340]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11d      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b12:	e01a      	b.n	8003b4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e013      	b.n	8003b4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b26:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b32:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e004      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6819      	ldr	r1, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	4939      	ldr	r1, [pc, #228]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d167      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fd fe56 	bl	8001838 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fd fe52 	bl	8001838 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ef      	bne.n	8003b90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d14a      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	0211      	lsls	r1, r2, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	0912      	lsrs	r2, r2, #4
 8003bd4:	0452      	lsls	r2, r2, #17
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	491f      	ldr	r1, [pc, #124]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	614b      	str	r3, [r1, #20]
 8003bde:	e011      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	0211      	lsls	r1, r2, #8
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6912      	ldr	r2, [r2, #16]
 8003bf6:	0852      	lsrs	r2, r2, #1
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0652      	lsls	r2, r2, #25
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	4916      	ldr	r1, [pc, #88]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fe12 	bl	8001838 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fd fe0e 	bl	8001838 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e040      	b.n	8003cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fbe2 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2224      	movs	r2, #36	; 0x24
 8003c88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fe74 	bl	8004990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fbb9 	bl	8004420 <UART_SetConfig>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e01b      	b.n	8003cf0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fef3 	bl	8004ad4 <UART_CheckIdleState>
 8003cee:	4603      	mov	r3, r0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d178      	bne.n	8003e02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Transmit+0x24>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e071      	b.n	8003e04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2221      	movs	r2, #33	; 0x21
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fd83 	bl	8001838 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x68>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d68:	e030      	b.n	8003dcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 ff55 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e03c      	b.n	8003e04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3302      	adds	r3, #2
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e008      	b.n	8003dba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	781a      	ldrb	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b292      	uxth	r2, r2
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1c8      	bne.n	8003d6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 ff1e 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e005      	b.n	8003e04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b0ba      	sub	sp, #232	; 0xe8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d115      	bne.n	8003e74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 82ae 	beq.w	80043c6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
      }
      return;
 8003e72:	e2a8      	b.n	80043c6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8117 	beq.w	80040ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e8e:	4b85      	ldr	r3, [pc, #532]	; (80040a4 <HAL_UART_IRQHandler+0x298>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 810a 	beq.w	80040ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xbc>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d011      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xec>
 8003ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d011      	beq.n	8003f28 <HAL_UART_IRQHandler+0x11c>
 8003f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2204      	movs	r2, #4
 8003f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d017      	beq.n	8003f64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	f043 0208 	orr.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_UART_IRQHandler+0x18a>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00c      	beq.n	8003f96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8214 	beq.w	80043ca <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fe6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04f      	beq.n	800408e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fe7f 	bl	8004cf2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d141      	bne.n	8004086 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800401c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800402e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800403a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1d9      	bne.n	8004002 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	2b00      	cmp	r3, #0
 8004054:	d013      	beq.n	800407e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_UART_IRQHandler+0x29c>)
 800405c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f828 	bl	80020b8 <HAL_DMA_Abort_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d017      	beq.n	800409e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004078:	4610      	mov	r0, r2
 800407a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	e00f      	b.n	800409e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9b8 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	e00b      	b.n	800409e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9b4 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e007      	b.n	800409e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9b0 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800409c:	e195      	b.n	80043ca <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409e:	bf00      	nop
    return;
 80040a0:	e193      	b.n	80043ca <HAL_UART_IRQHandler+0x5be>
 80040a2:	bf00      	nop
 80040a4:	04000120 	.word	0x04000120
 80040a8:	08004dbb 	.word	0x08004dbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 814e 	bne.w	8004352 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8147 	beq.w	8004352 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8140 	beq.w	8004352 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2210      	movs	r2, #16
 80040d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	f040 80b8 	bne.w	800425a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8167 	beq.w	80043ce <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800410a:	429a      	cmp	r2, r3
 800410c:	f080 815f 	bcs.w	80043ce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 8086 	bne.w	8004238 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800415a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800416e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1da      	bne.n	800412c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800419a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800419e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e1      	bne.n	8004176 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004208:	f023 0310 	bic.w	r3, r3, #16
 800420c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800421a:	65bb      	str	r3, [r7, #88]	; 0x58
 800421c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e4      	bne.n	80041f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd ff02 	bl	800203c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800424a:	b29b      	uxth	r3, r3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	b29b      	uxth	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8d8 	bl	8004408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004258:	e0b9      	b.n	80043ce <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004266:	b29b      	uxth	r3, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80ab 	beq.w	80043d2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800427c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a6 	beq.w	80043d2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042a8:	647b      	str	r3, [r7, #68]	; 0x44
 80042aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e4      	bne.n	8004286 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	623b      	str	r3, [r7, #32]
   return(result);
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042e0:	633a      	str	r2, [r7, #48]	; 0x30
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e3      	bne.n	80042bc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	60fb      	str	r3, [r7, #12]
   return(result);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0310 	bic.w	r3, r3, #16
 800431c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	617b      	str	r3, [r7, #20]
   return(result);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e4      	bne.n	8004308 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f85c 	bl	8004408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004350:	e03f      	b.n	80043d2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <HAL_UART_IRQHandler+0x570>
 800435e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004372:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fd60 	bl	8004e3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800437a:	e02d      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01c      	beq.n	80043d6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
    }
    return;
 80043a4:	e017      	b.n	80043d6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
 80043b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fd11 	bl	8004de6 <UART_EndTransmit_IT>
    return;
 80043c4:	e008      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043c6:	bf00      	nop
 80043c8:	e006      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043d8:	37e8      	adds	r7, #232	; 0xe8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop

080043e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004424:	b08a      	sub	sp, #40	; 0x28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4ba4      	ldr	r3, [pc, #656]	; (80046e0 <UART_SetConfig+0x2c0>)
 8004450:	4013      	ands	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004458:	430b      	orrs	r3, r1
 800445a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a99      	ldr	r2, [pc, #612]	; (80046e4 <UART_SetConfig+0x2c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	4313      	orrs	r3, r2
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a90      	ldr	r2, [pc, #576]	; (80046e8 <UART_SetConfig+0x2c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d126      	bne.n	80044f8 <UART_SetConfig+0xd8>
 80044aa:	4b90      	ldr	r3, [pc, #576]	; (80046ec <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d81b      	bhi.n	80044f0 <UART_SetConfig+0xd0>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0xa0>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e116      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e112      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e10e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e10a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e106      	b.n	8004706 <UART_SetConfig+0x2e6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a7c      	ldr	r2, [pc, #496]	; (80046f0 <UART_SetConfig+0x2d0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d138      	bne.n	8004574 <UART_SetConfig+0x154>
 8004502:	4b7a      	ldr	r3, [pc, #488]	; (80046ec <UART_SetConfig+0x2cc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d82d      	bhi.n	800456c <UART_SetConfig+0x14c>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0xf8>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800456d 	.word	0x0800456d
 8004524:	0800456d 	.word	0x0800456d
 8004528:	0800455d 	.word	0x0800455d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004555 	.word	0x08004555
 800453c:	0800456d 	.word	0x0800456d
 8004540:	0800456d 	.word	0x0800456d
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004565 	.word	0x08004565
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e0d8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e0d4      	b.n	8004706 <UART_SetConfig+0x2e6>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e0d0      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e0cc      	b.n	8004706 <UART_SetConfig+0x2e6>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e0c8      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5e      	ldr	r2, [pc, #376]	; (80046f4 <UART_SetConfig+0x2d4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d125      	bne.n	80045ca <UART_SetConfig+0x1aa>
 800457e:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <UART_SetConfig+0x2cc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d016      	beq.n	80045ba <UART_SetConfig+0x19a>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d818      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d00a      	beq.n	80045aa <UART_SetConfig+0x18a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d814      	bhi.n	80045c2 <UART_SetConfig+0x1a2>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <UART_SetConfig+0x182>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d008      	beq.n	80045b2 <UART_SetConfig+0x192>
 80045a0:	e00f      	b.n	80045c2 <UART_SetConfig+0x1a2>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a8:	e0ad      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045aa:	2302      	movs	r3, #2
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b0:	e0a9      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045b2:	2304      	movs	r3, #4
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b8:	e0a5      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ba:	2308      	movs	r3, #8
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c0:	e0a1      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045c2:	2310      	movs	r3, #16
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c8:	e09d      	b.n	8004706 <UART_SetConfig+0x2e6>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <UART_SetConfig+0x2d8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d125      	bne.n	8004620 <UART_SetConfig+0x200>
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <UART_SetConfig+0x2cc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045de:	2bc0      	cmp	r3, #192	; 0xc0
 80045e0:	d016      	beq.n	8004610 <UART_SetConfig+0x1f0>
 80045e2:	2bc0      	cmp	r3, #192	; 0xc0
 80045e4:	d818      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d00a      	beq.n	8004600 <UART_SetConfig+0x1e0>
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d814      	bhi.n	8004618 <UART_SetConfig+0x1f8>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <UART_SetConfig+0x1d8>
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d008      	beq.n	8004608 <UART_SetConfig+0x1e8>
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x1f8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	e082      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e07e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e07a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e076      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e072      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a35      	ldr	r2, [pc, #212]	; (80046fc <UART_SetConfig+0x2dc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d12a      	bne.n	8004680 <UART_SetConfig+0x260>
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <UART_SetConfig+0x2cc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004638:	d01a      	beq.n	8004670 <UART_SetConfig+0x250>
 800463a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463e:	d81b      	bhi.n	8004678 <UART_SetConfig+0x258>
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d00c      	beq.n	8004660 <UART_SetConfig+0x240>
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d815      	bhi.n	8004678 <UART_SetConfig+0x258>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0x238>
 8004650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004654:	d008      	beq.n	8004668 <UART_SetConfig+0x248>
 8004656:	e00f      	b.n	8004678 <UART_SetConfig+0x258>
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e052      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e04e      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e04a      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e046      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e042      	b.n	8004706 <UART_SetConfig+0x2e6>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <UART_SetConfig+0x2c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d13a      	bne.n	8004700 <UART_SetConfig+0x2e0>
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <UART_SetConfig+0x2cc>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004698:	d01a      	beq.n	80046d0 <UART_SetConfig+0x2b0>
 800469a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	d00c      	beq.n	80046c0 <UART_SetConfig+0x2a0>
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046aa:	d815      	bhi.n	80046d8 <UART_SetConfig+0x2b8>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0x298>
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d008      	beq.n	80046c8 <UART_SetConfig+0x2a8>
 80046b6:	e00f      	b.n	80046d8 <UART_SetConfig+0x2b8>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e022      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e01e      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e01a      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e016      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e012      	b.n	8004706 <UART_SetConfig+0x2e6>
 80046e0:	efff69f3 	.word	0xefff69f3
 80046e4:	40008000 	.word	0x40008000
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	40004800 	.word	0x40004800
 80046f8:	40004c00 	.word	0x40004c00
 80046fc:	40005000 	.word	0x40005000
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a9f      	ldr	r2, [pc, #636]	; (8004988 <UART_SetConfig+0x568>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d17a      	bne.n	8004806 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004714:	2b08      	cmp	r3, #8
 8004716:	d824      	bhi.n	8004762 <UART_SetConfig+0x342>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <UART_SetConfig+0x300>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004745 	.word	0x08004745
 8004724:	08004763 	.word	0x08004763
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004763 	.word	0x08004763
 8004730:	08004753 	.word	0x08004753
 8004734:	08004763 	.word	0x08004763
 8004738:	08004763 	.word	0x08004763
 800473c:	08004763 	.word	0x08004763
 8004740:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fe fd42 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004748:	61f8      	str	r0, [r7, #28]
        break;
 800474a:	e010      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <UART_SetConfig+0x56c>)
 800474e:	61fb      	str	r3, [r7, #28]
        break;
 8004750:	e00d      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fca3 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8004756:	61f8      	str	r0, [r7, #28]
        break;
 8004758:	e009      	b.n	800476e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	61fb      	str	r3, [r7, #28]
        break;
 8004760:	e005      	b.n	800476e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800476c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80fb 	beq.w	800496c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d305      	bcc.n	8004792 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004798:	e0e8      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2200      	movs	r2, #0
 800479e:	461c      	mov	r4, r3
 80047a0:	4615      	mov	r5, r2
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	022b      	lsls	r3, r5, #8
 80047ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b0:	0222      	lsls	r2, r4, #8
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	6849      	ldr	r1, [r1, #4]
 80047b6:	0849      	lsrs	r1, r1, #1
 80047b8:	2000      	movs	r0, #0
 80047ba:	4688      	mov	r8, r1
 80047bc:	4681      	mov	r9, r0
 80047be:	eb12 0a08 	adds.w	sl, r2, r8
 80047c2:	eb43 0b09 	adc.w	fp, r3, r9
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d4:	4650      	mov	r0, sl
 80047d6:	4659      	mov	r1, fp
 80047d8:	f7fc f9e6 	bl	8000ba8 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ea:	d308      	bcc.n	80047fe <UART_SetConfig+0x3de>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f2:	d204      	bcs.n	80047fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e0b6      	b.n	800496c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004804:	e0b2      	b.n	800496c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480e:	d15e      	bne.n	80048ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004814:	2b08      	cmp	r3, #8
 8004816:	d828      	bhi.n	800486a <UART_SetConfig+0x44a>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x400>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	0800486b 	.word	0x0800486b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800486b 	.word	0x0800486b
 8004838:	0800486b 	.word	0x0800486b
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe fcc2 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004848:	61f8      	str	r0, [r7, #28]
        break;
 800484a:	e014      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe fcd4 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e010      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b4d      	ldr	r3, [pc, #308]	; (800498c <UART_SetConfig+0x56c>)
 8004856:	61fb      	str	r3, [r7, #28]
        break;
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7fe fc1f 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800485e:	61f8      	str	r0, [r7, #28]
        break;
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d077      	beq.n	800496c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005a      	lsls	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0f      	cmp	r3, #15
 8004896:	d916      	bls.n	80048c6 <UART_SetConfig+0x4a6>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489e:	d212      	bcs.n	80048c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8afa      	ldrh	r2, [r7, #22]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e052      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048cc:	e04e      	b.n	800496c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x506>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x4bc>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fc64 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fc76 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <UART_SetConfig+0x56c>)
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fbc1 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004930:	bf00      	nop
    }

    if (pclk != 0U)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d019      	beq.n	800496c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	085a      	lsrs	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d909      	bls.n	8004966 <UART_SetConfig+0x546>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d205      	bcs.n	8004966 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e002      	b.n	800496c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	40008000 	.word	0x40008000
 800498c:	00f42400 	.word	0x00f42400

08004990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8e:	d10a      	bne.n	8004aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b098      	sub	sp, #96	; 0x60
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae4:	f7fc fea8 	bl	8001838 <HAL_GetTick>
 8004ae8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d12e      	bne.n	8004b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f88c 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d021      	beq.n	8004b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e062      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d149      	bne.n	8004bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f856 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03c      	beq.n	8004bf8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e011      	b.n	8004c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3758      	adds	r7, #88	; 0x58
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e049      	b.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d045      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fc fdfb 	bl	8001838 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e048      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d031      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d110      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f838 	bl	8004cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2208      	movs	r2, #8
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e029      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca4:	d111      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f81e 	bl	8004cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e00f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d0a6      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b095      	sub	sp, #84	; 0x54
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d118      	bne.n	8004d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff fb0b 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b088      	sub	sp, #32
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6979      	ldr	r1, [r7, #20]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fad7 	bl	80043e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e32:	bf00      	nop
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <__cvt>:
 8004e4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e52:	ec55 4b10 	vmov	r4, r5, d0
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	460e      	mov	r6, r1
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	bfbb      	ittet	lt
 8004e60:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e64:	461d      	movlt	r5, r3
 8004e66:	2300      	movge	r3, #0
 8004e68:	232d      	movlt	r3, #45	; 0x2d
 8004e6a:	700b      	strb	r3, [r1, #0]
 8004e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e72:	4691      	mov	r9, r2
 8004e74:	f023 0820 	bic.w	r8, r3, #32
 8004e78:	bfbc      	itt	lt
 8004e7a:	4622      	movlt	r2, r4
 8004e7c:	4614      	movlt	r4, r2
 8004e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e82:	d005      	beq.n	8004e90 <__cvt+0x42>
 8004e84:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e88:	d100      	bne.n	8004e8c <__cvt+0x3e>
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	e000      	b.n	8004e92 <__cvt+0x44>
 8004e90:	2103      	movs	r1, #3
 8004e92:	ab03      	add	r3, sp, #12
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	ab02      	add	r3, sp, #8
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	ec45 4b10 	vmov	d0, r4, r5
 8004e9e:	4653      	mov	r3, sl
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	f000 fe35 	bl	8005b10 <_dtoa_r>
 8004ea6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eaa:	4607      	mov	r7, r0
 8004eac:	d102      	bne.n	8004eb4 <__cvt+0x66>
 8004eae:	f019 0f01 	tst.w	r9, #1
 8004eb2:	d022      	beq.n	8004efa <__cvt+0xac>
 8004eb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eb8:	eb07 0906 	add.w	r9, r7, r6
 8004ebc:	d110      	bne.n	8004ee0 <__cvt+0x92>
 8004ebe:	783b      	ldrb	r3, [r7, #0]
 8004ec0:	2b30      	cmp	r3, #48	; 0x30
 8004ec2:	d10a      	bne.n	8004eda <__cvt+0x8c>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4620      	mov	r0, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	f7fb fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed0:	b918      	cbnz	r0, 8004eda <__cvt+0x8c>
 8004ed2:	f1c6 0601 	rsb	r6, r6, #1
 8004ed6:	f8ca 6000 	str.w	r6, [sl]
 8004eda:	f8da 3000 	ldr.w	r3, [sl]
 8004ede:	4499      	add	r9, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eec:	b108      	cbz	r0, 8004ef2 <__cvt+0xa4>
 8004eee:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef2:	2230      	movs	r2, #48	; 0x30
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	454b      	cmp	r3, r9
 8004ef8:	d307      	bcc.n	8004f0a <__cvt+0xbc>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004efe:	1bdb      	subs	r3, r3, r7
 8004f00:	4638      	mov	r0, r7
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	b004      	add	sp, #16
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	9103      	str	r1, [sp, #12]
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e7f0      	b.n	8004ef4 <__cvt+0xa6>

08004f12 <__exponent>:
 8004f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f14:	4603      	mov	r3, r0
 8004f16:	2900      	cmp	r1, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	4249      	neglt	r1, r1
 8004f1c:	f803 2b02 	strb.w	r2, [r3], #2
 8004f20:	bfb4      	ite	lt
 8004f22:	222d      	movlt	r2, #45	; 0x2d
 8004f24:	222b      	movge	r2, #43	; 0x2b
 8004f26:	2909      	cmp	r1, #9
 8004f28:	7042      	strb	r2, [r0, #1]
 8004f2a:	dd2a      	ble.n	8004f82 <__exponent+0x70>
 8004f2c:	f10d 0207 	add.w	r2, sp, #7
 8004f30:	4617      	mov	r7, r2
 8004f32:	260a      	movs	r6, #10
 8004f34:	4694      	mov	ip, r2
 8004f36:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f3a:	fb06 1415 	mls	r4, r6, r5, r1
 8004f3e:	3430      	adds	r4, #48	; 0x30
 8004f40:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f44:	460c      	mov	r4, r1
 8004f46:	2c63      	cmp	r4, #99	; 0x63
 8004f48:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	dcf1      	bgt.n	8004f34 <__exponent+0x22>
 8004f50:	3130      	adds	r1, #48	; 0x30
 8004f52:	f1ac 0402 	sub.w	r4, ip, #2
 8004f56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f5a:	1c41      	adds	r1, r0, #1
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	42ba      	cmp	r2, r7
 8004f60:	d30a      	bcc.n	8004f78 <__exponent+0x66>
 8004f62:	f10d 0209 	add.w	r2, sp, #9
 8004f66:	eba2 020c 	sub.w	r2, r2, ip
 8004f6a:	42bc      	cmp	r4, r7
 8004f6c:	bf88      	it	hi
 8004f6e:	2200      	movhi	r2, #0
 8004f70:	4413      	add	r3, r2
 8004f72:	1a18      	subs	r0, r3, r0
 8004f74:	b003      	add	sp, #12
 8004f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f78:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f7c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f80:	e7ed      	b.n	8004f5e <__exponent+0x4c>
 8004f82:	2330      	movs	r3, #48	; 0x30
 8004f84:	3130      	adds	r1, #48	; 0x30
 8004f86:	7083      	strb	r3, [r0, #2]
 8004f88:	70c1      	strb	r1, [r0, #3]
 8004f8a:	1d03      	adds	r3, r0, #4
 8004f8c:	e7f1      	b.n	8004f72 <__exponent+0x60>
	...

08004f90 <_printf_float>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	ed2d 8b02 	vpush	{d8}
 8004f98:	b08d      	sub	sp, #52	; 0x34
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	f000 fcb5 	bl	8005914 <_localeconv_r>
 8004faa:	f8d0 a000 	ldr.w	sl, [r0]
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f7fb f95e 	bl	8000270 <strlen>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	f8c8 2000 	str.w	r2, [r8]
 8004fd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fe0:	ee08 0a10 	vmov	s16, r0
 8004fe4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fec:	4b9e      	ldr	r3, [pc, #632]	; (8005268 <_printf_float+0x2d8>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	f7fb fd9b 	bl	8000b2c <__aeabi_dcmpun>
 8004ff6:	bb88      	cbnz	r0, 800505c <_printf_float+0xcc>
 8004ff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffc:	4b9a      	ldr	r3, [pc, #616]	; (8005268 <_printf_float+0x2d8>)
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8005002:	f7fb fd75 	bl	8000af0 <__aeabi_dcmple>
 8005006:	bb48      	cbnz	r0, 800505c <_printf_float+0xcc>
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fd64 	bl	8000adc <__aeabi_dcmplt>
 8005014:	b110      	cbz	r0, 800501c <_printf_float+0x8c>
 8005016:	232d      	movs	r3, #45	; 0x2d
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501c:	4a93      	ldr	r2, [pc, #588]	; (800526c <_printf_float+0x2dc>)
 800501e:	4b94      	ldr	r3, [pc, #592]	; (8005270 <_printf_float+0x2e0>)
 8005020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005024:	bf94      	ite	ls
 8005026:	4690      	movls	r8, r2
 8005028:	4698      	movhi	r8, r3
 800502a:	2303      	movs	r3, #3
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	f023 0304 	bic.w	r3, r3, #4
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	9700      	str	r7, [sp, #0]
 800503c:	4633      	mov	r3, r6
 800503e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f9da 	bl	80053fc <_printf_common>
 8005048:	3001      	adds	r0, #1
 800504a:	f040 8090 	bne.w	800516e <_printf_float+0x1de>
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	b00d      	add	sp, #52	; 0x34
 8005054:	ecbd 8b02 	vpop	{d8}
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb fd62 	bl	8000b2c <__aeabi_dcmpun>
 8005068:	b140      	cbz	r0, 800507c <_printf_float+0xec>
 800506a:	464b      	mov	r3, r9
 800506c:	2b00      	cmp	r3, #0
 800506e:	bfbc      	itt	lt
 8005070:	232d      	movlt	r3, #45	; 0x2d
 8005072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005076:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <_printf_float+0x2e4>)
 8005078:	4b7f      	ldr	r3, [pc, #508]	; (8005278 <_printf_float+0x2e8>)
 800507a:	e7d1      	b.n	8005020 <_printf_float+0x90>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005082:	9206      	str	r2, [sp, #24]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	d13f      	bne.n	8005108 <_printf_float+0x178>
 8005088:	2306      	movs	r3, #6
 800508a:	6063      	str	r3, [r4, #4]
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	6861      	ldr	r1, [r4, #4]
 8005090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005094:	2300      	movs	r3, #0
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	ab0a      	add	r3, sp, #40	; 0x28
 800509a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800509e:	ab09      	add	r3, sp, #36	; 0x24
 80050a0:	ec49 8b10 	vmov	d0, r8, r9
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050ac:	4628      	mov	r0, r5
 80050ae:	f7ff fece 	bl	8004e4e <__cvt>
 80050b2:	9b06      	ldr	r3, [sp, #24]
 80050b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050b6:	2b47      	cmp	r3, #71	; 0x47
 80050b8:	4680      	mov	r8, r0
 80050ba:	d108      	bne.n	80050ce <_printf_float+0x13e>
 80050bc:	1cc8      	adds	r0, r1, #3
 80050be:	db02      	blt.n	80050c6 <_printf_float+0x136>
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	4299      	cmp	r1, r3
 80050c4:	dd41      	ble.n	800514a <_printf_float+0x1ba>
 80050c6:	f1ab 0302 	sub.w	r3, fp, #2
 80050ca:	fa5f fb83 	uxtb.w	fp, r3
 80050ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050d2:	d820      	bhi.n	8005116 <_printf_float+0x186>
 80050d4:	3901      	subs	r1, #1
 80050d6:	465a      	mov	r2, fp
 80050d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050dc:	9109      	str	r1, [sp, #36]	; 0x24
 80050de:	f7ff ff18 	bl	8004f12 <__exponent>
 80050e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e4:	1813      	adds	r3, r2, r0
 80050e6:	2a01      	cmp	r2, #1
 80050e8:	4681      	mov	r9, r0
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	dc02      	bgt.n	80050f4 <_printf_float+0x164>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	07d2      	lsls	r2, r2, #31
 80050f2:	d501      	bpl.n	80050f8 <_printf_float+0x168>
 80050f4:	3301      	adds	r3, #1
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d09c      	beq.n	800503a <_printf_float+0xaa>
 8005100:	232d      	movs	r3, #45	; 0x2d
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005106:	e798      	b.n	800503a <_printf_float+0xaa>
 8005108:	9a06      	ldr	r2, [sp, #24]
 800510a:	2a47      	cmp	r2, #71	; 0x47
 800510c:	d1be      	bne.n	800508c <_printf_float+0xfc>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1bc      	bne.n	800508c <_printf_float+0xfc>
 8005112:	2301      	movs	r3, #1
 8005114:	e7b9      	b.n	800508a <_printf_float+0xfa>
 8005116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800511a:	d118      	bne.n	800514e <_printf_float+0x1be>
 800511c:	2900      	cmp	r1, #0
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	dd0b      	ble.n	800513a <_printf_float+0x1aa>
 8005122:	6121      	str	r1, [r4, #16]
 8005124:	b913      	cbnz	r3, 800512c <_printf_float+0x19c>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	07d0      	lsls	r0, r2, #31
 800512a:	d502      	bpl.n	8005132 <_printf_float+0x1a2>
 800512c:	3301      	adds	r3, #1
 800512e:	440b      	add	r3, r1
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	65a1      	str	r1, [r4, #88]	; 0x58
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	e7de      	b.n	80050f8 <_printf_float+0x168>
 800513a:	b913      	cbnz	r3, 8005142 <_printf_float+0x1b2>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	07d2      	lsls	r2, r2, #31
 8005140:	d501      	bpl.n	8005146 <_printf_float+0x1b6>
 8005142:	3302      	adds	r3, #2
 8005144:	e7f4      	b.n	8005130 <_printf_float+0x1a0>
 8005146:	2301      	movs	r3, #1
 8005148:	e7f2      	b.n	8005130 <_printf_float+0x1a0>
 800514a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005150:	4299      	cmp	r1, r3
 8005152:	db05      	blt.n	8005160 <_printf_float+0x1d0>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	6121      	str	r1, [r4, #16]
 8005158:	07d8      	lsls	r0, r3, #31
 800515a:	d5ea      	bpl.n	8005132 <_printf_float+0x1a2>
 800515c:	1c4b      	adds	r3, r1, #1
 800515e:	e7e7      	b.n	8005130 <_printf_float+0x1a0>
 8005160:	2900      	cmp	r1, #0
 8005162:	bfd4      	ite	le
 8005164:	f1c1 0202 	rsble	r2, r1, #2
 8005168:	2201      	movgt	r2, #1
 800516a:	4413      	add	r3, r2
 800516c:	e7e0      	b.n	8005130 <_printf_float+0x1a0>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	055a      	lsls	r2, r3, #21
 8005172:	d407      	bmi.n	8005184 <_printf_float+0x1f4>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	4642      	mov	r2, r8
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d12c      	bne.n	80051dc <_printf_float+0x24c>
 8005182:	e764      	b.n	800504e <_printf_float+0xbe>
 8005184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005188:	f240 80e0 	bls.w	800534c <_printf_float+0x3bc>
 800518c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005190:	2200      	movs	r2, #0
 8005192:	2300      	movs	r3, #0
 8005194:	f7fb fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8005198:	2800      	cmp	r0, #0
 800519a:	d034      	beq.n	8005206 <_printf_float+0x276>
 800519c:	4a37      	ldr	r2, [pc, #220]	; (800527c <_printf_float+0x2ec>)
 800519e:	2301      	movs	r3, #1
 80051a0:	4631      	mov	r1, r6
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	f43f af51 	beq.w	800504e <_printf_float+0xbe>
 80051ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b0:	429a      	cmp	r2, r3
 80051b2:	db02      	blt.n	80051ba <_printf_float+0x22a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	07d8      	lsls	r0, r3, #31
 80051b8:	d510      	bpl.n	80051dc <_printf_float+0x24c>
 80051ba:	ee18 3a10 	vmov	r3, s16
 80051be:	4652      	mov	r2, sl
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af41 	beq.w	800504e <_printf_float+0xbe>
 80051cc:	f04f 0800 	mov.w	r8, #0
 80051d0:	f104 091a 	add.w	r9, r4, #26
 80051d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4543      	cmp	r3, r8
 80051da:	dc09      	bgt.n	80051f0 <_printf_float+0x260>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	079b      	lsls	r3, r3, #30
 80051e0:	f100 8107 	bmi.w	80053f2 <_printf_float+0x462>
 80051e4:	68e0      	ldr	r0, [r4, #12]
 80051e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e8:	4298      	cmp	r0, r3
 80051ea:	bfb8      	it	lt
 80051ec:	4618      	movlt	r0, r3
 80051ee:	e730      	b.n	8005052 <_printf_float+0xc2>
 80051f0:	2301      	movs	r3, #1
 80051f2:	464a      	mov	r2, r9
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f af27 	beq.w	800504e <_printf_float+0xbe>
 8005200:	f108 0801 	add.w	r8, r8, #1
 8005204:	e7e6      	b.n	80051d4 <_printf_float+0x244>
 8005206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	dc39      	bgt.n	8005280 <_printf_float+0x2f0>
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <_printf_float+0x2ec>)
 800520e:	2301      	movs	r3, #1
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af19 	beq.w	800504e <_printf_float+0xbe>
 800521c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005220:	4313      	orrs	r3, r2
 8005222:	d102      	bne.n	800522a <_printf_float+0x29a>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d5d8      	bpl.n	80051dc <_printf_float+0x24c>
 800522a:	ee18 3a10 	vmov	r3, s16
 800522e:	4652      	mov	r2, sl
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af09 	beq.w	800504e <_printf_float+0xbe>
 800523c:	f04f 0900 	mov.w	r9, #0
 8005240:	f104 0a1a 	add.w	sl, r4, #26
 8005244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005246:	425b      	negs	r3, r3
 8005248:	454b      	cmp	r3, r9
 800524a:	dc01      	bgt.n	8005250 <_printf_float+0x2c0>
 800524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524e:	e792      	b.n	8005176 <_printf_float+0x1e6>
 8005250:	2301      	movs	r3, #1
 8005252:	4652      	mov	r2, sl
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f aef7 	beq.w	800504e <_printf_float+0xbe>
 8005260:	f109 0901 	add.w	r9, r9, #1
 8005264:	e7ee      	b.n	8005244 <_printf_float+0x2b4>
 8005266:	bf00      	nop
 8005268:	7fefffff 	.word	0x7fefffff
 800526c:	08007800 	.word	0x08007800
 8005270:	08007804 	.word	0x08007804
 8005274:	08007808 	.word	0x08007808
 8005278:	0800780c 	.word	0x0800780c
 800527c:	08007810 	.word	0x08007810
 8005280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005284:	429a      	cmp	r2, r3
 8005286:	bfa8      	it	ge
 8005288:	461a      	movge	r2, r3
 800528a:	2a00      	cmp	r2, #0
 800528c:	4691      	mov	r9, r2
 800528e:	dc37      	bgt.n	8005300 <_printf_float+0x370>
 8005290:	f04f 0b00 	mov.w	fp, #0
 8005294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005298:	f104 021a 	add.w	r2, r4, #26
 800529c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	eba3 0309 	sub.w	r3, r3, r9
 80052a4:	455b      	cmp	r3, fp
 80052a6:	dc33      	bgt.n	8005310 <_printf_float+0x380>
 80052a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ac:	429a      	cmp	r2, r3
 80052ae:	db3b      	blt.n	8005328 <_printf_float+0x398>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	07da      	lsls	r2, r3, #31
 80052b4:	d438      	bmi.n	8005328 <_printf_float+0x398>
 80052b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052ba:	eba2 0903 	sub.w	r9, r2, r3
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	4591      	cmp	r9, r2
 80052c4:	bfa8      	it	ge
 80052c6:	4691      	movge	r9, r2
 80052c8:	f1b9 0f00 	cmp.w	r9, #0
 80052cc:	dc35      	bgt.n	800533a <_printf_float+0x3aa>
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052d6:	f104 0a1a 	add.w	sl, r4, #26
 80052da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	eba3 0309 	sub.w	r3, r3, r9
 80052e4:	4543      	cmp	r3, r8
 80052e6:	f77f af79 	ble.w	80051dc <_printf_float+0x24c>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f aeaa 	beq.w	800504e <_printf_float+0xbe>
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	e7ec      	b.n	80052da <_printf_float+0x34a>
 8005300:	4613      	mov	r3, r2
 8005302:	4631      	mov	r1, r6
 8005304:	4642      	mov	r2, r8
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	d1c0      	bne.n	8005290 <_printf_float+0x300>
 800530e:	e69e      	b.n	800504e <_printf_float+0xbe>
 8005310:	2301      	movs	r3, #1
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	9205      	str	r2, [sp, #20]
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f ae97 	beq.w	800504e <_printf_float+0xbe>
 8005320:	9a05      	ldr	r2, [sp, #20]
 8005322:	f10b 0b01 	add.w	fp, fp, #1
 8005326:	e7b9      	b.n	800529c <_printf_float+0x30c>
 8005328:	ee18 3a10 	vmov	r3, s16
 800532c:	4652      	mov	r2, sl
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1be      	bne.n	80052b6 <_printf_float+0x326>
 8005338:	e689      	b.n	800504e <_printf_float+0xbe>
 800533a:	9a05      	ldr	r2, [sp, #20]
 800533c:	464b      	mov	r3, r9
 800533e:	4442      	add	r2, r8
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	d1c1      	bne.n	80052ce <_printf_float+0x33e>
 800534a:	e680      	b.n	800504e <_printf_float+0xbe>
 800534c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534e:	2a01      	cmp	r2, #1
 8005350:	dc01      	bgt.n	8005356 <_printf_float+0x3c6>
 8005352:	07db      	lsls	r3, r3, #31
 8005354:	d53a      	bpl.n	80053cc <_printf_float+0x43c>
 8005356:	2301      	movs	r3, #1
 8005358:	4642      	mov	r2, r8
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f ae74 	beq.w	800504e <_printf_float+0xbe>
 8005366:	ee18 3a10 	vmov	r3, s16
 800536a:	4652      	mov	r2, sl
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f ae6b 	beq.w	800504e <_printf_float+0xbe>
 8005378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005384:	f7fb fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005388:	b9d8      	cbnz	r0, 80053c2 <_printf_float+0x432>
 800538a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800538e:	f108 0201 	add.w	r2, r8, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10e      	bne.n	80053ba <_printf_float+0x42a>
 800539c:	e657      	b.n	800504e <_printf_float+0xbe>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae50 	beq.w	800504e <_printf_float+0xbe>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	dcf1      	bgt.n	800539e <_printf_float+0x40e>
 80053ba:	464b      	mov	r3, r9
 80053bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c0:	e6da      	b.n	8005178 <_printf_float+0x1e8>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	f104 0a1a 	add.w	sl, r4, #26
 80053ca:	e7f2      	b.n	80053b2 <_printf_float+0x422>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4642      	mov	r2, r8
 80053d0:	e7df      	b.n	8005392 <_printf_float+0x402>
 80053d2:	2301      	movs	r3, #1
 80053d4:	464a      	mov	r2, r9
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae36 	beq.w	800504e <_printf_float+0xbe>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ea:	1a5b      	subs	r3, r3, r1
 80053ec:	4543      	cmp	r3, r8
 80053ee:	dcf0      	bgt.n	80053d2 <_printf_float+0x442>
 80053f0:	e6f8      	b.n	80051e4 <_printf_float+0x254>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 0919 	add.w	r9, r4, #25
 80053fa:	e7f4      	b.n	80053e6 <_printf_float+0x456>

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf02      	ittt	eq
 800546e:	68e5      	ldreq	r5, [r4, #12]
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	1aed      	subeq	r5, r5, r3
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d4 	beq.w	80056a2 <_printf_i+0x1ca>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80c0 	beq.w	8005680 <_printf_i+0x1a8>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005689 	.word	0x08005689
 8005548:	080055b1 	.word	0x080055b1
 800554c:	08005643 	.word	0x08005643
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056ab 	.word	0x080056ab
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b1 	.word	0x080055b1
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800564b 	.word	0x0800564b
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e09f      	b.n	80056c4 <_printf_i+0x1ec>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	0607      	lsls	r7, r0, #24
 800558a:	f103 0104 	add.w	r1, r3, #4
 800558e:	6029      	str	r1, [r5, #0]
 8005590:	d501      	bpl.n	8005596 <_printf_i+0xbe>
 8005592:	681e      	ldr	r6, [r3, #0]
 8005594:	e003      	b.n	800559e <_printf_i+0xc6>
 8005596:	0646      	lsls	r6, r0, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0xba>
 800559a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800559e:	2e00      	cmp	r6, #0
 80055a0:	da03      	bge.n	80055aa <_printf_i+0xd2>
 80055a2:	232d      	movs	r3, #45	; 0x2d
 80055a4:	4276      	negs	r6, r6
 80055a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055aa:	485a      	ldr	r0, [pc, #360]	; (8005714 <_printf_i+0x23c>)
 80055ac:	230a      	movs	r3, #10
 80055ae:	e012      	b.n	80055d6 <_printf_i+0xfe>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	6029      	str	r1, [r5, #0]
 80055b8:	0605      	lsls	r5, r0, #24
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0xe8>
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0xee>
 80055c0:	0641      	lsls	r1, r0, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0xe4>
 80055c4:	881e      	ldrh	r6, [r3, #0]
 80055c6:	4853      	ldr	r0, [pc, #332]	; (8005714 <_printf_i+0x23c>)
 80055c8:	2f6f      	cmp	r7, #111	; 0x6f
 80055ca:	bf0c      	ite	eq
 80055cc:	2308      	moveq	r3, #8
 80055ce:	230a      	movne	r3, #10
 80055d0:	2100      	movs	r1, #0
 80055d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055d6:	6865      	ldr	r5, [r4, #4]
 80055d8:	60a5      	str	r5, [r4, #8]
 80055da:	2d00      	cmp	r5, #0
 80055dc:	bfa2      	ittt	ge
 80055de:	6821      	ldrge	r1, [r4, #0]
 80055e0:	f021 0104 	bicge.w	r1, r1, #4
 80055e4:	6021      	strge	r1, [r4, #0]
 80055e6:	b90e      	cbnz	r6, 80055ec <_printf_i+0x114>
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	d04b      	beq.n	8005684 <_printf_i+0x1ac>
 80055ec:	4615      	mov	r5, r2
 80055ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f2:	fb03 6711 	mls	r7, r3, r1, r6
 80055f6:	5dc7      	ldrb	r7, [r0, r7]
 80055f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055fc:	4637      	mov	r7, r6
 80055fe:	42bb      	cmp	r3, r7
 8005600:	460e      	mov	r6, r1
 8005602:	d9f4      	bls.n	80055ee <_printf_i+0x116>
 8005604:	2b08      	cmp	r3, #8
 8005606:	d10b      	bne.n	8005620 <_printf_i+0x148>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07de      	lsls	r6, r3, #31
 800560c:	d508      	bpl.n	8005620 <_printf_i+0x148>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	6861      	ldr	r1, [r4, #4]
 8005612:	4299      	cmp	r1, r3
 8005614:	bfde      	ittt	le
 8005616:	2330      	movle	r3, #48	; 0x30
 8005618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800561c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005620:	1b52      	subs	r2, r2, r5
 8005622:	6122      	str	r2, [r4, #16]
 8005624:	f8cd a000 	str.w	sl, [sp]
 8005628:	464b      	mov	r3, r9
 800562a:	aa03      	add	r2, sp, #12
 800562c:	4621      	mov	r1, r4
 800562e:	4640      	mov	r0, r8
 8005630:	f7ff fee4 	bl	80053fc <_printf_common>
 8005634:	3001      	adds	r0, #1
 8005636:	d14a      	bne.n	80056ce <_printf_i+0x1f6>
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	b004      	add	sp, #16
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	4833      	ldr	r0, [pc, #204]	; (8005718 <_printf_i+0x240>)
 800564c:	2778      	movs	r7, #120	; 0x78
 800564e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	6829      	ldr	r1, [r5, #0]
 8005656:	061f      	lsls	r7, r3, #24
 8005658:	f851 6b04 	ldr.w	r6, [r1], #4
 800565c:	d402      	bmi.n	8005664 <_printf_i+0x18c>
 800565e:	065f      	lsls	r7, r3, #25
 8005660:	bf48      	it	mi
 8005662:	b2b6      	uxthmi	r6, r6
 8005664:	07df      	lsls	r7, r3, #31
 8005666:	bf48      	it	mi
 8005668:	f043 0320 	orrmi.w	r3, r3, #32
 800566c:	6029      	str	r1, [r5, #0]
 800566e:	bf48      	it	mi
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b91e      	cbnz	r6, 800567c <_printf_i+0x1a4>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	2310      	movs	r3, #16
 800567e:	e7a7      	b.n	80055d0 <_printf_i+0xf8>
 8005680:	4824      	ldr	r0, [pc, #144]	; (8005714 <_printf_i+0x23c>)
 8005682:	e7e4      	b.n	800564e <_printf_i+0x176>
 8005684:	4615      	mov	r5, r2
 8005686:	e7bd      	b.n	8005604 <_printf_i+0x12c>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	6826      	ldr	r6, [r4, #0]
 800568c:	6961      	ldr	r1, [r4, #20]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6028      	str	r0, [r5, #0]
 8005692:	0635      	lsls	r5, r6, #24
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	d501      	bpl.n	800569c <_printf_i+0x1c4>
 8005698:	6019      	str	r1, [r3, #0]
 800569a:	e002      	b.n	80056a2 <_printf_i+0x1ca>
 800569c:	0670      	lsls	r0, r6, #25
 800569e:	d5fb      	bpl.n	8005698 <_printf_i+0x1c0>
 80056a0:	8019      	strh	r1, [r3, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	4615      	mov	r5, r2
 80056a8:	e7bc      	b.n	8005624 <_printf_i+0x14c>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	1d1a      	adds	r2, r3, #4
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	681d      	ldr	r5, [r3, #0]
 80056b2:	6862      	ldr	r2, [r4, #4]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f7fa fd8a 	bl	80001d0 <memchr>
 80056bc:	b108      	cbz	r0, 80056c2 <_printf_i+0x1ea>
 80056be:	1b40      	subs	r0, r0, r5
 80056c0:	6060      	str	r0, [r4, #4]
 80056c2:	6863      	ldr	r3, [r4, #4]
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	2300      	movs	r3, #0
 80056c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056cc:	e7aa      	b.n	8005624 <_printf_i+0x14c>
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	462a      	mov	r2, r5
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	47d0      	blx	sl
 80056d8:	3001      	adds	r0, #1
 80056da:	d0ad      	beq.n	8005638 <_printf_i+0x160>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	079b      	lsls	r3, r3, #30
 80056e0:	d413      	bmi.n	800570a <_printf_i+0x232>
 80056e2:	68e0      	ldr	r0, [r4, #12]
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	4298      	cmp	r0, r3
 80056e8:	bfb8      	it	lt
 80056ea:	4618      	movlt	r0, r3
 80056ec:	e7a6      	b.n	800563c <_printf_i+0x164>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4632      	mov	r2, r6
 80056f2:	4649      	mov	r1, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	47d0      	blx	sl
 80056f8:	3001      	adds	r0, #1
 80056fa:	d09d      	beq.n	8005638 <_printf_i+0x160>
 80056fc:	3501      	adds	r5, #1
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	9903      	ldr	r1, [sp, #12]
 8005702:	1a5b      	subs	r3, r3, r1
 8005704:	42ab      	cmp	r3, r5
 8005706:	dcf2      	bgt.n	80056ee <_printf_i+0x216>
 8005708:	e7eb      	b.n	80056e2 <_printf_i+0x20a>
 800570a:	2500      	movs	r5, #0
 800570c:	f104 0619 	add.w	r6, r4, #25
 8005710:	e7f5      	b.n	80056fe <_printf_i+0x226>
 8005712:	bf00      	nop
 8005714:	08007812 	.word	0x08007812
 8005718:	08007823 	.word	0x08007823

0800571c <std>:
 800571c:	2300      	movs	r3, #0
 800571e:	b510      	push	{r4, lr}
 8005720:	4604      	mov	r4, r0
 8005722:	e9c0 3300 	strd	r3, r3, [r0]
 8005726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800572a:	6083      	str	r3, [r0, #8]
 800572c:	8181      	strh	r1, [r0, #12]
 800572e:	6643      	str	r3, [r0, #100]	; 0x64
 8005730:	81c2      	strh	r2, [r0, #14]
 8005732:	6183      	str	r3, [r0, #24]
 8005734:	4619      	mov	r1, r3
 8005736:	2208      	movs	r2, #8
 8005738:	305c      	adds	r0, #92	; 0x5c
 800573a:	f000 f8e2 	bl	8005902 <memset>
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <std+0x38>)
 8005740:	6263      	str	r3, [r4, #36]	; 0x24
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <std+0x3c>)
 8005744:	62a3      	str	r3, [r4, #40]	; 0x28
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <std+0x40>)
 8005748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <std+0x44>)
 800574c:	6224      	str	r4, [r4, #32]
 800574e:	6323      	str	r3, [r4, #48]	; 0x30
 8005750:	bd10      	pop	{r4, pc}
 8005752:	bf00      	nop
 8005754:	0800587d 	.word	0x0800587d
 8005758:	0800589f 	.word	0x0800589f
 800575c:	080058d7 	.word	0x080058d7
 8005760:	080058fb 	.word	0x080058fb

08005764 <stdio_exit_handler>:
 8005764:	4a02      	ldr	r2, [pc, #8]	; (8005770 <stdio_exit_handler+0xc>)
 8005766:	4903      	ldr	r1, [pc, #12]	; (8005774 <stdio_exit_handler+0x10>)
 8005768:	4803      	ldr	r0, [pc, #12]	; (8005778 <stdio_exit_handler+0x14>)
 800576a:	f000 b869 	b.w	8005840 <_fwalk_sglue>
 800576e:	bf00      	nop
 8005770:	2000000c 	.word	0x2000000c
 8005774:	080070f9 	.word	0x080070f9
 8005778:	20000018 	.word	0x20000018

0800577c <cleanup_stdio>:
 800577c:	6841      	ldr	r1, [r0, #4]
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <cleanup_stdio+0x34>)
 8005780:	4299      	cmp	r1, r3
 8005782:	b510      	push	{r4, lr}
 8005784:	4604      	mov	r4, r0
 8005786:	d001      	beq.n	800578c <cleanup_stdio+0x10>
 8005788:	f001 fcb6 	bl	80070f8 <_fflush_r>
 800578c:	68a1      	ldr	r1, [r4, #8]
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <cleanup_stdio+0x38>)
 8005790:	4299      	cmp	r1, r3
 8005792:	d002      	beq.n	800579a <cleanup_stdio+0x1e>
 8005794:	4620      	mov	r0, r4
 8005796:	f001 fcaf 	bl	80070f8 <_fflush_r>
 800579a:	68e1      	ldr	r1, [r4, #12]
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <cleanup_stdio+0x3c>)
 800579e:	4299      	cmp	r1, r3
 80057a0:	d004      	beq.n	80057ac <cleanup_stdio+0x30>
 80057a2:	4620      	mov	r0, r4
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f001 bca6 	b.w	80070f8 <_fflush_r>
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	bf00      	nop
 80057b0:	20000380 	.word	0x20000380
 80057b4:	200003e8 	.word	0x200003e8
 80057b8:	20000450 	.word	0x20000450

080057bc <global_stdio_init.part.0>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <global_stdio_init.part.0+0x30>)
 80057c0:	4c0b      	ldr	r4, [pc, #44]	; (80057f0 <global_stdio_init.part.0+0x34>)
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <global_stdio_init.part.0+0x38>)
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	4620      	mov	r0, r4
 80057c8:	2200      	movs	r2, #0
 80057ca:	2104      	movs	r1, #4
 80057cc:	f7ff ffa6 	bl	800571c <std>
 80057d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057d4:	2201      	movs	r2, #1
 80057d6:	2109      	movs	r1, #9
 80057d8:	f7ff ffa0 	bl	800571c <std>
 80057dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057e0:	2202      	movs	r2, #2
 80057e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e6:	2112      	movs	r1, #18
 80057e8:	f7ff bf98 	b.w	800571c <std>
 80057ec:	200004b8 	.word	0x200004b8
 80057f0:	20000380 	.word	0x20000380
 80057f4:	08005765 	.word	0x08005765

080057f8 <__sfp_lock_acquire>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__sfp_lock_acquire+0x8>)
 80057fa:	f000 b8ff 	b.w	80059fc <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	200004c1 	.word	0x200004c1

08005804 <__sfp_lock_release>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__sfp_lock_release+0x8>)
 8005806:	f000 b8fa 	b.w	80059fe <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	200004c1 	.word	0x200004c1

08005810 <__sinit>:
 8005810:	b510      	push	{r4, lr}
 8005812:	4604      	mov	r4, r0
 8005814:	f7ff fff0 	bl	80057f8 <__sfp_lock_acquire>
 8005818:	6a23      	ldr	r3, [r4, #32]
 800581a:	b11b      	cbz	r3, 8005824 <__sinit+0x14>
 800581c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005820:	f7ff bff0 	b.w	8005804 <__sfp_lock_release>
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__sinit+0x28>)
 8005826:	6223      	str	r3, [r4, #32]
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <__sinit+0x2c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f5      	bne.n	800581c <__sinit+0xc>
 8005830:	f7ff ffc4 	bl	80057bc <global_stdio_init.part.0>
 8005834:	e7f2      	b.n	800581c <__sinit+0xc>
 8005836:	bf00      	nop
 8005838:	0800577d 	.word	0x0800577d
 800583c:	200004b8 	.word	0x200004b8

08005840 <_fwalk_sglue>:
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005844:	4607      	mov	r7, r0
 8005846:	4688      	mov	r8, r1
 8005848:	4614      	mov	r4, r2
 800584a:	2600      	movs	r6, #0
 800584c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005850:	f1b9 0901 	subs.w	r9, r9, #1
 8005854:	d505      	bpl.n	8005862 <_fwalk_sglue+0x22>
 8005856:	6824      	ldr	r4, [r4, #0]
 8005858:	2c00      	cmp	r4, #0
 800585a:	d1f7      	bne.n	800584c <_fwalk_sglue+0xc>
 800585c:	4630      	mov	r0, r6
 800585e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d907      	bls.n	8005878 <_fwalk_sglue+0x38>
 8005868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800586c:	3301      	adds	r3, #1
 800586e:	d003      	beq.n	8005878 <_fwalk_sglue+0x38>
 8005870:	4629      	mov	r1, r5
 8005872:	4638      	mov	r0, r7
 8005874:	47c0      	blx	r8
 8005876:	4306      	orrs	r6, r0
 8005878:	3568      	adds	r5, #104	; 0x68
 800587a:	e7e9      	b.n	8005850 <_fwalk_sglue+0x10>

0800587c <__sread>:
 800587c:	b510      	push	{r4, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	f000 f86c 	bl	8005960 <_read_r>
 8005888:	2800      	cmp	r0, #0
 800588a:	bfab      	itete	ge
 800588c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800588e:	89a3      	ldrhlt	r3, [r4, #12]
 8005890:	181b      	addge	r3, r3, r0
 8005892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005896:	bfac      	ite	ge
 8005898:	6563      	strge	r3, [r4, #84]	; 0x54
 800589a:	81a3      	strhlt	r3, [r4, #12]
 800589c:	bd10      	pop	{r4, pc}

0800589e <__swrite>:
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	461f      	mov	r7, r3
 80058a4:	898b      	ldrh	r3, [r1, #12]
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4616      	mov	r6, r2
 80058ae:	d505      	bpl.n	80058bc <__swrite+0x1e>
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	2302      	movs	r3, #2
 80058b6:	2200      	movs	r2, #0
 80058b8:	f000 f840 	bl	800593c <_lseek_r>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	4628      	mov	r0, r5
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f000 b857 	b.w	8005984 <_write_r>

080058d6 <__sseek>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 f82d 	bl	800593c <_lseek_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	bf15      	itete	ne
 80058e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058f2:	81a3      	strheq	r3, [r4, #12]
 80058f4:	bf18      	it	ne
 80058f6:	81a3      	strhne	r3, [r4, #12]
 80058f8:	bd10      	pop	{r4, pc}

080058fa <__sclose>:
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 b80d 	b.w	800591c <_close_r>

08005902 <memset>:
 8005902:	4402      	add	r2, r0
 8005904:	4603      	mov	r3, r0
 8005906:	4293      	cmp	r3, r2
 8005908:	d100      	bne.n	800590c <memset+0xa>
 800590a:	4770      	bx	lr
 800590c:	f803 1b01 	strb.w	r1, [r3], #1
 8005910:	e7f9      	b.n	8005906 <memset+0x4>
	...

08005914 <_localeconv_r>:
 8005914:	4800      	ldr	r0, [pc, #0]	; (8005918 <_localeconv_r+0x4>)
 8005916:	4770      	bx	lr
 8005918:	20000158 	.word	0x20000158

0800591c <_close_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d06      	ldr	r5, [pc, #24]	; (8005938 <_close_r+0x1c>)
 8005920:	2300      	movs	r3, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fe6f 	bl	800160a <_close>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_close_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_close_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	200004bc 	.word	0x200004bc

0800593c <_lseek_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d07      	ldr	r5, [pc, #28]	; (800595c <_lseek_r+0x20>)
 8005940:	4604      	mov	r4, r0
 8005942:	4608      	mov	r0, r1
 8005944:	4611      	mov	r1, r2
 8005946:	2200      	movs	r2, #0
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f7fb fe84 	bl	8001658 <_lseek>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_lseek_r+0x1e>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_lseek_r+0x1e>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	200004bc 	.word	0x200004bc

08005960 <_read_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d07      	ldr	r5, [pc, #28]	; (8005980 <_read_r+0x20>)
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	2200      	movs	r2, #0
 800596c:	602a      	str	r2, [r5, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f7fb fe2e 	bl	80015d0 <_read>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_read_r+0x1e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_read_r+0x1e>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	200004bc 	.word	0x200004bc

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb fc00 	bl	8001198 <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200004bc 	.word	0x200004bc

080059a8 <__errno>:
 80059a8:	4b01      	ldr	r3, [pc, #4]	; (80059b0 <__errno+0x8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000064 	.word	0x20000064

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	; (80059ec <__libc_init_array+0x38>)
 80059b8:	4c0d      	ldr	r4, [pc, #52]	; (80059f0 <__libc_init_array+0x3c>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	2600      	movs	r6, #0
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	; (80059f4 <__libc_init_array+0x40>)
 80059c6:	4c0c      	ldr	r4, [pc, #48]	; (80059f8 <__libc_init_array+0x44>)
 80059c8:	f001 feea 	bl	80077a0 <_init>
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	2600      	movs	r6, #0
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08007b7c 	.word	0x08007b7c
 80059f0:	08007b7c 	.word	0x08007b7c
 80059f4:	08007b7c 	.word	0x08007b7c
 80059f8:	08007b80 	.word	0x08007b80

080059fc <__retarget_lock_acquire_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_release_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <quorem>:
 8005a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	6903      	ldr	r3, [r0, #16]
 8005a06:	690c      	ldr	r4, [r1, #16]
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	db7e      	blt.n	8005b0c <quorem+0x10c>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	f101 0814 	add.w	r8, r1, #20
 8005a14:	f100 0514 	add.w	r5, r0, #20
 8005a18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a1c:	9301      	str	r3, [sp, #4]
 8005a1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a26:	3301      	adds	r3, #1
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a32:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a36:	d331      	bcc.n	8005a9c <quorem+0x9c>
 8005a38:	f04f 0e00 	mov.w	lr, #0
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	46ac      	mov	ip, r5
 8005a40:	46f2      	mov	sl, lr
 8005a42:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a46:	b293      	uxth	r3, r2
 8005a48:	fb06 e303 	mla	r3, r6, r3, lr
 8005a4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a50:	0c1a      	lsrs	r2, r3, #16
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ebaa 0303 	sub.w	r3, sl, r3
 8005a58:	f8dc a000 	ldr.w	sl, [ip]
 8005a5c:	fa13 f38a 	uxtah	r3, r3, sl
 8005a60:	fb06 220e 	mla	r2, r6, lr, r2
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a76:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a7a:	4581      	cmp	r9, r0
 8005a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a80:	f84c 3b04 	str.w	r3, [ip], #4
 8005a84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a88:	d2db      	bcs.n	8005a42 <quorem+0x42>
 8005a8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a8e:	b92b      	cbnz	r3, 8005a9c <quorem+0x9c>
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	3b04      	subs	r3, #4
 8005a94:	429d      	cmp	r5, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	d32c      	bcc.n	8005af4 <quorem+0xf4>
 8005a9a:	613c      	str	r4, [r7, #16]
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f001 f9a5 	bl	8006dec <__mcmp>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	db22      	blt.n	8005aec <quorem+0xec>
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab0:	f8d1 c000 	ldr.w	ip, [r1]
 8005ab4:	b293      	uxth	r3, r2
 8005ab6:	1ac3      	subs	r3, r0, r3
 8005ab8:	0c12      	lsrs	r2, r2, #16
 8005aba:	fa13 f38c 	uxtah	r3, r3, ip
 8005abe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ac2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005acc:	45c1      	cmp	r9, r8
 8005ace:	f841 3b04 	str.w	r3, [r1], #4
 8005ad2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ad6:	d2e9      	bcs.n	8005aac <quorem+0xac>
 8005ad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005adc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ae0:	b922      	cbnz	r2, 8005aec <quorem+0xec>
 8005ae2:	3b04      	subs	r3, #4
 8005ae4:	429d      	cmp	r5, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	d30a      	bcc.n	8005b00 <quorem+0x100>
 8005aea:	613c      	str	r4, [r7, #16]
 8005aec:	4630      	mov	r0, r6
 8005aee:	b003      	add	sp, #12
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	3b04      	subs	r3, #4
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	d1ce      	bne.n	8005a9a <quorem+0x9a>
 8005afc:	3c01      	subs	r4, #1
 8005afe:	e7c9      	b.n	8005a94 <quorem+0x94>
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	3b04      	subs	r3, #4
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	d1f0      	bne.n	8005aea <quorem+0xea>
 8005b08:	3c01      	subs	r4, #1
 8005b0a:	e7eb      	b.n	8005ae4 <quorem+0xe4>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e7ee      	b.n	8005aee <quorem+0xee>

08005b10 <_dtoa_r>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ed2d 8b04 	vpush	{d8-d9}
 8005b18:	69c5      	ldr	r5, [r0, #28]
 8005b1a:	b093      	sub	sp, #76	; 0x4c
 8005b1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b20:	ec57 6b10 	vmov	r6, r7, d0
 8005b24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b28:	9107      	str	r1, [sp, #28]
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b30:	b975      	cbnz	r5, 8005b50 <_dtoa_r+0x40>
 8005b32:	2010      	movs	r0, #16
 8005b34:	f000 fe2a 	bl	800678c <malloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	61e0      	str	r0, [r4, #28]
 8005b3c:	b920      	cbnz	r0, 8005b48 <_dtoa_r+0x38>
 8005b3e:	4bae      	ldr	r3, [pc, #696]	; (8005df8 <_dtoa_r+0x2e8>)
 8005b40:	21ef      	movs	r1, #239	; 0xef
 8005b42:	48ae      	ldr	r0, [pc, #696]	; (8005dfc <_dtoa_r+0x2ec>)
 8005b44:	f001 fb1e 	bl	8007184 <__assert_func>
 8005b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b4c:	6005      	str	r5, [r0, #0]
 8005b4e:	60c5      	str	r5, [r0, #12]
 8005b50:	69e3      	ldr	r3, [r4, #28]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	b151      	cbz	r1, 8005b6c <_dtoa_r+0x5c>
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	604a      	str	r2, [r1, #4]
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4093      	lsls	r3, r2
 8005b5e:	608b      	str	r3, [r1, #8]
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 ff07 	bl	8006974 <_Bfree>
 8005b66:	69e3      	ldr	r3, [r4, #28]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	1e3b      	subs	r3, r7, #0
 8005b6e:	bfbb      	ittet	lt
 8005b70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	9303      	strlt	r3, [sp, #12]
 8005b76:	2300      	movge	r3, #0
 8005b78:	2201      	movlt	r2, #1
 8005b7a:	bfac      	ite	ge
 8005b7c:	f8c8 3000 	strge.w	r3, [r8]
 8005b80:	f8c8 2000 	strlt.w	r2, [r8]
 8005b84:	4b9e      	ldr	r3, [pc, #632]	; (8005e00 <_dtoa_r+0x2f0>)
 8005b86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b8a:	ea33 0308 	bics.w	r3, r3, r8
 8005b8e:	d11b      	bne.n	8005bc8 <_dtoa_r+0xb8>
 8005b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b92:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b9c:	4333      	orrs	r3, r6
 8005b9e:	f000 8593 	beq.w	80066c8 <_dtoa_r+0xbb8>
 8005ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ba4:	b963      	cbnz	r3, 8005bc0 <_dtoa_r+0xb0>
 8005ba6:	4b97      	ldr	r3, [pc, #604]	; (8005e04 <_dtoa_r+0x2f4>)
 8005ba8:	e027      	b.n	8005bfa <_dtoa_r+0xea>
 8005baa:	4b97      	ldr	r3, [pc, #604]	; (8005e08 <_dtoa_r+0x2f8>)
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	9800      	ldr	r0, [sp, #0]
 8005bb6:	b013      	add	sp, #76	; 0x4c
 8005bb8:	ecbd 8b04 	vpop	{d8-d9}
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	4b90      	ldr	r3, [pc, #576]	; (8005e04 <_dtoa_r+0x2f4>)
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	e7f3      	b.n	8005bb0 <_dtoa_r+0xa0>
 8005bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	ec51 0b17 	vmov	r0, r1, d7
 8005bd2:	eeb0 8a47 	vmov.f32	s16, s14
 8005bd6:	eef0 8a67 	vmov.f32	s17, s15
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f7fa ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8005be0:	4681      	mov	r9, r0
 8005be2:	b160      	cbz	r0, 8005bfe <_dtoa_r+0xee>
 8005be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005be6:	2301      	movs	r3, #1
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8568 	beq.w	80066c2 <_dtoa_r+0xbb2>
 8005bf2:	4b86      	ldr	r3, [pc, #536]	; (8005e0c <_dtoa_r+0x2fc>)
 8005bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	e7da      	b.n	8005bb4 <_dtoa_r+0xa4>
 8005bfe:	aa10      	add	r2, sp, #64	; 0x40
 8005c00:	a911      	add	r1, sp, #68	; 0x44
 8005c02:	4620      	mov	r0, r4
 8005c04:	eeb0 0a48 	vmov.f32	s0, s16
 8005c08:	eef0 0a68 	vmov.f32	s1, s17
 8005c0c:	f001 f994 	bl	8006f38 <__d2b>
 8005c10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c14:	4682      	mov	sl, r0
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	d07f      	beq.n	8005d1a <_dtoa_r+0x20a>
 8005c1a:	ee18 3a90 	vmov	r3, s17
 8005c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c26:	ec51 0b18 	vmov	r0, r1, d8
 8005c2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c36:	4619      	mov	r1, r3
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b75      	ldr	r3, [pc, #468]	; (8005e10 <_dtoa_r+0x300>)
 8005c3c:	f7fa fb24 	bl	8000288 <__aeabi_dsub>
 8005c40:	a367      	add	r3, pc, #412	; (adr r3, 8005de0 <_dtoa_r+0x2d0>)
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f7fa fcd7 	bl	80005f8 <__aeabi_dmul>
 8005c4a:	a367      	add	r3, pc, #412	; (adr r3, 8005de8 <_dtoa_r+0x2d8>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fb1c 	bl	800028c <__adddf3>
 8005c54:	4606      	mov	r6, r0
 8005c56:	4628      	mov	r0, r5
 8005c58:	460f      	mov	r7, r1
 8005c5a:	f7fa fc63 	bl	8000524 <__aeabi_i2d>
 8005c5e:	a364      	add	r3, pc, #400	; (adr r3, 8005df0 <_dtoa_r+0x2e0>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fcc8 	bl	80005f8 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fb0c 	bl	800028c <__adddf3>
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	f7fa ff6e 	bl	8000b58 <__aeabi_d2iz>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4683      	mov	fp, r0
 8005c80:	2300      	movs	r3, #0
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa ff29 	bl	8000adc <__aeabi_dcmplt>
 8005c8a:	b148      	cbz	r0, 8005ca0 <_dtoa_r+0x190>
 8005c8c:	4658      	mov	r0, fp
 8005c8e:	f7fa fc49 	bl	8000524 <__aeabi_i2d>
 8005c92:	4632      	mov	r2, r6
 8005c94:	463b      	mov	r3, r7
 8005c96:	f7fa ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c9a:	b908      	cbnz	r0, 8005ca0 <_dtoa_r+0x190>
 8005c9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ca0:	f1bb 0f16 	cmp.w	fp, #22
 8005ca4:	d857      	bhi.n	8005d56 <_dtoa_r+0x246>
 8005ca6:	4b5b      	ldr	r3, [pc, #364]	; (8005e14 <_dtoa_r+0x304>)
 8005ca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	ec51 0b18 	vmov	r0, r1, d8
 8005cb4:	f7fa ff12 	bl	8000adc <__aeabi_dcmplt>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d04e      	beq.n	8005d5a <_dtoa_r+0x24a>
 8005cbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cc6:	1b5b      	subs	r3, r3, r5
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	bf45      	ittet	mi
 8005ccc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005cd0:	9305      	strmi	r3, [sp, #20]
 8005cd2:	2300      	movpl	r3, #0
 8005cd4:	2300      	movmi	r3, #0
 8005cd6:	9206      	str	r2, [sp, #24]
 8005cd8:	bf54      	ite	pl
 8005cda:	9305      	strpl	r3, [sp, #20]
 8005cdc:	9306      	strmi	r3, [sp, #24]
 8005cde:	f1bb 0f00 	cmp.w	fp, #0
 8005ce2:	db3c      	blt.n	8005d5e <_dtoa_r+0x24e>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005cea:	445b      	add	r3, fp
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	9b07      	ldr	r3, [sp, #28]
 8005cf4:	2b09      	cmp	r3, #9
 8005cf6:	d868      	bhi.n	8005dca <_dtoa_r+0x2ba>
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	bfc4      	itt	gt
 8005cfc:	3b04      	subgt	r3, #4
 8005cfe:	9307      	strgt	r3, [sp, #28]
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	f1a3 0302 	sub.w	r3, r3, #2
 8005d06:	bfcc      	ite	gt
 8005d08:	2500      	movgt	r5, #0
 8005d0a:	2501      	movle	r5, #1
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	f200 8085 	bhi.w	8005e1c <_dtoa_r+0x30c>
 8005d12:	e8df f003 	tbb	[pc, r3]
 8005d16:	3b2e      	.short	0x3b2e
 8005d18:	5839      	.short	0x5839
 8005d1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d1e:	441d      	add	r5, r3
 8005d20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	bfc1      	itttt	gt
 8005d28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d38:	bfd6      	itet	le
 8005d3a:	f1c3 0320 	rsble	r3, r3, #32
 8005d3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d42:	fa06 f003 	lslle.w	r0, r6, r3
 8005d46:	f7fa fbdd 	bl	8000504 <__aeabi_ui2d>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d50:	3d01      	subs	r5, #1
 8005d52:	920e      	str	r2, [sp, #56]	; 0x38
 8005d54:	e76f      	b.n	8005c36 <_dtoa_r+0x126>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e7b3      	b.n	8005cc2 <_dtoa_r+0x1b2>
 8005d5a:	900c      	str	r0, [sp, #48]	; 0x30
 8005d5c:	e7b2      	b.n	8005cc4 <_dtoa_r+0x1b4>
 8005d5e:	9b05      	ldr	r3, [sp, #20]
 8005d60:	eba3 030b 	sub.w	r3, r3, fp
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	f1cb 0300 	rsb	r3, fp, #0
 8005d6a:	9308      	str	r3, [sp, #32]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d70:	e7bf      	b.n	8005cf2 <_dtoa_r+0x1e2>
 8005d72:	2300      	movs	r3, #0
 8005d74:	9309      	str	r3, [sp, #36]	; 0x24
 8005d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dc52      	bgt.n	8005e22 <_dtoa_r+0x312>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	9304      	str	r3, [sp, #16]
 8005d82:	461a      	mov	r2, r3
 8005d84:	920a      	str	r2, [sp, #40]	; 0x28
 8005d86:	e00b      	b.n	8005da0 <_dtoa_r+0x290>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e7f3      	b.n	8005d74 <_dtoa_r+0x264>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d92:	445b      	add	r3, fp
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	3301      	adds	r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	bfb8      	it	lt
 8005d9e:	2301      	movlt	r3, #1
 8005da0:	69e0      	ldr	r0, [r4, #28]
 8005da2:	2100      	movs	r1, #0
 8005da4:	2204      	movs	r2, #4
 8005da6:	f102 0614 	add.w	r6, r2, #20
 8005daa:	429e      	cmp	r6, r3
 8005dac:	d93d      	bls.n	8005e2a <_dtoa_r+0x31a>
 8005dae:	6041      	str	r1, [r0, #4]
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fd9f 	bl	80068f4 <_Balloc>
 8005db6:	9000      	str	r0, [sp, #0]
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d139      	bne.n	8005e30 <_dtoa_r+0x320>
 8005dbc:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <_dtoa_r+0x308>)
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	f240 11af 	movw	r1, #431	; 0x1af
 8005dc4:	e6bd      	b.n	8005b42 <_dtoa_r+0x32>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7e1      	b.n	8005d8e <_dtoa_r+0x27e>
 8005dca:	2501      	movs	r5, #1
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	9509      	str	r5, [sp, #36]	; 0x24
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2312      	movs	r3, #18
 8005dde:	e7d1      	b.n	8005d84 <_dtoa_r+0x274>
 8005de0:	636f4361 	.word	0x636f4361
 8005de4:	3fd287a7 	.word	0x3fd287a7
 8005de8:	8b60c8b3 	.word	0x8b60c8b3
 8005dec:	3fc68a28 	.word	0x3fc68a28
 8005df0:	509f79fb 	.word	0x509f79fb
 8005df4:	3fd34413 	.word	0x3fd34413
 8005df8:	08007841 	.word	0x08007841
 8005dfc:	08007858 	.word	0x08007858
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	0800783d 	.word	0x0800783d
 8005e08:	08007834 	.word	0x08007834
 8005e0c:	08007811 	.word	0x08007811
 8005e10:	3ff80000 	.word	0x3ff80000
 8005e14:	08007948 	.word	0x08007948
 8005e18:	080078b0 	.word	0x080078b0
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	e7d7      	b.n	8005dd2 <_dtoa_r+0x2c2>
 8005e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	e7ba      	b.n	8005da0 <_dtoa_r+0x290>
 8005e2a:	3101      	adds	r1, #1
 8005e2c:	0052      	lsls	r2, r2, #1
 8005e2e:	e7ba      	b.n	8005da6 <_dtoa_r+0x296>
 8005e30:	69e3      	ldr	r3, [r4, #28]
 8005e32:	9a00      	ldr	r2, [sp, #0]
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	2b0e      	cmp	r3, #14
 8005e3a:	f200 80a8 	bhi.w	8005f8e <_dtoa_r+0x47e>
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	f000 80a5 	beq.w	8005f8e <_dtoa_r+0x47e>
 8005e44:	f1bb 0f00 	cmp.w	fp, #0
 8005e48:	dd38      	ble.n	8005ebc <_dtoa_r+0x3ac>
 8005e4a:	4bc0      	ldr	r3, [pc, #768]	; (800614c <_dtoa_r+0x63c>)
 8005e4c:	f00b 020f 	and.w	r2, fp, #15
 8005e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005e60:	d019      	beq.n	8005e96 <_dtoa_r+0x386>
 8005e62:	4bbb      	ldr	r3, [pc, #748]	; (8006150 <_dtoa_r+0x640>)
 8005e64:	ec51 0b18 	vmov	r0, r1, d8
 8005e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e6c:	f7fa fcee 	bl	800084c <__aeabi_ddiv>
 8005e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e74:	f008 080f 	and.w	r8, r8, #15
 8005e78:	2503      	movs	r5, #3
 8005e7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006150 <_dtoa_r+0x640>
 8005e7e:	f1b8 0f00 	cmp.w	r8, #0
 8005e82:	d10a      	bne.n	8005e9a <_dtoa_r+0x38a>
 8005e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	f7fa fcde 	bl	800084c <__aeabi_ddiv>
 8005e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e94:	e02b      	b.n	8005eee <_dtoa_r+0x3de>
 8005e96:	2502      	movs	r5, #2
 8005e98:	e7ef      	b.n	8005e7a <_dtoa_r+0x36a>
 8005e9a:	f018 0f01 	tst.w	r8, #1
 8005e9e:	d008      	beq.n	8005eb2 <_dtoa_r+0x3a2>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ea8:	f7fa fba6 	bl	80005f8 <__aeabi_dmul>
 8005eac:	3501      	adds	r5, #1
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005eb6:	f109 0908 	add.w	r9, r9, #8
 8005eba:	e7e0      	b.n	8005e7e <_dtoa_r+0x36e>
 8005ebc:	f000 809f 	beq.w	8005ffe <_dtoa_r+0x4ee>
 8005ec0:	f1cb 0600 	rsb	r6, fp, #0
 8005ec4:	4ba1      	ldr	r3, [pc, #644]	; (800614c <_dtoa_r+0x63c>)
 8005ec6:	4fa2      	ldr	r7, [pc, #648]	; (8006150 <_dtoa_r+0x640>)
 8005ec8:	f006 020f 	and.w	r2, r6, #15
 8005ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	ec51 0b18 	vmov	r0, r1, d8
 8005ed8:	f7fa fb8e 	bl	80005f8 <__aeabi_dmul>
 8005edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee0:	1136      	asrs	r6, r6, #4
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2502      	movs	r5, #2
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d17e      	bne.n	8005fe8 <_dtoa_r+0x4d8>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d0      	bne.n	8005e90 <_dtoa_r+0x380>
 8005eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ef0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8084 	beq.w	8006002 <_dtoa_r+0x4f2>
 8005efa:	4b96      	ldr	r3, [pc, #600]	; (8006154 <_dtoa_r+0x644>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	4640      	mov	r0, r8
 8005f00:	4649      	mov	r1, r9
 8005f02:	f7fa fdeb 	bl	8000adc <__aeabi_dcmplt>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d07b      	beq.n	8006002 <_dtoa_r+0x4f2>
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d078      	beq.n	8006002 <_dtoa_r+0x4f2>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dd39      	ble.n	8005f8a <_dtoa_r+0x47a>
 8005f16:	4b90      	ldr	r3, [pc, #576]	; (8006158 <_dtoa_r+0x648>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f26:	9e01      	ldr	r6, [sp, #4]
 8005f28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f32:	4628      	mov	r0, r5
 8005f34:	f7fa faf6 	bl	8000524 <__aeabi_i2d>
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f7fa fb5c 	bl	80005f8 <__aeabi_dmul>
 8005f40:	4b86      	ldr	r3, [pc, #536]	; (800615c <_dtoa_r+0x64c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	f7fa f9a2 	bl	800028c <__adddf3>
 8005f48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f50:	9303      	str	r3, [sp, #12]
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d158      	bne.n	8006008 <_dtoa_r+0x4f8>
 8005f56:	4b82      	ldr	r3, [pc, #520]	; (8006160 <_dtoa_r+0x650>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	f7fa f993 	bl	8000288 <__aeabi_dsub>
 8005f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f66:	4680      	mov	r8, r0
 8005f68:	4689      	mov	r9, r1
 8005f6a:	f7fa fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f040 8296 	bne.w	80064a0 <_dtoa_r+0x990>
 8005f74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f78:	4640      	mov	r0, r8
 8005f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f7e:	4649      	mov	r1, r9
 8005f80:	f7fa fdac 	bl	8000adc <__aeabi_dcmplt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f040 8289 	bne.w	800649c <_dtoa_r+0x98c>
 8005f8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f2c0 814e 	blt.w	8006232 <_dtoa_r+0x722>
 8005f96:	f1bb 0f0e 	cmp.w	fp, #14
 8005f9a:	f300 814a 	bgt.w	8006232 <_dtoa_r+0x722>
 8005f9e:	4b6b      	ldr	r3, [pc, #428]	; (800614c <_dtoa_r+0x63c>)
 8005fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f280 80dc 	bge.w	8006168 <_dtoa_r+0x658>
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f300 80d8 	bgt.w	8006168 <_dtoa_r+0x658>
 8005fb8:	f040 826f 	bne.w	800649a <_dtoa_r+0x98a>
 8005fbc:	4b68      	ldr	r3, [pc, #416]	; (8006160 <_dtoa_r+0x650>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa fb18 	bl	80005f8 <__aeabi_dmul>
 8005fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fcc:	f7fa fd9a 	bl	8000b04 <__aeabi_dcmpge>
 8005fd0:	9e04      	ldr	r6, [sp, #16]
 8005fd2:	4637      	mov	r7, r6
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 8245 	bne.w	8006464 <_dtoa_r+0x954>
 8005fda:	9d00      	ldr	r5, [sp, #0]
 8005fdc:	2331      	movs	r3, #49	; 0x31
 8005fde:	f805 3b01 	strb.w	r3, [r5], #1
 8005fe2:	f10b 0b01 	add.w	fp, fp, #1
 8005fe6:	e241      	b.n	800646c <_dtoa_r+0x95c>
 8005fe8:	07f2      	lsls	r2, r6, #31
 8005fea:	d505      	bpl.n	8005ff8 <_dtoa_r+0x4e8>
 8005fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	1076      	asrs	r6, r6, #1
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	e773      	b.n	8005ee6 <_dtoa_r+0x3d6>
 8005ffe:	2502      	movs	r5, #2
 8006000:	e775      	b.n	8005eee <_dtoa_r+0x3de>
 8006002:	9e04      	ldr	r6, [sp, #16]
 8006004:	465f      	mov	r7, fp
 8006006:	e792      	b.n	8005f2e <_dtoa_r+0x41e>
 8006008:	9900      	ldr	r1, [sp, #0]
 800600a:	4b50      	ldr	r3, [pc, #320]	; (800614c <_dtoa_r+0x63c>)
 800600c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006010:	4431      	add	r1, r6
 8006012:	9102      	str	r1, [sp, #8]
 8006014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006016:	eeb0 9a47 	vmov.f32	s18, s14
 800601a:	eef0 9a67 	vmov.f32	s19, s15
 800601e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006026:	2900      	cmp	r1, #0
 8006028:	d044      	beq.n	80060b4 <_dtoa_r+0x5a4>
 800602a:	494e      	ldr	r1, [pc, #312]	; (8006164 <_dtoa_r+0x654>)
 800602c:	2000      	movs	r0, #0
 800602e:	f7fa fc0d 	bl	800084c <__aeabi_ddiv>
 8006032:	ec53 2b19 	vmov	r2, r3, d9
 8006036:	f7fa f927 	bl	8000288 <__aeabi_dsub>
 800603a:	9d00      	ldr	r5, [sp, #0]
 800603c:	ec41 0b19 	vmov	d9, r0, r1
 8006040:	4649      	mov	r1, r9
 8006042:	4640      	mov	r0, r8
 8006044:	f7fa fd88 	bl	8000b58 <__aeabi_d2iz>
 8006048:	4606      	mov	r6, r0
 800604a:	f7fa fa6b 	bl	8000524 <__aeabi_i2d>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa f917 	bl	8000288 <__aeabi_dsub>
 800605a:	3630      	adds	r6, #48	; 0x30
 800605c:	f805 6b01 	strb.w	r6, [r5], #1
 8006060:	ec53 2b19 	vmov	r2, r3, d9
 8006064:	4680      	mov	r8, r0
 8006066:	4689      	mov	r9, r1
 8006068:	f7fa fd38 	bl	8000adc <__aeabi_dcmplt>
 800606c:	2800      	cmp	r0, #0
 800606e:	d164      	bne.n	800613a <_dtoa_r+0x62a>
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	4937      	ldr	r1, [pc, #220]	; (8006154 <_dtoa_r+0x644>)
 8006076:	2000      	movs	r0, #0
 8006078:	f7fa f906 	bl	8000288 <__aeabi_dsub>
 800607c:	ec53 2b19 	vmov	r2, r3, d9
 8006080:	f7fa fd2c 	bl	8000adc <__aeabi_dcmplt>
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 80b6 	bne.w	80061f6 <_dtoa_r+0x6e6>
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	429d      	cmp	r5, r3
 800608e:	f43f af7c 	beq.w	8005f8a <_dtoa_r+0x47a>
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <_dtoa_r+0x648>)
 8006094:	ec51 0b19 	vmov	r0, r1, d9
 8006098:	2200      	movs	r2, #0
 800609a:	f7fa faad 	bl	80005f8 <__aeabi_dmul>
 800609e:	4b2e      	ldr	r3, [pc, #184]	; (8006158 <_dtoa_r+0x648>)
 80060a0:	ec41 0b19 	vmov	d9, r0, r1
 80060a4:	2200      	movs	r2, #0
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa faa5 	bl	80005f8 <__aeabi_dmul>
 80060ae:	4680      	mov	r8, r0
 80060b0:	4689      	mov	r9, r1
 80060b2:	e7c5      	b.n	8006040 <_dtoa_r+0x530>
 80060b4:	ec51 0b17 	vmov	r0, r1, d7
 80060b8:	f7fa fa9e 	bl	80005f8 <__aeabi_dmul>
 80060bc:	9b02      	ldr	r3, [sp, #8]
 80060be:	9d00      	ldr	r5, [sp, #0]
 80060c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c2:	ec41 0b19 	vmov	d9, r0, r1
 80060c6:	4649      	mov	r1, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	f7fa fd45 	bl	8000b58 <__aeabi_d2iz>
 80060ce:	4606      	mov	r6, r0
 80060d0:	f7fa fa28 	bl	8000524 <__aeabi_i2d>
 80060d4:	3630      	adds	r6, #48	; 0x30
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa f8d3 	bl	8000288 <__aeabi_dsub>
 80060e2:	f805 6b01 	strb.w	r6, [r5], #1
 80060e6:	9b02      	ldr	r3, [sp, #8]
 80060e8:	429d      	cmp	r5, r3
 80060ea:	4680      	mov	r8, r0
 80060ec:	4689      	mov	r9, r1
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	d124      	bne.n	800613e <_dtoa_r+0x62e>
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <_dtoa_r+0x654>)
 80060f6:	ec51 0b19 	vmov	r0, r1, d9
 80060fa:	f7fa f8c7 	bl	800028c <__adddf3>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800610a:	2800      	cmp	r0, #0
 800610c:	d173      	bne.n	80061f6 <_dtoa_r+0x6e6>
 800610e:	ec53 2b19 	vmov	r2, r3, d9
 8006112:	4914      	ldr	r1, [pc, #80]	; (8006164 <_dtoa_r+0x654>)
 8006114:	2000      	movs	r0, #0
 8006116:	f7fa f8b7 	bl	8000288 <__aeabi_dsub>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa fcdb 	bl	8000adc <__aeabi_dcmplt>
 8006126:	2800      	cmp	r0, #0
 8006128:	f43f af2f 	beq.w	8005f8a <_dtoa_r+0x47a>
 800612c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800612e:	1e6b      	subs	r3, r5, #1
 8006130:	930f      	str	r3, [sp, #60]	; 0x3c
 8006132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006136:	2b30      	cmp	r3, #48	; 0x30
 8006138:	d0f8      	beq.n	800612c <_dtoa_r+0x61c>
 800613a:	46bb      	mov	fp, r7
 800613c:	e04a      	b.n	80061d4 <_dtoa_r+0x6c4>
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <_dtoa_r+0x648>)
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	4680      	mov	r8, r0
 8006146:	4689      	mov	r9, r1
 8006148:	e7bd      	b.n	80060c6 <_dtoa_r+0x5b6>
 800614a:	bf00      	nop
 800614c:	08007948 	.word	0x08007948
 8006150:	08007920 	.word	0x08007920
 8006154:	3ff00000 	.word	0x3ff00000
 8006158:	40240000 	.word	0x40240000
 800615c:	401c0000 	.word	0x401c0000
 8006160:	40140000 	.word	0x40140000
 8006164:	3fe00000 	.word	0x3fe00000
 8006168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800616c:	9d00      	ldr	r5, [sp, #0]
 800616e:	4642      	mov	r2, r8
 8006170:	464b      	mov	r3, r9
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa fb69 	bl	800084c <__aeabi_ddiv>
 800617a:	f7fa fced 	bl	8000b58 <__aeabi_d2iz>
 800617e:	9001      	str	r0, [sp, #4]
 8006180:	f7fa f9d0 	bl	8000524 <__aeabi_i2d>
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	f7fa fa36 	bl	80005f8 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f7fa f878 	bl	8000288 <__aeabi_dsub>
 8006198:	9e01      	ldr	r6, [sp, #4]
 800619a:	9f04      	ldr	r7, [sp, #16]
 800619c:	3630      	adds	r6, #48	; 0x30
 800619e:	f805 6b01 	strb.w	r6, [r5], #1
 80061a2:	9e00      	ldr	r6, [sp, #0]
 80061a4:	1bae      	subs	r6, r5, r6
 80061a6:	42b7      	cmp	r7, r6
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	d134      	bne.n	8006218 <_dtoa_r+0x708>
 80061ae:	f7fa f86d 	bl	800028c <__adddf3>
 80061b2:	4642      	mov	r2, r8
 80061b4:	464b      	mov	r3, r9
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	f7fa fcad 	bl	8000b18 <__aeabi_dcmpgt>
 80061be:	b9c8      	cbnz	r0, 80061f4 <_dtoa_r+0x6e4>
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	4630      	mov	r0, r6
 80061c6:	4639      	mov	r1, r7
 80061c8:	f7fa fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80061cc:	b110      	cbz	r0, 80061d4 <_dtoa_r+0x6c4>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	07db      	lsls	r3, r3, #31
 80061d2:	d40f      	bmi.n	80061f4 <_dtoa_r+0x6e4>
 80061d4:	4651      	mov	r1, sl
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 fbcc 	bl	8006974 <_Bfree>
 80061dc:	2300      	movs	r3, #0
 80061de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061e0:	702b      	strb	r3, [r5, #0]
 80061e2:	f10b 0301 	add.w	r3, fp, #1
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f43f ace2 	beq.w	8005bb4 <_dtoa_r+0xa4>
 80061f0:	601d      	str	r5, [r3, #0]
 80061f2:	e4df      	b.n	8005bb4 <_dtoa_r+0xa4>
 80061f4:	465f      	mov	r7, fp
 80061f6:	462b      	mov	r3, r5
 80061f8:	461d      	mov	r5, r3
 80061fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061fe:	2a39      	cmp	r2, #57	; 0x39
 8006200:	d106      	bne.n	8006210 <_dtoa_r+0x700>
 8006202:	9a00      	ldr	r2, [sp, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d1f7      	bne.n	80061f8 <_dtoa_r+0x6e8>
 8006208:	9900      	ldr	r1, [sp, #0]
 800620a:	2230      	movs	r2, #48	; 0x30
 800620c:	3701      	adds	r7, #1
 800620e:	700a      	strb	r2, [r1, #0]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	3201      	adds	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e790      	b.n	800613a <_dtoa_r+0x62a>
 8006218:	4ba3      	ldr	r3, [pc, #652]	; (80064a8 <_dtoa_r+0x998>)
 800621a:	2200      	movs	r2, #0
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4606      	mov	r6, r0
 8006226:	460f      	mov	r7, r1
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800622c:	2800      	cmp	r0, #0
 800622e:	d09e      	beq.n	800616e <_dtoa_r+0x65e>
 8006230:	e7d0      	b.n	80061d4 <_dtoa_r+0x6c4>
 8006232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006234:	2a00      	cmp	r2, #0
 8006236:	f000 80ca 	beq.w	80063ce <_dtoa_r+0x8be>
 800623a:	9a07      	ldr	r2, [sp, #28]
 800623c:	2a01      	cmp	r2, #1
 800623e:	f300 80ad 	bgt.w	800639c <_dtoa_r+0x88c>
 8006242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006244:	2a00      	cmp	r2, #0
 8006246:	f000 80a5 	beq.w	8006394 <_dtoa_r+0x884>
 800624a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800624e:	9e08      	ldr	r6, [sp, #32]
 8006250:	9d05      	ldr	r5, [sp, #20]
 8006252:	9a05      	ldr	r2, [sp, #20]
 8006254:	441a      	add	r2, r3
 8006256:	9205      	str	r2, [sp, #20]
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	2101      	movs	r1, #1
 800625c:	441a      	add	r2, r3
 800625e:	4620      	mov	r0, r4
 8006260:	9206      	str	r2, [sp, #24]
 8006262:	f000 fc3d 	bl	8006ae0 <__i2b>
 8006266:	4607      	mov	r7, r0
 8006268:	b165      	cbz	r5, 8006284 <_dtoa_r+0x774>
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	dd09      	ble.n	8006284 <_dtoa_r+0x774>
 8006270:	42ab      	cmp	r3, r5
 8006272:	9a05      	ldr	r2, [sp, #20]
 8006274:	bfa8      	it	ge
 8006276:	462b      	movge	r3, r5
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	9205      	str	r2, [sp, #20]
 800627c:	9a06      	ldr	r2, [sp, #24]
 800627e:	1aed      	subs	r5, r5, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	9306      	str	r3, [sp, #24]
 8006284:	9b08      	ldr	r3, [sp, #32]
 8006286:	b1f3      	cbz	r3, 80062c6 <_dtoa_r+0x7b6>
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80a3 	beq.w	80063d6 <_dtoa_r+0x8c6>
 8006290:	2e00      	cmp	r6, #0
 8006292:	dd10      	ble.n	80062b6 <_dtoa_r+0x7a6>
 8006294:	4639      	mov	r1, r7
 8006296:	4632      	mov	r2, r6
 8006298:	4620      	mov	r0, r4
 800629a:	f000 fce1 	bl	8006c60 <__pow5mult>
 800629e:	4652      	mov	r2, sl
 80062a0:	4601      	mov	r1, r0
 80062a2:	4607      	mov	r7, r0
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 fc31 	bl	8006b0c <__multiply>
 80062aa:	4651      	mov	r1, sl
 80062ac:	4680      	mov	r8, r0
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 fb60 	bl	8006974 <_Bfree>
 80062b4:	46c2      	mov	sl, r8
 80062b6:	9b08      	ldr	r3, [sp, #32]
 80062b8:	1b9a      	subs	r2, r3, r6
 80062ba:	d004      	beq.n	80062c6 <_dtoa_r+0x7b6>
 80062bc:	4651      	mov	r1, sl
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fcce 	bl	8006c60 <__pow5mult>
 80062c4:	4682      	mov	sl, r0
 80062c6:	2101      	movs	r1, #1
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fc09 	bl	8006ae0 <__i2b>
 80062ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	4606      	mov	r6, r0
 80062d4:	f340 8081 	ble.w	80063da <_dtoa_r+0x8ca>
 80062d8:	461a      	mov	r2, r3
 80062da:	4601      	mov	r1, r0
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 fcbf 	bl	8006c60 <__pow5mult>
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	4606      	mov	r6, r0
 80062e8:	dd7a      	ble.n	80063e0 <_dtoa_r+0x8d0>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	6933      	ldr	r3, [r6, #16]
 80062f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062f4:	6918      	ldr	r0, [r3, #16]
 80062f6:	f000 fba5 	bl	8006a44 <__hi0bits>
 80062fa:	f1c0 0020 	rsb	r0, r0, #32
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	4418      	add	r0, r3
 8006302:	f010 001f 	ands.w	r0, r0, #31
 8006306:	f000 8094 	beq.w	8006432 <_dtoa_r+0x922>
 800630a:	f1c0 0320 	rsb	r3, r0, #32
 800630e:	2b04      	cmp	r3, #4
 8006310:	f340 8085 	ble.w	800641e <_dtoa_r+0x90e>
 8006314:	9b05      	ldr	r3, [sp, #20]
 8006316:	f1c0 001c 	rsb	r0, r0, #28
 800631a:	4403      	add	r3, r0
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	9b06      	ldr	r3, [sp, #24]
 8006320:	4403      	add	r3, r0
 8006322:	4405      	add	r5, r0
 8006324:	9306      	str	r3, [sp, #24]
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	dd05      	ble.n	8006338 <_dtoa_r+0x828>
 800632c:	4651      	mov	r1, sl
 800632e:	461a      	mov	r2, r3
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fcef 	bl	8006d14 <__lshift>
 8006336:	4682      	mov	sl, r0
 8006338:	9b06      	ldr	r3, [sp, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	dd05      	ble.n	800634a <_dtoa_r+0x83a>
 800633e:	4631      	mov	r1, r6
 8006340:	461a      	mov	r2, r3
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fce6 	bl	8006d14 <__lshift>
 8006348:	4606      	mov	r6, r0
 800634a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d072      	beq.n	8006436 <_dtoa_r+0x926>
 8006350:	4631      	mov	r1, r6
 8006352:	4650      	mov	r0, sl
 8006354:	f000 fd4a 	bl	8006dec <__mcmp>
 8006358:	2800      	cmp	r0, #0
 800635a:	da6c      	bge.n	8006436 <_dtoa_r+0x926>
 800635c:	2300      	movs	r3, #0
 800635e:	4651      	mov	r1, sl
 8006360:	220a      	movs	r2, #10
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fb28 	bl	80069b8 <__multadd>
 8006368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800636e:	4682      	mov	sl, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 81b0 	beq.w	80066d6 <_dtoa_r+0xbc6>
 8006376:	2300      	movs	r3, #0
 8006378:	4639      	mov	r1, r7
 800637a:	220a      	movs	r2, #10
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fb1b 	bl	80069b8 <__multadd>
 8006382:	9b01      	ldr	r3, [sp, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	4607      	mov	r7, r0
 8006388:	f300 8096 	bgt.w	80064b8 <_dtoa_r+0x9a8>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	2b02      	cmp	r3, #2
 8006390:	dc59      	bgt.n	8006446 <_dtoa_r+0x936>
 8006392:	e091      	b.n	80064b8 <_dtoa_r+0x9a8>
 8006394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800639a:	e758      	b.n	800624e <_dtoa_r+0x73e>
 800639c:	9b04      	ldr	r3, [sp, #16]
 800639e:	1e5e      	subs	r6, r3, #1
 80063a0:	9b08      	ldr	r3, [sp, #32]
 80063a2:	42b3      	cmp	r3, r6
 80063a4:	bfbf      	itttt	lt
 80063a6:	9b08      	ldrlt	r3, [sp, #32]
 80063a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80063aa:	9608      	strlt	r6, [sp, #32]
 80063ac:	1af3      	sublt	r3, r6, r3
 80063ae:	bfb4      	ite	lt
 80063b0:	18d2      	addlt	r2, r2, r3
 80063b2:	1b9e      	subge	r6, r3, r6
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	bfbc      	itt	lt
 80063b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80063ba:	2600      	movlt	r6, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfb7      	itett	lt
 80063c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80063c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80063c8:	1a9d      	sublt	r5, r3, r2
 80063ca:	2300      	movlt	r3, #0
 80063cc:	e741      	b.n	8006252 <_dtoa_r+0x742>
 80063ce:	9e08      	ldr	r6, [sp, #32]
 80063d0:	9d05      	ldr	r5, [sp, #20]
 80063d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063d4:	e748      	b.n	8006268 <_dtoa_r+0x758>
 80063d6:	9a08      	ldr	r2, [sp, #32]
 80063d8:	e770      	b.n	80062bc <_dtoa_r+0x7ac>
 80063da:	9b07      	ldr	r3, [sp, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	dc19      	bgt.n	8006414 <_dtoa_r+0x904>
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	b9bb      	cbnz	r3, 8006414 <_dtoa_r+0x904>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ea:	b99b      	cbnz	r3, 8006414 <_dtoa_r+0x904>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f2:	0d1b      	lsrs	r3, r3, #20
 80063f4:	051b      	lsls	r3, r3, #20
 80063f6:	b183      	cbz	r3, 800641a <_dtoa_r+0x90a>
 80063f8:	9b05      	ldr	r3, [sp, #20]
 80063fa:	3301      	adds	r3, #1
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	9b06      	ldr	r3, [sp, #24]
 8006400:	3301      	adds	r3, #1
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	f04f 0801 	mov.w	r8, #1
 8006408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f47f af6f 	bne.w	80062ee <_dtoa_r+0x7de>
 8006410:	2001      	movs	r0, #1
 8006412:	e774      	b.n	80062fe <_dtoa_r+0x7ee>
 8006414:	f04f 0800 	mov.w	r8, #0
 8006418:	e7f6      	b.n	8006408 <_dtoa_r+0x8f8>
 800641a:	4698      	mov	r8, r3
 800641c:	e7f4      	b.n	8006408 <_dtoa_r+0x8f8>
 800641e:	d082      	beq.n	8006326 <_dtoa_r+0x816>
 8006420:	9a05      	ldr	r2, [sp, #20]
 8006422:	331c      	adds	r3, #28
 8006424:	441a      	add	r2, r3
 8006426:	9205      	str	r2, [sp, #20]
 8006428:	9a06      	ldr	r2, [sp, #24]
 800642a:	441a      	add	r2, r3
 800642c:	441d      	add	r5, r3
 800642e:	9206      	str	r2, [sp, #24]
 8006430:	e779      	b.n	8006326 <_dtoa_r+0x816>
 8006432:	4603      	mov	r3, r0
 8006434:	e7f4      	b.n	8006420 <_dtoa_r+0x910>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dc37      	bgt.n	80064ac <_dtoa_r+0x99c>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	2b02      	cmp	r3, #2
 8006440:	dd34      	ble.n	80064ac <_dtoa_r+0x99c>
 8006442:	9b04      	ldr	r3, [sp, #16]
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	b963      	cbnz	r3, 8006464 <_dtoa_r+0x954>
 800644a:	4631      	mov	r1, r6
 800644c:	2205      	movs	r2, #5
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fab2 	bl	80069b8 <__multadd>
 8006454:	4601      	mov	r1, r0
 8006456:	4606      	mov	r6, r0
 8006458:	4650      	mov	r0, sl
 800645a:	f000 fcc7 	bl	8006dec <__mcmp>
 800645e:	2800      	cmp	r0, #0
 8006460:	f73f adbb 	bgt.w	8005fda <_dtoa_r+0x4ca>
 8006464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006466:	9d00      	ldr	r5, [sp, #0]
 8006468:	ea6f 0b03 	mvn.w	fp, r3
 800646c:	f04f 0800 	mov.w	r8, #0
 8006470:	4631      	mov	r1, r6
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fa7e 	bl	8006974 <_Bfree>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f43f aeab 	beq.w	80061d4 <_dtoa_r+0x6c4>
 800647e:	f1b8 0f00 	cmp.w	r8, #0
 8006482:	d005      	beq.n	8006490 <_dtoa_r+0x980>
 8006484:	45b8      	cmp	r8, r7
 8006486:	d003      	beq.n	8006490 <_dtoa_r+0x980>
 8006488:	4641      	mov	r1, r8
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fa72 	bl	8006974 <_Bfree>
 8006490:	4639      	mov	r1, r7
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fa6e 	bl	8006974 <_Bfree>
 8006498:	e69c      	b.n	80061d4 <_dtoa_r+0x6c4>
 800649a:	2600      	movs	r6, #0
 800649c:	4637      	mov	r7, r6
 800649e:	e7e1      	b.n	8006464 <_dtoa_r+0x954>
 80064a0:	46bb      	mov	fp, r7
 80064a2:	4637      	mov	r7, r6
 80064a4:	e599      	b.n	8005fda <_dtoa_r+0x4ca>
 80064a6:	bf00      	nop
 80064a8:	40240000 	.word	0x40240000
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80c8 	beq.w	8006644 <_dtoa_r+0xb34>
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	dd05      	ble.n	80064c8 <_dtoa_r+0x9b8>
 80064bc:	4639      	mov	r1, r7
 80064be:	462a      	mov	r2, r5
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fc27 	bl	8006d14 <__lshift>
 80064c6:	4607      	mov	r7, r0
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	d05b      	beq.n	8006586 <_dtoa_r+0xa76>
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fa0f 	bl	80068f4 <_Balloc>
 80064d6:	4605      	mov	r5, r0
 80064d8:	b928      	cbnz	r0, 80064e6 <_dtoa_r+0x9d6>
 80064da:	4b83      	ldr	r3, [pc, #524]	; (80066e8 <_dtoa_r+0xbd8>)
 80064dc:	4602      	mov	r2, r0
 80064de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80064e2:	f7ff bb2e 	b.w	8005b42 <_dtoa_r+0x32>
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	3202      	adds	r2, #2
 80064ea:	0092      	lsls	r2, r2, #2
 80064ec:	f107 010c 	add.w	r1, r7, #12
 80064f0:	300c      	adds	r0, #12
 80064f2:	f000 fe39 	bl	8007168 <memcpy>
 80064f6:	2201      	movs	r2, #1
 80064f8:	4629      	mov	r1, r5
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 fc0a 	bl	8006d14 <__lshift>
 8006500:	9b00      	ldr	r3, [sp, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800650a:	4413      	add	r3, r2
 800650c:	9308      	str	r3, [sp, #32]
 800650e:	9b02      	ldr	r3, [sp, #8]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	46b8      	mov	r8, r7
 8006516:	9306      	str	r3, [sp, #24]
 8006518:	4607      	mov	r7, r0
 800651a:	9b04      	ldr	r3, [sp, #16]
 800651c:	4631      	mov	r1, r6
 800651e:	3b01      	subs	r3, #1
 8006520:	4650      	mov	r0, sl
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	f7ff fa6c 	bl	8005a00 <quorem>
 8006528:	4641      	mov	r1, r8
 800652a:	9002      	str	r0, [sp, #8]
 800652c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006530:	4650      	mov	r0, sl
 8006532:	f000 fc5b 	bl	8006dec <__mcmp>
 8006536:	463a      	mov	r2, r7
 8006538:	9005      	str	r0, [sp, #20]
 800653a:	4631      	mov	r1, r6
 800653c:	4620      	mov	r0, r4
 800653e:	f000 fc71 	bl	8006e24 <__mdiff>
 8006542:	68c2      	ldr	r2, [r0, #12]
 8006544:	4605      	mov	r5, r0
 8006546:	bb02      	cbnz	r2, 800658a <_dtoa_r+0xa7a>
 8006548:	4601      	mov	r1, r0
 800654a:	4650      	mov	r0, sl
 800654c:	f000 fc4e 	bl	8006dec <__mcmp>
 8006550:	4602      	mov	r2, r0
 8006552:	4629      	mov	r1, r5
 8006554:	4620      	mov	r0, r4
 8006556:	9209      	str	r2, [sp, #36]	; 0x24
 8006558:	f000 fa0c 	bl	8006974 <_Bfree>
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006560:	9d04      	ldr	r5, [sp, #16]
 8006562:	ea43 0102 	orr.w	r1, r3, r2
 8006566:	9b06      	ldr	r3, [sp, #24]
 8006568:	4319      	orrs	r1, r3
 800656a:	d110      	bne.n	800658e <_dtoa_r+0xa7e>
 800656c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006570:	d029      	beq.n	80065c6 <_dtoa_r+0xab6>
 8006572:	9b05      	ldr	r3, [sp, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd02      	ble.n	800657e <_dtoa_r+0xa6e>
 8006578:	9b02      	ldr	r3, [sp, #8]
 800657a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	f883 9000 	strb.w	r9, [r3]
 8006584:	e774      	b.n	8006470 <_dtoa_r+0x960>
 8006586:	4638      	mov	r0, r7
 8006588:	e7ba      	b.n	8006500 <_dtoa_r+0x9f0>
 800658a:	2201      	movs	r2, #1
 800658c:	e7e1      	b.n	8006552 <_dtoa_r+0xa42>
 800658e:	9b05      	ldr	r3, [sp, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	db04      	blt.n	800659e <_dtoa_r+0xa8e>
 8006594:	9907      	ldr	r1, [sp, #28]
 8006596:	430b      	orrs	r3, r1
 8006598:	9906      	ldr	r1, [sp, #24]
 800659a:	430b      	orrs	r3, r1
 800659c:	d120      	bne.n	80065e0 <_dtoa_r+0xad0>
 800659e:	2a00      	cmp	r2, #0
 80065a0:	dded      	ble.n	800657e <_dtoa_r+0xa6e>
 80065a2:	4651      	mov	r1, sl
 80065a4:	2201      	movs	r2, #1
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fbb4 	bl	8006d14 <__lshift>
 80065ac:	4631      	mov	r1, r6
 80065ae:	4682      	mov	sl, r0
 80065b0:	f000 fc1c 	bl	8006dec <__mcmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	dc03      	bgt.n	80065c0 <_dtoa_r+0xab0>
 80065b8:	d1e1      	bne.n	800657e <_dtoa_r+0xa6e>
 80065ba:	f019 0f01 	tst.w	r9, #1
 80065be:	d0de      	beq.n	800657e <_dtoa_r+0xa6e>
 80065c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065c4:	d1d8      	bne.n	8006578 <_dtoa_r+0xa68>
 80065c6:	9a01      	ldr	r2, [sp, #4]
 80065c8:	2339      	movs	r3, #57	; 0x39
 80065ca:	7013      	strb	r3, [r2, #0]
 80065cc:	462b      	mov	r3, r5
 80065ce:	461d      	mov	r5, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065d6:	2a39      	cmp	r2, #57	; 0x39
 80065d8:	d06c      	beq.n	80066b4 <_dtoa_r+0xba4>
 80065da:	3201      	adds	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e747      	b.n	8006470 <_dtoa_r+0x960>
 80065e0:	2a00      	cmp	r2, #0
 80065e2:	dd07      	ble.n	80065f4 <_dtoa_r+0xae4>
 80065e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065e8:	d0ed      	beq.n	80065c6 <_dtoa_r+0xab6>
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	f109 0301 	add.w	r3, r9, #1
 80065f0:	7013      	strb	r3, [r2, #0]
 80065f2:	e73d      	b.n	8006470 <_dtoa_r+0x960>
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	9a08      	ldr	r2, [sp, #32]
 80065f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d043      	beq.n	8006688 <_dtoa_r+0xb78>
 8006600:	4651      	mov	r1, sl
 8006602:	2300      	movs	r3, #0
 8006604:	220a      	movs	r2, #10
 8006606:	4620      	mov	r0, r4
 8006608:	f000 f9d6 	bl	80069b8 <__multadd>
 800660c:	45b8      	cmp	r8, r7
 800660e:	4682      	mov	sl, r0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	f04f 020a 	mov.w	r2, #10
 8006618:	4641      	mov	r1, r8
 800661a:	4620      	mov	r0, r4
 800661c:	d107      	bne.n	800662e <_dtoa_r+0xb1e>
 800661e:	f000 f9cb 	bl	80069b8 <__multadd>
 8006622:	4680      	mov	r8, r0
 8006624:	4607      	mov	r7, r0
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	e775      	b.n	800651a <_dtoa_r+0xa0a>
 800662e:	f000 f9c3 	bl	80069b8 <__multadd>
 8006632:	4639      	mov	r1, r7
 8006634:	4680      	mov	r8, r0
 8006636:	2300      	movs	r3, #0
 8006638:	220a      	movs	r2, #10
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f9bc 	bl	80069b8 <__multadd>
 8006640:	4607      	mov	r7, r0
 8006642:	e7f0      	b.n	8006626 <_dtoa_r+0xb16>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	4631      	mov	r1, r6
 800664c:	4650      	mov	r0, sl
 800664e:	f7ff f9d7 	bl	8005a00 <quorem>
 8006652:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	f805 9b01 	strb.w	r9, [r5], #1
 800665c:	1aea      	subs	r2, r5, r3
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	4293      	cmp	r3, r2
 8006662:	dd07      	ble.n	8006674 <_dtoa_r+0xb64>
 8006664:	4651      	mov	r1, sl
 8006666:	2300      	movs	r3, #0
 8006668:	220a      	movs	r2, #10
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f9a4 	bl	80069b8 <__multadd>
 8006670:	4682      	mov	sl, r0
 8006672:	e7ea      	b.n	800664a <_dtoa_r+0xb3a>
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfc8      	it	gt
 800667a:	461d      	movgt	r5, r3
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	bfd8      	it	le
 8006680:	2501      	movle	r5, #1
 8006682:	441d      	add	r5, r3
 8006684:	f04f 0800 	mov.w	r8, #0
 8006688:	4651      	mov	r1, sl
 800668a:	2201      	movs	r2, #1
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fb41 	bl	8006d14 <__lshift>
 8006692:	4631      	mov	r1, r6
 8006694:	4682      	mov	sl, r0
 8006696:	f000 fba9 	bl	8006dec <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	dc96      	bgt.n	80065cc <_dtoa_r+0xabc>
 800669e:	d102      	bne.n	80066a6 <_dtoa_r+0xb96>
 80066a0:	f019 0f01 	tst.w	r9, #1
 80066a4:	d192      	bne.n	80065cc <_dtoa_r+0xabc>
 80066a6:	462b      	mov	r3, r5
 80066a8:	461d      	mov	r5, r3
 80066aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ae:	2a30      	cmp	r2, #48	; 0x30
 80066b0:	d0fa      	beq.n	80066a8 <_dtoa_r+0xb98>
 80066b2:	e6dd      	b.n	8006470 <_dtoa_r+0x960>
 80066b4:	9a00      	ldr	r2, [sp, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d189      	bne.n	80065ce <_dtoa_r+0xabe>
 80066ba:	f10b 0b01 	add.w	fp, fp, #1
 80066be:	2331      	movs	r3, #49	; 0x31
 80066c0:	e796      	b.n	80065f0 <_dtoa_r+0xae0>
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <_dtoa_r+0xbdc>)
 80066c4:	f7ff ba99 	b.w	8005bfa <_dtoa_r+0xea>
 80066c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f47f aa6d 	bne.w	8005baa <_dtoa_r+0x9a>
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <_dtoa_r+0xbe0>)
 80066d2:	f7ff ba92 	b.w	8005bfa <_dtoa_r+0xea>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dcb5      	bgt.n	8006648 <_dtoa_r+0xb38>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	f73f aeb1 	bgt.w	8006446 <_dtoa_r+0x936>
 80066e4:	e7b0      	b.n	8006648 <_dtoa_r+0xb38>
 80066e6:	bf00      	nop
 80066e8:	080078b0 	.word	0x080078b0
 80066ec:	08007810 	.word	0x08007810
 80066f0:	08007834 	.word	0x08007834

080066f4 <_free_r>:
 80066f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d044      	beq.n	8006784 <_free_r+0x90>
 80066fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fe:	9001      	str	r0, [sp, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f1a1 0404 	sub.w	r4, r1, #4
 8006706:	bfb8      	it	lt
 8006708:	18e4      	addlt	r4, r4, r3
 800670a:	f000 f8e7 	bl	80068dc <__malloc_lock>
 800670e:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <_free_r+0x94>)
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	b933      	cbnz	r3, 8006724 <_free_r+0x30>
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	6014      	str	r4, [r2, #0]
 800671a:	b003      	add	sp, #12
 800671c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006720:	f000 b8e2 	b.w	80068e8 <__malloc_unlock>
 8006724:	42a3      	cmp	r3, r4
 8006726:	d908      	bls.n	800673a <_free_r+0x46>
 8006728:	6825      	ldr	r5, [r4, #0]
 800672a:	1961      	adds	r1, r4, r5
 800672c:	428b      	cmp	r3, r1
 800672e:	bf01      	itttt	eq
 8006730:	6819      	ldreq	r1, [r3, #0]
 8006732:	685b      	ldreq	r3, [r3, #4]
 8006734:	1949      	addeq	r1, r1, r5
 8006736:	6021      	streq	r1, [r4, #0]
 8006738:	e7ed      	b.n	8006716 <_free_r+0x22>
 800673a:	461a      	mov	r2, r3
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	b10b      	cbz	r3, 8006744 <_free_r+0x50>
 8006740:	42a3      	cmp	r3, r4
 8006742:	d9fa      	bls.n	800673a <_free_r+0x46>
 8006744:	6811      	ldr	r1, [r2, #0]
 8006746:	1855      	adds	r5, r2, r1
 8006748:	42a5      	cmp	r5, r4
 800674a:	d10b      	bne.n	8006764 <_free_r+0x70>
 800674c:	6824      	ldr	r4, [r4, #0]
 800674e:	4421      	add	r1, r4
 8006750:	1854      	adds	r4, r2, r1
 8006752:	42a3      	cmp	r3, r4
 8006754:	6011      	str	r1, [r2, #0]
 8006756:	d1e0      	bne.n	800671a <_free_r+0x26>
 8006758:	681c      	ldr	r4, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	440c      	add	r4, r1
 8006760:	6014      	str	r4, [r2, #0]
 8006762:	e7da      	b.n	800671a <_free_r+0x26>
 8006764:	d902      	bls.n	800676c <_free_r+0x78>
 8006766:	230c      	movs	r3, #12
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	e7d6      	b.n	800671a <_free_r+0x26>
 800676c:	6825      	ldr	r5, [r4, #0]
 800676e:	1961      	adds	r1, r4, r5
 8006770:	428b      	cmp	r3, r1
 8006772:	bf04      	itt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	bf04      	itt	eq
 800677c:	1949      	addeq	r1, r1, r5
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	6054      	str	r4, [r2, #4]
 8006782:	e7ca      	b.n	800671a <_free_r+0x26>
 8006784:	b003      	add	sp, #12
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	200004c4 	.word	0x200004c4

0800678c <malloc>:
 800678c:	4b02      	ldr	r3, [pc, #8]	; (8006798 <malloc+0xc>)
 800678e:	4601      	mov	r1, r0
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	f000 b823 	b.w	80067dc <_malloc_r>
 8006796:	bf00      	nop
 8006798:	20000064 	.word	0x20000064

0800679c <sbrk_aligned>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4e0e      	ldr	r6, [pc, #56]	; (80067d8 <sbrk_aligned+0x3c>)
 80067a0:	460c      	mov	r4, r1
 80067a2:	6831      	ldr	r1, [r6, #0]
 80067a4:	4605      	mov	r5, r0
 80067a6:	b911      	cbnz	r1, 80067ae <sbrk_aligned+0x12>
 80067a8:	f000 fcce 	bl	8007148 <_sbrk_r>
 80067ac:	6030      	str	r0, [r6, #0]
 80067ae:	4621      	mov	r1, r4
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 fcc9 	bl	8007148 <_sbrk_r>
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	d00a      	beq.n	80067d0 <sbrk_aligned+0x34>
 80067ba:	1cc4      	adds	r4, r0, #3
 80067bc:	f024 0403 	bic.w	r4, r4, #3
 80067c0:	42a0      	cmp	r0, r4
 80067c2:	d007      	beq.n	80067d4 <sbrk_aligned+0x38>
 80067c4:	1a21      	subs	r1, r4, r0
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fcbe 	bl	8007148 <_sbrk_r>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d101      	bne.n	80067d4 <sbrk_aligned+0x38>
 80067d0:	f04f 34ff 	mov.w	r4, #4294967295
 80067d4:	4620      	mov	r0, r4
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	200004c8 	.word	0x200004c8

080067dc <_malloc_r>:
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e0:	1ccd      	adds	r5, r1, #3
 80067e2:	f025 0503 	bic.w	r5, r5, #3
 80067e6:	3508      	adds	r5, #8
 80067e8:	2d0c      	cmp	r5, #12
 80067ea:	bf38      	it	cc
 80067ec:	250c      	movcc	r5, #12
 80067ee:	2d00      	cmp	r5, #0
 80067f0:	4607      	mov	r7, r0
 80067f2:	db01      	blt.n	80067f8 <_malloc_r+0x1c>
 80067f4:	42a9      	cmp	r1, r5
 80067f6:	d905      	bls.n	8006804 <_malloc_r+0x28>
 80067f8:	230c      	movs	r3, #12
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	2600      	movs	r6, #0
 80067fe:	4630      	mov	r0, r6
 8006800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068d8 <_malloc_r+0xfc>
 8006808:	f000 f868 	bl	80068dc <__malloc_lock>
 800680c:	f8d8 3000 	ldr.w	r3, [r8]
 8006810:	461c      	mov	r4, r3
 8006812:	bb5c      	cbnz	r4, 800686c <_malloc_r+0x90>
 8006814:	4629      	mov	r1, r5
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ffc0 	bl	800679c <sbrk_aligned>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	4604      	mov	r4, r0
 8006820:	d155      	bne.n	80068ce <_malloc_r+0xf2>
 8006822:	f8d8 4000 	ldr.w	r4, [r8]
 8006826:	4626      	mov	r6, r4
 8006828:	2e00      	cmp	r6, #0
 800682a:	d145      	bne.n	80068b8 <_malloc_r+0xdc>
 800682c:	2c00      	cmp	r4, #0
 800682e:	d048      	beq.n	80068c2 <_malloc_r+0xe6>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	4631      	mov	r1, r6
 8006834:	4638      	mov	r0, r7
 8006836:	eb04 0903 	add.w	r9, r4, r3
 800683a:	f000 fc85 	bl	8007148 <_sbrk_r>
 800683e:	4581      	cmp	r9, r0
 8006840:	d13f      	bne.n	80068c2 <_malloc_r+0xe6>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	1a6d      	subs	r5, r5, r1
 8006846:	4629      	mov	r1, r5
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ffa7 	bl	800679c <sbrk_aligned>
 800684e:	3001      	adds	r0, #1
 8006850:	d037      	beq.n	80068c2 <_malloc_r+0xe6>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	442b      	add	r3, r5
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	f8d8 3000 	ldr.w	r3, [r8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d038      	beq.n	80068d2 <_malloc_r+0xf6>
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	42a2      	cmp	r2, r4
 8006864:	d12b      	bne.n	80068be <_malloc_r+0xe2>
 8006866:	2200      	movs	r2, #0
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	e00f      	b.n	800688c <_malloc_r+0xb0>
 800686c:	6822      	ldr	r2, [r4, #0]
 800686e:	1b52      	subs	r2, r2, r5
 8006870:	d41f      	bmi.n	80068b2 <_malloc_r+0xd6>
 8006872:	2a0b      	cmp	r2, #11
 8006874:	d917      	bls.n	80068a6 <_malloc_r+0xca>
 8006876:	1961      	adds	r1, r4, r5
 8006878:	42a3      	cmp	r3, r4
 800687a:	6025      	str	r5, [r4, #0]
 800687c:	bf18      	it	ne
 800687e:	6059      	strne	r1, [r3, #4]
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	bf08      	it	eq
 8006884:	f8c8 1000 	streq.w	r1, [r8]
 8006888:	5162      	str	r2, [r4, r5]
 800688a:	604b      	str	r3, [r1, #4]
 800688c:	4638      	mov	r0, r7
 800688e:	f104 060b 	add.w	r6, r4, #11
 8006892:	f000 f829 	bl	80068e8 <__malloc_unlock>
 8006896:	f026 0607 	bic.w	r6, r6, #7
 800689a:	1d23      	adds	r3, r4, #4
 800689c:	1af2      	subs	r2, r6, r3
 800689e:	d0ae      	beq.n	80067fe <_malloc_r+0x22>
 80068a0:	1b9b      	subs	r3, r3, r6
 80068a2:	50a3      	str	r3, [r4, r2]
 80068a4:	e7ab      	b.n	80067fe <_malloc_r+0x22>
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	6862      	ldr	r2, [r4, #4]
 80068aa:	d1dd      	bne.n	8006868 <_malloc_r+0x8c>
 80068ac:	f8c8 2000 	str.w	r2, [r8]
 80068b0:	e7ec      	b.n	800688c <_malloc_r+0xb0>
 80068b2:	4623      	mov	r3, r4
 80068b4:	6864      	ldr	r4, [r4, #4]
 80068b6:	e7ac      	b.n	8006812 <_malloc_r+0x36>
 80068b8:	4634      	mov	r4, r6
 80068ba:	6876      	ldr	r6, [r6, #4]
 80068bc:	e7b4      	b.n	8006828 <_malloc_r+0x4c>
 80068be:	4613      	mov	r3, r2
 80068c0:	e7cc      	b.n	800685c <_malloc_r+0x80>
 80068c2:	230c      	movs	r3, #12
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4638      	mov	r0, r7
 80068c8:	f000 f80e 	bl	80068e8 <__malloc_unlock>
 80068cc:	e797      	b.n	80067fe <_malloc_r+0x22>
 80068ce:	6025      	str	r5, [r4, #0]
 80068d0:	e7dc      	b.n	800688c <_malloc_r+0xb0>
 80068d2:	605b      	str	r3, [r3, #4]
 80068d4:	deff      	udf	#255	; 0xff
 80068d6:	bf00      	nop
 80068d8:	200004c4 	.word	0x200004c4

080068dc <__malloc_lock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__malloc_lock+0x8>)
 80068de:	f7ff b88d 	b.w	80059fc <__retarget_lock_acquire_recursive>
 80068e2:	bf00      	nop
 80068e4:	200004c0 	.word	0x200004c0

080068e8 <__malloc_unlock>:
 80068e8:	4801      	ldr	r0, [pc, #4]	; (80068f0 <__malloc_unlock+0x8>)
 80068ea:	f7ff b888 	b.w	80059fe <__retarget_lock_release_recursive>
 80068ee:	bf00      	nop
 80068f0:	200004c0 	.word	0x200004c0

080068f4 <_Balloc>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	69c6      	ldr	r6, [r0, #28]
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	b976      	cbnz	r6, 800691c <_Balloc+0x28>
 80068fe:	2010      	movs	r0, #16
 8006900:	f7ff ff44 	bl	800678c <malloc>
 8006904:	4602      	mov	r2, r0
 8006906:	61e0      	str	r0, [r4, #28]
 8006908:	b920      	cbnz	r0, 8006914 <_Balloc+0x20>
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <_Balloc+0x78>)
 800690c:	4818      	ldr	r0, [pc, #96]	; (8006970 <_Balloc+0x7c>)
 800690e:	216b      	movs	r1, #107	; 0x6b
 8006910:	f000 fc38 	bl	8007184 <__assert_func>
 8006914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006918:	6006      	str	r6, [r0, #0]
 800691a:	60c6      	str	r6, [r0, #12]
 800691c:	69e6      	ldr	r6, [r4, #28]
 800691e:	68f3      	ldr	r3, [r6, #12]
 8006920:	b183      	cbz	r3, 8006944 <_Balloc+0x50>
 8006922:	69e3      	ldr	r3, [r4, #28]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800692a:	b9b8      	cbnz	r0, 800695c <_Balloc+0x68>
 800692c:	2101      	movs	r1, #1
 800692e:	fa01 f605 	lsl.w	r6, r1, r5
 8006932:	1d72      	adds	r2, r6, #5
 8006934:	0092      	lsls	r2, r2, #2
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fc42 	bl	80071c0 <_calloc_r>
 800693c:	b160      	cbz	r0, 8006958 <_Balloc+0x64>
 800693e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006942:	e00e      	b.n	8006962 <_Balloc+0x6e>
 8006944:	2221      	movs	r2, #33	; 0x21
 8006946:	2104      	movs	r1, #4
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fc39 	bl	80071c0 <_calloc_r>
 800694e:	69e3      	ldr	r3, [r4, #28]
 8006950:	60f0      	str	r0, [r6, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e4      	bne.n	8006922 <_Balloc+0x2e>
 8006958:	2000      	movs	r0, #0
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	6802      	ldr	r2, [r0, #0]
 800695e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006962:	2300      	movs	r3, #0
 8006964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006968:	e7f7      	b.n	800695a <_Balloc+0x66>
 800696a:	bf00      	nop
 800696c:	08007841 	.word	0x08007841
 8006970:	080078c1 	.word	0x080078c1

08006974 <_Bfree>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	69c6      	ldr	r6, [r0, #28]
 8006978:	4605      	mov	r5, r0
 800697a:	460c      	mov	r4, r1
 800697c:	b976      	cbnz	r6, 800699c <_Bfree+0x28>
 800697e:	2010      	movs	r0, #16
 8006980:	f7ff ff04 	bl	800678c <malloc>
 8006984:	4602      	mov	r2, r0
 8006986:	61e8      	str	r0, [r5, #28]
 8006988:	b920      	cbnz	r0, 8006994 <_Bfree+0x20>
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <_Bfree+0x3c>)
 800698c:	4809      	ldr	r0, [pc, #36]	; (80069b4 <_Bfree+0x40>)
 800698e:	218f      	movs	r1, #143	; 0x8f
 8006990:	f000 fbf8 	bl	8007184 <__assert_func>
 8006994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006998:	6006      	str	r6, [r0, #0]
 800699a:	60c6      	str	r6, [r0, #12]
 800699c:	b13c      	cbz	r4, 80069ae <_Bfree+0x3a>
 800699e:	69eb      	ldr	r3, [r5, #28]
 80069a0:	6862      	ldr	r2, [r4, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069a8:	6021      	str	r1, [r4, #0]
 80069aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	08007841 	.word	0x08007841
 80069b4:	080078c1 	.word	0x080078c1

080069b8 <__multadd>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	690d      	ldr	r5, [r1, #16]
 80069be:	4607      	mov	r7, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	461e      	mov	r6, r3
 80069c4:	f101 0c14 	add.w	ip, r1, #20
 80069c8:	2000      	movs	r0, #0
 80069ca:	f8dc 3000 	ldr.w	r3, [ip]
 80069ce:	b299      	uxth	r1, r3
 80069d0:	fb02 6101 	mla	r1, r2, r1, r6
 80069d4:	0c1e      	lsrs	r6, r3, #16
 80069d6:	0c0b      	lsrs	r3, r1, #16
 80069d8:	fb02 3306 	mla	r3, r2, r6, r3
 80069dc:	b289      	uxth	r1, r1
 80069de:	3001      	adds	r0, #1
 80069e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069e4:	4285      	cmp	r5, r0
 80069e6:	f84c 1b04 	str.w	r1, [ip], #4
 80069ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069ee:	dcec      	bgt.n	80069ca <__multadd+0x12>
 80069f0:	b30e      	cbz	r6, 8006a36 <__multadd+0x7e>
 80069f2:	68a3      	ldr	r3, [r4, #8]
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	dc19      	bgt.n	8006a2c <__multadd+0x74>
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	4638      	mov	r0, r7
 80069fc:	3101      	adds	r1, #1
 80069fe:	f7ff ff79 	bl	80068f4 <_Balloc>
 8006a02:	4680      	mov	r8, r0
 8006a04:	b928      	cbnz	r0, 8006a12 <__multadd+0x5a>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <__multadd+0x84>)
 8006a0a:	480d      	ldr	r0, [pc, #52]	; (8006a40 <__multadd+0x88>)
 8006a0c:	21ba      	movs	r1, #186	; 0xba
 8006a0e:	f000 fbb9 	bl	8007184 <__assert_func>
 8006a12:	6922      	ldr	r2, [r4, #16]
 8006a14:	3202      	adds	r2, #2
 8006a16:	f104 010c 	add.w	r1, r4, #12
 8006a1a:	0092      	lsls	r2, r2, #2
 8006a1c:	300c      	adds	r0, #12
 8006a1e:	f000 fba3 	bl	8007168 <memcpy>
 8006a22:	4621      	mov	r1, r4
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff ffa5 	bl	8006974 <_Bfree>
 8006a2a:	4644      	mov	r4, r8
 8006a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a30:	3501      	adds	r5, #1
 8006a32:	615e      	str	r6, [r3, #20]
 8006a34:	6125      	str	r5, [r4, #16]
 8006a36:	4620      	mov	r0, r4
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	080078b0 	.word	0x080078b0
 8006a40:	080078c1 	.word	0x080078c1

08006a44 <__hi0bits>:
 8006a44:	0c03      	lsrs	r3, r0, #16
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	b9d3      	cbnz	r3, 8006a80 <__hi0bits+0x3c>
 8006a4a:	0400      	lsls	r0, r0, #16
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a52:	bf04      	itt	eq
 8006a54:	0200      	lsleq	r0, r0, #8
 8006a56:	3308      	addeq	r3, #8
 8006a58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a5c:	bf04      	itt	eq
 8006a5e:	0100      	lsleq	r0, r0, #4
 8006a60:	3304      	addeq	r3, #4
 8006a62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a66:	bf04      	itt	eq
 8006a68:	0080      	lsleq	r0, r0, #2
 8006a6a:	3302      	addeq	r3, #2
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	db05      	blt.n	8006a7c <__hi0bits+0x38>
 8006a70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a74:	f103 0301 	add.w	r3, r3, #1
 8006a78:	bf08      	it	eq
 8006a7a:	2320      	moveq	r3, #32
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4770      	bx	lr
 8006a80:	2300      	movs	r3, #0
 8006a82:	e7e4      	b.n	8006a4e <__hi0bits+0xa>

08006a84 <__lo0bits>:
 8006a84:	6803      	ldr	r3, [r0, #0]
 8006a86:	f013 0207 	ands.w	r2, r3, #7
 8006a8a:	d00c      	beq.n	8006aa6 <__lo0bits+0x22>
 8006a8c:	07d9      	lsls	r1, r3, #31
 8006a8e:	d422      	bmi.n	8006ad6 <__lo0bits+0x52>
 8006a90:	079a      	lsls	r2, r3, #30
 8006a92:	bf49      	itett	mi
 8006a94:	085b      	lsrmi	r3, r3, #1
 8006a96:	089b      	lsrpl	r3, r3, #2
 8006a98:	6003      	strmi	r3, [r0, #0]
 8006a9a:	2201      	movmi	r2, #1
 8006a9c:	bf5c      	itt	pl
 8006a9e:	6003      	strpl	r3, [r0, #0]
 8006aa0:	2202      	movpl	r2, #2
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4770      	bx	lr
 8006aa6:	b299      	uxth	r1, r3
 8006aa8:	b909      	cbnz	r1, 8006aae <__lo0bits+0x2a>
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	2210      	movs	r2, #16
 8006aae:	b2d9      	uxtb	r1, r3
 8006ab0:	b909      	cbnz	r1, 8006ab6 <__lo0bits+0x32>
 8006ab2:	3208      	adds	r2, #8
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	0719      	lsls	r1, r3, #28
 8006ab8:	bf04      	itt	eq
 8006aba:	091b      	lsreq	r3, r3, #4
 8006abc:	3204      	addeq	r2, #4
 8006abe:	0799      	lsls	r1, r3, #30
 8006ac0:	bf04      	itt	eq
 8006ac2:	089b      	lsreq	r3, r3, #2
 8006ac4:	3202      	addeq	r2, #2
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	d403      	bmi.n	8006ad2 <__lo0bits+0x4e>
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	f102 0201 	add.w	r2, r2, #1
 8006ad0:	d003      	beq.n	8006ada <__lo0bits+0x56>
 8006ad2:	6003      	str	r3, [r0, #0]
 8006ad4:	e7e5      	b.n	8006aa2 <__lo0bits+0x1e>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	e7e3      	b.n	8006aa2 <__lo0bits+0x1e>
 8006ada:	2220      	movs	r2, #32
 8006adc:	e7e1      	b.n	8006aa2 <__lo0bits+0x1e>
	...

08006ae0 <__i2b>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	f7ff ff05 	bl	80068f4 <_Balloc>
 8006aea:	4602      	mov	r2, r0
 8006aec:	b928      	cbnz	r0, 8006afa <__i2b+0x1a>
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <__i2b+0x24>)
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <__i2b+0x28>)
 8006af2:	f240 1145 	movw	r1, #325	; 0x145
 8006af6:	f000 fb45 	bl	8007184 <__assert_func>
 8006afa:	2301      	movs	r3, #1
 8006afc:	6144      	str	r4, [r0, #20]
 8006afe:	6103      	str	r3, [r0, #16]
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop
 8006b04:	080078b0 	.word	0x080078b0
 8006b08:	080078c1 	.word	0x080078c1

08006b0c <__multiply>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4691      	mov	r9, r2
 8006b12:	690a      	ldr	r2, [r1, #16]
 8006b14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bfb8      	it	lt
 8006b1c:	460b      	movlt	r3, r1
 8006b1e:	460c      	mov	r4, r1
 8006b20:	bfbc      	itt	lt
 8006b22:	464c      	movlt	r4, r9
 8006b24:	4699      	movlt	r9, r3
 8006b26:	6927      	ldr	r7, [r4, #16]
 8006b28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	6861      	ldr	r1, [r4, #4]
 8006b30:	eb07 060a 	add.w	r6, r7, sl
 8006b34:	42b3      	cmp	r3, r6
 8006b36:	b085      	sub	sp, #20
 8006b38:	bfb8      	it	lt
 8006b3a:	3101      	addlt	r1, #1
 8006b3c:	f7ff feda 	bl	80068f4 <_Balloc>
 8006b40:	b930      	cbnz	r0, 8006b50 <__multiply+0x44>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b44      	ldr	r3, [pc, #272]	; (8006c58 <__multiply+0x14c>)
 8006b46:	4845      	ldr	r0, [pc, #276]	; (8006c5c <__multiply+0x150>)
 8006b48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b4c:	f000 fb1a 	bl	8007184 <__assert_func>
 8006b50:	f100 0514 	add.w	r5, r0, #20
 8006b54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b58:	462b      	mov	r3, r5
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4543      	cmp	r3, r8
 8006b5e:	d321      	bcc.n	8006ba4 <__multiply+0x98>
 8006b60:	f104 0314 	add.w	r3, r4, #20
 8006b64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b68:	f109 0314 	add.w	r3, r9, #20
 8006b6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b70:	9202      	str	r2, [sp, #8]
 8006b72:	1b3a      	subs	r2, r7, r4
 8006b74:	3a15      	subs	r2, #21
 8006b76:	f022 0203 	bic.w	r2, r2, #3
 8006b7a:	3204      	adds	r2, #4
 8006b7c:	f104 0115 	add.w	r1, r4, #21
 8006b80:	428f      	cmp	r7, r1
 8006b82:	bf38      	it	cc
 8006b84:	2204      	movcc	r2, #4
 8006b86:	9201      	str	r2, [sp, #4]
 8006b88:	9a02      	ldr	r2, [sp, #8]
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d80c      	bhi.n	8006baa <__multiply+0x9e>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	dd03      	ble.n	8006b9c <__multiply+0x90>
 8006b94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05b      	beq.n	8006c54 <__multiply+0x148>
 8006b9c:	6106      	str	r6, [r0, #16]
 8006b9e:	b005      	add	sp, #20
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	f843 2b04 	str.w	r2, [r3], #4
 8006ba8:	e7d8      	b.n	8006b5c <__multiply+0x50>
 8006baa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bae:	f1ba 0f00 	cmp.w	sl, #0
 8006bb2:	d024      	beq.n	8006bfe <__multiply+0xf2>
 8006bb4:	f104 0e14 	add.w	lr, r4, #20
 8006bb8:	46a9      	mov	r9, r5
 8006bba:	f04f 0c00 	mov.w	ip, #0
 8006bbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bc2:	f8d9 1000 	ldr.w	r1, [r9]
 8006bc6:	fa1f fb82 	uxth.w	fp, r2
 8006bca:	b289      	uxth	r1, r1
 8006bcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8006bd8:	4461      	add	r1, ip
 8006bda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bde:	fb0a c20b 	mla	r2, sl, fp, ip
 8006be2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006be6:	b289      	uxth	r1, r1
 8006be8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bec:	4577      	cmp	r7, lr
 8006bee:	f849 1b04 	str.w	r1, [r9], #4
 8006bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf6:	d8e2      	bhi.n	8006bbe <__multiply+0xb2>
 8006bf8:	9a01      	ldr	r2, [sp, #4]
 8006bfa:	f845 c002 	str.w	ip, [r5, r2]
 8006bfe:	9a03      	ldr	r2, [sp, #12]
 8006c00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c04:	3304      	adds	r3, #4
 8006c06:	f1b9 0f00 	cmp.w	r9, #0
 8006c0a:	d021      	beq.n	8006c50 <__multiply+0x144>
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	f104 0c14 	add.w	ip, r4, #20
 8006c12:	46ae      	mov	lr, r5
 8006c14:	f04f 0a00 	mov.w	sl, #0
 8006c18:	f8bc b000 	ldrh.w	fp, [ip]
 8006c1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c20:	fb09 220b 	mla	r2, r9, fp, r2
 8006c24:	4452      	add	r2, sl
 8006c26:	b289      	uxth	r1, r1
 8006c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c2c:	f84e 1b04 	str.w	r1, [lr], #4
 8006c30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c38:	f8be 1000 	ldrh.w	r1, [lr]
 8006c3c:	fb09 110a 	mla	r1, r9, sl, r1
 8006c40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c44:	4567      	cmp	r7, ip
 8006c46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c4a:	d8e5      	bhi.n	8006c18 <__multiply+0x10c>
 8006c4c:	9a01      	ldr	r2, [sp, #4]
 8006c4e:	50a9      	str	r1, [r5, r2]
 8006c50:	3504      	adds	r5, #4
 8006c52:	e799      	b.n	8006b88 <__multiply+0x7c>
 8006c54:	3e01      	subs	r6, #1
 8006c56:	e79b      	b.n	8006b90 <__multiply+0x84>
 8006c58:	080078b0 	.word	0x080078b0
 8006c5c:	080078c1 	.word	0x080078c1

08006c60 <__pow5mult>:
 8006c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c64:	4615      	mov	r5, r2
 8006c66:	f012 0203 	ands.w	r2, r2, #3
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	d007      	beq.n	8006c80 <__pow5mult+0x20>
 8006c70:	4c25      	ldr	r4, [pc, #148]	; (8006d08 <__pow5mult+0xa8>)
 8006c72:	3a01      	subs	r2, #1
 8006c74:	2300      	movs	r3, #0
 8006c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c7a:	f7ff fe9d 	bl	80069b8 <__multadd>
 8006c7e:	4607      	mov	r7, r0
 8006c80:	10ad      	asrs	r5, r5, #2
 8006c82:	d03d      	beq.n	8006d00 <__pow5mult+0xa0>
 8006c84:	69f4      	ldr	r4, [r6, #28]
 8006c86:	b97c      	cbnz	r4, 8006ca8 <__pow5mult+0x48>
 8006c88:	2010      	movs	r0, #16
 8006c8a:	f7ff fd7f 	bl	800678c <malloc>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	61f0      	str	r0, [r6, #28]
 8006c92:	b928      	cbnz	r0, 8006ca0 <__pow5mult+0x40>
 8006c94:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <__pow5mult+0xac>)
 8006c96:	481e      	ldr	r0, [pc, #120]	; (8006d10 <__pow5mult+0xb0>)
 8006c98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c9c:	f000 fa72 	bl	8007184 <__assert_func>
 8006ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ca4:	6004      	str	r4, [r0, #0]
 8006ca6:	60c4      	str	r4, [r0, #12]
 8006ca8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cb0:	b94c      	cbnz	r4, 8006cc6 <__pow5mult+0x66>
 8006cb2:	f240 2171 	movw	r1, #625	; 0x271
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff12 	bl	8006ae0 <__i2b>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	6003      	str	r3, [r0, #0]
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	07eb      	lsls	r3, r5, #31
 8006ccc:	d50a      	bpl.n	8006ce4 <__pow5mult+0x84>
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7ff ff1a 	bl	8006b0c <__multiply>
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fe49 	bl	8006974 <_Bfree>
 8006ce2:	4647      	mov	r7, r8
 8006ce4:	106d      	asrs	r5, r5, #1
 8006ce6:	d00b      	beq.n	8006d00 <__pow5mult+0xa0>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	b938      	cbnz	r0, 8006cfc <__pow5mult+0x9c>
 8006cec:	4622      	mov	r2, r4
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff ff0b 	bl	8006b0c <__multiply>
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	f8c0 9000 	str.w	r9, [r0]
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e7e4      	b.n	8006cca <__pow5mult+0x6a>
 8006d00:	4638      	mov	r0, r7
 8006d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d06:	bf00      	nop
 8006d08:	08007a10 	.word	0x08007a10
 8006d0c:	08007841 	.word	0x08007841
 8006d10:	080078c1 	.word	0x080078c1

08006d14 <__lshift>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	6849      	ldr	r1, [r1, #4]
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d22:	68a3      	ldr	r3, [r4, #8]
 8006d24:	4607      	mov	r7, r0
 8006d26:	4691      	mov	r9, r2
 8006d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d2c:	f108 0601 	add.w	r6, r8, #1
 8006d30:	42b3      	cmp	r3, r6
 8006d32:	db0b      	blt.n	8006d4c <__lshift+0x38>
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff fddd 	bl	80068f4 <_Balloc>
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	b948      	cbnz	r0, 8006d52 <__lshift+0x3e>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <__lshift+0xd0>)
 8006d42:	4829      	ldr	r0, [pc, #164]	; (8006de8 <__lshift+0xd4>)
 8006d44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d48:	f000 fa1c 	bl	8007184 <__assert_func>
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	e7ee      	b.n	8006d30 <__lshift+0x1c>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f100 0114 	add.w	r1, r0, #20
 8006d58:	f100 0210 	add.w	r2, r0, #16
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	4553      	cmp	r3, sl
 8006d60:	db33      	blt.n	8006dca <__lshift+0xb6>
 8006d62:	6920      	ldr	r0, [r4, #16]
 8006d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d68:	f104 0314 	add.w	r3, r4, #20
 8006d6c:	f019 091f 	ands.w	r9, r9, #31
 8006d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d78:	d02b      	beq.n	8006dd2 <__lshift+0xbe>
 8006d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d7e:	468a      	mov	sl, r1
 8006d80:	2200      	movs	r2, #0
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	fa00 f009 	lsl.w	r0, r0, r9
 8006d88:	4310      	orrs	r0, r2
 8006d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d92:	459c      	cmp	ip, r3
 8006d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d98:	d8f3      	bhi.n	8006d82 <__lshift+0x6e>
 8006d9a:	ebac 0304 	sub.w	r3, ip, r4
 8006d9e:	3b15      	subs	r3, #21
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	3304      	adds	r3, #4
 8006da6:	f104 0015 	add.w	r0, r4, #21
 8006daa:	4584      	cmp	ip, r0
 8006dac:	bf38      	it	cc
 8006dae:	2304      	movcc	r3, #4
 8006db0:	50ca      	str	r2, [r1, r3]
 8006db2:	b10a      	cbz	r2, 8006db8 <__lshift+0xa4>
 8006db4:	f108 0602 	add.w	r6, r8, #2
 8006db8:	3e01      	subs	r6, #1
 8006dba:	4638      	mov	r0, r7
 8006dbc:	612e      	str	r6, [r5, #16]
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	f7ff fdd8 	bl	8006974 <_Bfree>
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dce:	3301      	adds	r3, #1
 8006dd0:	e7c5      	b.n	8006d5e <__lshift+0x4a>
 8006dd2:	3904      	subs	r1, #4
 8006dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ddc:	459c      	cmp	ip, r3
 8006dde:	d8f9      	bhi.n	8006dd4 <__lshift+0xc0>
 8006de0:	e7ea      	b.n	8006db8 <__lshift+0xa4>
 8006de2:	bf00      	nop
 8006de4:	080078b0 	.word	0x080078b0
 8006de8:	080078c1 	.word	0x080078c1

08006dec <__mcmp>:
 8006dec:	b530      	push	{r4, r5, lr}
 8006dee:	6902      	ldr	r2, [r0, #16]
 8006df0:	690c      	ldr	r4, [r1, #16]
 8006df2:	1b12      	subs	r2, r2, r4
 8006df4:	d10e      	bne.n	8006e14 <__mcmp+0x28>
 8006df6:	f100 0314 	add.w	r3, r0, #20
 8006dfa:	3114      	adds	r1, #20
 8006dfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e0c:	42a5      	cmp	r5, r4
 8006e0e:	d003      	beq.n	8006e18 <__mcmp+0x2c>
 8006e10:	d305      	bcc.n	8006e1e <__mcmp+0x32>
 8006e12:	2201      	movs	r2, #1
 8006e14:	4610      	mov	r0, r2
 8006e16:	bd30      	pop	{r4, r5, pc}
 8006e18:	4283      	cmp	r3, r0
 8006e1a:	d3f3      	bcc.n	8006e04 <__mcmp+0x18>
 8006e1c:	e7fa      	b.n	8006e14 <__mcmp+0x28>
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	e7f7      	b.n	8006e14 <__mcmp+0x28>

08006e24 <__mdiff>:
 8006e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4690      	mov	r8, r2
 8006e32:	f7ff ffdb 	bl	8006dec <__mcmp>
 8006e36:	1e05      	subs	r5, r0, #0
 8006e38:	d110      	bne.n	8006e5c <__mdiff+0x38>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff fd59 	bl	80068f4 <_Balloc>
 8006e42:	b930      	cbnz	r0, 8006e52 <__mdiff+0x2e>
 8006e44:	4b3a      	ldr	r3, [pc, #232]	; (8006f30 <__mdiff+0x10c>)
 8006e46:	4602      	mov	r2, r0
 8006e48:	f240 2137 	movw	r1, #567	; 0x237
 8006e4c:	4839      	ldr	r0, [pc, #228]	; (8006f34 <__mdiff+0x110>)
 8006e4e:	f000 f999 	bl	8007184 <__assert_func>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	bfa4      	itt	ge
 8006e5e:	4643      	movge	r3, r8
 8006e60:	46a0      	movge	r8, r4
 8006e62:	4630      	mov	r0, r6
 8006e64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e68:	bfa6      	itte	ge
 8006e6a:	461c      	movge	r4, r3
 8006e6c:	2500      	movge	r5, #0
 8006e6e:	2501      	movlt	r5, #1
 8006e70:	f7ff fd40 	bl	80068f4 <_Balloc>
 8006e74:	b920      	cbnz	r0, 8006e80 <__mdiff+0x5c>
 8006e76:	4b2e      	ldr	r3, [pc, #184]	; (8006f30 <__mdiff+0x10c>)
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f240 2145 	movw	r1, #581	; 0x245
 8006e7e:	e7e5      	b.n	8006e4c <__mdiff+0x28>
 8006e80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e84:	6926      	ldr	r6, [r4, #16]
 8006e86:	60c5      	str	r5, [r0, #12]
 8006e88:	f104 0914 	add.w	r9, r4, #20
 8006e8c:	f108 0514 	add.w	r5, r8, #20
 8006e90:	f100 0e14 	add.w	lr, r0, #20
 8006e94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e9c:	f108 0210 	add.w	r2, r8, #16
 8006ea0:	46f2      	mov	sl, lr
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eac:	fa11 f88b 	uxtah	r8, r1, fp
 8006eb0:	b299      	uxth	r1, r3
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	eba8 0801 	sub.w	r8, r8, r1
 8006eb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ebc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ec0:	fa1f f888 	uxth.w	r8, r8
 8006ec4:	1419      	asrs	r1, r3, #16
 8006ec6:	454e      	cmp	r6, r9
 8006ec8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ecc:	f84a 3b04 	str.w	r3, [sl], #4
 8006ed0:	d8e8      	bhi.n	8006ea4 <__mdiff+0x80>
 8006ed2:	1b33      	subs	r3, r6, r4
 8006ed4:	3b15      	subs	r3, #21
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	3304      	adds	r3, #4
 8006edc:	3415      	adds	r4, #21
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	bf38      	it	cc
 8006ee2:	2304      	movcc	r3, #4
 8006ee4:	441d      	add	r5, r3
 8006ee6:	4473      	add	r3, lr
 8006ee8:	469e      	mov	lr, r3
 8006eea:	462e      	mov	r6, r5
 8006eec:	4566      	cmp	r6, ip
 8006eee:	d30e      	bcc.n	8006f0e <__mdiff+0xea>
 8006ef0:	f10c 0203 	add.w	r2, ip, #3
 8006ef4:	1b52      	subs	r2, r2, r5
 8006ef6:	f022 0203 	bic.w	r2, r2, #3
 8006efa:	3d03      	subs	r5, #3
 8006efc:	45ac      	cmp	ip, r5
 8006efe:	bf38      	it	cc
 8006f00:	2200      	movcc	r2, #0
 8006f02:	4413      	add	r3, r2
 8006f04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f08:	b17a      	cbz	r2, 8006f2a <__mdiff+0x106>
 8006f0a:	6107      	str	r7, [r0, #16]
 8006f0c:	e7a4      	b.n	8006e58 <__mdiff+0x34>
 8006f0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f12:	fa11 f288 	uxtah	r2, r1, r8
 8006f16:	1414      	asrs	r4, r2, #16
 8006f18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f22:	f84e 2b04 	str.w	r2, [lr], #4
 8006f26:	1421      	asrs	r1, r4, #16
 8006f28:	e7e0      	b.n	8006eec <__mdiff+0xc8>
 8006f2a:	3f01      	subs	r7, #1
 8006f2c:	e7ea      	b.n	8006f04 <__mdiff+0xe0>
 8006f2e:	bf00      	nop
 8006f30:	080078b0 	.word	0x080078b0
 8006f34:	080078c1 	.word	0x080078c1

08006f38 <__d2b>:
 8006f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	2101      	movs	r1, #1
 8006f40:	ec59 8b10 	vmov	r8, r9, d0
 8006f44:	4616      	mov	r6, r2
 8006f46:	f7ff fcd5 	bl	80068f4 <_Balloc>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	b930      	cbnz	r0, 8006f5c <__d2b+0x24>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <__d2b+0xac>)
 8006f52:	4825      	ldr	r0, [pc, #148]	; (8006fe8 <__d2b+0xb0>)
 8006f54:	f240 310f 	movw	r1, #783	; 0x30f
 8006f58:	f000 f914 	bl	8007184 <__assert_func>
 8006f5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f64:	bb2d      	cbnz	r5, 8006fb2 <__d2b+0x7a>
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	f1b8 0300 	subs.w	r3, r8, #0
 8006f6c:	d026      	beq.n	8006fbc <__d2b+0x84>
 8006f6e:	4668      	mov	r0, sp
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	f7ff fd87 	bl	8006a84 <__lo0bits>
 8006f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f7a:	b1e8      	cbz	r0, 8006fb8 <__d2b+0x80>
 8006f7c:	f1c0 0320 	rsb	r3, r0, #32
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	430b      	orrs	r3, r1
 8006f86:	40c2      	lsrs	r2, r0
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	9201      	str	r2, [sp, #4]
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	61a3      	str	r3, [r4, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf14      	ite	ne
 8006f94:	2202      	movne	r2, #2
 8006f96:	2201      	moveq	r2, #1
 8006f98:	6122      	str	r2, [r4, #16]
 8006f9a:	b1bd      	cbz	r5, 8006fcc <__d2b+0x94>
 8006f9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa0:	4405      	add	r5, r0
 8006fa2:	603d      	str	r5, [r7, #0]
 8006fa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fa8:	6030      	str	r0, [r6, #0]
 8006faa:	4620      	mov	r0, r4
 8006fac:	b003      	add	sp, #12
 8006fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fb6:	e7d6      	b.n	8006f66 <__d2b+0x2e>
 8006fb8:	6161      	str	r1, [r4, #20]
 8006fba:	e7e7      	b.n	8006f8c <__d2b+0x54>
 8006fbc:	a801      	add	r0, sp, #4
 8006fbe:	f7ff fd61 	bl	8006a84 <__lo0bits>
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	6163      	str	r3, [r4, #20]
 8006fc6:	3020      	adds	r0, #32
 8006fc8:	2201      	movs	r2, #1
 8006fca:	e7e5      	b.n	8006f98 <__d2b+0x60>
 8006fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fd4:	6038      	str	r0, [r7, #0]
 8006fd6:	6918      	ldr	r0, [r3, #16]
 8006fd8:	f7ff fd34 	bl	8006a44 <__hi0bits>
 8006fdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fe0:	e7e2      	b.n	8006fa8 <__d2b+0x70>
 8006fe2:	bf00      	nop
 8006fe4:	080078b0 	.word	0x080078b0
 8006fe8:	080078c1 	.word	0x080078c1

08006fec <__sflush_r>:
 8006fec:	898a      	ldrh	r2, [r1, #12]
 8006fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	0710      	lsls	r0, r2, #28
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	d458      	bmi.n	80070ac <__sflush_r+0xc0>
 8006ffa:	684b      	ldr	r3, [r1, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dc05      	bgt.n	800700c <__sflush_r+0x20>
 8007000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	dc02      	bgt.n	800700c <__sflush_r+0x20>
 8007006:	2000      	movs	r0, #0
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800700e:	2e00      	cmp	r6, #0
 8007010:	d0f9      	beq.n	8007006 <__sflush_r+0x1a>
 8007012:	2300      	movs	r3, #0
 8007014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007018:	682f      	ldr	r7, [r5, #0]
 800701a:	6a21      	ldr	r1, [r4, #32]
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	d032      	beq.n	8007086 <__sflush_r+0x9a>
 8007020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	075a      	lsls	r2, r3, #29
 8007026:	d505      	bpl.n	8007034 <__sflush_r+0x48>
 8007028:	6863      	ldr	r3, [r4, #4]
 800702a:	1ac0      	subs	r0, r0, r3
 800702c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800702e:	b10b      	cbz	r3, 8007034 <__sflush_r+0x48>
 8007030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007032:	1ac0      	subs	r0, r0, r3
 8007034:	2300      	movs	r3, #0
 8007036:	4602      	mov	r2, r0
 8007038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703a:	6a21      	ldr	r1, [r4, #32]
 800703c:	4628      	mov	r0, r5
 800703e:	47b0      	blx	r6
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	d106      	bne.n	8007054 <__sflush_r+0x68>
 8007046:	6829      	ldr	r1, [r5, #0]
 8007048:	291d      	cmp	r1, #29
 800704a:	d82b      	bhi.n	80070a4 <__sflush_r+0xb8>
 800704c:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <__sflush_r+0x108>)
 800704e:	410a      	asrs	r2, r1
 8007050:	07d6      	lsls	r6, r2, #31
 8007052:	d427      	bmi.n	80070a4 <__sflush_r+0xb8>
 8007054:	2200      	movs	r2, #0
 8007056:	6062      	str	r2, [r4, #4]
 8007058:	04d9      	lsls	r1, r3, #19
 800705a:	6922      	ldr	r2, [r4, #16]
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	d504      	bpl.n	800706a <__sflush_r+0x7e>
 8007060:	1c42      	adds	r2, r0, #1
 8007062:	d101      	bne.n	8007068 <__sflush_r+0x7c>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b903      	cbnz	r3, 800706a <__sflush_r+0x7e>
 8007068:	6560      	str	r0, [r4, #84]	; 0x54
 800706a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706c:	602f      	str	r7, [r5, #0]
 800706e:	2900      	cmp	r1, #0
 8007070:	d0c9      	beq.n	8007006 <__sflush_r+0x1a>
 8007072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007076:	4299      	cmp	r1, r3
 8007078:	d002      	beq.n	8007080 <__sflush_r+0x94>
 800707a:	4628      	mov	r0, r5
 800707c:	f7ff fb3a 	bl	80066f4 <_free_r>
 8007080:	2000      	movs	r0, #0
 8007082:	6360      	str	r0, [r4, #52]	; 0x34
 8007084:	e7c0      	b.n	8007008 <__sflush_r+0x1c>
 8007086:	2301      	movs	r3, #1
 8007088:	4628      	mov	r0, r5
 800708a:	47b0      	blx	r6
 800708c:	1c41      	adds	r1, r0, #1
 800708e:	d1c8      	bne.n	8007022 <__sflush_r+0x36>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0c5      	beq.n	8007022 <__sflush_r+0x36>
 8007096:	2b1d      	cmp	r3, #29
 8007098:	d001      	beq.n	800709e <__sflush_r+0xb2>
 800709a:	2b16      	cmp	r3, #22
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0xb6>
 800709e:	602f      	str	r7, [r5, #0]
 80070a0:	e7b1      	b.n	8007006 <__sflush_r+0x1a>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	e7ad      	b.n	8007008 <__sflush_r+0x1c>
 80070ac:	690f      	ldr	r7, [r1, #16]
 80070ae:	2f00      	cmp	r7, #0
 80070b0:	d0a9      	beq.n	8007006 <__sflush_r+0x1a>
 80070b2:	0793      	lsls	r3, r2, #30
 80070b4:	680e      	ldr	r6, [r1, #0]
 80070b6:	bf08      	it	eq
 80070b8:	694b      	ldreq	r3, [r1, #20]
 80070ba:	600f      	str	r7, [r1, #0]
 80070bc:	bf18      	it	ne
 80070be:	2300      	movne	r3, #0
 80070c0:	eba6 0807 	sub.w	r8, r6, r7
 80070c4:	608b      	str	r3, [r1, #8]
 80070c6:	f1b8 0f00 	cmp.w	r8, #0
 80070ca:	dd9c      	ble.n	8007006 <__sflush_r+0x1a>
 80070cc:	6a21      	ldr	r1, [r4, #32]
 80070ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070d0:	4643      	mov	r3, r8
 80070d2:	463a      	mov	r2, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	2800      	cmp	r0, #0
 80070da:	dc06      	bgt.n	80070ea <__sflush_r+0xfe>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e78e      	b.n	8007008 <__sflush_r+0x1c>
 80070ea:	4407      	add	r7, r0
 80070ec:	eba8 0800 	sub.w	r8, r8, r0
 80070f0:	e7e9      	b.n	80070c6 <__sflush_r+0xda>
 80070f2:	bf00      	nop
 80070f4:	dfbffffe 	.word	0xdfbffffe

080070f8 <_fflush_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	4605      	mov	r5, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	b913      	cbnz	r3, 8007108 <_fflush_r+0x10>
 8007102:	2500      	movs	r5, #0
 8007104:	4628      	mov	r0, r5
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	b118      	cbz	r0, 8007112 <_fflush_r+0x1a>
 800710a:	6a03      	ldr	r3, [r0, #32]
 800710c:	b90b      	cbnz	r3, 8007112 <_fflush_r+0x1a>
 800710e:	f7fe fb7f 	bl	8005810 <__sinit>
 8007112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f3      	beq.n	8007102 <_fflush_r+0xa>
 800711a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800711c:	07d0      	lsls	r0, r2, #31
 800711e:	d404      	bmi.n	800712a <_fflush_r+0x32>
 8007120:	0599      	lsls	r1, r3, #22
 8007122:	d402      	bmi.n	800712a <_fflush_r+0x32>
 8007124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007126:	f7fe fc69 	bl	80059fc <__retarget_lock_acquire_recursive>
 800712a:	4628      	mov	r0, r5
 800712c:	4621      	mov	r1, r4
 800712e:	f7ff ff5d 	bl	8006fec <__sflush_r>
 8007132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007134:	07da      	lsls	r2, r3, #31
 8007136:	4605      	mov	r5, r0
 8007138:	d4e4      	bmi.n	8007104 <_fflush_r+0xc>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	059b      	lsls	r3, r3, #22
 800713e:	d4e1      	bmi.n	8007104 <_fflush_r+0xc>
 8007140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007142:	f7fe fc5c 	bl	80059fe <__retarget_lock_release_recursive>
 8007146:	e7dd      	b.n	8007104 <_fflush_r+0xc>

08007148 <_sbrk_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d06      	ldr	r5, [pc, #24]	; (8007164 <_sbrk_r+0x1c>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	602b      	str	r3, [r5, #0]
 8007154:	f7fa fa8e 	bl	8001674 <_sbrk>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_sbrk_r+0x1a>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_sbrk_r+0x1a>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	200004bc 	.word	0x200004bc

08007168 <memcpy>:
 8007168:	440a      	add	r2, r1
 800716a:	4291      	cmp	r1, r2
 800716c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007170:	d100      	bne.n	8007174 <memcpy+0xc>
 8007172:	4770      	bx	lr
 8007174:	b510      	push	{r4, lr}
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717e:	4291      	cmp	r1, r2
 8007180:	d1f9      	bne.n	8007176 <memcpy+0xe>
 8007182:	bd10      	pop	{r4, pc}

08007184 <__assert_func>:
 8007184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007186:	4614      	mov	r4, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <__assert_func+0x2c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4605      	mov	r5, r0
 8007190:	68d8      	ldr	r0, [r3, #12]
 8007192:	b14c      	cbz	r4, 80071a8 <__assert_func+0x24>
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <__assert_func+0x30>)
 8007196:	9100      	str	r1, [sp, #0]
 8007198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800719c:	4906      	ldr	r1, [pc, #24]	; (80071b8 <__assert_func+0x34>)
 800719e:	462b      	mov	r3, r5
 80071a0:	f000 f844 	bl	800722c <fiprintf>
 80071a4:	f000 f854 	bl	8007250 <abort>
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <__assert_func+0x38>)
 80071aa:	461c      	mov	r4, r3
 80071ac:	e7f3      	b.n	8007196 <__assert_func+0x12>
 80071ae:	bf00      	nop
 80071b0:	20000064 	.word	0x20000064
 80071b4:	08007a26 	.word	0x08007a26
 80071b8:	08007a33 	.word	0x08007a33
 80071bc:	08007a61 	.word	0x08007a61

080071c0 <_calloc_r>:
 80071c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071c2:	fba1 2402 	umull	r2, r4, r1, r2
 80071c6:	b94c      	cbnz	r4, 80071dc <_calloc_r+0x1c>
 80071c8:	4611      	mov	r1, r2
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	f7ff fb06 	bl	80067dc <_malloc_r>
 80071d0:	9a01      	ldr	r2, [sp, #4]
 80071d2:	4605      	mov	r5, r0
 80071d4:	b930      	cbnz	r0, 80071e4 <_calloc_r+0x24>
 80071d6:	4628      	mov	r0, r5
 80071d8:	b003      	add	sp, #12
 80071da:	bd30      	pop	{r4, r5, pc}
 80071dc:	220c      	movs	r2, #12
 80071de:	6002      	str	r2, [r0, #0]
 80071e0:	2500      	movs	r5, #0
 80071e2:	e7f8      	b.n	80071d6 <_calloc_r+0x16>
 80071e4:	4621      	mov	r1, r4
 80071e6:	f7fe fb8c 	bl	8005902 <memset>
 80071ea:	e7f4      	b.n	80071d6 <_calloc_r+0x16>

080071ec <__ascii_mbtowc>:
 80071ec:	b082      	sub	sp, #8
 80071ee:	b901      	cbnz	r1, 80071f2 <__ascii_mbtowc+0x6>
 80071f0:	a901      	add	r1, sp, #4
 80071f2:	b142      	cbz	r2, 8007206 <__ascii_mbtowc+0x1a>
 80071f4:	b14b      	cbz	r3, 800720a <__ascii_mbtowc+0x1e>
 80071f6:	7813      	ldrb	r3, [r2, #0]
 80071f8:	600b      	str	r3, [r1, #0]
 80071fa:	7812      	ldrb	r2, [r2, #0]
 80071fc:	1e10      	subs	r0, r2, #0
 80071fe:	bf18      	it	ne
 8007200:	2001      	movne	r0, #1
 8007202:	b002      	add	sp, #8
 8007204:	4770      	bx	lr
 8007206:	4610      	mov	r0, r2
 8007208:	e7fb      	b.n	8007202 <__ascii_mbtowc+0x16>
 800720a:	f06f 0001 	mvn.w	r0, #1
 800720e:	e7f8      	b.n	8007202 <__ascii_mbtowc+0x16>

08007210 <__ascii_wctomb>:
 8007210:	b149      	cbz	r1, 8007226 <__ascii_wctomb+0x16>
 8007212:	2aff      	cmp	r2, #255	; 0xff
 8007214:	bf85      	ittet	hi
 8007216:	238a      	movhi	r3, #138	; 0x8a
 8007218:	6003      	strhi	r3, [r0, #0]
 800721a:	700a      	strbls	r2, [r1, #0]
 800721c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007220:	bf98      	it	ls
 8007222:	2001      	movls	r0, #1
 8007224:	4770      	bx	lr
 8007226:	4608      	mov	r0, r1
 8007228:	4770      	bx	lr
	...

0800722c <fiprintf>:
 800722c:	b40e      	push	{r1, r2, r3}
 800722e:	b503      	push	{r0, r1, lr}
 8007230:	4601      	mov	r1, r0
 8007232:	ab03      	add	r3, sp, #12
 8007234:	4805      	ldr	r0, [pc, #20]	; (800724c <fiprintf+0x20>)
 8007236:	f853 2b04 	ldr.w	r2, [r3], #4
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	f000 f837 	bl	80072b0 <_vfiprintf_r>
 8007242:	b002      	add	sp, #8
 8007244:	f85d eb04 	ldr.w	lr, [sp], #4
 8007248:	b003      	add	sp, #12
 800724a:	4770      	bx	lr
 800724c:	20000064 	.word	0x20000064

08007250 <abort>:
 8007250:	b508      	push	{r3, lr}
 8007252:	2006      	movs	r0, #6
 8007254:	f000 fa04 	bl	8007660 <raise>
 8007258:	2001      	movs	r0, #1
 800725a:	f7fa f9af 	bl	80015bc <_exit>

0800725e <__sfputc_r>:
 800725e:	6893      	ldr	r3, [r2, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	b410      	push	{r4}
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	da08      	bge.n	800727c <__sfputc_r+0x1e>
 800726a:	6994      	ldr	r4, [r2, #24]
 800726c:	42a3      	cmp	r3, r4
 800726e:	db01      	blt.n	8007274 <__sfputc_r+0x16>
 8007270:	290a      	cmp	r1, #10
 8007272:	d103      	bne.n	800727c <__sfputc_r+0x1e>
 8007274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007278:	f000 b934 	b.w	80074e4 <__swbuf_r>
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	1c58      	adds	r0, r3, #1
 8007280:	6010      	str	r0, [r2, #0]
 8007282:	7019      	strb	r1, [r3, #0]
 8007284:	4608      	mov	r0, r1
 8007286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728a:	4770      	bx	lr

0800728c <__sfputs_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	4614      	mov	r4, r2
 8007294:	18d5      	adds	r5, r2, r3
 8007296:	42ac      	cmp	r4, r5
 8007298:	d101      	bne.n	800729e <__sfputs_r+0x12>
 800729a:	2000      	movs	r0, #0
 800729c:	e007      	b.n	80072ae <__sfputs_r+0x22>
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	463a      	mov	r2, r7
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff ffda 	bl	800725e <__sfputc_r>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d1f3      	bne.n	8007296 <__sfputs_r+0xa>
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072b0 <_vfiprintf_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	460d      	mov	r5, r1
 80072b6:	b09d      	sub	sp, #116	; 0x74
 80072b8:	4614      	mov	r4, r2
 80072ba:	4698      	mov	r8, r3
 80072bc:	4606      	mov	r6, r0
 80072be:	b118      	cbz	r0, 80072c8 <_vfiprintf_r+0x18>
 80072c0:	6a03      	ldr	r3, [r0, #32]
 80072c2:	b90b      	cbnz	r3, 80072c8 <_vfiprintf_r+0x18>
 80072c4:	f7fe faa4 	bl	8005810 <__sinit>
 80072c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ca:	07d9      	lsls	r1, r3, #31
 80072cc:	d405      	bmi.n	80072da <_vfiprintf_r+0x2a>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	059a      	lsls	r2, r3, #22
 80072d2:	d402      	bmi.n	80072da <_vfiprintf_r+0x2a>
 80072d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072d6:	f7fe fb91 	bl	80059fc <__retarget_lock_acquire_recursive>
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	071b      	lsls	r3, r3, #28
 80072de:	d501      	bpl.n	80072e4 <_vfiprintf_r+0x34>
 80072e0:	692b      	ldr	r3, [r5, #16]
 80072e2:	b99b      	cbnz	r3, 800730c <_vfiprintf_r+0x5c>
 80072e4:	4629      	mov	r1, r5
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 f93a 	bl	8007560 <__swsetup_r>
 80072ec:	b170      	cbz	r0, 800730c <_vfiprintf_r+0x5c>
 80072ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072f0:	07dc      	lsls	r4, r3, #31
 80072f2:	d504      	bpl.n	80072fe <_vfiprintf_r+0x4e>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	b01d      	add	sp, #116	; 0x74
 80072fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	0598      	lsls	r0, r3, #22
 8007302:	d4f7      	bmi.n	80072f4 <_vfiprintf_r+0x44>
 8007304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007306:	f7fe fb7a 	bl	80059fe <__retarget_lock_release_recursive>
 800730a:	e7f3      	b.n	80072f4 <_vfiprintf_r+0x44>
 800730c:	2300      	movs	r3, #0
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	2320      	movs	r3, #32
 8007312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007316:	f8cd 800c 	str.w	r8, [sp, #12]
 800731a:	2330      	movs	r3, #48	; 0x30
 800731c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074d0 <_vfiprintf_r+0x220>
 8007320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007324:	f04f 0901 	mov.w	r9, #1
 8007328:	4623      	mov	r3, r4
 800732a:	469a      	mov	sl, r3
 800732c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007330:	b10a      	cbz	r2, 8007336 <_vfiprintf_r+0x86>
 8007332:	2a25      	cmp	r2, #37	; 0x25
 8007334:	d1f9      	bne.n	800732a <_vfiprintf_r+0x7a>
 8007336:	ebba 0b04 	subs.w	fp, sl, r4
 800733a:	d00b      	beq.n	8007354 <_vfiprintf_r+0xa4>
 800733c:	465b      	mov	r3, fp
 800733e:	4622      	mov	r2, r4
 8007340:	4629      	mov	r1, r5
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ffa2 	bl	800728c <__sfputs_r>
 8007348:	3001      	adds	r0, #1
 800734a:	f000 80a9 	beq.w	80074a0 <_vfiprintf_r+0x1f0>
 800734e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007350:	445a      	add	r2, fp
 8007352:	9209      	str	r2, [sp, #36]	; 0x24
 8007354:	f89a 3000 	ldrb.w	r3, [sl]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80a1 	beq.w	80074a0 <_vfiprintf_r+0x1f0>
 800735e:	2300      	movs	r3, #0
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007368:	f10a 0a01 	add.w	sl, sl, #1
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007374:	931a      	str	r3, [sp, #104]	; 0x68
 8007376:	4654      	mov	r4, sl
 8007378:	2205      	movs	r2, #5
 800737a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737e:	4854      	ldr	r0, [pc, #336]	; (80074d0 <_vfiprintf_r+0x220>)
 8007380:	f7f8 ff26 	bl	80001d0 <memchr>
 8007384:	9a04      	ldr	r2, [sp, #16]
 8007386:	b9d8      	cbnz	r0, 80073c0 <_vfiprintf_r+0x110>
 8007388:	06d1      	lsls	r1, r2, #27
 800738a:	bf44      	itt	mi
 800738c:	2320      	movmi	r3, #32
 800738e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007392:	0713      	lsls	r3, r2, #28
 8007394:	bf44      	itt	mi
 8007396:	232b      	movmi	r3, #43	; 0x2b
 8007398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	2b2a      	cmp	r3, #42	; 0x2a
 80073a2:	d015      	beq.n	80073d0 <_vfiprintf_r+0x120>
 80073a4:	9a07      	ldr	r2, [sp, #28]
 80073a6:	4654      	mov	r4, sl
 80073a8:	2000      	movs	r0, #0
 80073aa:	f04f 0c0a 	mov.w	ip, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b4:	3b30      	subs	r3, #48	; 0x30
 80073b6:	2b09      	cmp	r3, #9
 80073b8:	d94d      	bls.n	8007456 <_vfiprintf_r+0x1a6>
 80073ba:	b1b0      	cbz	r0, 80073ea <_vfiprintf_r+0x13a>
 80073bc:	9207      	str	r2, [sp, #28]
 80073be:	e014      	b.n	80073ea <_vfiprintf_r+0x13a>
 80073c0:	eba0 0308 	sub.w	r3, r0, r8
 80073c4:	fa09 f303 	lsl.w	r3, r9, r3
 80073c8:	4313      	orrs	r3, r2
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	46a2      	mov	sl, r4
 80073ce:	e7d2      	b.n	8007376 <_vfiprintf_r+0xc6>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	1d19      	adds	r1, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	9103      	str	r1, [sp, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfbb      	ittet	lt
 80073dc:	425b      	neglt	r3, r3
 80073de:	f042 0202 	orrlt.w	r2, r2, #2
 80073e2:	9307      	strge	r3, [sp, #28]
 80073e4:	9307      	strlt	r3, [sp, #28]
 80073e6:	bfb8      	it	lt
 80073e8:	9204      	strlt	r2, [sp, #16]
 80073ea:	7823      	ldrb	r3, [r4, #0]
 80073ec:	2b2e      	cmp	r3, #46	; 0x2e
 80073ee:	d10c      	bne.n	800740a <_vfiprintf_r+0x15a>
 80073f0:	7863      	ldrb	r3, [r4, #1]
 80073f2:	2b2a      	cmp	r3, #42	; 0x2a
 80073f4:	d134      	bne.n	8007460 <_vfiprintf_r+0x1b0>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	1d1a      	adds	r2, r3, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9203      	str	r2, [sp, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	f04f 33ff 	movlt.w	r3, #4294967295
 8007406:	3402      	adds	r4, #2
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074e0 <_vfiprintf_r+0x230>
 800740e:	7821      	ldrb	r1, [r4, #0]
 8007410:	2203      	movs	r2, #3
 8007412:	4650      	mov	r0, sl
 8007414:	f7f8 fedc 	bl	80001d0 <memchr>
 8007418:	b138      	cbz	r0, 800742a <_vfiprintf_r+0x17a>
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	eba0 000a 	sub.w	r0, r0, sl
 8007420:	2240      	movs	r2, #64	; 0x40
 8007422:	4082      	lsls	r2, r0
 8007424:	4313      	orrs	r3, r2
 8007426:	3401      	adds	r4, #1
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742e:	4829      	ldr	r0, [pc, #164]	; (80074d4 <_vfiprintf_r+0x224>)
 8007430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007434:	2206      	movs	r2, #6
 8007436:	f7f8 fecb 	bl	80001d0 <memchr>
 800743a:	2800      	cmp	r0, #0
 800743c:	d03f      	beq.n	80074be <_vfiprintf_r+0x20e>
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <_vfiprintf_r+0x228>)
 8007440:	bb1b      	cbnz	r3, 800748a <_vfiprintf_r+0x1da>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	3307      	adds	r3, #7
 8007446:	f023 0307 	bic.w	r3, r3, #7
 800744a:	3308      	adds	r3, #8
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007450:	443b      	add	r3, r7
 8007452:	9309      	str	r3, [sp, #36]	; 0x24
 8007454:	e768      	b.n	8007328 <_vfiprintf_r+0x78>
 8007456:	fb0c 3202 	mla	r2, ip, r2, r3
 800745a:	460c      	mov	r4, r1
 800745c:	2001      	movs	r0, #1
 800745e:	e7a6      	b.n	80073ae <_vfiprintf_r+0xfe>
 8007460:	2300      	movs	r3, #0
 8007462:	3401      	adds	r4, #1
 8007464:	9305      	str	r3, [sp, #20]
 8007466:	4619      	mov	r1, r3
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	4620      	mov	r0, r4
 800746e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007472:	3a30      	subs	r2, #48	; 0x30
 8007474:	2a09      	cmp	r2, #9
 8007476:	d903      	bls.n	8007480 <_vfiprintf_r+0x1d0>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0c6      	beq.n	800740a <_vfiprintf_r+0x15a>
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	e7c4      	b.n	800740a <_vfiprintf_r+0x15a>
 8007480:	fb0c 2101 	mla	r1, ip, r1, r2
 8007484:	4604      	mov	r4, r0
 8007486:	2301      	movs	r3, #1
 8007488:	e7f0      	b.n	800746c <_vfiprintf_r+0x1bc>
 800748a:	ab03      	add	r3, sp, #12
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	462a      	mov	r2, r5
 8007490:	4b12      	ldr	r3, [pc, #72]	; (80074dc <_vfiprintf_r+0x22c>)
 8007492:	a904      	add	r1, sp, #16
 8007494:	4630      	mov	r0, r6
 8007496:	f7fd fd7b 	bl	8004f90 <_printf_float>
 800749a:	4607      	mov	r7, r0
 800749c:	1c78      	adds	r0, r7, #1
 800749e:	d1d6      	bne.n	800744e <_vfiprintf_r+0x19e>
 80074a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_vfiprintf_r+0x202>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_vfiprintf_r+0x202>
 80074ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ae:	f7fe faa6 	bl	80059fe <__retarget_lock_release_recursive>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	065b      	lsls	r3, r3, #25
 80074b6:	f53f af1d 	bmi.w	80072f4 <_vfiprintf_r+0x44>
 80074ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074bc:	e71c      	b.n	80072f8 <_vfiprintf_r+0x48>
 80074be:	ab03      	add	r3, sp, #12
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	462a      	mov	r2, r5
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <_vfiprintf_r+0x22c>)
 80074c6:	a904      	add	r1, sp, #16
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7fe f805 	bl	80054d8 <_printf_i>
 80074ce:	e7e4      	b.n	800749a <_vfiprintf_r+0x1ea>
 80074d0:	08007b63 	.word	0x08007b63
 80074d4:	08007b6d 	.word	0x08007b6d
 80074d8:	08004f91 	.word	0x08004f91
 80074dc:	0800728d 	.word	0x0800728d
 80074e0:	08007b69 	.word	0x08007b69

080074e4 <__swbuf_r>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	460e      	mov	r6, r1
 80074e8:	4614      	mov	r4, r2
 80074ea:	4605      	mov	r5, r0
 80074ec:	b118      	cbz	r0, 80074f6 <__swbuf_r+0x12>
 80074ee:	6a03      	ldr	r3, [r0, #32]
 80074f0:	b90b      	cbnz	r3, 80074f6 <__swbuf_r+0x12>
 80074f2:	f7fe f98d 	bl	8005810 <__sinit>
 80074f6:	69a3      	ldr	r3, [r4, #24]
 80074f8:	60a3      	str	r3, [r4, #8]
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	071a      	lsls	r2, r3, #28
 80074fe:	d525      	bpl.n	800754c <__swbuf_r+0x68>
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	b31b      	cbz	r3, 800754c <__swbuf_r+0x68>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	6922      	ldr	r2, [r4, #16]
 8007508:	1a98      	subs	r0, r3, r2
 800750a:	6963      	ldr	r3, [r4, #20]
 800750c:	b2f6      	uxtb	r6, r6
 800750e:	4283      	cmp	r3, r0
 8007510:	4637      	mov	r7, r6
 8007512:	dc04      	bgt.n	800751e <__swbuf_r+0x3a>
 8007514:	4621      	mov	r1, r4
 8007516:	4628      	mov	r0, r5
 8007518:	f7ff fdee 	bl	80070f8 <_fflush_r>
 800751c:	b9e0      	cbnz	r0, 8007558 <__swbuf_r+0x74>
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	3b01      	subs	r3, #1
 8007522:	60a3      	str	r3, [r4, #8]
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	701e      	strb	r6, [r3, #0]
 800752c:	6962      	ldr	r2, [r4, #20]
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	429a      	cmp	r2, r3
 8007532:	d004      	beq.n	800753e <__swbuf_r+0x5a>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	07db      	lsls	r3, r3, #31
 8007538:	d506      	bpl.n	8007548 <__swbuf_r+0x64>
 800753a:	2e0a      	cmp	r6, #10
 800753c:	d104      	bne.n	8007548 <__swbuf_r+0x64>
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f7ff fdd9 	bl	80070f8 <_fflush_r>
 8007546:	b938      	cbnz	r0, 8007558 <__swbuf_r+0x74>
 8007548:	4638      	mov	r0, r7
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f806 	bl	8007560 <__swsetup_r>
 8007554:	2800      	cmp	r0, #0
 8007556:	d0d5      	beq.n	8007504 <__swbuf_r+0x20>
 8007558:	f04f 37ff 	mov.w	r7, #4294967295
 800755c:	e7f4      	b.n	8007548 <__swbuf_r+0x64>
	...

08007560 <__swsetup_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <__swsetup_r+0xac>)
 8007564:	4605      	mov	r5, r0
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	460c      	mov	r4, r1
 800756a:	b118      	cbz	r0, 8007574 <__swsetup_r+0x14>
 800756c:	6a03      	ldr	r3, [r0, #32]
 800756e:	b90b      	cbnz	r3, 8007574 <__swsetup_r+0x14>
 8007570:	f7fe f94e 	bl	8005810 <__sinit>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800757a:	0718      	lsls	r0, r3, #28
 800757c:	d422      	bmi.n	80075c4 <__swsetup_r+0x64>
 800757e:	06d9      	lsls	r1, r3, #27
 8007580:	d407      	bmi.n	8007592 <__swsetup_r+0x32>
 8007582:	2309      	movs	r3, #9
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e034      	b.n	80075fc <__swsetup_r+0x9c>
 8007592:	0758      	lsls	r0, r3, #29
 8007594:	d512      	bpl.n	80075bc <__swsetup_r+0x5c>
 8007596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007598:	b141      	cbz	r1, 80075ac <__swsetup_r+0x4c>
 800759a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800759e:	4299      	cmp	r1, r3
 80075a0:	d002      	beq.n	80075a8 <__swsetup_r+0x48>
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7ff f8a6 	bl	80066f4 <_free_r>
 80075a8:	2300      	movs	r3, #0
 80075aa:	6363      	str	r3, [r4, #52]	; 0x34
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	2300      	movs	r3, #0
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f043 0308 	orr.w	r3, r3, #8
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	b94b      	cbnz	r3, 80075dc <__swsetup_r+0x7c>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d2:	d003      	beq.n	80075dc <__swsetup_r+0x7c>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f884 	bl	80076e4 <__smakebuf_r>
 80075dc:	89a0      	ldrh	r0, [r4, #12]
 80075de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075e2:	f010 0301 	ands.w	r3, r0, #1
 80075e6:	d00a      	beq.n	80075fe <__swsetup_r+0x9e>
 80075e8:	2300      	movs	r3, #0
 80075ea:	60a3      	str	r3, [r4, #8]
 80075ec:	6963      	ldr	r3, [r4, #20]
 80075ee:	425b      	negs	r3, r3
 80075f0:	61a3      	str	r3, [r4, #24]
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	b943      	cbnz	r3, 8007608 <__swsetup_r+0xa8>
 80075f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075fa:	d1c4      	bne.n	8007586 <__swsetup_r+0x26>
 80075fc:	bd38      	pop	{r3, r4, r5, pc}
 80075fe:	0781      	lsls	r1, r0, #30
 8007600:	bf58      	it	pl
 8007602:	6963      	ldrpl	r3, [r4, #20]
 8007604:	60a3      	str	r3, [r4, #8]
 8007606:	e7f4      	b.n	80075f2 <__swsetup_r+0x92>
 8007608:	2000      	movs	r0, #0
 800760a:	e7f7      	b.n	80075fc <__swsetup_r+0x9c>
 800760c:	20000064 	.word	0x20000064

08007610 <_raise_r>:
 8007610:	291f      	cmp	r1, #31
 8007612:	b538      	push	{r3, r4, r5, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	d904      	bls.n	8007624 <_raise_r+0x14>
 800761a:	2316      	movs	r3, #22
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007626:	b112      	cbz	r2, 800762e <_raise_r+0x1e>
 8007628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800762c:	b94b      	cbnz	r3, 8007642 <_raise_r+0x32>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f830 	bl	8007694 <_getpid_r>
 8007634:	462a      	mov	r2, r5
 8007636:	4601      	mov	r1, r0
 8007638:	4620      	mov	r0, r4
 800763a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763e:	f000 b817 	b.w	8007670 <_kill_r>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d00a      	beq.n	800765c <_raise_r+0x4c>
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	d103      	bne.n	8007652 <_raise_r+0x42>
 800764a:	2316      	movs	r3, #22
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	2001      	movs	r0, #1
 8007650:	e7e7      	b.n	8007622 <_raise_r+0x12>
 8007652:	2400      	movs	r4, #0
 8007654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007658:	4628      	mov	r0, r5
 800765a:	4798      	blx	r3
 800765c:	2000      	movs	r0, #0
 800765e:	e7e0      	b.n	8007622 <_raise_r+0x12>

08007660 <raise>:
 8007660:	4b02      	ldr	r3, [pc, #8]	; (800766c <raise+0xc>)
 8007662:	4601      	mov	r1, r0
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	f7ff bfd3 	b.w	8007610 <_raise_r>
 800766a:	bf00      	nop
 800766c:	20000064 	.word	0x20000064

08007670 <_kill_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_kill_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7f9 ff8d 	bl	800159c <_kill>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_kill_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_kill_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	200004bc 	.word	0x200004bc

08007694 <_getpid_r>:
 8007694:	f7f9 bf7a 	b.w	800158c <_getpid>

08007698 <__swhatbuf_r>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	2900      	cmp	r1, #0
 80076a2:	b096      	sub	sp, #88	; 0x58
 80076a4:	4615      	mov	r5, r2
 80076a6:	461e      	mov	r6, r3
 80076a8:	da0d      	bge.n	80076c6 <__swhatbuf_r+0x2e>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076b0:	f04f 0100 	mov.w	r1, #0
 80076b4:	bf0c      	ite	eq
 80076b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076ba:	2340      	movne	r3, #64	; 0x40
 80076bc:	2000      	movs	r0, #0
 80076be:	6031      	str	r1, [r6, #0]
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	b016      	add	sp, #88	; 0x58
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	466a      	mov	r2, sp
 80076c8:	f000 f848 	bl	800775c <_fstat_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	dbec      	blt.n	80076aa <__swhatbuf_r+0x12>
 80076d0:	9901      	ldr	r1, [sp, #4]
 80076d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076da:	4259      	negs	r1, r3
 80076dc:	4159      	adcs	r1, r3
 80076de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076e2:	e7eb      	b.n	80076bc <__swhatbuf_r+0x24>

080076e4 <__smakebuf_r>:
 80076e4:	898b      	ldrh	r3, [r1, #12]
 80076e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076e8:	079d      	lsls	r5, r3, #30
 80076ea:	4606      	mov	r6, r0
 80076ec:	460c      	mov	r4, r1
 80076ee:	d507      	bpl.n	8007700 <__smakebuf_r+0x1c>
 80076f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	2301      	movs	r3, #1
 80076fa:	6163      	str	r3, [r4, #20]
 80076fc:	b002      	add	sp, #8
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	ab01      	add	r3, sp, #4
 8007702:	466a      	mov	r2, sp
 8007704:	f7ff ffc8 	bl	8007698 <__swhatbuf_r>
 8007708:	9900      	ldr	r1, [sp, #0]
 800770a:	4605      	mov	r5, r0
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff f865 	bl	80067dc <_malloc_r>
 8007712:	b948      	cbnz	r0, 8007728 <__smakebuf_r+0x44>
 8007714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007718:	059a      	lsls	r2, r3, #22
 800771a:	d4ef      	bmi.n	80076fc <__smakebuf_r+0x18>
 800771c:	f023 0303 	bic.w	r3, r3, #3
 8007720:	f043 0302 	orr.w	r3, r3, #2
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	e7e3      	b.n	80076f0 <__smakebuf_r+0xc>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	6020      	str	r0, [r4, #0]
 800772c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	6163      	str	r3, [r4, #20]
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	6120      	str	r0, [r4, #16]
 800773a:	b15b      	cbz	r3, 8007754 <__smakebuf_r+0x70>
 800773c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007740:	4630      	mov	r0, r6
 8007742:	f000 f81d 	bl	8007780 <_isatty_r>
 8007746:	b128      	cbz	r0, 8007754 <__smakebuf_r+0x70>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f023 0303 	bic.w	r3, r3, #3
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	431d      	orrs	r5, r3
 8007758:	81a5      	strh	r5, [r4, #12]
 800775a:	e7cf      	b.n	80076fc <__smakebuf_r+0x18>

0800775c <_fstat_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_fstat_r+0x20>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f7f9 ff5a 	bl	8001622 <_fstat>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d102      	bne.n	8007778 <_fstat_r+0x1c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b103      	cbz	r3, 8007778 <_fstat_r+0x1c>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	200004bc 	.word	0x200004bc

08007780 <_isatty_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_isatty_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7f9 ff59 	bl	8001642 <_isatty>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_isatty_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_isatty_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	200004bc 	.word	0x200004bc

080077a0 <_init>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr

080077ac <_fini>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr
